{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"d49a6c59f93c179df1f9188816c7ed80cdda84d7","modified":1595493356935},{"_id":"source/.DS_Store","hash":"0a0c7ed4bc8b968f72da73e242ec7b549d2c905d","modified":1586511268554},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1583722905117},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1583722905117},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1583722905117},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1583722905117},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1583722905118},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1583722905118},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1583722905118},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1583722905118},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1583722905118},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1583722905118},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1583722905119},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1583722905119},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1583722905119},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1583722905136},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1583722905120},{"_id":"themes/next/_config.yml","hash":"aa18af8eda8ccb534aaf553299c0568b54b938a5","modified":1583722905119},{"_id":"source/_posts/ASP.NET 知识收集与问题解决.md","hash":"0e40365f1292b56dc221c987db5be79e7dd501e3","modified":1583722905082},{"_id":"source/_posts/CentOS 7 修改yum源.md","hash":"48d9f6788eabbbb54ed86b184180bddb15ca8748","modified":1583722905083},{"_id":"source/_posts/CentOS 7 安装 GitLab.md","hash":"6195896fd076bc8ad251933f0e18ba7f8ab6a86f","modified":1583722905083},{"_id":"source/_posts/Angular CLI 命令行收集.md","hash":"9a4ce309b562c3b2fed8cd074726b1d0d480e665","modified":1583722905082},{"_id":"source/_posts/CentOS 7 安装mongodb.md","hash":"e064fd5b52cb2f461dd8de7298e82aa9ee8560f0","modified":1583722905083},{"_id":"source/_posts/CentOS 7 安装shadowsocks服务.md","hash":"cd2bb33d72c9a80992fe299b1b0d04255adc4abd","modified":1583722905083},{"_id":"source/_posts/CentOS 7 安装配置Apache.md","hash":"69f408bdc1f2fda80e29b536dc0f30b318e91866","modified":1583722905083},{"_id":"source/_posts/CentOS 7 安装node环境.md","hash":"7dc3adb4359af5e4b98cabd7dfbfccf5f8269a5e","modified":1583722905083},{"_id":"source/_posts/CentOS 7 防火墙操作.md","hash":"4a4b8a1bbff0acb341f7097c32fbcdbb86764faa","modified":1583722905083},{"_id":"source/_posts/CentOS 7一键安装Seafile搭建私有云存储.md","hash":"1a02ee66a7572b19c9ab0281bbd8632475593f7c","modified":1583722905083},{"_id":"source/_posts/EF 知识收集与问题解决.md","hash":"4d4f5b145601e72276e62d0d98402ad52670bdcf","modified":1583722905084},{"_id":"source/_posts/Git基本操作.md","hash":"6c17f5b29c2fb27a4e9f957f365f752530fa0eb4","modified":1594794648976},{"_id":"source/_posts/Kodi使用技巧.md","hash":"a8fdad32f544204b858cac2d002afeac0aede81b","modified":1583722905084},{"_id":"source/_posts/IaaS,PaaS,SaaS 的区别.md","hash":"ef3e083a8ddfac65c073783807d9ceaf35c5516a","modified":1583722905084},{"_id":"source/_posts/Linux 笔记.md","hash":"480d8d91f4680799ef8c01e471c1c26d27f0ec09","modified":1586510445543},{"_id":"source/_posts/Pthon练习题(二).md","hash":"28ee5c63a0b43b90c984f363012758715c26f699","modified":1583722905085},{"_id":"source/_posts/Pthon练习题(三).md","hash":"037d2dabd4f722208875f6e733c5ef4a6484e594","modified":1583722905085},{"_id":"source/_posts/Pthon练习题(四).md","hash":"567f21fa91d62139463ffbdd03af786fcf55071f","modified":1583722905085},{"_id":"source/_posts/Python联系题一.md","hash":"bd80c16d7d00fb28800a876a9062f0ab0e45c2b2","modified":1583722905085},{"_id":"source/_posts/React 使用browserHistory项目访问404问题.md","hash":"8417af26d78e6b0f95b87cb22e6a44ec61800afd","modified":1583722905085},{"_id":"source/_posts/SqlServer快速注释.md","hash":"5eea45fc330c8a268f621d4eb73a96ca9b19b750","modified":1583722905086},{"_id":"source/_posts/URL schemes collecting.md","hash":"ef98188f99f8a93fc2d38cfa819f13452cab1b64","modified":1583722905086},{"_id":"source/_posts/React+Electron 从搭建到发布.md","hash":"0f402229226a8e657ec5d7f29b81fe0697d34c8f","modified":1583722905086},{"_id":"source/_posts/OpenCore安装黑苹果.md","hash":"d0b922937ad7d1332e742f7a9b9c30d0aae45fed","modified":1591945836874},{"_id":"source/_posts/Windows 问题解决.md","hash":"70b6cc2d496230c8dbc17b36ef809c7765746340","modified":1583722905086},{"_id":"source/_posts/Wox插件：快速打开收藏的目录.md","hash":"882b15bbe3547be537faef0622e609bd5977588a","modified":1583722905086},{"_id":"source/_posts/ubuntu 使用技巧.md","hash":"899137feb065559c1c3ca5967f484fbd6a06169a","modified":1583722905086},{"_id":"source/_posts/npm常用命令及参数详解.md","hash":"bbf9ba660c90b9febfec642d4ee19067c464a917","modified":1583722905086},{"_id":"source/_posts/wsl配置开机启动.md","hash":"0b2a7bee9fa1adcce530441178eb4517866aac73","modified":1583722905087},{"_id":"source/_posts/一步一步打造 finui 脚手架工具.md","hash":"9f91f4ace30534f1fc99350d50a703a8dcbf247a","modified":1583722905087},{"_id":"source/_posts/vscode中的依赖注入.md","hash":"bc17ed4c126180667f8eaf32106826ee37146641","modified":1583722905087},{"_id":"source/_posts/vscode插件机制.md","hash":"a9f2aeef57cbef14a7c43f3ec83231e2f1b2270c","modified":1583722905087},{"_id":"source/_posts/使用React一年以来给我带来的最大收获.md","hash":"297c509d9f02525a7c572a222eceefcded676850","modified":1583722905088},{"_id":"source/_posts/使用jenkins进行前端项目自动部署.md","hash":"890dde001283a89fe790215204237718458eacbf","modified":1583722905088},{"_id":"source/_posts/代码整洁之道在typescript中的实现.md","hash":"308588721ae56c058d241eea09a72dea783b3826","modified":1583722905088},{"_id":"source/_posts/再见了，面向对象编程.md","hash":"be5e9f54165b7991cc485fc1cfb74b7ec1ba612d","modified":1583722905089},{"_id":"source/_posts/在Hexo博客上添加可爱的Live 2D模型.md","hash":"019e6282b23ad79ca33034266509fba1a719bdb2","modified":1583722905089},{"_id":"source/_posts/前端框架生命周期总结.md","hash":"fee2e77911c012dbdbd644425a299ac86cf87922","modified":1583722905089},{"_id":"source/_posts/前端目录结构规范.md","hash":"4e60e01df304fd55936f00728e72c33ba55dd2c6","modified":1583722905089},{"_id":"source/_posts/在WPF上使用log4net.md","hash":"3c0624bf8e9816ae0c2b961b93ef81acdce6ed80","modified":1583722905089},{"_id":"source/_posts/基于React的ant项目创建.md","hash":"b32beb3861f01620c2f78f2c459f68f4fcefdfe0","modified":1583722905090},{"_id":"source/_posts/将Excel的内容导出成sql语句.md","hash":"c350f8d7367d4ebf4bacce445fc0f3e245182637","modified":1583722905090},{"_id":"source/_posts/小程序架构.md","hash":"1049bb4585b1c2b33b70565de800ed30fb1afe22","modified":1583722905090},{"_id":"source/_posts/基于阿里云api的动态域名解析服务.md","hash":"347e06ca5f6bf89f85859c7bc3e4ab75df789cd0","modified":1583722905090},{"_id":"source/_posts/如何像程序员一样思考.md","hash":"11c911b0e2a73c578f9c3524d4c78443e2268f05","modified":1583722905090},{"_id":"source/_posts/在TypeScript中使用ESLint.md","hash":"864bf1d6c6d48977eed179a862f61f3d94be8391","modified":1583722905089},{"_id":"source/_posts/开源项目收集.md","hash":"a1162a5447b4c897151b65093b5e5a433331de77","modified":1583722905090},{"_id":"source/_posts/快速搭建ss服务.md","hash":"7ad8a208beae6c8f9600efdde93cf8f46750b9ab","modified":1583722905091},{"_id":"source/_posts/我不是一名前端.md","hash":"7eec9af9bb01cb28aed95497f004eb4825a0e369","modified":1583722905091},{"_id":"source/_posts/批量移动文件.md","hash":"32d05452286e4928d5cb065b3ddcc0fe1c201264","modified":1583722905091},{"_id":"source/_posts/自定义停留时间的Toast.md","hash":"d642c650ec0b5915e0a0082fbf664fea07dc3592","modified":1583722905091},{"_id":"source/categories/index.md","hash":"0df5194f3585bb1308099178931c23172703ba84","modified":1583722905091},{"_id":"source/tags/index.md","hash":"c38bb81e00deb28a0291562d4f8a55db74f315ba","modified":1583722905096},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1583722905120},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1583722905121},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1583722905120},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1583722905120},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1583722905121},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1583722905121},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1583722905121},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1583722905121},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1583722905121},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1583722905122},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1583722905122},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1583722905122},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1583722905122},{"_id":"themes/next/scripts/merge-configs.js","hash":"38d86aab4fc12fb741ae52099be475196b9db972","modified":1583722905136},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1583722905123},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1583722905123},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1583722905137},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1583722905122},{"_id":"themes/next/layout/_layout.swig","hash":"fb3b824aa5917d811f674135a8c5778ee53e1163","modified":1583722905124},{"_id":"themes/next/layout/archive.swig","hash":"9a2c14874a75c7085d2bada5e39201d3fc4fd2b4","modified":1583722905135},{"_id":"themes/next/layout/category.swig","hash":"3cbb3f72429647411f9e85f2544bdf0e3ad2e6b2","modified":1583722905135},{"_id":"themes/next/layout/index.swig","hash":"555a357ecf17128db4e29346c92bb6298e66547a","modified":1583722905135},{"_id":"themes/next/layout/page.swig","hash":"e8fcaa641d46930237675d2ad4b56964d9e262e9","modified":1583722905135},{"_id":"themes/next/layout/schedule.swig","hash":"87ad6055df01fa2e63e51887d34a2d8f0fbd2f5a","modified":1583722905136},{"_id":"themes/next/layout/post.swig","hash":"7a6ce102ca82c3a80f776e555dddae1a9981e1ed","modified":1583722905136},{"_id":"themes/next/layout/tag.swig","hash":"34e1c016cbdf94a31f9c5d494854ff46b2a182e9","modified":1583722905136},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1583722905187},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1583722905187},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1583722905187},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583722905156},{"_id":"themes/next/scripts/tags/button.js","hash":"eddbb612c15ac27faf11c59c019ce188f33dec2c","modified":1583722905137},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1583722905137},{"_id":"themes/next/scripts/tags/exturl.js","hash":"5022c0ba9f1d13192677cf1fd66005c57c3d0f53","modified":1583722905137},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1583722905137},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1583722905138},{"_id":"themes/next/scripts/tags/label.js","hash":"6f00952d70aadece844ce7fd27adc52816cc7374","modified":1583722905138},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"bcba2ff25cd7850ce6da322d8bd85a8dd00b5ceb","modified":1583722905138},{"_id":"themes/next/scripts/tags/note.js","hash":"f7eae135f35cdab23728e9d0d88b76e00715faa0","modified":1583722905138},{"_id":"themes/next/scripts/tags/tabs.js","hash":"aa7fc94a5ec27737458d9fe1a75c0db7593352fd","modified":1583722905138},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1583722905123},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"7314f5b9bd086ded8f29b442f138d77828afd879","modified":1583722905124},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1583722905124},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"8c56dd26157cbc580ae41d97ac34b90ab48ced3f","modified":1583722905124},{"_id":"themes/next/layout/_macro/reward.swig","hash":"357d86ec9586705bfbb2c40a8c7d247a407db21a","modified":1583722905125},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"f83befdc740beb8dc88805efd7fbb0fef9ed19be","modified":1583722905124},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"1ea74f19866327ed3f0839471d815b16b4641f45","modified":1583722905125},{"_id":"themes/next/layout/_macro/post.swig","hash":"20c6d3b3f0fb1f1da4799145d4881f97fbe0539b","modified":1583722905124},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"e2e4eae391476da994045ed4c7faf5e05aca2cd7","modified":1583722905125},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1583722905133},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"8301c9600bb3e47f7fb98b0e0332ef3c51bb1688","modified":1583722905133},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"554ec568e9d2c71e4a624a8de3cb5929050811d6","modified":1583722905133},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1583722905133},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1583722905134},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"fa882641da3bd83d9a58a8a97f9d4c62a9ee7b5c","modified":1583722905133},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"9a188938d46931d5f3882a140aa1c48b3a893f0c","modified":1583722905134},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1583722905128},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1583722905128},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"9be624634703be496a5d2535228bc568a8373af9","modified":1583722905129},{"_id":"themes/next/layout/_partials/footer.swig","hash":"2e8f2c7e48e9f2f4e391fbd47b8694d1dee1e229","modified":1583722905125},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4adc65a602d1276615da3b887dcbf2ac68e7382b","modified":1583722905125},{"_id":"themes/next/layout/_partials/head.swig","hash":"f14a39dad1ddd98e6d3ceb25dda092ba80d391b5","modified":1583722905126},{"_id":"themes/next/layout/_partials/header.swig","hash":"c54b32263bc8d75918688fb21f795103b3f57f03","modified":1583722905126},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"77c61e0baea3544df361b7338c3cd13dc84dde22","modified":1583722905126},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1583722905126},{"_id":"themes/next/layout/_partials/search.swig","hash":"b4ebe4a52a3b51efe549dd1cdee846103664f5eb","modified":1583722905127},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1583722905156},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1583722905157},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1583722905156},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1583722905157},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1583722905156},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1583722905157},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1583722905157},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1583722905157},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1583722905157},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1583722905158},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1583722905158},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1583722905158},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1583722905158},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1583722905158},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1583722905159},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1583722905158},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1583722905159},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1583722905159},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583722905129},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583722905155},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583722905156},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583722905151},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583722905151},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1583722905151},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1583722905157},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1583722905130},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1583722905129},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"ff947f3561b229bc528cb1837d4ca19612219411","modified":1583722905129},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"7b11eac3a0685fa1ab2ab6ecff60afc4f15f0d16","modified":1583722905130},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1583722905130},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"45f3f629c2aacc381095750e1c8649041a71a84b","modified":1583722905131},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"ccc443b22bd4f8c7ac4145664686c756395b90e0","modified":1583722905130},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"7d94845f96197d9d84a405fa5d4ede75fb81b225","modified":1583722905130},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"5a8027328f060f965b3014060bebec1d7cf149c1","modified":1583722905131},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"e6d10ee4fb70b3ae1cd37e9e36e000306734aa2e","modified":1583722905131},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"b1e13df83fb2b1d5d513b30b7aa6158b0837daab","modified":1583722905130},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1583722905131},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"f9a1647a8f1866deeb94052d1f87a5df99cb1e70","modified":1583722905131},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"b83a51bbe0f1e2ded9819070840b0ea145f003a6","modified":1583722905132},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"4c501ea0b9c494181eb3c607c5526a5754e7fbd8","modified":1583722905131},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1583722905132},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"4dcc3213c033994d342d02b800b6229295433d30","modified":1583722905132},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1583722905132},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"493bd5999a1061b981922be92d8277a0f9152447","modified":1583722905132},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"9246162d4bc7e949ce1d12d135cbbaf5dc3024ec","modified":1583722905132},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4050553d44ba1396174161c9a6bb0f89fa779eca","modified":1583722905132},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"7e65ff8fe586cd655b0e9d1ad2912663ff9bd36c","modified":1583722905133},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"34599633658f3b0ffb487728b7766e1c7b551f5a","modified":1583722905134},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1583722905135},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"93479642fd076a1257fecc25fcf5d20ccdefe509","modified":1583722905135},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1583722905135},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1583722905128},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1583722905129},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1583722905129},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1583722905126},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1583722905126},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1583722905127},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1583722905127},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1583722905127},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1583722905127},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"d9e2d9282f9be6e04eae105964abb81e512bffed","modified":1583722905127},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"0a9cdd6958395fcdffc80ab60f0c6301b63664a5","modified":1583722905128},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1583722905128},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1583722905155},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1583722905155},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1583722905156},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1583722905156},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"7dad1161325028f4b6637adaf467a7d8d95a760e","modified":1583722905150},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1583722905151},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1583722905151},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1583722905151},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1583722905159},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1583722905159},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1583722905159},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1583722905159},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1583722905160},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1583722905160},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1583722905160},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1583722905160},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1583722905160},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1583722905160},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1583722905161},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1583722905161},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1583722905166},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1583722905166},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1583722905164},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1583722905169},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1583722905169},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1583722905169},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1583722905169},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1583722905170},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1583722905170},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1583722905170},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1583722905170},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1583722905170},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1583722905178},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1583722905175},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1583722905177},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1583722905178},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1583722905176},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1583722905176},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1583722905177},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1583722905177},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1583722905177},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1583722905177},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1583722905184},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1583722905185},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1583722905186},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1583722905186},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1583722905186},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1583722905180},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1583722905181},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1583722905178},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1583722905181},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1583722905178},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1583722905178},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1583722905178},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1583722905179},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1583722905179},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1583722905179},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1583722905179},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1583722905179},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1583722905179},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1583722905180},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1583722905180},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1583722905180},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1583722905180},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1583722905176},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1583722905134},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1583722905134},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1583722905139},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1583722905138},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1583722905139},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1583722905139},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1583722905139},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1583722905142},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1583722905146},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1583722905149},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1583722905149},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1583722905150},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1583722905150},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1583722905150},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1583722905150},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1583722905150},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1583722905151},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1583722905153},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1583722905153},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1583722905154},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1583722905154},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1583722905154},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1583722905152},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1583722905152},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1583722905152},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1583722905152},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1583722905152},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1583722905152},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1583722905152},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1583722905154},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1583722905155},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1583722905155},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1583722905154},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1583722905155},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1583722905155},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1583722905160},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1583722905162},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1583722905163},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1583722905163},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1583722905166},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1583722905166},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1583722905167},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1583722905166},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1583722905168},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1583722905167},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1583722905168},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1583722905167},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1583722905169},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1583722905171},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1583722905168},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1583722905169},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1583722905171},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1583722905171},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1583722905184},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1583722905184},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1583722905163},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1583722905175},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1583722905175},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1583722905186},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1583722905140},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1583722905140},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1583722905139},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1583722905139},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1583722905140},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1583722905140},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1583722905141},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1583722905141},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1583722905141},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1583722905142},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1583722905141},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1583722905141},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1583722905142},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1583722905142},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1583722905142},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1583722905143},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1583722905142},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1583722905143},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1583722905143},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1583722905143},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1583722905144},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1583722905143},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1583722905144},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1583722905140},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1583722905144},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1583722905140},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1583722905141},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1583722905144},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1583722905144},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"1949e7beb7aee4e4d12db0b6293c199fd11ea9f4","modified":1583722905144},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1583722905145},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1583722905145},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1583722905145},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1583722905145},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1583722905145},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1583722905146},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1583722905146},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1583722905146},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1583722905146},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1583722905146},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1583722905142},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1583722905146},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1583722905147},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1583722905147},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1583722905147},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1583722905147},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1583722905143},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1583722905147},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1583722905147},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1583722905147},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1583722905148},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1583722905148},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1583722905148},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1583722905148},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1583722905148},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1583722905149},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1583722905149},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1583722905149},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1583722905154},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1583722905153},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1583722905153},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1583722905161},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1583722905161},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1583722905161},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1583722905162},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1583722905162},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1583722905167},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1583722905167},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1583722905168},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1583722905167},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1583722905167},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1583722905168},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1583722905172},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1583722905174},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1583722905173},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1583722905165},{"_id":"source/images/avatar.jpg","hash":"3b8b13aeb2e609935ea59fbb774e6f16c56ef906","modified":1583722905096},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1583722905183},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1583722905174},{"_id":"public/search.xml","hash":"0e9f240dde7941557d9a3819f116c250c6d8b102","modified":1599189301823},{"_id":"public/categories/index.html","hash":"cd37a1b9549f8daf58ae3c5821db13a021a056dc","modified":1599189302035},{"_id":"public/tags/index.html","hash":"db71071506ea783d0d75ee82cd3415cec798f017","modified":1599189302036},{"_id":"public/archives/11242.html","hash":"f218f7e3fdf643afe10880c6311c229be21ee61f","modified":1599189302036},{"_id":"public/archives/40517.html","hash":"837fe770e6ac25cadb4e139c4790f13999fcce19","modified":1599189302037},{"_id":"public/archives/16210.html","hash":"c0a539982862f6d7785a193acb87991fc7d05ee2","modified":1599189302037},{"_id":"public/archives/23494.html","hash":"e19d79da9eff70c779799726aaa7557aaf7bbcc4","modified":1599189302037},{"_id":"public/archives/33668.html","hash":"f94e99733b11a20a781cd31dc8c8ed4b84ae9628","modified":1599189302037},{"_id":"public/archives/20807.html","hash":"8f21c1768fd3820642c9fb013d8edaa0fcd49214","modified":1599189302037},{"_id":"public/archives/52300.html","hash":"d5ce166d01ec29f1882dd0c330a8bb0da449f69c","modified":1599189302037},{"_id":"public/archives/59562.html","hash":"da36bdf414b62e88d075efe3f5ed5a25f6e9e4e7","modified":1599189302037},{"_id":"public/archives/15520.html","hash":"246bf7716acda13cdeeb67d85712cabb5c7f0398","modified":1599189302037},{"_id":"public/archives/13448.html","hash":"a6713b3a00c752a63774bfc714e70fbf4dd645dc","modified":1599189302038},{"_id":"public/archives/30810.html","hash":"31d3bf41bfb46a63defe2e14646a97be3a7c3f0e","modified":1599189302038},{"_id":"public/archives/25393.html","hash":"dc612c2283acd2cfff4413a3cfb5bc7198b44e52","modified":1599189302038},{"_id":"public/archives/29251.html","hash":"25fb7386879007944ea5ae61e4e4606463c49045","modified":1599189302038},{"_id":"public/archives/13788.html","hash":"28f1af4b940138f29a97598a8f0b269bb80d64bd","modified":1599189302038},{"_id":"public/archives/12273.html","hash":"b7bf9ee123e53be96b502c637a1c18ced5736882","modified":1599189302038},{"_id":"public/archives/27150.html","hash":"efa5f65ee49c3d9ea8712fb46f8d2c6a02fe762d","modified":1599189302038},{"_id":"public/archives/60376.html","hash":"79194f9e003c4ee0cb0cd959a784f6724eabd771","modified":1599189302036},{"_id":"public/archives/30325.html","hash":"bf94cd207a4d1ee6d6089d300ce4d03eed6f7abc","modified":1599189302038},{"_id":"public/archives/13790.html","hash":"8a1c095c4a932cf7b0048809181f09c1996835af","modified":1599189302039},{"_id":"public/archives/59040.html","hash":"5b8a2c2db1256ffe81ef9404078fda5686859479","modified":1599189302038},{"_id":"public/archives/26003.html","hash":"0c931352a9ccfd85791112ef4ec84a6a34a0239a","modified":1599189302039},{"_id":"public/archives/3512.html","hash":"85f11e0afa53c618653a80b77f7c675a36f14f52","modified":1599189302039},{"_id":"public/archives/17613.html","hash":"fe508eb349cc254f26233c5a5d03ffbde6307b7d","modified":1599189302039},{"_id":"public/archives/5588.html","hash":"d035eb705e603aa5e9acbaf23bb537f9be6fcd4a","modified":1599189302039},{"_id":"public/archives/56980.html","hash":"0b3a3f3d68179a2029b9cd27af935401aacef3a6","modified":1599189302039},{"_id":"public/archives/46729.html","hash":"b475fd6a44eb0b0d9805ab39ed32b39b5479e852","modified":1599189302039},{"_id":"public/archives/45936.html","hash":"fa553f727e35cc254d84199950295d09a1481b50","modified":1599189302039},{"_id":"public/archives/59303.html","hash":"75d223115b6d0e13da917d825055eca0fa4293f5","modified":1599189302039},{"_id":"public/archives/8156ce4d.html","hash":"1bbb2f38f8dcdf54fa1bd1742e2a73666afc65f5","modified":1599189302039},{"_id":"public/archives/26244.html","hash":"d1ed363fe56d61a2629452c81e6fab234481bc67","modified":1599189302039},{"_id":"public/archives/62820.html","hash":"a35004c41247641203b973f2bcd7516d8cbc36f2","modified":1599189302040},{"_id":"public/archives/27930.html","hash":"f98ac9e4bbb011a52fe63b0c5cf59b088ab53afc","modified":1599189302040},{"_id":"public/archives/51745.html","hash":"10f1f9dbb41c612ea89281c0c871779a54328816","modified":1599189302040},{"_id":"public/archives/25896.html","hash":"a5cf81e5438fc4d722bef2a61355857b79ed94cb","modified":1599189302040},{"_id":"public/archives/62468.html","hash":"49cb684687da73133f5af85c6d0dce98eba81550","modified":1599189302040},{"_id":"public/archives/25352.html","hash":"2063e2650f6fde3f18f9e7441552108ee5ca2c71","modified":1599189302040},{"_id":"public/archives/30939.html","hash":"1b409dc1d47b753a6352d552d772eaf6564315f7","modified":1599189302040},{"_id":"public/archives/61758.html","hash":"a0bcbfae3737620eea6db6c343222cb3158749d8","modified":1599189302040},{"_id":"public/archives/21644.html","hash":"bd461a8ef071a7f4c07fbe34ff827f692517f20b","modified":1599189302040},{"_id":"public/archives/11895.html","hash":"53174753b51a5e7d46e7760570da69cef9b472c4","modified":1599189302040},{"_id":"public/archives/21309.html","hash":"acb8cca89659a7548cb47a158b78d04fe75b9c44","modified":1599189302040},{"_id":"public/archives/235b27fb.html","hash":"e0206ad0682943d54b8d18114892cd387bf1b5f3","modified":1599189302041},{"_id":"public/archives/7798218e.html","hash":"957cc475ec8040563133592848db4f0d278e5ceb","modified":1599189302041},{"_id":"public/archives/a15bf862.html","hash":"6a86fff04ce19a8960dbba0ae4df0d59b04d5ccd","modified":1599189302041},{"_id":"public/archives/a142eb14.html","hash":"4fa2dfdd2d04a952e5f5132de19ba761462157e9","modified":1599189302041},{"_id":"public/archives/a240876f.html","hash":"d583a7c7aa1afb6f90f2251a6690e6d0b4aa90aa","modified":1599189302041},{"_id":"public/archives/7b152142.html","hash":"e69de757d36c29e57ec808ce1a0e4c0f2b595e67","modified":1599189302041},{"_id":"public/archives/ffa5ee66.html","hash":"ecfc95e0d6b6545af4e66e233b100aba4ff14c78","modified":1599189302041},{"_id":"public/archives/50947504.html","hash":"afa7e62f0bc61684a86658d27733db0462b7dc96","modified":1599189302042},{"_id":"public/index.html","hash":"5310a78e59bfd448f6bf830269b6bac5efdba095","modified":1599189302045},{"_id":"public/page/2/index.html","hash":"32f24d79d2e4e86b6f2cda2df57498ae492944b0","modified":1599189302045},{"_id":"public/page/3/index.html","hash":"5dd8fb52c861f0562476468da4ad22c93aa75745","modified":1599189302045},{"_id":"public/page/4/index.html","hash":"eb8e5758599409435fd657b7acfd32ebb4fc91f7","modified":1599189302045},{"_id":"public/page/5/index.html","hash":"d0c49df687bd0cf251605d737639f551946cec06","modified":1599189302045},{"_id":"public/page/6/index.html","hash":"77f79ce26296c6d4525e49f352e5eab249fe5f86","modified":1599189302045},{"_id":"public/categories/知识点/index.html","hash":"474c3354770671f90fd9f22313110c3ded6139d9","modified":1599189302044},{"_id":"public/categories/Linux/index.html","hash":"34e5c30d951b2fef176f43fe805e6bc4d8a96fb6","modified":1599189302044},{"_id":"public/categories/前端/index.html","hash":"5afe9f481b6295202828e145d2353bc1918769c8","modified":1599189302044},{"_id":"public/categories/前端/page/2/index.html","hash":"c057cd5cb2cc8bba0cce561e91dc414d4106a8d2","modified":1599189302044},{"_id":"public/categories/教程/index.html","hash":"5587b02d44cc737339a47c589f0487cf263a60d9","modified":1599189302044},{"_id":"public/categories/Pthon练习题/index.html","hash":"1ba21793d5a278a3df7762285b9d1348bcb12abb","modified":1599189302044},{"_id":"public/categories/小工具/index.html","hash":"e83a0f3e7d5d314b9c16a2f72579a18dceb0b581","modified":1599189302044},{"_id":"public/categories/瞎折腾/index.html","hash":"0aeb24be8258d5fcee4a3e33a0292d4c7f0d5815","modified":1599189302044},{"_id":"public/categories/问题解决/index.html","hash":"58b8fc2f1e6efe2e97363b62caeb7b00f36b862a","modified":1599189302044},{"_id":"public/categories/linux/index.html","hash":"bb3165314f0336a5ff0014d44c42797f12dcfcbd","modified":1599189302044},{"_id":"public/categories/英文翻译/index.html","hash":"0e8ad7f0a184016b3c63e606267e51f87f2b50d9","modified":1599189302044},{"_id":"public/categories/自动化/index.html","hash":"c1f98902a9cb82bc3b3c8f2ddd7abe4c95423eb2","modified":1599189302045},{"_id":"public/categories/文章/index.html","hash":"57b663b2259c17ad481797eb7f0a63ddd91e8459","modified":1599189302045},{"_id":"public/categories/Android/index.html","hash":"32d1663ccabbc1302b2514f2d94bcb10f10947c7","modified":1599189302045},{"_id":"public/archives/index.html","hash":"8e1cd66cc986919fdc218fde66de4447982b96ea","modified":1599189302042},{"_id":"public/archives/page/2/index.html","hash":"528c9c1a48e9372f303abb9b0ec57883c7244480","modified":1599189302042},{"_id":"public/archives/page/3/index.html","hash":"751bcb07c4bac68b91027de80f31c197b62505bf","modified":1599189302042},{"_id":"public/archives/page/4/index.html","hash":"a3244534ccb818f47cfc09911d069d3a80712f7f","modified":1599189302042},{"_id":"public/archives/page/5/index.html","hash":"eee81556dc2bcf3df1d25a9362f2d7435f76127a","modified":1599189302042},{"_id":"public/archives/page/6/index.html","hash":"5d4fa1450f6358a7ba062e9fa9ea3aba7659b364","modified":1599189302042},{"_id":"public/archives/2018/index.html","hash":"686e5e8b8f2cec8d7a97c8a80f14c8cba81c4db2","modified":1599189302042},{"_id":"public/archives/2018/page/2/index.html","hash":"180794bc94e7dd2d295c6d3a24b5fa6841366a9f","modified":1599189302042},{"_id":"public/archives/2018/page/3/index.html","hash":"8c420182475868d16e5920b21a19e184c2bffcc5","modified":1599189302042},{"_id":"public/archives/2018/page/4/index.html","hash":"4b9bf065acfd42da09ab5ad80cef80eba49e1c19","modified":1599189302042},{"_id":"public/archives/2018/01/index.html","hash":"d83f833fdcc947fc0fe16e4c6b2c1b930e7cb0be","modified":1599189302042},{"_id":"public/archives/2018/02/index.html","hash":"f5f7967ac34b2d40ac2eed47f41923e2797e29a5","modified":1599189302042},{"_id":"public/archives/2018/03/index.html","hash":"1bd411abd426e4439f1bce36b7e122173d0c25b3","modified":1599189302043},{"_id":"public/archives/2018/05/index.html","hash":"381ba8b36eee91e057f34a6753a066da22992da8","modified":1599189302043},{"_id":"public/archives/2018/06/index.html","hash":"806c70227bd1d1c82d6006fc59d805d6bc5404a0","modified":1599189302043},{"_id":"public/archives/2018/07/index.html","hash":"d2f4460c1583fbe8a0f9a66c7d38381089764f1e","modified":1599189302043},{"_id":"public/archives/2018/09/index.html","hash":"b5386632643066552a140f8e7571897ebc124354","modified":1599189302043},{"_id":"public/archives/2018/10/index.html","hash":"876763f8e4e2aa46196fc50c7297e12100752096","modified":1599189302043},{"_id":"public/archives/2018/11/index.html","hash":"5a970cbd97bfd70afff7aca3ac8f6ec408e08b88","modified":1599189302043},{"_id":"public/archives/2018/12/index.html","hash":"ef12da6e4782daeca795b537497f55a55353cf2a","modified":1599189302043},{"_id":"public/archives/2019/index.html","hash":"78c25df5d1bda08dd2d22fe43543d38ee2b8d96a","modified":1599189302043},{"_id":"public/archives/2019/page/2/index.html","hash":"9882499d3a1166863e3fc841c905e99bc0e2f62c","modified":1599189302043},{"_id":"public/archives/2019/01/index.html","hash":"1da71bd46bcdd44e119efe2f5a59110b6b263104","modified":1599189302043},{"_id":"public/archives/2019/02/index.html","hash":"86c8dc18b78b56c743d8def96c313699ef9a783f","modified":1599189302043},{"_id":"public/archives/2019/03/index.html","hash":"fff5717f76c7eaf23f2b128101144e55a39373a3","modified":1599189302043},{"_id":"public/archives/2019/04/index.html","hash":"3812843d51abffae117342f1375986d34e4dab0d","modified":1599189302043},{"_id":"public/archives/2019/06/index.html","hash":"359c289f8b4a33778b5a876638598e2c229e2224","modified":1599189302043},{"_id":"public/archives/2019/07/index.html","hash":"64e8cb547ab8879fd2fe56c756284167f3438225","modified":1599189302043},{"_id":"public/archives/2019/11/index.html","hash":"691ba83500e6ca1a95d9f98f877d906d573d1add","modified":1599189302043},{"_id":"public/archives/2019/12/index.html","hash":"9eb9058a4640552cc86105997da68a8be9599c36","modified":1599189302043},{"_id":"public/archives/2020/index.html","hash":"7e1a46f9a61eb242d1f225ad51a338287b96ebc1","modified":1599189302043},{"_id":"public/archives/2020/02/index.html","hash":"80c1caf0ba8cace4c94677e8241d39c080f6f62c","modified":1599189302044},{"_id":"public/archives/2020/06/index.html","hash":"18ba58f8a633f482f114f8a1f99f0245d95b4a92","modified":1599189302044},{"_id":"public/tags/C/index.html","hash":"9fecf51178cc33b48a6645f7967b980f0034a666","modified":1599189302045},{"_id":"public/tags/Linux/index.html","hash":"8299ee50b4f218e66c181440583288c2b85b0d9b","modified":1599189302045},{"_id":"public/tags/前端/index.html","hash":"f1cb9da4790071a207804d2c7d35d97b98bb0c03","modified":1599189302045},{"_id":"public/tags/前端/page/2/index.html","hash":"7970cc9c13aaf593ff46a92dd71da150b760cc7c","modified":1599189302045},{"_id":"public/tags/软件/index.html","hash":"4b47226a98c603ff1a951a33ef3cc7dd0e8943aa","modified":1599189302046},{"_id":"public/tags/知识点/index.html","hash":"b1dc3e6e37a3a9075c6c5e8cac9c5efdb395406f","modified":1599189302046},{"_id":"public/tags/python/index.html","hash":"77238a8c34cb9488a6f9a3f1132d6ff00f178351","modified":1599189302046},{"_id":"public/tags/ios/index.html","hash":"cd215fd37337ca2c8e8e107121097011def3f008","modified":1599189302046},{"_id":"public/tags/瞎折腾/index.html","hash":"24c6c0534670380b7356b4e887521f3bfb4296f4","modified":1599189302046},{"_id":"public/tags/Windows/index.html","hash":"6af10760d506cd3958dda7f1e136a29d4e0445ff","modified":1599189302046},{"_id":"public/tags/ubuntu/index.html","hash":"75a7ac70052110d870f9e24c0a8e2a9956161efc","modified":1599189302046},{"_id":"public/tags/linux/index.html","hash":"34d35cd42e5fbad7bbe0012509c89536a53525df","modified":1599189302046},{"_id":"public/tags/英文翻译/index.html","hash":"4df3f87f77ad77e5e8a9c6998d42118ab98a8dda","modified":1599189302046},{"_id":"public/tags/自动化/index.html","hash":"5461d85a86fccf5c514a0c6d7a1b1ccd229333f2","modified":1599189302046},{"_id":"public/tags/博客美化/index.html","hash":"8b05990a5215ec19a3232b1b9c43ab79a2c85606","modified":1599189302046},{"_id":"public/tags/收藏/index.html","hash":"76af523b60ccfdda45b78d0c078a06ff710a3b1c","modified":1599189302046},{"_id":"public/tags/文章/index.html","hash":"492b1e19812fa9e65501cf0758868b5af14f7d60","modified":1599189302046},{"_id":"public/tags/Android/index.html","hash":"19dd5854daeb4aae0a5c0cc55a1189774f6f90ec","modified":1599189302046},{"_id":"public/CNAME","hash":"d49a6c59f93c179df1f9188816c7ed80cdda84d7","modified":1595493374108},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1592474087271},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1592474087271},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1592474087271},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1592474087271},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1592474087271},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1592474087272},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1592474087272},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1592474087272},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1592474087272},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1592474087272},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1592474087272},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1592474087272},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1592474087272},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1592474087272},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1592474087272},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1592474087272},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1592474087272},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1592474087272},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1592474087272},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1592474087272},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1592474087272},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1592474087272},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1592474087272},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1592474087272},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1592474087272},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1592474087272},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1592474087272},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1592474087272},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1592474087273},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1592474087273},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1592474087273},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1592474087273},{"_id":"public/live2dw/assets/assets/exp/f03.exp.json","hash":"b8f958f736acd4eb7433043fbae946487e872f5b","modified":1592474087273},{"_id":"public/live2dw/assets/assets/exp/f04.exp.json","hash":"19fdb5558be54a9ec6d882e2d1780a369bc66b62","modified":1592474087273},{"_id":"public/live2dw/assets/assets/exp/f02.exp.json","hash":"a5f786a8ebce6d2b14efcd4476179ed324c8def6","modified":1592474087273},{"_id":"public/live2dw/assets/assets/exp/f01.exp.json","hash":"84073a497ddb6e56c6cfc244a0fb217ba473abf9","modified":1592474087273},{"_id":"public/live2dw/assets/assets/hibiki.model.json","hash":"73bbc0004fc21039452f80dc6dc3c287723aedc4","modified":1592474087273},{"_id":"public/live2dw/assets/assets/exp/f05.exp.json","hash":"8fdbc6eabb1890bc5953f170f95e4404bd3d62b4","modified":1592474087273},{"_id":"public/live2dw/assets/assets/hibiki.physics.json","hash":"ba100c7a8c3fc777d05f41e3371d18c457febfa7","modified":1592474087273},{"_id":"public/live2dw/assets/assets/exp/f06.exp.json","hash":"b8ee09beda85aff415e6598ecd6573a238e15d18","modified":1592474087273},{"_id":"public/live2dw/assets/assets/mtn/hibiki_01.mtn","hash":"cd220b89c26e1267fd7ab8f7cfc714fcd4c3b5a3","modified":1592474087273},{"_id":"public/live2dw/assets/assets/mtn/hibiki_02.mtn","hash":"985154bee77e2934afe74a45071f51e0aa1ac84d","modified":1592474087273},{"_id":"public/live2dw/assets/assets/mtn/hibiki_03.mtn","hash":"0b2e7cb2a32b70a629d9d21205863bb163d06d47","modified":1592474087273},{"_id":"public/live2dw/assets/assets/mtn/hibiki_05.mtn","hash":"67dc8d35f050e36d08010d55ddbfd06544fb7ad5","modified":1592474087273},{"_id":"public/live2dw/assets/assets/mtn/hibiki_04.mtn","hash":"6a753859998d7afa17f119f37c5765f0c10b7bca","modified":1592474087273},{"_id":"public/live2dw/assets/assets/mtn/idle_01.mtn","hash":"3fac7f98ab71858018cbbf21b5a3ad99166d275b","modified":1592474087273},{"_id":"public/live2dw/assets/assets/mtn/idle_02.mtn","hash":"9f7dae129a20775b3209a16ee28e27f496e90ba5","modified":1592474087273},{"_id":"public/live2dw/assets/assets/snd/hibiki_01.mp3","hash":"2880911aa4a85958fe02e54b912fbf7e6a1896c6","modified":1592474087273},{"_id":"public/live2dw/assets/assets/mtn/idle_03.mtn","hash":"c85916f8699673b0511fd00cd1953896879e0cc5","modified":1592474087273},{"_id":"public/live2dw/assets/assets/snd/hibiki_02.mp3","hash":"75358d4c7ec03c4b1dc02ef60c716d94f031fe2f","modified":1592474087273},{"_id":"public/live2dw/assets/package.json","hash":"6c105c554b50dc00557535c92ab05536eb753296","modified":1592474087273},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1592474087274},{"_id":"public/live2dw/assets/assets/snd/hibiki_05.mp3","hash":"e8788bb9e92467e21933ac2140114a21b9ad215a","modified":1592474087274},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1592474087920},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1592474087926},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1592474087930},{"_id":"public/live2dw/assets/assets/mtn/idle_04.mtn","hash":"80d4e53606b3268623b03d12a28570efdb5739ad","modified":1592474087931},{"_id":"public/live2dw/assets/assets/snd/hibiki_04.mp3","hash":"57d76906838b186bee2d47f768e54ac18e44d472","modified":1592474087931},{"_id":"public/live2dw/assets/assets/snd/hibiki_03.mp3","hash":"df05cb8288b17e1ad00ed66a731f1558db28cf9b","modified":1592474087931},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1592474087939},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1592474087939},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1592474087939},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1592474087939},{"_id":"public/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1592474087939},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1592474087939},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1592474087939},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1592474087939},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1592474087939},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1592474087939},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1592474087939},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1592474087939},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1592474087939},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1592474087939},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1592474087939},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1592474087940},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1592474087940},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1592474087940},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1592474087940},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1592474087940},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1592474087940},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1592474087940},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1592474087940},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1592474087941},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1592474087941},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1592474087941},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1592474087941},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1592474087941},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1592474087941},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1592474087941},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1592474087941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1592474087941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1592474087941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1592474087941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1592474087941},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1592474087941},{"_id":"public/lib/fastclick/README.html","hash":"287b2e24cae1f7d01877dda79b76c24f81123895","modified":1592474087941},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bfb6e229fc36e493d45499b4ac30a7c298786ab4","modified":1592474087941},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1592474087941},{"_id":"public/css/main.css","hash":"c683cdbc8a19817f3ec374c940a1a1d5798e2541","modified":1592474087941},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1592474087941},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1592474087941},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1592474087941},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1592474087941},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1592474087942},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1592474087942},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1592474087942},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1592474087942},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1592474087942},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1592474087942},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1592474087942},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1592474087942},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1592474087942},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1592474087942},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1592474087942},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1592474087943},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1592474087943},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1592474087943},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1592474087943},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1592474087943},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1592474087943},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1592474087944},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1592474087949},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1592474087949},{"_id":"public/live2dw/assets/assets/moc/hibiki.moc","hash":"deff9b550df1e2dc47a57f1099e46de6737a0ec6","modified":1592474087953},{"_id":"public/live2dw/assets/assets/moc/hibiki.2048/texture_00.png","hash":"91349297cc411865cf5605a998b68a97fe67eec5","modified":1592474087953},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1592474087953},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1592474087984},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1592474087986},{"_id":"public/images/avatar.jpg","hash":"3b8b13aeb2e609935ea59fbb774e6f16c56ef906","modified":1592474087995},{"_id":"source/_posts/GIt进阶操作.md","hash":"c1efdbd446fb67cd96147bbaeeebce5988dac3ea","modified":1594796597032},{"_id":"public/archives/27737.html","hash":"653397a79440de1360460d5e9405772d26b35256","modified":1599189302036},{"_id":"public/tags/git/index.html","hash":"383560d1bfb212c4a72eefb997f036685ace24a7","modified":1599189302046},{"_id":"public/archives/2020/07/index.html","hash":"79c47aa72ec4f0d36970efab2a821b46a889f428","modified":1599189302044},{"_id":"source/_posts/DockerCompose使用教程.md","hash":"a9c2e583dfccbe4a8e9f3e84a30495997714a681","modified":1598950701202},{"_id":"public/archives/2020/09/index.html","hash":"b21ece3bf2f166593d4ee12e835f5095b533df34","modified":1599189302044},{"_id":"public/tags/教程/index.html","hash":"8a81061f8e79cb03fbc8105f6ad92d3e592fe046","modified":1599189302046},{"_id":"source/_posts/Docker 常用命令整理.md","hash":"1bf1ec7475a06b547e7e8de192b83526f42cfe23","modified":1599189279458},{"_id":"public/archives/16101.html","hash":"65c8a276afed61cd52f55b7094faaf3bb91aab69","modified":1599189302051}],"Category":[{"name":"知识点","_id":"ckbkly7lt00041q2duqz0jdqd"},{"name":"Linux","_id":"ckbkly7m000091q2dz8pgzfj4"},{"name":"前端","_id":"ckbkly7mb000m1q2d9l1ul87e"},{"name":"教程","_id":"ckbkly7mk00121q2d9wg7owdb"},{"name":"Pthon练习题","_id":"ckbkly7mw001k1q2d45hv17bi"},{"name":"小工具","_id":"ckbkly7n900291q2d203bw0kw"},{"name":"瞎折腾","_id":"ckbkly7nc002h1q2djqyei886"},{"name":"问题解决","_id":"ckbkly7ng002p1q2dr97y8yeu"},{"name":"linux","_id":"ckbkly7nk002z1q2djcloieuu"},{"name":"英文翻译","_id":"ckbkly7np00381q2d4rxism47"},{"name":"自动化","_id":"ckbkly7nt003i1q2d6c60ow83"},{"name":"文章","_id":"ckbkly7oh004t1q2dcmypph78"},{"name":"Android","_id":"ckbkly7on00511q2d8oemcs9l"}],"Data":[],"Page":[{"title":"分类","date":"2018-02-01T22:49:50.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-02-02 06:49:50\ntype: \"categories\"\ncomments: false\n---","updated":"2020-03-09T03:01:45.091Z","path":"categories/index.html","layout":"page","_id":"ckbkly7lo00011q2dj30tiar7","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2018-02-01T22:49:50.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-02-02 06:49:50\ntype: \"tags\"\ncomments: false\n---","updated":"2020-03-09T03:01:45.096Z","path":"tags/index.html","layout":"page","_id":"ckbkly7lr00031q2dx9vzk3qd","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ASP.NET 知识收集与问题解决","abbrlink":51745,"date":"2018-06-25T06:34:34.000Z","_content":"\n## 问题解决\n### ASP.NET MVC部署报错\n1. 部署时提示：**模块 DirectoryListingModule 通知 ExecuteRequestHandler 处理程序 StaticFile**\n解决办法：在 **webconfig** 里 **system.webServer** 下的 **modules** 节点加一个属性为：**runAllManagedModulesForAllRequests=\"true\"**\n如果仍未解决，可查看.net版本是否过低（4.7的程序放在4.5上就不行）\n2. 部署时提示：****配置错误****不能在此路径中使用此配置节。如果在父级别上锁定了该节，便会出现这种情况。锁定是默认设置的****(overrideModeDefault=\"Deny\")****，或者是通过包含**** overrideMode=\"Deny\" ****或旧有的****allowOverride=\"false\" ****的位置标记明确设置的。****\n解决办法：安装iis的时候还要安装 `asp.net`\n-------","source":"_posts/ASP.NET 知识收集与问题解决.md","raw":"---\ntitle: ASP.NET 知识收集与问题解决\ntags: 'C#'\ncategories: 知识点\nabbrlink: 51745\ndate: 2018-06-25 14:34:34\n---\n\n## 问题解决\n### ASP.NET MVC部署报错\n1. 部署时提示：**模块 DirectoryListingModule 通知 ExecuteRequestHandler 处理程序 StaticFile**\n解决办法：在 **webconfig** 里 **system.webServer** 下的 **modules** 节点加一个属性为：**runAllManagedModulesForAllRequests=\"true\"**\n如果仍未解决，可查看.net版本是否过低（4.7的程序放在4.5上就不行）\n2. 部署时提示：****配置错误****不能在此路径中使用此配置节。如果在父级别上锁定了该节，便会出现这种情况。锁定是默认设置的****(overrideModeDefault=\"Deny\")****，或者是通过包含**** overrideMode=\"Deny\" ****或旧有的****allowOverride=\"false\" ****的位置标记明确设置的。****\n解决办法：安装iis的时候还要安装 `asp.net`\n-------","slug":"ASP.NET 知识收集与问题解决","published":1,"updated":"2020-03-09T03:01:45.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7lk00001q2dya24uem1","content":"<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"ASP-NET-MVC部署报错\"><a href=\"#ASP-NET-MVC部署报错\" class=\"headerlink\" title=\"ASP.NET MVC部署报错\"></a>ASP.NET MVC部署报错</h3><ol>\n<li>部署时提示：<strong>模块 DirectoryListingModule 通知 ExecuteRequestHandler 处理程序 StaticFile</strong><br>解决办法：在 <strong>webconfig</strong> 里 <strong>system.webServer</strong> 下的 <strong>modules</strong> 节点加一个属性为：<strong>runAllManagedModulesForAllRequests=”true”</strong><br>如果仍未解决，可查看.net版本是否过低（4.7的程序放在4.5上就不行）</li>\n<li>部署时提示：<strong><strong>配置错误</strong></strong>不能在此路径中使用此配置节。如果在父级别上锁定了该节，便会出现这种情况。锁定是默认设置的<strong><strong>(overrideModeDefault=”Deny”)</strong></strong>，或者是通过包含<strong><strong> overrideMode=”Deny” </strong></strong>或旧有的<strong><strong>allowOverride=”false” </strong></strong>的位置标记明确设置的。<em>**</em><br>解决办法：安装iis的时候还要安装 <code>asp.net</code></li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"ASP-NET-MVC部署报错\"><a href=\"#ASP-NET-MVC部署报错\" class=\"headerlink\" title=\"ASP.NET MVC部署报错\"></a>ASP.NET MVC部署报错</h3><ol>\n<li>部署时提示：<strong>模块 DirectoryListingModule 通知 ExecuteRequestHandler 处理程序 StaticFile</strong><br>解决办法：在 <strong>webconfig</strong> 里 <strong>system.webServer</strong> 下的 <strong>modules</strong> 节点加一个属性为：<strong>runAllManagedModulesForAllRequests=”true”</strong><br>如果仍未解决，可查看.net版本是否过低（4.7的程序放在4.5上就不行）</li>\n<li>部署时提示：<strong><strong>配置错误</strong></strong>不能在此路径中使用此配置节。如果在父级别上锁定了该节，便会出现这种情况。锁定是默认设置的<strong><strong>(overrideModeDefault=”Deny”)</strong></strong>，或者是通过包含<strong><strong> overrideMode=”Deny” </strong></strong>或旧有的<strong><strong>allowOverride=”false” </strong></strong>的位置标记明确设置的。<em>**</em><br>解决办法：安装iis的时候还要安装 <code>asp.net</code></li>\n</ol>\n<hr>\n"},{"title":"CentOS 7 安装 GitLab","abbrlink":30939,"date":"2018-03-16T04:49:23.000Z","_content":"[教程](https://www.cnblogs.com/wenwei-blog/p/5861450.html) | [汉化](https://www.cnblogs.com/cheng95/p/8037865.html) | [参考](http://www.souvc.com/?p=2733#gitlab)\n\n#### 1.安装gitlab所需要的依赖\n```\nsudo yum install curl policycoreutils openssh-server openssh-clients\n```\n<!-- more -->\n##### 2.使sshd服务自动启动 \n```\nsudo systemctl enable sshd\n```\n#### 3.启动sshd服务\n```\n sudo systemctl start sshd\n```\n#### ４.安装邮件服务器\n```\nsudo yum install postfix\n```\n#### 5.使邮件服务器postfix自启动 \n```\nsudo systemctl enable postfix\n```\n#### 6. 启动邮件服务器postfix \n```\nsudo systemctl start postfix\n```\n#### 7.添加GitLab仓库,并安装到服务器上\n```\ncurl  -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash\n```\n#### 8.安装gitlab\n```\nsudo yum install gitlab-ce\n```\n#### 9.启动，配置\n```\nsudo gitlab-ctl reconfigure\n```\n#### 10.修改gitlab配置文件指定服务器ip和自定义端口\n```\nvi  /etc/gitlab/gitlab.rb\n```\n```\npages_external_url \"\"\nunicorn['listen'] = '127.0.0.1'\nunicorn['port'] = 9000\n```\n在防火墙开放指定端口\n\n#### 11.重新配置\n```\nsudo gitlab-ctl reconfigure\n```\n#### 12.重启\n```\ngitlab-ctl restart\n```\n### 配置发送邮件\n[参考地址](https://docs.gitlab.com/omnibus/settings/smtp.html#amazon-ses)\nQQMail\n```\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"xxxx@xx.com\"\ngitlab_rails['smtp_password'] = \"password\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\ngitlab_rails['gitlab_email_from'] = 'xxxx@xx.com'\n```\n更新配置\n```\nsudo gitlab-ctl reconfigure\n```\n备份\n```\nsudo gitlab-rake gitlab:backup:create \n```\n还原备份\n```\nsudo cp 140623891_gitlab_backup.tar  /var/opt/gitlab/backups/   \nsudo gitlab-ctl stop unicorn  \nsudo gitlab-ctl stop sidekiq  \nsudo gitlab-rake gitlab:backup:restore BACKUP=140623891   -- 备份文件名的时间戳前缀  \nsudo gitlab-ctl start  \nsudo gitlab-rake gitlab:check SANITIZE=true  \n```\n## 定时备份\n执行`crontab -e`命令\n```\ncrontab -e\n```\n\n输入以下内容，设置每天凌晨2:00定时自动备份\n```\n0 2 * * * gitlab-rake gitlab:backup:create\n```\n\n## Centos 7 防火墙操作\n查看已经开放的端口：\n```\nfirewall-cmd --list-ports\n```\n开启端口\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent\n```\n重启防火墙\n```\nfirewall-cmd --reload #重启firewall\nsystemctl stop firewalld.service #停止firewall\nsystemctl disable firewalld.service #禁止firewall开机启动\n```\n","source":"_posts/CentOS 7 安装 GitLab.md","raw":"---\ntitle: CentOS 7 安装 GitLab\ntags: Linux\ncategories: Linux\nabbrlink: 30939\ndate: 2018-03-16 12:49:23\n---\n[教程](https://www.cnblogs.com/wenwei-blog/p/5861450.html) | [汉化](https://www.cnblogs.com/cheng95/p/8037865.html) | [参考](http://www.souvc.com/?p=2733#gitlab)\n\n#### 1.安装gitlab所需要的依赖\n```\nsudo yum install curl policycoreutils openssh-server openssh-clients\n```\n<!-- more -->\n##### 2.使sshd服务自动启动 \n```\nsudo systemctl enable sshd\n```\n#### 3.启动sshd服务\n```\n sudo systemctl start sshd\n```\n#### ４.安装邮件服务器\n```\nsudo yum install postfix\n```\n#### 5.使邮件服务器postfix自启动 \n```\nsudo systemctl enable postfix\n```\n#### 6. 启动邮件服务器postfix \n```\nsudo systemctl start postfix\n```\n#### 7.添加GitLab仓库,并安装到服务器上\n```\ncurl  -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash\n```\n#### 8.安装gitlab\n```\nsudo yum install gitlab-ce\n```\n#### 9.启动，配置\n```\nsudo gitlab-ctl reconfigure\n```\n#### 10.修改gitlab配置文件指定服务器ip和自定义端口\n```\nvi  /etc/gitlab/gitlab.rb\n```\n```\npages_external_url \"\"\nunicorn['listen'] = '127.0.0.1'\nunicorn['port'] = 9000\n```\n在防火墙开放指定端口\n\n#### 11.重新配置\n```\nsudo gitlab-ctl reconfigure\n```\n#### 12.重启\n```\ngitlab-ctl restart\n```\n### 配置发送邮件\n[参考地址](https://docs.gitlab.com/omnibus/settings/smtp.html#amazon-ses)\nQQMail\n```\ngitlab_rails['smtp_enable'] = true\ngitlab_rails['smtp_address'] = \"smtp.exmail.qq.com\"\ngitlab_rails['smtp_port'] = 465\ngitlab_rails['smtp_user_name'] = \"xxxx@xx.com\"\ngitlab_rails['smtp_password'] = \"password\"\ngitlab_rails['smtp_authentication'] = \"login\"\ngitlab_rails['smtp_enable_starttls_auto'] = true\ngitlab_rails['smtp_tls'] = true\ngitlab_rails['gitlab_email_from'] = 'xxxx@xx.com'\n```\n更新配置\n```\nsudo gitlab-ctl reconfigure\n```\n备份\n```\nsudo gitlab-rake gitlab:backup:create \n```\n还原备份\n```\nsudo cp 140623891_gitlab_backup.tar  /var/opt/gitlab/backups/   \nsudo gitlab-ctl stop unicorn  \nsudo gitlab-ctl stop sidekiq  \nsudo gitlab-rake gitlab:backup:restore BACKUP=140623891   -- 备份文件名的时间戳前缀  \nsudo gitlab-ctl start  \nsudo gitlab-rake gitlab:check SANITIZE=true  \n```\n## 定时备份\n执行`crontab -e`命令\n```\ncrontab -e\n```\n\n输入以下内容，设置每天凌晨2:00定时自动备份\n```\n0 2 * * * gitlab-rake gitlab:backup:create\n```\n\n## Centos 7 防火墙操作\n查看已经开放的端口：\n```\nfirewall-cmd --list-ports\n```\n开启端口\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent\n```\n重启防火墙\n```\nfirewall-cmd --reload #重启firewall\nsystemctl stop firewalld.service #停止firewall\nsystemctl disable firewalld.service #禁止firewall开机启动\n```\n","slug":"CentOS 7 安装 GitLab","published":1,"updated":"2020-03-09T03:01:45.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7lp00021q2dikx82vx6","content":"<p><a href=\"https://www.cnblogs.com/wenwei-blog/p/5861450.html\" target=\"_blank\" rel=\"noopener\">教程</a> | <a href=\"https://www.cnblogs.com/cheng95/p/8037865.html\" target=\"_blank\" rel=\"noopener\">汉化</a> | <a href=\"http://www.souvc.com/?p=2733#gitlab\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h4 id=\"1-安装gitlab所需要的依赖\"><a href=\"#1-安装gitlab所需要的依赖\" class=\"headerlink\" title=\"1.安装gitlab所需要的依赖\"></a>1.安装gitlab所需要的依赖</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install curl policycoreutils openssh-server openssh-clients</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h5 id=\"2-使sshd服务自动启动\"><a href=\"#2-使sshd服务自动启动\" class=\"headerlink\" title=\"2.使sshd服务自动启动\"></a>2.使sshd服务自动启动</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable sshd</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-启动sshd服务\"><a href=\"#3-启动sshd服务\" class=\"headerlink\" title=\"3.启动sshd服务\"></a>3.启动sshd服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start sshd</span><br></pre></td></tr></table></figure>\n<h4 id=\"４-安装邮件服务器\"><a href=\"#４-安装邮件服务器\" class=\"headerlink\" title=\"４.安装邮件服务器\"></a>４.安装邮件服务器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install postfix</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-使邮件服务器postfix自启动\"><a href=\"#5-使邮件服务器postfix自启动\" class=\"headerlink\" title=\"5.使邮件服务器postfix自启动\"></a>5.使邮件服务器postfix自启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable postfix</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-启动邮件服务器postfix\"><a href=\"#6-启动邮件服务器postfix\" class=\"headerlink\" title=\"6. 启动邮件服务器postfix\"></a>6. 启动邮件服务器postfix</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-添加GitLab仓库-并安装到服务器上\"><a href=\"#7-添加GitLab仓库-并安装到服务器上\" class=\"headerlink\" title=\"7.添加GitLab仓库,并安装到服务器上\"></a>7.添加GitLab仓库,并安装到服务器上</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-安装gitlab\"><a href=\"#8-安装gitlab\" class=\"headerlink\" title=\"8.安装gitlab\"></a>8.安装gitlab</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-启动，配置\"><a href=\"#9-启动，配置\" class=\"headerlink\" title=\"9.启动，配置\"></a>9.启动，配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<h4 id=\"10-修改gitlab配置文件指定服务器ip和自定义端口\"><a href=\"#10-修改gitlab配置文件指定服务器ip和自定义端口\" class=\"headerlink\" title=\"10.修改gitlab配置文件指定服务器ip和自定义端口\"></a>10.修改gitlab配置文件指定服务器ip和自定义端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi  /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pages_external_url &quot;&quot;</span><br><span class=\"line\">unicorn[&apos;listen&apos;] = &apos;127.0.0.1&apos;</span><br><span class=\"line\">unicorn[&apos;port&apos;] = 9000</span><br></pre></td></tr></table></figure>\n<p>在防火墙开放指定端口</p>\n<h4 id=\"11-重新配置\"><a href=\"#11-重新配置\" class=\"headerlink\" title=\"11.重新配置\"></a>11.重新配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<h4 id=\"12-重启\"><a href=\"#12-重启\" class=\"headerlink\" title=\"12.重启\"></a>12.重启</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置发送邮件\"><a href=\"#配置发送邮件\" class=\"headerlink\" title=\"配置发送邮件\"></a>配置发送邮件</h3><p><a href=\"https://docs.gitlab.com/omnibus/settings/smtp.html#amazon-ses\" target=\"_blank\" rel=\"noopener\">参考地址</a><br>QQMail<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab_rails[&apos;smtp_enable&apos;] = true</span><br><span class=\"line\">gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.exmail.qq.com&quot;</span><br><span class=\"line\">gitlab_rails[&apos;smtp_port&apos;] = 465</span><br><span class=\"line\">gitlab_rails[&apos;smtp_user_name&apos;] = &quot;xxxx@xx.com&quot;</span><br><span class=\"line\">gitlab_rails[&apos;smtp_password&apos;] = &quot;password&quot;</span><br><span class=\"line\">gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</span><br><span class=\"line\">gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</span><br><span class=\"line\">gitlab_rails[&apos;smtp_tls&apos;] = true</span><br><span class=\"line\">gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;xxxx@xx.com&apos;</span><br></pre></td></tr></table></figure></p>\n<p>更新配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>\n<p>备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p>\n<p>还原备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp 140623891_gitlab_backup.tar  /var/opt/gitlab/backups/   </span><br><span class=\"line\">sudo gitlab-ctl stop unicorn  </span><br><span class=\"line\">sudo gitlab-ctl stop sidekiq  </span><br><span class=\"line\">sudo gitlab-rake gitlab:backup:restore BACKUP=140623891   -- 备份文件名的时间戳前缀  </span><br><span class=\"line\">sudo gitlab-ctl start  </span><br><span class=\"line\">sudo gitlab-rake gitlab:check SANITIZE=true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"定时备份\"><a href=\"#定时备份\" class=\"headerlink\" title=\"定时备份\"></a>定时备份</h2><p>执行<code>crontab -e</code>命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure></p>\n<p>输入以下内容，设置每天凌晨2:00定时自动备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 2 * * * gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Centos-7-防火墙操作\"><a href=\"#Centos-7-防火墙操作\" class=\"headerlink\" title=\"Centos 7 防火墙操作\"></a>Centos 7 防火墙操作</h2><p>查看已经开放的端口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></p>\n<p>开启端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p>\n<p>重启防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload #重启firewall</span><br><span class=\"line\">systemctl stop firewalld.service #停止firewall</span><br><span class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://www.cnblogs.com/wenwei-blog/p/5861450.html\" target=\"_blank\" rel=\"noopener\">教程</a> | <a href=\"https://www.cnblogs.com/cheng95/p/8037865.html\" target=\"_blank\" rel=\"noopener\">汉化</a> | <a href=\"http://www.souvc.com/?p=2733#gitlab\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<h4 id=\"1-安装gitlab所需要的依赖\"><a href=\"#1-安装gitlab所需要的依赖\" class=\"headerlink\" title=\"1.安装gitlab所需要的依赖\"></a>1.安装gitlab所需要的依赖</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install curl policycoreutils openssh-server openssh-clients</span><br></pre></td></tr></table></figure>","more":"<h5 id=\"2-使sshd服务自动启动\"><a href=\"#2-使sshd服务自动启动\" class=\"headerlink\" title=\"2.使sshd服务自动启动\"></a>2.使sshd服务自动启动</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable sshd</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-启动sshd服务\"><a href=\"#3-启动sshd服务\" class=\"headerlink\" title=\"3.启动sshd服务\"></a>3.启动sshd服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start sshd</span><br></pre></td></tr></table></figure>\n<h4 id=\"４-安装邮件服务器\"><a href=\"#４-安装邮件服务器\" class=\"headerlink\" title=\"４.安装邮件服务器\"></a>４.安装邮件服务器</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install postfix</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-使邮件服务器postfix自启动\"><a href=\"#5-使邮件服务器postfix自启动\" class=\"headerlink\" title=\"5.使邮件服务器postfix自启动\"></a>5.使邮件服务器postfix自启动</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl enable postfix</span><br></pre></td></tr></table></figure>\n<h4 id=\"6-启动邮件服务器postfix\"><a href=\"#6-启动邮件服务器postfix\" class=\"headerlink\" title=\"6. 启动邮件服务器postfix\"></a>6. 启动邮件服务器postfix</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start postfix</span><br></pre></td></tr></table></figure>\n<h4 id=\"7-添加GitLab仓库-并安装到服务器上\"><a href=\"#7-添加GitLab仓库-并安装到服务器上\" class=\"headerlink\" title=\"7.添加GitLab仓库,并安装到服务器上\"></a>7.添加GitLab仓库,并安装到服务器上</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl  -sS http://packages.gitlab.cc/install/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>\n<h4 id=\"8-安装gitlab\"><a href=\"#8-安装gitlab\" class=\"headerlink\" title=\"8.安装gitlab\"></a>8.安装gitlab</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure>\n<h4 id=\"9-启动，配置\"><a href=\"#9-启动，配置\" class=\"headerlink\" title=\"9.启动，配置\"></a>9.启动，配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<h4 id=\"10-修改gitlab配置文件指定服务器ip和自定义端口\"><a href=\"#10-修改gitlab配置文件指定服务器ip和自定义端口\" class=\"headerlink\" title=\"10.修改gitlab配置文件指定服务器ip和自定义端口\"></a>10.修改gitlab配置文件指定服务器ip和自定义端口</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi  /etc/gitlab/gitlab.rb</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pages_external_url &quot;&quot;</span><br><span class=\"line\">unicorn[&apos;listen&apos;] = &apos;127.0.0.1&apos;</span><br><span class=\"line\">unicorn[&apos;port&apos;] = 9000</span><br></pre></td></tr></table></figure>\n<p>在防火墙开放指定端口</p>\n<h4 id=\"11-重新配置\"><a href=\"#11-重新配置\" class=\"headerlink\" title=\"11.重新配置\"></a>11.重新配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>\n<h4 id=\"12-重启\"><a href=\"#12-重启\" class=\"headerlink\" title=\"12.重启\"></a>12.重启</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab-ctl restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置发送邮件\"><a href=\"#配置发送邮件\" class=\"headerlink\" title=\"配置发送邮件\"></a>配置发送邮件</h3><p><a href=\"https://docs.gitlab.com/omnibus/settings/smtp.html#amazon-ses\" target=\"_blank\" rel=\"noopener\">参考地址</a><br>QQMail<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gitlab_rails[&apos;smtp_enable&apos;] = true</span><br><span class=\"line\">gitlab_rails[&apos;smtp_address&apos;] = &quot;smtp.exmail.qq.com&quot;</span><br><span class=\"line\">gitlab_rails[&apos;smtp_port&apos;] = 465</span><br><span class=\"line\">gitlab_rails[&apos;smtp_user_name&apos;] = &quot;xxxx@xx.com&quot;</span><br><span class=\"line\">gitlab_rails[&apos;smtp_password&apos;] = &quot;password&quot;</span><br><span class=\"line\">gitlab_rails[&apos;smtp_authentication&apos;] = &quot;login&quot;</span><br><span class=\"line\">gitlab_rails[&apos;smtp_enable_starttls_auto&apos;] = true</span><br><span class=\"line\">gitlab_rails[&apos;smtp_tls&apos;] = true</span><br><span class=\"line\">gitlab_rails[&apos;gitlab_email_from&apos;] = &apos;xxxx@xx.com&apos;</span><br></pre></td></tr></table></figure></p>\n<p>更新配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure></p>\n<p>备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p>\n<p>还原备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp 140623891_gitlab_backup.tar  /var/opt/gitlab/backups/   </span><br><span class=\"line\">sudo gitlab-ctl stop unicorn  </span><br><span class=\"line\">sudo gitlab-ctl stop sidekiq  </span><br><span class=\"line\">sudo gitlab-rake gitlab:backup:restore BACKUP=140623891   -- 备份文件名的时间戳前缀  </span><br><span class=\"line\">sudo gitlab-ctl start  </span><br><span class=\"line\">sudo gitlab-rake gitlab:check SANITIZE=true</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"定时备份\"><a href=\"#定时备份\" class=\"headerlink\" title=\"定时备份\"></a>定时备份</h2><p>执行<code>crontab -e</code>命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure></p>\n<p>输入以下内容，设置每天凌晨2:00定时自动备份<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 2 * * * gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Centos-7-防火墙操作\"><a href=\"#Centos-7-防火墙操作\" class=\"headerlink\" title=\"Centos 7 防火墙操作\"></a>Centos 7 防火墙操作</h2><p>查看已经开放的端口：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure></p>\n<p>开启端口<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure></p>\n<p>重启防火墙<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload #重启firewall</span><br><span class=\"line\">systemctl stop firewalld.service #停止firewall</span><br><span class=\"line\">systemctl disable firewalld.service #禁止firewall开机启动</span><br></pre></td></tr></table></figure></p>"},{"title":"CentOS 7 修改yum源","date":"2018-03-16T01:49:23.000Z","abbrlink":61758,"_content":"备份本地yum源\n```\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak \n```\n获取阿里yum源配置文件\n```\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \n```\n更新cache\n```\nyum makecache \n```\n查看\n```\nyum -y update \n```","source":"_posts/CentOS 7 修改yum源.md","raw":"---\ntitle: CentOS 7 修改yum源\ntags: Linux\ncategories: Linux\ndate: 2018-03-16 9:49:23\nabbrlink: 61758\n---\n备份本地yum源\n```\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak \n```\n获取阿里yum源配置文件\n```\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo \n```\n更新cache\n```\nyum makecache \n```\n查看\n```\nyum -y update \n```","slug":"CentOS 7 修改yum源","published":1,"updated":"2020-03-09T03:01:45.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7lw00061q2dnmai2pe1","content":"<p>备份本地yum源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak</span><br></pre></td></tr></table></figure></p>\n<p>获取阿里yum源配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></p>\n<p>更新cache<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure></p>\n<p>查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>备份本地yum源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo_bak</span><br></pre></td></tr></table></figure></p>\n<p>获取阿里yum源配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure></p>\n<p>更新cache<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum makecache</span><br></pre></td></tr></table></figure></p>\n<p>查看<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y update</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Angular CLI 命令行收集","abbrlink":27930,"date":"2018-07-09T00:48:23.000Z","_content":"\n### 安装 Angular CLI\n```\nnpm install -g @angular/cli\n```\n<!-- more -->\n### 创建新应用\n```\nng new angular-tour-of-heroes\n```\n\n### 启动应用服务器\n```\nng serve --open\n```\n\n### 创建新组建\n```\nng generate component heroes\n```\n或者\n```\nng g c heroes\n```\n\n### 创建服务\n```\nng generate service hero\n```\n\n### 创建类\n```\nng generate class hero\n```\n\n## 创建特性模块\n```\nng generate module CustomerDashboard\n```\n\n### 添加 AppRoutingModule 路由器\n```\nng generate module app-routing --flat --module=app\n```\n\n### 添加模拟数据服务器模块\n```\nnpm install angular-in-memory-web-api --save\n```\n\n## 添加 Ant Desinger of Angular\n```\nng add ng-zorro-antd\n```\n## 问题解决\n### build 后引用路径错误\n解决方案：\n在文件 `package.json` 文件的 `script` \n```\n\"build\":\"ng build --base-href ./\"\n```\n### 使用 `ngx-echart` 报错\n解决方案：\n```\nnpm install --save rxjs-compat\n```\n### 使用`formGroup`报错\n解决方案：\n```\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\n...\nimports: [\n\t// 其他引用\n\tFormsModule,\n\tReactiveFormsModule\n],\n```","source":"_posts/Angular CLI 命令行收集.md","raw":"---\ntitle: Angular CLI 命令行收集\ntags: 前端\ncategories: 前端\nabbrlink: 27930\ndate: 2018-07-09 08:48:23\n---\n\n### 安装 Angular CLI\n```\nnpm install -g @angular/cli\n```\n<!-- more -->\n### 创建新应用\n```\nng new angular-tour-of-heroes\n```\n\n### 启动应用服务器\n```\nng serve --open\n```\n\n### 创建新组建\n```\nng generate component heroes\n```\n或者\n```\nng g c heroes\n```\n\n### 创建服务\n```\nng generate service hero\n```\n\n### 创建类\n```\nng generate class hero\n```\n\n## 创建特性模块\n```\nng generate module CustomerDashboard\n```\n\n### 添加 AppRoutingModule 路由器\n```\nng generate module app-routing --flat --module=app\n```\n\n### 添加模拟数据服务器模块\n```\nnpm install angular-in-memory-web-api --save\n```\n\n## 添加 Ant Desinger of Angular\n```\nng add ng-zorro-antd\n```\n## 问题解决\n### build 后引用路径错误\n解决方案：\n在文件 `package.json` 文件的 `script` \n```\n\"build\":\"ng build --base-href ./\"\n```\n### 使用 `ngx-echart` 报错\n解决方案：\n```\nnpm install --save rxjs-compat\n```\n### 使用`formGroup`报错\n解决方案：\n```\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\n...\nimports: [\n\t// 其他引用\n\tFormsModule,\n\tReactiveFormsModule\n],\n```","slug":"Angular CLI 命令行收集","published":1,"updated":"2020-03-09T03:01:45.082Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7ly00071q2ddpgxg72z","content":"<h3 id=\"安装-Angular-CLI\"><a href=\"#安装-Angular-CLI\" class=\"headerlink\" title=\"安装 Angular CLI\"></a>安装 Angular CLI</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular/cli</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"创建新应用\"><a href=\"#创建新应用\" class=\"headerlink\" title=\"创建新应用\"></a>创建新应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new angular-tour-of-heroes</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动应用服务器\"><a href=\"#启动应用服务器\" class=\"headerlink\" title=\"启动应用服务器\"></a>启动应用服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng serve --open</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建新组建\"><a href=\"#创建新组建\" class=\"headerlink\" title=\"创建新组建\"></a>创建新组建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component heroes</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c heroes</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service hero</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate class hero</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建特性模块\"><a href=\"#创建特性模块\" class=\"headerlink\" title=\"创建特性模块\"></a>创建特性模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module CustomerDashboard</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-AppRoutingModule-路由器\"><a href=\"#添加-AppRoutingModule-路由器\" class=\"headerlink\" title=\"添加 AppRoutingModule 路由器\"></a>添加 AppRoutingModule 路由器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module app-routing --flat --module=app</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加模拟数据服务器模块\"><a href=\"#添加模拟数据服务器模块\" class=\"headerlink\" title=\"添加模拟数据服务器模块\"></a>添加模拟数据服务器模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install angular-in-memory-web-api --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-Ant-Desinger-of-Angular\"><a href=\"#添加-Ant-Desinger-of-Angular\" class=\"headerlink\" title=\"添加 Ant Desinger of Angular\"></a>添加 Ant Desinger of Angular</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"build-后引用路径错误\"><a href=\"#build-后引用路径错误\" class=\"headerlink\" title=\"build 后引用路径错误\"></a>build 后引用路径错误</h3><p>解决方案：<br>在文件 <code>package.json</code> 文件的 <code>script</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;build&quot;:&quot;ng build --base-href ./&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-ngx-echart-报错\"><a href=\"#使用-ngx-echart-报错\" class=\"headerlink\" title=\"使用 ngx-echart 报错\"></a>使用 <code>ngx-echart</code> 报错</h3><p>解决方案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save rxjs-compat</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用formGroup报错\"><a href=\"#使用formGroup报错\" class=\"headerlink\" title=\"使用formGroup报错\"></a>使用<code>formGroup</code>报错</h3><p>解决方案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; FormsModule,ReactiveFormsModule &#125; from &apos;@angular/forms&apos;;</span><br><span class=\"line\">...</span><br><span class=\"line\">imports: [</span><br><span class=\"line\">\t// 其他引用</span><br><span class=\"line\">\tFormsModule,</span><br><span class=\"line\">\tReactiveFormsModule</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"安装-Angular-CLI\"><a href=\"#安装-Angular-CLI\" class=\"headerlink\" title=\"安装 Angular CLI\"></a>安装 Angular CLI</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @angular/cli</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"创建新应用\"><a href=\"#创建新应用\" class=\"headerlink\" title=\"创建新应用\"></a>创建新应用</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng new angular-tour-of-heroes</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动应用服务器\"><a href=\"#启动应用服务器\" class=\"headerlink\" title=\"启动应用服务器\"></a>启动应用服务器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng serve --open</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建新组建\"><a href=\"#创建新组建\" class=\"headerlink\" title=\"创建新组建\"></a>创建新组建</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate component heroes</span><br></pre></td></tr></table></figure>\n<p>或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng g c heroes</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"创建服务\"><a href=\"#创建服务\" class=\"headerlink\" title=\"创建服务\"></a>创建服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate service hero</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建类\"><a href=\"#创建类\" class=\"headerlink\" title=\"创建类\"></a>创建类</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate class hero</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建特性模块\"><a href=\"#创建特性模块\" class=\"headerlink\" title=\"创建特性模块\"></a>创建特性模块</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module CustomerDashboard</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加-AppRoutingModule-路由器\"><a href=\"#添加-AppRoutingModule-路由器\" class=\"headerlink\" title=\"添加 AppRoutingModule 路由器\"></a>添加 AppRoutingModule 路由器</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng generate module app-routing --flat --module=app</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加模拟数据服务器模块\"><a href=\"#添加模拟数据服务器模块\" class=\"headerlink\" title=\"添加模拟数据服务器模块\"></a>添加模拟数据服务器模块</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install angular-in-memory-web-api --save</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加-Ant-Desinger-of-Angular\"><a href=\"#添加-Ant-Desinger-of-Angular\" class=\"headerlink\" title=\"添加 Ant Desinger of Angular\"></a>添加 Ant Desinger of Angular</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ng add ng-zorro-antd</span><br></pre></td></tr></table></figure>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"build-后引用路径错误\"><a href=\"#build-后引用路径错误\" class=\"headerlink\" title=\"build 后引用路径错误\"></a>build 后引用路径错误</h3><p>解决方案：<br>在文件 <code>package.json</code> 文件的 <code>script</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;build&quot;:&quot;ng build --base-href ./&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用-ngx-echart-报错\"><a href=\"#使用-ngx-echart-报错\" class=\"headerlink\" title=\"使用 ngx-echart 报错\"></a>使用 <code>ngx-echart</code> 报错</h3><p>解决方案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save rxjs-compat</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"使用formGroup报错\"><a href=\"#使用formGroup报错\" class=\"headerlink\" title=\"使用formGroup报错\"></a>使用<code>formGroup</code>报错</h3><p>解决方案：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; FormsModule,ReactiveFormsModule &#125; from &apos;@angular/forms&apos;;</span><br><span class=\"line\">...</span><br><span class=\"line\">imports: [</span><br><span class=\"line\">\t// 其他引用</span><br><span class=\"line\">\tFormsModule,</span><br><span class=\"line\">\tReactiveFormsModule</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure></p>"},{"title":"CentOS 7 安装mongodb","abbrlink":3512,"date":"2018-11-23T05:49:23.000Z","_content":"### 下载\n假设存放的目录为`/usr/software`\n```\ncd /usr/software\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz  // 下载\ntar -zxvf mongodb-linux-x86_64-3.0.6.tgz  // 解压\n```\n<!-- more -->\n### 设置环境变量\n```\nvi /etc/profile\n```\n在文档末尾添加(目录要以node下载的目录为准)\n```\nexport PATH=$PATH:/usr/software/mongodb-linux-x86_64-3.0.6/bin\n```\n配置生效\n```\nsource /etc/profile\n```\n### 配置并运行\n接着在usr/software/mongodb目录下新建一个名为mongodb.conf的配置文件，写入如下配置内容\n```\nport=27017\ndbpath=/usr/software/mongodb/data/db\nlogappend=true\nfork=true\nlogpath=/usr/software/mongodb/data/logs\n```\n保存。然后输入命令启动mongod --config /usr/software/mongodb/mongodb.conf\n\n### 开机自启\n```\ncd /lib/systemd/system/\nvi mongodb.service\n```\n添加内容\n```\n[Unit]\nDescription=mongodb\nAfter=network.target remote-fs.target nss-lookup.target\n[Service]\nType=forking\nExecStart=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --config /usr/software/mongodb/mongodb.conf\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --shutdown --config /usr/software/mongodb/mongodb.conf\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n```\n配置生效\n```\nsystemctl daemon-reload\n```\n可用命令\n```\n#启动服务\nsystemctl start mongodb.service\n#关闭服务\nsystemctl stop mongodb.service\n#开机启动\nsystemctl enable mongodb.service\n```","source":"_posts/CentOS 7 安装mongodb.md","raw":"---\ntitle: CentOS 7 安装mongodb\ntags: Linux\ncategories: Linux\nabbrlink: 3512\ndate: 2018-11-23 13:49:23\n---\n### 下载\n假设存放的目录为`/usr/software`\n```\ncd /usr/software\nwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz  // 下载\ntar -zxvf mongodb-linux-x86_64-3.0.6.tgz  // 解压\n```\n<!-- more -->\n### 设置环境变量\n```\nvi /etc/profile\n```\n在文档末尾添加(目录要以node下载的目录为准)\n```\nexport PATH=$PATH:/usr/software/mongodb-linux-x86_64-3.0.6/bin\n```\n配置生效\n```\nsource /etc/profile\n```\n### 配置并运行\n接着在usr/software/mongodb目录下新建一个名为mongodb.conf的配置文件，写入如下配置内容\n```\nport=27017\ndbpath=/usr/software/mongodb/data/db\nlogappend=true\nfork=true\nlogpath=/usr/software/mongodb/data/logs\n```\n保存。然后输入命令启动mongod --config /usr/software/mongodb/mongodb.conf\n\n### 开机自启\n```\ncd /lib/systemd/system/\nvi mongodb.service\n```\n添加内容\n```\n[Unit]\nDescription=mongodb\nAfter=network.target remote-fs.target nss-lookup.target\n[Service]\nType=forking\nExecStart=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --config /usr/software/mongodb/mongodb.conf\nExecReload=/bin/kill -s HUP $MAINPID\nExecStop=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --shutdown --config /usr/software/mongodb/mongodb.conf\nPrivateTmp=true\n[Install]\nWantedBy=multi-user.target\n```\n配置生效\n```\nsystemctl daemon-reload\n```\n可用命令\n```\n#启动服务\nsystemctl start mongodb.service\n#关闭服务\nsystemctl stop mongodb.service\n#开机启动\nsystemctl enable mongodb.service\n```","slug":"CentOS 7 安装mongodb","published":1,"updated":"2020-03-09T03:01:45.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7lz00081q2dpaq21alw","content":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>假设存放的目录为<code>/usr/software</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/software</span><br><span class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz  // 下载</span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz  // 解压</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文档末尾添加(目录要以node下载的目录为准)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/software/mongodb-linux-x86_64-3.0.6/bin</span><br></pre></td></tr></table></figure></p>\n<p>配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置并运行\"><a href=\"#配置并运行\" class=\"headerlink\" title=\"配置并运行\"></a>配置并运行</h3><p>接着在usr/software/mongodb目录下新建一个名为mongodb.conf的配置文件，写入如下配置内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port=27017</span><br><span class=\"line\">dbpath=/usr/software/mongodb/data/db</span><br><span class=\"line\">logappend=true</span><br><span class=\"line\">fork=true</span><br><span class=\"line\">logpath=/usr/software/mongodb/data/logs</span><br></pre></td></tr></table></figure></p>\n<p>保存。然后输入命令启动mongod –config /usr/software/mongodb/mongodb.conf</p>\n<h3 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /lib/systemd/system/</span><br><span class=\"line\">vi mongodb.service</span><br></pre></td></tr></table></figure>\n<p>添加内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=mongodb</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --config /usr/software/mongodb/mongodb.conf</span><br><span class=\"line\">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class=\"line\">ExecStop=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --shutdown --config /usr/software/mongodb/mongodb.conf</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p>\n<p>可用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动服务</span><br><span class=\"line\">systemctl start mongodb.service</span><br><span class=\"line\">#关闭服务</span><br><span class=\"line\">systemctl stop mongodb.service</span><br><span class=\"line\">#开机启动</span><br><span class=\"line\">systemctl enable mongodb.service</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>假设存放的目录为<code>/usr/software</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/software</span><br><span class=\"line\">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-3.0.6.tgz  // 下载</span><br><span class=\"line\">tar -zxvf mongodb-linux-x86_64-3.0.6.tgz  // 解压</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文档末尾添加(目录要以node下载的目录为准)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/software/mongodb-linux-x86_64-3.0.6/bin</span><br></pre></td></tr></table></figure></p>\n<p>配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置并运行\"><a href=\"#配置并运行\" class=\"headerlink\" title=\"配置并运行\"></a>配置并运行</h3><p>接着在usr/software/mongodb目录下新建一个名为mongodb.conf的配置文件，写入如下配置内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">port=27017</span><br><span class=\"line\">dbpath=/usr/software/mongodb/data/db</span><br><span class=\"line\">logappend=true</span><br><span class=\"line\">fork=true</span><br><span class=\"line\">logpath=/usr/software/mongodb/data/logs</span><br></pre></td></tr></table></figure></p>\n<p>保存。然后输入命令启动mongod –config /usr/software/mongodb/mongodb.conf</p>\n<h3 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /lib/systemd/system/</span><br><span class=\"line\">vi mongodb.service</span><br></pre></td></tr></table></figure>\n<p>添加内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=mongodb</span><br><span class=\"line\">After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=forking</span><br><span class=\"line\">ExecStart=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --config /usr/software/mongodb/mongodb.conf</span><br><span class=\"line\">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class=\"line\">ExecStop=/usr/software/mongodb-linux-x86_64-3.0.6/bin/mongod --shutdown --config /usr/software/mongodb/mongodb.conf</span><br><span class=\"line\">PrivateTmp=true</span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure></p>\n<p>配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br></pre></td></tr></table></figure></p>\n<p>可用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#启动服务</span><br><span class=\"line\">systemctl start mongodb.service</span><br><span class=\"line\">#关闭服务</span><br><span class=\"line\">systemctl stop mongodb.service</span><br><span class=\"line\">#开机启动</span><br><span class=\"line\">systemctl enable mongodb.service</span><br></pre></td></tr></table></figure></p>"},{"title":"CentOS 7 安装shadowsocks服务","abbrlink":17613,"date":"2018-11-23T01:49:23.000Z","_content":"\n### 安装pip\n`Pip`是`Python`的包管理工具，下载`ss`十分方便，但是`centos`是没有`pip`的，我们需要安装安装一个。\n```\nyum install python-setuptools & easy_install pip\n```\n<!-- more -->\n### 安装Shadowsocks 客户端\n```\npip install shadowsocks\n```\n修改配置文件\n```\nvi /etc/shadowsocks.json\n```\n进入编辑模式，粘贴以下内容\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"port_password\": {\n    \"此处填写端口号\": \"此处填写密码\"\n  },\n  \"timeout\": 300,\n  \"method\": \"aes-256-cfb\",\n  \"fast_open\": false,\n  \"workers\": 1\n}\n```\n### 启动 shadowsocks\n```\n# 启动\nssserver -c /etc/shadowsocks.json -d start\n# 停止\nssserver -c /etc/shadowsocks.json -d stop\n# 重新启动\nssserver -c /etc/shadowsocks.json -d restart\n```\n查看是否正常启动\n```\nps -aux | grep ssserver\n```\n### 设置自启动\n编辑`rc.local`文件\n```\nvi /etc/rc.local\n```\n添加\n```\nsudo ssserver -c /etc/shadowsocks/config.json -d start\n```","source":"_posts/CentOS 7 安装shadowsocks服务.md","raw":"---\ntitle: CentOS 7 安装shadowsocks服务\ntags: Linux\ncategories: Linux\nabbrlink: 17613\ndate: 2018-11-23 09:49:23\n---\n\n### 安装pip\n`Pip`是`Python`的包管理工具，下载`ss`十分方便，但是`centos`是没有`pip`的，我们需要安装安装一个。\n```\nyum install python-setuptools & easy_install pip\n```\n<!-- more -->\n### 安装Shadowsocks 客户端\n```\npip install shadowsocks\n```\n修改配置文件\n```\nvi /etc/shadowsocks.json\n```\n进入编辑模式，粘贴以下内容\n```\n{\n  \"server\": \"0.0.0.0\",\n  \"port_password\": {\n    \"此处填写端口号\": \"此处填写密码\"\n  },\n  \"timeout\": 300,\n  \"method\": \"aes-256-cfb\",\n  \"fast_open\": false,\n  \"workers\": 1\n}\n```\n### 启动 shadowsocks\n```\n# 启动\nssserver -c /etc/shadowsocks.json -d start\n# 停止\nssserver -c /etc/shadowsocks.json -d stop\n# 重新启动\nssserver -c /etc/shadowsocks.json -d restart\n```\n查看是否正常启动\n```\nps -aux | grep ssserver\n```\n### 设置自启动\n编辑`rc.local`文件\n```\nvi /etc/rc.local\n```\n添加\n```\nsudo ssserver -c /etc/shadowsocks/config.json -d start\n```","slug":"CentOS 7 安装shadowsocks服务","published":1,"updated":"2020-03-09T03:01:45.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7m1000c1q2dz4fagtol","content":"<h3 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h3><p><code>Pip</code>是<code>Python</code>的包管理工具，下载<code>ss</code>十分方便，但是<code>centos</code>是没有<code>pip</code>的，我们需要安装安装一个。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp; easy_install pip</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"安装Shadowsocks-客户端\"><a href=\"#安装Shadowsocks-客户端\" class=\"headerlink\" title=\"安装Shadowsocks 客户端\"></a>安装Shadowsocks 客户端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<p>修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>\n<p>进入编辑模式，粘贴以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  &quot;port_password&quot;: &#123;</span><br><span class=\"line\">    &quot;此处填写端口号&quot;: &quot;此处填写密码&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;timeout&quot;: 300,</span><br><span class=\"line\">  &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class=\"line\">  &quot;fast_open&quot;: false,</span><br><span class=\"line\">  &quot;workers&quot;: 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动-shadowsocks\"><a href=\"#启动-shadowsocks\" class=\"headerlink\" title=\"启动 shadowsocks\"></a>启动 shadowsocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"># 停止</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\"># 重新启动</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure>\n<p>查看是否正常启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux | grep ssserver</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置自启动\"><a href=\"#设置自启动\" class=\"headerlink\" title=\"设置自启动\"></a>设置自启动</h3><p>编辑<code>rc.local</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br></pre></td></tr></table></figure></p>\n<p>添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ssserver -c /etc/shadowsocks/config.json -d start</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h3><p><code>Pip</code>是<code>Python</code>的包管理工具，下载<code>ss</code>十分方便，但是<code>centos</code>是没有<code>pip</code>的，我们需要安装安装一个。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-setuptools &amp; easy_install pip</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"安装Shadowsocks-客户端\"><a href=\"#安装Shadowsocks-客户端\" class=\"headerlink\" title=\"安装Shadowsocks 客户端\"></a>安装Shadowsocks 客户端</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<p>修改配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/shadowsocks.json</span><br></pre></td></tr></table></figure></p>\n<p>进入编辑模式，粘贴以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;server&quot;: &quot;0.0.0.0&quot;,</span><br><span class=\"line\">  &quot;port_password&quot;: &#123;</span><br><span class=\"line\">    &quot;此处填写端口号&quot;: &quot;此处填写密码&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;timeout&quot;: 300,</span><br><span class=\"line\">  &quot;method&quot;: &quot;aes-256-cfb&quot;,</span><br><span class=\"line\">  &quot;fast_open&quot;: false,</span><br><span class=\"line\">  &quot;workers&quot;: 1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动-shadowsocks\"><a href=\"#启动-shadowsocks\" class=\"headerlink\" title=\"启动 shadowsocks\"></a>启动 shadowsocks</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 启动</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d start</span><br><span class=\"line\"># 停止</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d stop</span><br><span class=\"line\"># 重新启动</span><br><span class=\"line\">ssserver -c /etc/shadowsocks.json -d restart</span><br></pre></td></tr></table></figure>\n<p>查看是否正常启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps -aux | grep ssserver</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置自启动\"><a href=\"#设置自启动\" class=\"headerlink\" title=\"设置自启动\"></a>设置自启动</h3><p>编辑<code>rc.local</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/rc.local</span><br></pre></td></tr></table></figure></p>\n<p>添加<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ssserver -c /etc/shadowsocks/config.json -d start</span><br></pre></td></tr></table></figure></p>"},{"title":"CentOS 7 安装配置Apache","abbrlink":13790,"date":"2018-11-26T01:49:23.000Z","_content":"\n## 安装\n```\nsudo yum install httpd\n```\n<!-- more -->\n## 添加网站\n新建目录`/var/www/demo`\n将发布好的网站粘贴到该目录\n\n## 修改配置\n```\nvi /etc/httpd/conf/httpd.conf\n```\n假设网站的端口为8100,\n```\nListen 8100\n\nNameVirtualHost *:8100\n<VirtualHost *:8100>\nServerName demo\nDocumentRoot /var/www/demo\n</VirtualHost>\n```\n\n## 配置semanage\n安装 `semanage`\n```\nyum install policycoreutils-python\n```\n查看现在的支持http的端口有哪些\n```\nsemanage port -l|grep http\n```\n为http服务添加新的端8100\n```\nsemanage port -a -t http_port_t -p tcp 8100\n```\n## 防火墙开通8100端口\n```\n firewall-cmd --zone=public --add-port=8100/tcp --permanent\n firewall-cmd --reload\n```\n## 其他命令\n```\n# 开机自启\nsudo systemctl enable httpd\n# 启动\nsudo systemctl start httpd\n# 停止\nsudo systemctl stop httpd\n```","source":"_posts/CentOS 7 安装配置Apache.md","raw":"---\ntitle: CentOS 7 安装配置Apache\ntags: Linux\ncategories: Linux\nabbrlink: 13790\ndate: 2018-11-26 09:49:23\n---\n\n## 安装\n```\nsudo yum install httpd\n```\n<!-- more -->\n## 添加网站\n新建目录`/var/www/demo`\n将发布好的网站粘贴到该目录\n\n## 修改配置\n```\nvi /etc/httpd/conf/httpd.conf\n```\n假设网站的端口为8100,\n```\nListen 8100\n\nNameVirtualHost *:8100\n<VirtualHost *:8100>\nServerName demo\nDocumentRoot /var/www/demo\n</VirtualHost>\n```\n\n## 配置semanage\n安装 `semanage`\n```\nyum install policycoreutils-python\n```\n查看现在的支持http的端口有哪些\n```\nsemanage port -l|grep http\n```\n为http服务添加新的端8100\n```\nsemanage port -a -t http_port_t -p tcp 8100\n```\n## 防火墙开通8100端口\n```\n firewall-cmd --zone=public --add-port=8100/tcp --permanent\n firewall-cmd --reload\n```\n## 其他命令\n```\n# 开机自启\nsudo systemctl enable httpd\n# 启动\nsudo systemctl start httpd\n# 停止\nsudo systemctl stop httpd\n```","slug":"CentOS 7 安装配置Apache","published":1,"updated":"2020-03-09T03:01:45.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7m2000d1q2d8zdl3vb8","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install httpd</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"添加网站\"><a href=\"#添加网站\" class=\"headerlink\" title=\"添加网站\"></a>添加网站</h2><p>新建目录<code>/var/www/demo</code><br>将发布好的网站粘贴到该目录</p>\n<h2 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>\n<p>假设网站的端口为8100,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 8100</span><br><span class=\"line\"></span><br><span class=\"line\">NameVirtualHost *:8100</span><br><span class=\"line\">&lt;VirtualHost *:8100&gt;</span><br><span class=\"line\">ServerName demo</span><br><span class=\"line\">DocumentRoot /var/www/demo</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置semanage\"><a href=\"#配置semanage\" class=\"headerlink\" title=\"配置semanage\"></a>配置semanage</h2><p>安装 <code>semanage</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install policycoreutils-python</span><br></pre></td></tr></table></figure></p>\n<p>查看现在的支持http的端口有哪些<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semanage port -l|grep http</span><br></pre></td></tr></table></figure></p>\n<p>为http服务添加新的端8100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semanage port -a -t http_port_t -p tcp 8100</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"防火墙开通8100端口\"><a href=\"#防火墙开通8100端口\" class=\"headerlink\" title=\"防火墙开通8100端口\"></a>防火墙开通8100端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=8100/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开机自启</span><br><span class=\"line\">sudo systemctl enable httpd</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">sudo systemctl start httpd</span><br><span class=\"line\"># 停止</span><br><span class=\"line\">sudo systemctl stop httpd</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install httpd</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"添加网站\"><a href=\"#添加网站\" class=\"headerlink\" title=\"添加网站\"></a>添加网站</h2><p>新建目录<code>/var/www/demo</code><br>将发布好的网站粘贴到该目录</p>\n<h2 id=\"修改配置\"><a href=\"#修改配置\" class=\"headerlink\" title=\"修改配置\"></a>修改配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/httpd/conf/httpd.conf</span><br></pre></td></tr></table></figure>\n<p>假设网站的端口为8100,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Listen 8100</span><br><span class=\"line\"></span><br><span class=\"line\">NameVirtualHost *:8100</span><br><span class=\"line\">&lt;VirtualHost *:8100&gt;</span><br><span class=\"line\">ServerName demo</span><br><span class=\"line\">DocumentRoot /var/www/demo</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置semanage\"><a href=\"#配置semanage\" class=\"headerlink\" title=\"配置semanage\"></a>配置semanage</h2><p>安装 <code>semanage</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install policycoreutils-python</span><br></pre></td></tr></table></figure></p>\n<p>查看现在的支持http的端口有哪些<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semanage port -l|grep http</span><br></pre></td></tr></table></figure></p>\n<p>为http服务添加新的端8100<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">semanage port -a -t http_port_t -p tcp 8100</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"防火墙开通8100端口\"><a href=\"#防火墙开通8100端口\" class=\"headerlink\" title=\"防火墙开通8100端口\"></a>防火墙开通8100端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=8100/tcp --permanent</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 开机自启</span><br><span class=\"line\">sudo systemctl enable httpd</span><br><span class=\"line\"># 启动</span><br><span class=\"line\">sudo systemctl start httpd</span><br><span class=\"line\"># 停止</span><br><span class=\"line\">sudo systemctl stop httpd</span><br></pre></td></tr></table></figure>"},{"title":"CentOS 7 安装node环境","abbrlink":5588,"date":"2018-11-23T01:49:23.000Z","_content":"### 下载\n假设存放的目录为`/usr/software`\n```\ncd /usr/software\nwget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz  // 下载\ntar xf  node-v10.9.0-linux-x64.tar.xz  // 解压\ncd node-v10.9.0-linux-x64/bin  // 进入解压目录\nnode -v //查看node版本号\n```\n<!-- more -->\n### 设置环境变量\n```\nvi /etc/profile\n```\n在文档末尾添加(目录要以node下载的目录为准)\n```\nexport PATH=$PATH:/usr/software/node-v10.9.0-linux-x64/bin\n```\n配置生效\n```\nsource /etc/profile\n```","source":"_posts/CentOS 7 安装node环境.md","raw":"---\ntitle: CentOS 7 安装node环境\ntags: Linux\ncategories: Linux\nabbrlink: 5588\ndate: 2018-11-23 09:49:23\n---\n### 下载\n假设存放的目录为`/usr/software`\n```\ncd /usr/software\nwget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz  // 下载\ntar xf  node-v10.9.0-linux-x64.tar.xz  // 解压\ncd node-v10.9.0-linux-x64/bin  // 进入解压目录\nnode -v //查看node版本号\n```\n<!-- more -->\n### 设置环境变量\n```\nvi /etc/profile\n```\n在文档末尾添加(目录要以node下载的目录为准)\n```\nexport PATH=$PATH:/usr/software/node-v10.9.0-linux-x64/bin\n```\n配置生效\n```\nsource /etc/profile\n```","slug":"CentOS 7 安装node环境","published":1,"updated":"2020-03-09T03:01:45.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7m7000i1q2d6i1s85v3","content":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>假设存放的目录为<code>/usr/software</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/software</span><br><span class=\"line\">wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz  // 下载</span><br><span class=\"line\">tar xf  node-v10.9.0-linux-x64.tar.xz  // 解压</span><br><span class=\"line\">cd node-v10.9.0-linux-x64/bin  // 进入解压目录</span><br><span class=\"line\">node -v //查看node版本号</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文档末尾添加(目录要以node下载的目录为准)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/software/node-v10.9.0-linux-x64/bin</span><br></pre></td></tr></table></figure></p>\n<p>配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><p>假设存放的目录为<code>/usr/software</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/software</span><br><span class=\"line\">wget https://nodejs.org/dist/v10.9.0/node-v10.9.0-linux-x64.tar.xz  // 下载</span><br><span class=\"line\">tar xf  node-v10.9.0-linux-x64.tar.xz  // 解压</span><br><span class=\"line\">cd node-v10.9.0-linux-x64/bin  // 进入解压目录</span><br><span class=\"line\">node -v //查看node版本号</span><br></pre></td></tr></table></figure></p>","more":"<h3 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文档末尾添加(目录要以node下载的目录为准)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:/usr/software/node-v10.9.0-linux-x64/bin</span><br></pre></td></tr></table></figure></p>\n<p>配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure></p>"},{"title":"CentOS 7 防火墙操作","abbrlink":26003,"date":"2018-11-24T01:49:23.000Z","_content":"\n## 基本使用\n* 启动： `systemctl start firewalld`\n* 关闭： `systemctl stop firewalld`\n* 查看状态： `systemctl status firewalld`\n* 开机禁用  ： `systemctl disable firewalld`\n* 开机启用  ： `systemctl enable firewalld`\n<!-- more -->\n\n## 开放端口\n### 添加\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）\n```\n### 重新载入\n```\nfirewall-cmd --reload\n```\n### 查看\n```\nfirewall-cmd --zone= public --query-port=80/tcp\n```\n### 删除\n```\nfirewall-cmd --zone= public --remove-port=80/tcp --permanent\n```","source":"_posts/CentOS 7 防火墙操作.md","raw":"---\ntitle: CentOS 7 防火墙操作\ntags: Linux\ncategories: Linux\nabbrlink: 26003\ndate: 2018-11-24 09:49:23\n---\n\n## 基本使用\n* 启动： `systemctl start firewalld`\n* 关闭： `systemctl stop firewalld`\n* 查看状态： `systemctl status firewalld`\n* 开机禁用  ： `systemctl disable firewalld`\n* 开机启用  ： `systemctl enable firewalld`\n<!-- more -->\n\n## 开放端口\n### 添加\n```\nfirewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）\n```\n### 重新载入\n```\nfirewall-cmd --reload\n```\n### 查看\n```\nfirewall-cmd --zone= public --query-port=80/tcp\n```\n### 删除\n```\nfirewall-cmd --zone= public --remove-port=80/tcp --permanent\n```","slug":"CentOS 7 防火墙操作","published":1,"updated":"2020-03-09T03:01:45.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7m9000k1q2dy47l3env","content":"<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><ul>\n<li>启动： <code>systemctl start firewalld</code></li>\n<li>关闭： <code>systemctl stop firewalld</code></li>\n<li>查看状态： <code>systemctl status firewalld</code></li>\n<li>开机禁用  ： <code>systemctl disable firewalld</code></li>\n<li>开机启用  ： <code>systemctl enable firewalld</code><a id=\"more\"></a>\n</li>\n</ul>\n<h2 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"开放端口\"></a>开放端口</h2><h3 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新载入\"><a href=\"#重新载入\" class=\"headerlink\" title=\"重新载入\"></a>重新载入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone= public --query-port=80/tcp</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><ul>\n<li>启动： <code>systemctl start firewalld</code></li>\n<li>关闭： <code>systemctl stop firewalld</code></li>\n<li>查看状态： <code>systemctl status firewalld</code></li>\n<li>开机禁用  ： <code>systemctl disable firewalld</code></li>\n<li>开机启用  ： <code>systemctl enable firewalld</code>","more":"</li>\n</ul>\n<h2 id=\"开放端口\"><a href=\"#开放端口\" class=\"headerlink\" title=\"开放端口\"></a>开放端口</h2><h3 id=\"添加\"><a href=\"#添加\" class=\"headerlink\" title=\"添加\"></a>添加</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone=public --add-port=80/tcp --permanent    （--permanent永久生效，没有此参数重启后失效）</span><br></pre></td></tr></table></figure>\n<h3 id=\"重新载入\"><a href=\"#重新载入\" class=\"headerlink\" title=\"重新载入\"></a>重新载入</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone= public --query-port=80/tcp</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>"},{"title":"CentOS 7一键安装Seafile搭建私有云存储","abbrlink":21644,"date":"2018-03-15T04:49:23.000Z","_content":"[参考手册](https://manual-cn-origin.seafile.com)\n## 环境要求\n* CentOS 7 64位\n* Python >= 2.7\n* SqLite 3\n\n<!-- more -->\n## 开始安装\n复制下面的命令，依次输入，然后按照提示进行安装即可\n```\nyum -y install wget\nwget https://raw.githubusercontent.com/helloxz/seafile/master/install_seafile.sh\nchmod +x install_seafile.sh && ./install_seafile.sh\n```\n## 配置邮件发送\n邮件提醒会使某些功能有更好的用户体验, 比如发送邮件提醒用户新消息到达. 请在seahub_settings.py中加入以下语句以开启邮件提醒功能 (同时需要对你的邮箱进行设置).\nGmail 邮箱示例:\n```\nEMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'username@gmail.com'\nEMAIL_HOST_PASSWORD = 'password'\nEMAIL_PORT = '587'\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n```\nQQ 邮箱示例：\n```\nEMAIL_USE_SSL = True\nEMAIL_HOST = 'smtp.qq.com'\nEMAIL_HOST_USER = 'username@domain.com'\nEMAIL_HOST_PASSWORD = 'Auth_Code'\nEMAIL_PORT = '465'\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n```\n## 其它说明\n安装目录和服务如下，如果您还需要配置更多的功能或扩展，请访问官方帮助文档：https://manual-cn.seafile.com/\n```\n#安装目录\n/home/MyCloud\n#启动服务\n/home/MyCloud/seafile-server/seafile.sh start\n/home/MyCloud/seafile-server/seahub.sh start\n#停止服务\n/home/MyCloud/seafile-server/seafile.sh stop\n/home/MyCloud/seafile-server/seahub.sh stop\n```","source":"_posts/CentOS 7一键安装Seafile搭建私有云存储.md","raw":"---\ntitle: CentOS 7一键安装Seafile搭建私有云存储\ntags: Linux\ncategories: Linux\nabbrlink: 21644\ndate: 2018-03-15 12:49:23\n---\n[参考手册](https://manual-cn-origin.seafile.com)\n## 环境要求\n* CentOS 7 64位\n* Python >= 2.7\n* SqLite 3\n\n<!-- more -->\n## 开始安装\n复制下面的命令，依次输入，然后按照提示进行安装即可\n```\nyum -y install wget\nwget https://raw.githubusercontent.com/helloxz/seafile/master/install_seafile.sh\nchmod +x install_seafile.sh && ./install_seafile.sh\n```\n## 配置邮件发送\n邮件提醒会使某些功能有更好的用户体验, 比如发送邮件提醒用户新消息到达. 请在seahub_settings.py中加入以下语句以开启邮件提醒功能 (同时需要对你的邮箱进行设置).\nGmail 邮箱示例:\n```\nEMAIL_USE_TLS = True\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_HOST_USER = 'username@gmail.com'\nEMAIL_HOST_PASSWORD = 'password'\nEMAIL_PORT = '587'\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n```\nQQ 邮箱示例：\n```\nEMAIL_USE_SSL = True\nEMAIL_HOST = 'smtp.qq.com'\nEMAIL_HOST_USER = 'username@domain.com'\nEMAIL_HOST_PASSWORD = 'Auth_Code'\nEMAIL_PORT = '465'\nDEFAULT_FROM_EMAIL = EMAIL_HOST_USER\nSERVER_EMAIL = EMAIL_HOST_USER\n```\n## 其它说明\n安装目录和服务如下，如果您还需要配置更多的功能或扩展，请访问官方帮助文档：https://manual-cn.seafile.com/\n```\n#安装目录\n/home/MyCloud\n#启动服务\n/home/MyCloud/seafile-server/seafile.sh start\n/home/MyCloud/seafile-server/seahub.sh start\n#停止服务\n/home/MyCloud/seafile-server/seafile.sh stop\n/home/MyCloud/seafile-server/seahub.sh stop\n```","slug":"CentOS 7一键安装Seafile搭建私有云存储","published":1,"updated":"2020-03-09T03:01:45.083Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mc000p1q2dtmh5r134","content":"<p><a href=\"https://manual-cn-origin.seafile.com\" target=\"_blank\" rel=\"noopener\">参考手册</a></p>\n<h2 id=\"环境要求\"><a href=\"#环境要求\" class=\"headerlink\" title=\"环境要求\"></a>环境要求</h2><ul>\n<li>CentOS 7 64位</li>\n<li>Python &gt;= 2.7</li>\n<li>SqLite 3</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><p>复制下面的命令，依次输入，然后按照提示进行安装即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br><span class=\"line\">wget https://raw.githubusercontent.com/helloxz/seafile/master/install_seafile.sh</span><br><span class=\"line\">chmod +x install_seafile.sh &amp;&amp; ./install_seafile.sh</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置邮件发送\"><a href=\"#配置邮件发送\" class=\"headerlink\" title=\"配置邮件发送\"></a>配置邮件发送</h2><p>邮件提醒会使某些功能有更好的用户体验, 比如发送邮件提醒用户新消息到达. 请在seahub_settings.py中加入以下语句以开启邮件提醒功能 (同时需要对你的邮箱进行设置).<br>Gmail 邮箱示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EMAIL_USE_TLS = True</span><br><span class=\"line\">EMAIL_HOST = &apos;smtp.gmail.com&apos;</span><br><span class=\"line\">EMAIL_HOST_USER = &apos;username@gmail.com&apos;</span><br><span class=\"line\">EMAIL_HOST_PASSWORD = &apos;password&apos;</span><br><span class=\"line\">EMAIL_PORT = &apos;587&apos;</span><br><span class=\"line\">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class=\"line\">SERVER_EMAIL = EMAIL_HOST_USER</span><br></pre></td></tr></table></figure></p>\n<p>QQ 邮箱示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EMAIL_USE_SSL = True</span><br><span class=\"line\">EMAIL_HOST = &apos;smtp.qq.com&apos;</span><br><span class=\"line\">EMAIL_HOST_USER = &apos;username@domain.com&apos;</span><br><span class=\"line\">EMAIL_HOST_PASSWORD = &apos;Auth_Code&apos;</span><br><span class=\"line\">EMAIL_PORT = &apos;465&apos;</span><br><span class=\"line\">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class=\"line\">SERVER_EMAIL = EMAIL_HOST_USER</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其它说明\"><a href=\"#其它说明\" class=\"headerlink\" title=\"其它说明\"></a>其它说明</h2><p>安装目录和服务如下，如果您还需要配置更多的功能或扩展，请访问官方帮助文档：<a href=\"https://manual-cn.seafile.com/\" target=\"_blank\" rel=\"noopener\">https://manual-cn.seafile.com/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装目录</span><br><span class=\"line\">/home/MyCloud</span><br><span class=\"line\">#启动服务</span><br><span class=\"line\">/home/MyCloud/seafile-server/seafile.sh start</span><br><span class=\"line\">/home/MyCloud/seafile-server/seahub.sh start</span><br><span class=\"line\">#停止服务</span><br><span class=\"line\">/home/MyCloud/seafile-server/seafile.sh stop</span><br><span class=\"line\">/home/MyCloud/seafile-server/seahub.sh stop</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://manual-cn-origin.seafile.com\" target=\"_blank\" rel=\"noopener\">参考手册</a></p>\n<h2 id=\"环境要求\"><a href=\"#环境要求\" class=\"headerlink\" title=\"环境要求\"></a>环境要求</h2><ul>\n<li>CentOS 7 64位</li>\n<li>Python &gt;= 2.7</li>\n<li>SqLite 3</li>\n</ul>","more":"<h2 id=\"开始安装\"><a href=\"#开始安装\" class=\"headerlink\" title=\"开始安装\"></a>开始安装</h2><p>复制下面的命令，依次输入，然后按照提示进行安装即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install wget</span><br><span class=\"line\">wget https://raw.githubusercontent.com/helloxz/seafile/master/install_seafile.sh</span><br><span class=\"line\">chmod +x install_seafile.sh &amp;&amp; ./install_seafile.sh</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置邮件发送\"><a href=\"#配置邮件发送\" class=\"headerlink\" title=\"配置邮件发送\"></a>配置邮件发送</h2><p>邮件提醒会使某些功能有更好的用户体验, 比如发送邮件提醒用户新消息到达. 请在seahub_settings.py中加入以下语句以开启邮件提醒功能 (同时需要对你的邮箱进行设置).<br>Gmail 邮箱示例:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EMAIL_USE_TLS = True</span><br><span class=\"line\">EMAIL_HOST = &apos;smtp.gmail.com&apos;</span><br><span class=\"line\">EMAIL_HOST_USER = &apos;username@gmail.com&apos;</span><br><span class=\"line\">EMAIL_HOST_PASSWORD = &apos;password&apos;</span><br><span class=\"line\">EMAIL_PORT = &apos;587&apos;</span><br><span class=\"line\">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class=\"line\">SERVER_EMAIL = EMAIL_HOST_USER</span><br></pre></td></tr></table></figure></p>\n<p>QQ 邮箱示例：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">EMAIL_USE_SSL = True</span><br><span class=\"line\">EMAIL_HOST = &apos;smtp.qq.com&apos;</span><br><span class=\"line\">EMAIL_HOST_USER = &apos;username@domain.com&apos;</span><br><span class=\"line\">EMAIL_HOST_PASSWORD = &apos;Auth_Code&apos;</span><br><span class=\"line\">EMAIL_PORT = &apos;465&apos;</span><br><span class=\"line\">DEFAULT_FROM_EMAIL = EMAIL_HOST_USER</span><br><span class=\"line\">SERVER_EMAIL = EMAIL_HOST_USER</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其它说明\"><a href=\"#其它说明\" class=\"headerlink\" title=\"其它说明\"></a>其它说明</h2><p>安装目录和服务如下，如果您还需要配置更多的功能或扩展，请访问官方帮助文档：<a href=\"https://manual-cn.seafile.com/\" target=\"_blank\" rel=\"noopener\">https://manual-cn.seafile.com/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#安装目录</span><br><span class=\"line\">/home/MyCloud</span><br><span class=\"line\">#启动服务</span><br><span class=\"line\">/home/MyCloud/seafile-server/seafile.sh start</span><br><span class=\"line\">/home/MyCloud/seafile-server/seahub.sh start</span><br><span class=\"line\">#停止服务</span><br><span class=\"line\">/home/MyCloud/seafile-server/seafile.sh stop</span><br><span class=\"line\">/home/MyCloud/seafile-server/seahub.sh stop</span><br></pre></td></tr></table></figure></p>"},{"title":"EF 知识收集与问题解决","abbrlink":25896,"date":"2018-06-25T06:24:34.000Z","_content":"## 语法学习\n[用linqPad帮助你快速学习LINQ](https://www.cnblogs.com/li-peng/p/3441729.html)\n### GroupBy\n```\nvar re = db.InvoiceDetail.WhereDynamic(Request.Form).GroupBy(a => new { a.IvdMatCode, a.IvdMatName }).Select(a => new\n{\n    IvdMatCode = a.Key.IvdMatCode,\n    IvdMatName = a.Key.IvdMatName,\n    num = a.Sum(x => x.IvdScanNum)\n}).ToList();\n```\n<!-- more -->\n------\n\n## 知识收集\n### 数据库迁移\n打开迁移：`Enable-Migrations`\n增加迁移的节点：`Add-Migration PaperTest`\n将修改升级到数据库:`Update-Database`\n------\n\n## 问题解决\n### Update-Database : 无法将“Update-Database”项识别为 cmdlet、函数、脚本文件或可运行程序的名称的问题\n原因：\n没有引用EntityFramework命令\n解决：\n在程序包管理器控制台执行如下命令:\nImport-Module 项目路径\\packages\\EntityFramework.6.1.3（EF版本）\\tools\\EntityFramework.psd1\n------","source":"_posts/EF 知识收集与问题解决.md","raw":"---\ntitle: EF 知识收集与问题解决\ntags: C#\ncategories: 知识点\nabbrlink: 25896\ndate: 2018-06-25 14:24:34\n---\n## 语法学习\n[用linqPad帮助你快速学习LINQ](https://www.cnblogs.com/li-peng/p/3441729.html)\n### GroupBy\n```\nvar re = db.InvoiceDetail.WhereDynamic(Request.Form).GroupBy(a => new { a.IvdMatCode, a.IvdMatName }).Select(a => new\n{\n    IvdMatCode = a.Key.IvdMatCode,\n    IvdMatName = a.Key.IvdMatName,\n    num = a.Sum(x => x.IvdScanNum)\n}).ToList();\n```\n<!-- more -->\n------\n\n## 知识收集\n### 数据库迁移\n打开迁移：`Enable-Migrations`\n增加迁移的节点：`Add-Migration PaperTest`\n将修改升级到数据库:`Update-Database`\n------\n\n## 问题解决\n### Update-Database : 无法将“Update-Database”项识别为 cmdlet、函数、脚本文件或可运行程序的名称的问题\n原因：\n没有引用EntityFramework命令\n解决：\n在程序包管理器控制台执行如下命令:\nImport-Module 项目路径\\packages\\EntityFramework.6.1.3（EF版本）\\tools\\EntityFramework.psd1\n------","slug":"EF 知识收集与问题解决","published":1,"updated":"2020-03-09T03:01:45.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7me000s1q2dio9u7ukv","content":"<h2 id=\"语法学习\"><a href=\"#语法学习\" class=\"headerlink\" title=\"语法学习\"></a>语法学习</h2><p><a href=\"https://www.cnblogs.com/li-peng/p/3441729.html\" target=\"_blank\" rel=\"noopener\">用linqPad帮助你快速学习LINQ</a></p>\n<h3 id=\"GroupBy\"><a href=\"#GroupBy\" class=\"headerlink\" title=\"GroupBy\"></a>GroupBy</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = db.InvoiceDetail.WhereDynamic(Request.Form).GroupBy(a =&gt; new &#123; a.IvdMatCode, a.IvdMatName &#125;).Select(a =&gt; new</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    IvdMatCode = a.Key.IvdMatCode,</span><br><span class=\"line\">    IvdMatName = a.Key.IvdMatName,</span><br><span class=\"line\">    num = a.Sum(x =&gt; x.IvdScanNum)</span><br><span class=\"line\">&#125;).ToList();</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"知识收集\"><a href=\"#知识收集\" class=\"headerlink\" title=\"知识收集\"></a>知识收集</h2><h3 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h3><p>打开迁移：<code>Enable-Migrations</code><br>增加迁移的节点：<code>Add-Migration PaperTest</code></p>\n<h2 id=\"将修改升级到数据库-Update-Database\"><a href=\"#将修改升级到数据库-Update-Database\" class=\"headerlink\" title=\"将修改升级到数据库:Update-Database\"></a>将修改升级到数据库:<code>Update-Database</code></h2><h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"Update-Database-无法将“Update-Database”项识别为-cmdlet、函数、脚本文件或可运行程序的名称的问题\"><a href=\"#Update-Database-无法将“Update-Database”项识别为-cmdlet、函数、脚本文件或可运行程序的名称的问题\" class=\"headerlink\" title=\"Update-Database : 无法将“Update-Database”项识别为 cmdlet、函数、脚本文件或可运行程序的名称的问题\"></a>Update-Database : 无法将“Update-Database”项识别为 cmdlet、函数、脚本文件或可运行程序的名称的问题</h3><p>原因：<br>没有引用EntityFramework命令<br>解决：<br>在程序包管理器控制台执行如下命令:</p>\n<h2 id=\"Import-Module-项目路径-packages-EntityFramework-6-1-3（EF版本）-tools-EntityFramework-psd1\"><a href=\"#Import-Module-项目路径-packages-EntityFramework-6-1-3（EF版本）-tools-EntityFramework-psd1\" class=\"headerlink\" title=\"Import-Module 项目路径\\packages\\EntityFramework.6.1.3（EF版本）\\tools\\EntityFramework.psd1\"></a>Import-Module 项目路径\\packages\\EntityFramework.6.1.3（EF版本）\\tools\\EntityFramework.psd1</h2>","site":{"data":{}},"excerpt":"<h2 id=\"语法学习\"><a href=\"#语法学习\" class=\"headerlink\" title=\"语法学习\"></a>语法学习</h2><p><a href=\"https://www.cnblogs.com/li-peng/p/3441729.html\" target=\"_blank\" rel=\"noopener\">用linqPad帮助你快速学习LINQ</a></p>\n<h3 id=\"GroupBy\"><a href=\"#GroupBy\" class=\"headerlink\" title=\"GroupBy\"></a>GroupBy</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var re = db.InvoiceDetail.WhereDynamic(Request.Form).GroupBy(a =&gt; new &#123; a.IvdMatCode, a.IvdMatName &#125;).Select(a =&gt; new</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    IvdMatCode = a.Key.IvdMatCode,</span><br><span class=\"line\">    IvdMatName = a.Key.IvdMatName,</span><br><span class=\"line\">    num = a.Sum(x =&gt; x.IvdScanNum)</span><br><span class=\"line\">&#125;).ToList();</span><br></pre></td></tr></table></figure>","more":"<hr>\n<h2 id=\"知识收集\"><a href=\"#知识收集\" class=\"headerlink\" title=\"知识收集\"></a>知识收集</h2><h3 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h3><p>打开迁移：<code>Enable-Migrations</code><br>增加迁移的节点：<code>Add-Migration PaperTest</code></p>\n<h2 id=\"将修改升级到数据库-Update-Database\"><a href=\"#将修改升级到数据库-Update-Database\" class=\"headerlink\" title=\"将修改升级到数据库:Update-Database\"></a>将修改升级到数据库:<code>Update-Database</code></h2><h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"Update-Database-无法将“Update-Database”项识别为-cmdlet、函数、脚本文件或可运行程序的名称的问题\"><a href=\"#Update-Database-无法将“Update-Database”项识别为-cmdlet、函数、脚本文件或可运行程序的名称的问题\" class=\"headerlink\" title=\"Update-Database : 无法将“Update-Database”项识别为 cmdlet、函数、脚本文件或可运行程序的名称的问题\"></a>Update-Database : 无法将“Update-Database”项识别为 cmdlet、函数、脚本文件或可运行程序的名称的问题</h3><p>原因：<br>没有引用EntityFramework命令<br>解决：<br>在程序包管理器控制台执行如下命令:</p>\n<h2 id=\"Import-Module-项目路径-packages-EntityFramework-6-1-3（EF版本）-tools-EntityFramework-psd1\"><a href=\"#Import-Module-项目路径-packages-EntityFramework-6-1-3（EF版本）-tools-EntityFramework-psd1\" class=\"headerlink\" title=\"Import-Module 项目路径\\packages\\EntityFramework.6.1.3（EF版本）\\tools\\EntityFramework.psd1\"></a>Import-Module 项目路径\\packages\\EntityFramework.6.1.3（EF版本）\\tools\\EntityFramework.psd1</h2>"},{"title":"Git基本操作","abbrlink":"235b27fb","date":"2018-02-02T05:53:23.000Z","_content":"Git是目前世界上最先进的分布式版本控制系统\n## 基础配置\n#### 设置全局用户名和邮箱\n```\ngit config --global user.name 'langwenda' \ngit config --global user.email 'langwdalan@gmail.com'\n```\n<!-- more -->\n#### 当前项目设置用户名和邮箱\n```\ngit config user.name 'langwenda' \ngit config user.email 'langwdalan@gmail.com'\n```\n#### 创建SSH Key\n```\nssh-keygen -t rsa -C \"langwdalan@gmail.com\"\n```\n密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。\n\n同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。\n\n输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘>用户>自己的用户名>.ssh]目录下已经生成好了。\n\n## 从GitHub 已有的项目上clone\n```\ngit clone ***\n```\n\n## 从本地新建版本库并提交至GItHub\n1.初始化项目\n```\ngit init\n```\n2.建立远程关联\n```\ngit remote add origin *****\n```\n## 基本命令\n1. git add\n\t* git add 命令可将该文件添加到缓存\n\t* dit add . 添加所有文件\n\n1. git commit\n\t* git commit -m '这里是提交的注释'\n\t* git commit -a 无需add 直接提交\n\n1. git push\n\t* git push [alias]  [branch]\n\n1. git status 查看状态\n\n1. git diff\n\t* 尚未缓存的改动：**git diff**\n\t* 查看已缓存的改动： **git diff --cached**\n\t* 查看已缓存的与未缓存的所有改动：**git diff HEAD**\n\t* 显示摘要而非整个 diff：**git diff --stat**\n\n1. git branch\n\t* git branch (branchname) 创建分支\n\t* git checkout (branchname) 切换分支\n\t* git branch -d (branchname) 删除分支\n\t* git merge 合并分支\n\n1. git log 查看历史\n\t* git log  --oneline 简洁模式\n\n1. git tag 查看标签\n\t* git tag -a v1.0 打标签\n\t* git tag -a v0.9  85fc7e7 对指定提交的版本打标签\n\t* git tag -a <tagname>  -m \"w3cschool.cc标签\" 指定标签信息\n\t\t\n## 问题解决\n### 因为重置密码或密码错误导致操作失败\n现象：\n提示atal: Authentication failed for ....\n解决：进入windows 凭据管理删除凭据\n或\n执行`git config --system --unset credential.helper`\n\n## emoji 指南\n\nemoji                                   | emoji 代码                   | commit 说明\n:--------                               | :--------                    | :--------\n:tada: (庆祝)                           | `:tada:`                     | 初次提交\n:sparkles: (火花)                       | `:sparkles:`                 | 引入新功能\n:bookmark: (书签)                       | `:bookmark:`                 | 发行/版本标签\n:bug: (bug)                             | `:bug:`                      | 修复 bug\n:ambulance: (急救车)                    | `:ambulance:`                | 重要补丁\n:globe_with_meridians: (地球)           | `:globe_with_meridians:`     | 国际化与本地化\n:lipstick: (口红)                       | `:lipstick:`                 | 更新 UI 和样式文件\n:rotating_light: (警车灯)               | `:rotating_light:`           | 移除 linter 警告\n:wrench: (扳手)                         | `:wrench:`                   | 修改配置文件\n:heavy_plus_sign: (加号)                | `:heavy_plus_sign:`          | 增加一个依赖\n:heavy_minus_sign: (减号)               | `:heavy_minus_sign:`         | 减少一个依赖\n:arrow_up: (上升箭头)                   | `:arrow_up:`                 | 升级依赖\n:arrow_down: (下降箭头)                 | `:arrow_down:`               | 降级依赖\n:zap: (闪电)<br>:racehorse: (赛马)      | `:zap:`<br>`:racehorse:`      | 提升性能\n:chart_with_upwards_trend: (上升趋势图) | `:chart_with_upwards_trend:` | 添加分析或跟踪代码\n:rocket: (火箭)                         | `:rocket:`                   | 部署功能\n:white_check_mark: (白色复选框)         | `:white_check_mark:`         | 增加测试\n:memo: (备忘录)                         | `:memo:`                     | 撰写文档\n:hammer: (锤子)                         | `:hammer:`                   | 重大重构\n:art: (调色板)                          | `:art:`                      | 改进代码结构/代码格式\n:fire: (火焰)                           | `:fire:`                     | 移除代码或文件\n:pencil2: (铅笔)                        | `:pencil2:`                  | 修复 typo\n:construction: (施工)                   | `:construction:`               | 工作进行中\n:construction_worker: (工人)            | `:construction_worker:`      | 添加 CI 构建系统\n:green_heart: (绿心)                    | `:green_heart:`              | 修复 CI 构建问题\n:lock: (锁)                             | `:lock:`                     | 修复安全问题\n:whale: (鲸鱼)                          | `:whale:`                    | Docker 相关工作\n:apple: (苹果)                          | `:apple:`                    | 修复 macOS 下的问题\n:penguin: (企鹅)                        | `:penguin:`                  | 修复 Linux 下的问题\n:checkered_flag: (旗帜)                 | `:checked_flag:`             | 修复 Windows 下的问题\n\n## 美化 git bash\n[参考](http://blog.csdn.net/weixin_37272286/article/details/78016277)\nvi  .minttyrc\n\n```\nBoldAsFont=-1\nFont=YaHei Consolas Hybrid\nFontHeight=10\n\nForegroundColour=131,148,150\nBackgroundColour=0,43,54\nCursorColour=220,50,47\n\nBlack=7,54,66\nBoldBlack=0,43,54\nRed=220,50,47\nBoldRed=203,75,22\nGreen=133,153,0\nBoldGreen=88,110,117\nYellow=181,137,0\nBoldYellow=101,123,131\nBlue=38,139,210\nBoldBlue=131,148,150\nMagenta=211,54,130\nBoldMagenta=108,113,196\nCyan=42,161,152\nBoldCyan=147,161,161\nWhite=238,232,213\nBoldWhite=253,246,227\n```\n\n## git客户端推荐\n* [GitKraken](https://www.gitkraken.com/)\n* [Fork](https://git-fork.com/home)\n\n## 奇淫技巧\n以下内容转自[Git的奇技淫巧](https://github.com/521xueweihan/git-tips)\n### 目录\n* [展示帮助信息](#展示帮助信息)\n* [回到远程仓库的状态](#回到远程仓库的状态)\n* [重设第一个commit](#重设第一个-commit)\n* [展示工作区和暂存区的不同](#展示工作区和暂存区的不同)\n* [展示暂存区和最近版本的不同](#展示暂存区和最近版本的不同)\n* [展示暂存区、工作区和最近版本的不同](#展示暂存区工作区和最近版本的不同)\n* [快速切换分支上一个分支](#快速切换分支上一个分支)\n* [删除已经合并到 master 的分支](#删除已经合并到-master-的分支)\n* [展示本地分支关联远程仓库的情况](#展示本地分支关联远程仓库的情况)\n* [关联远程分支](#关联远程分支)\n* [列出所有远程分支](#列出所有远程分支)\n* [列出本地和远程分支](#列出本地和远程分支)\n* [创建并切换到本地分支](#创建并切换到本地分支)\n* [从远程分支中创建并切换到本地分支](#从远程分支中创建并切换到本地分支)\n* [删除本地分支](#删除本地分支)\n* [删除远程分支](#删除远程分支)\n* [重命名本地分支](#重命名本地分支)\n* [查看标签](#查看标签)\n* [查看标签详细信息](#查看标签详细信息)\n* [本地创建标签](#本地创建标签)\n* [推送标签到远程仓库](#推送标签到远程仓库)\n* [删除本地标签](#删除本地标签)\n* [删除远程标签](#删除远程标签)\n* [切回到某个标签](#切回到某个标签)\n* [放弃工作区的修改](#放弃工作区的修改)\n* [恢复删除的文件](#恢复删除的文件)\n* [以新增一个 commit 的方式还原某一个 commit 的修改](#以新增一个-commit-的方式还原某一个-commit-的修改)\n* [回到某个 commit 的状态，并删除后面的 commit](#回到某个-commit-的状态并删除后面的-commit)\n* [修改上一个 commit 的描述](#修改上一个-commit-的描述)\n* [查看 commit 历史](#查看-commit-历史)\n* [显示本地更新过 HEAD 的 git 命令记录](#显示本地更新过-head-的-git-命令记录)\n* [修改作者名](#修改作者名)\n* [修改远程仓库的 url](#修改远程仓库的-url)\n* [增加远程仓库](#增加远程仓库)\n* [列出所有远程仓库](#列出所有远程仓库)\n* [查看两个星期内的改动](#查看两个星期内的改动)\n* [把 A 分支的某一个 commit，放到 B 分支上](#把-A-分支的某一个-commit-放到-B-分支上)\n* [给 git 命令起别名](#给-git-命令起别名)\n* [存储当前的修改，但不用提交 commit](#存储当前的修改但不用提交-commit)\n* [保存当前状态，包括 untracked 的文件](#保存当前状态包括-untracked-的文件)\n* [展示所有 stashes](#展示所有-stashes)\n* [回到某个 stash 的状态](#回到某个-stash-的状态)\n* [回到最后一个 stash 的状态，并删除这个 stash](#回到最后一个-stash-的状态并删除这个-stash)\n* [删除所有的 stash](#删除所有的-stash)\n* [从 stash 中拿出某个文件的修改](#从-stash-中拿出某个文件的修改)\n* [展示所有 tracked 的文件](#展示所有-tracked-的文件)\n* [展示所有 untracked 的文件](#展示所有-untracked-的文件)\n* [展示所有忽略的文件](#展示所有忽略的文件)\n* [强制删除 untracked 的文件](#强制删除-untracked-的文件)\n* [强制删除 untracked 的目录](#强制删除-untracked-的目录)\n* [展示简化的 commit 历史](#展示简化的-commit-历史)\n* [查看某段代码是谁写的](#查看某段代码是谁写的)\n* [把某一个分支到导出成一个文件](#把某一个分支到导出成一个文件)\n* [从包中导入分支](#从包中导入分支)\n* [执行 rebase 之前自动 stash](#执行-rebase-之前自动-stash)\n* [从远程仓库根据 ID，拉下某一状态，到本地分支](#从远程仓库根据-ID-拉下某一状态-到本地分支)\n* [详细展示一行中的修改](#详细展示一行中的修改)\n* [清除 `.gitignore` 文件中记录的文件](#清除-gitignore-文件中记录的文件)\n* [展示所有 alias 和 configs](#展示所有-alias-和-configs)\n* [展示忽略的文件](#展示忽略的文件)\n* [commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit](#commit-历史中显示-Branch1-有的但是-Branch2-没有-commit)\n* [在 commit log 中显示 GPG 签名](#在-commit-log-中显示-GPG-签名)\n* [删除全局设置](#删除全局设置)\n* [新建并切换到新分支上，同时这个分支没有任何 commit](#新建并切换到新分支上同时这个分支没有任何-commit)\n* [展示任意分支某一文件的内容](#展示任意分支某一文件的内容)\n* [clone 下来指定的单一分支](#clone-下来指定的单一分支)\n* [忽略某个文件的改动](#忽略某个文件的改动)\n* [忽略文件的权限变化](#忽略文件的权限变化)\n* [以最后提交的顺序列出所有 Git 分支](#以最后提交的顺序列出所有-Git-分支)\n* [在 commit log 中查找相关内容](#在-commit-log-中查找相关内容)\n* [把暂存区的指定 file 放到工作区中](#把暂存区的指定-file-放到工作区中)\n* [强制推送](#强制推送)\n* [一图详解](#一图详解)\n* [联系我](#联系我)\n\n#### 展示帮助信息\n```sh\ngit help -g\n```\nThe command output as below:\n\n```\nThe common Git guides are:\n   attributes          Defining attributes per path\n   cli                 Git command-line interface and conventions\n   core-tutorial       A Git core tutorial for developers\n   cvs-migration       Git for CVS users\n   diffcore            Tweaking diff output\n   everyday            A useful minimum set of commands for Everyday Git\n   glossary            A Git Glossary\n   hooks               Hooks used by Git\n   ignore              Specifies intentionally untracked files to ignore\n   modules             Defining submodule properties\n   namespaces          Git namespaces\n   repository-layout    Git Repository Layout\n   revisions           Specifying revisions and ranges for Git\n   tutorial            A tutorial introduction to Git\n   tutorial-2          A tutorial introduction to Git: part two\n   workflows           An overview of recommended workflows with Git\n\n'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help <command>' or 'git help <concept>' to read about a specific subcommand or concept.\n```\n\n#### 回到远程仓库的状态\n\n抛弃本地所有的修改，回到远程仓库的状态。\n```sh\ngit fetch --all && git reset --hard origin/master\n```\n\n#### 重设第一个 commit\n\n也就是把所有的改动都重新放回工作区，并**清空所有的 commit**，这样就可以重新提交第一个 commit 了\n\n```sh\ngit update-ref -d HEAD\n```\n\n#### 展示工作区和暂存区的不同\n\n输出**工作区**和**暂存区**的 different (不同)。\n\n```sh\ngit diff\n```\n\n还可以展示本地仓库中任意两个 commit 之间的文件变动：\n```sh\ngit diff <commit-id> <commit-id>\n```\n\n#### 展示暂存区和最近版本的不同\n\n输出**暂存区**和本地最近的版本 (commit) 的 different (不同)。\n```sh\ngit diff --cached\n```\n\n#### 展示暂存区、工作区和最近版本的不同\n\n输出**工作区**、**暂存区** 和本地最近的版本 (commit) 的 different (不同)。\n\n```sh\ngit diff HEAD\n```\n\n#### 快速切换分支上一个分支\n\n```sh\ngit checkout -\n```\n\n#### 删除已经合并到 master 的分支\n\n```sh\ngit branch --merged master | grep -v '^\\*\\|  master' | xargs -n 1 git branch -d\n```\n\n#### 展示本地分支关联远程仓库的情况\n```sh\ngit branch -vv\n```\n\n#### 关联远程分支\n\n关联之后，`git branch -vv` 就可以展示关联的远程分支名了，同时推送到远程仓库直接：`git push`，不需要指定远程仓库了。\n```sh\ngit branch -u origin/mybranch\n```\n\n或者在 push 时加上 `-u` 参数\n```sh\ngit push origin/mybranch -u\n```\n\n#### 列出所有远程分支\n\n-r 参数相当于：remote\n```sh\ngit branch -r\n```\n\n#### 列出本地和远程分支\n\n-a 参数相当于：all\n```sh\ngit branch -a\n```\n\n#### 创建并切换到本地分支\n```sh\ngit checkout -b <branch-name>\n```\n\n#### 从远程分支中创建并切换到本地分支\n\n```sh\ngit checkout -b <branch-name> origin/<branch-name>\n```\n\n#### 删除本地分支\n\n```sh\ngit branch -d <local-branchname>\n```\n\n#### 删除远程分支\n\n```sh\ngit push origin --delete <remote-branchname>\n```\n\n或者\n\n```sh\ngit push origin :<remote-branchname>\n```\n\n#### 重命名本地分支\n\n```sh\ngit branch -m <new-branch-name>\n```\n\n#### 查看标签\n\n```sh\ngit tag\n```\n展示当前分支的最近的 tag\n\n```sh\ngit describe --tags --abbrev=0\n```\n\n#### 查看标签详细信息\n\n```sh\ngit tag -ln\n```\n\n#### 本地创建标签\n\n```sh\ngit tag <version-number>\n```\n\n默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：\n```sh\n$ git tag -a <version-number> -m \"v1.0 发布(描述)\" <commit-id>\n```\n\n#### 推送标签到远程仓库\n\n首先要保证本地创建好了标签才可以推送标签到远程仓库：\n\n```sh\ngit push origin <local-version-number>\n```\n\n一次性推送所有标签，同步到远程仓库：\n\n```sh\ngit push origin --tags\n```\n\n#### 删除本地标签\n\n```sh\ngit tag -d <tag-name>\n```\n\n#### 删除远程标签\n\n删除远程标签需要**先删除本地标签**，再执行下面的命令：\n\n```sh\ngit push origin :refs/tags/<tag-name>\n```\n\n#### 切回到某个标签\n\n一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：\n```sh\ngit checkout -b branch_name tag_name\n```\n\n#### 放弃工作区的修改\n```sh\ngit checkout <file-name>\n```\n\n放弃所有修改：\n```sh\ngit checkout .\n```\n\n#### 恢复删除的文件\n```sh\ngit rev-list -n 1 HEAD -- <file_path> #得到 deleting_commit\n\ngit checkout <deleting_commit>^ -- <file_path> #回到删除文件 deleting_commit 之前的状态\n```\n\n#### 以新增一个 commit 的方式还原某一个 commit 的修改\n\n```sh\ngit revert <commit-id>\n```\n\n#### 回到某个 commit 的状态，并删除后面的 commit\n\n和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit\n\n```sh\ngit reset <commit-id>  #默认就是-mixed参数。\n\ngit reset –mixed HEAD^  #回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。\n\ngit reset –soft HEAD~3  #回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  \n\ngit reset –hard <commit-id>  #彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容\n```\n\n#### 修改上一个 commit 的描述\n```sh\ngit commit --amend\n```\n\n#### 查看 commit 历史\n```sh\ngit log\n```\n\n#### 查看某段代码是谁写的\n\nblame 的意思为‘责怪’，你懂的。\n\n```sh\ngit blame <file-name>\n```\n\n#### 显示本地更新过 HEAD 的 git 命令记录\n\n每次更新了 HEAD 的 git 命令比如 commint、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。\n这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。\n\n```sh\ngit reflog\n```\n\n#### 修改作者名\n\n```sh\ngit commit --amend --author='Author Name <email@address.com>'\n```\n\n#### 修改远程仓库的 url\n\n```sh\ngit remote set-url origin <URL>\n```\n\n#### 增加远程仓库\n\n```sh\ngit remote add origin <remote-url>\n```\n\n#### 列出所有远程仓库\n\n```sh\ngit remote\n```\n\n#### 查看两个星期内的改动\n```sh\ngit whatchanged --since='2 weeks ago'\n```\n\n#### 把 A 分支的某一个 commit，放到 B 分支上\n\n这个过程需要 `cherry-pick` 命令，[参考](http://sg552.iteye.com/blog/1300713#bc2367928)\n\n```sh\ngit checkout <branch-name> && git cherry-pick <commit-id>\n```\n\n#### 给 git 命令起别名\n\n简化命令\n\n```sh\ngit config --global alias.<handle> <command>\n\n比如：git status 改成 git st，这样可以简化命令\n\ngit config --global alias.st status\n```\n\n#### 存储当前的修改，但不用提交 commit\n\n详解可以参考[廖雪峰老师的 git 教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000)\n```sh\ngit stash\n```\n\n#### 保存当前状态，包括 untracked 的文件\n\nuntracked 文件：新建的文件\n```sh\ngit stash -u\n```\n\n#### 展示所有 stashes\n```sh\ngit stash list\n```\n\n#### 回到某个 stash 的状态\n```sh\ngit stash apply <stash@{n}>\n```\n\n#### 回到最后一个 stash 的状态，并删除这个 stash\n\n```sh\ngit stash pop\n```\n\n#### 删除所有的 stash\n\n```sh\ngit stash clear\n```\n\n#### 从 stash 中拿出某个文件的修改\n```sh\ngit checkout <stash@{n}> -- <file-path>\n```\n\n#### 展示所有 tracked 的文件\n```sh\ngit ls-files -t\n```\n\n#### 展示所有 untracked 的文件\n```sh\ngit ls-files --others\n```\n\n#### 展示所有忽略的文件\n\n```sh\ngit ls-files --others -i --exclude-standard\n```\n\n#### 强制删除 untracked 的文件\n\n可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。`clean` 命令，**注意两点**：\n1. clean 后，删除的文件无法找回\n2. 不会影响 tracked 的文件的改动，只会删除 untracked 的文件\n\n```sh\ngit clean <file-name> -f\n```\n\n#### 强制删除 untracked 的目录\n\n可以用来删除新建的目录，**注意**:这个命令也可以用来删除 untracked 的文件。详情见上一条\n\n```sh\ngit clean <directory-name> -df\n```\n\n#### 展示简化的 commit 历史\n```sh\ngit log --pretty=oneline --graph --decorate --all\n```\n\n#### 把某一个分支到导出成一个文件\n```sh\ngit bundle create <file> <branch-name>\n```\n\n#### 从包中导入分支\n\n新建一个分支，分支内容就是上面 `git bundle create` 命令导出的内容\n\n```sh\ngit clone repo.bundle <repo-dir> -b <branch-name>\n```\n\n#### 执行 rebase 之前自动 stash\n\n```sh\ngit rebase --autostash\n```\n\n#### 从远程仓库根据 ID，拉下某一状态，到本地分支\n\n```sh\ngit fetch origin pull/<id>/head:<branch-name>\n```\n\n#### 详细展示一行中的修改\n\n```sh\ngit diff --word-diff\n```\n\n#### 清除 gitignore 文件中记录的文件\n\n```sh\ngit clean -X -f\n```\n\n#### 展示所有 alias 和 configs\n\n**注意：** config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config\n\n```sh\ngit config --local --list (当前目录)\ngit config --global --list (全局)\n```\n\n#### 展示忽略的文件\n```sh\ngit status --ignored\n```\n\n#### commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit\n```sh\ngit log Branch1 ^Branch2\n```\n\n#### 在 commit log 中显示 GPG 签名\n```sh\ngit log --show-signature\n```\n\n#### 删除全局设置\n\n```sh\ngit config --global --unset <entry-name>\n```\n\n#### 新建并切换到新分支上，同时这个分支没有任何 commit\n\n相当于保存修改，但是重写 commit 历史\n\n```sh\ngit checkout --orphan <branch-name>\n```\n\n#### 展示任意分支某一文件的内容\n\n```sh\ngit show <branch-name>:<file-name>\n```\n\n#### clone 下来指定的单一分支\n```sh\ngit clone -b <branch-name> --single-branch https://github.com/user/repo.git\n```\n\n#### 忽略某个文件的改动\n\n关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动\n\n```sh\ngit update-index --assume-unchanged path/to/file\n```\n\n恢复 track 指定文件的改动\n\n```sh\ngit update-index --no-assume-unchanged path/to/file\n```\n\n#### 忽略文件的权限变化\n\n不再将文件的权限变化视作改动\n\n```sh\ngit config core.fileMode false\n```\n\n#### 以最后提交的顺序列出所有 Git 分支\n\n最新的放在最上面\n\n```sh\ngit for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/\n```\n\n#### 在 commit log 中查找相关内容\n\n通过 grep 查找，given-text：所需要查找的字段\n\n\n```sh\ngit log --all --grep='<given-text>'\n```\n\n#### 把暂存区的指定 file 放到工作区中\n\n不添加参数，默认是 `-mixed`\n\n```sh\ngit reset <file-name>\n```\n\n#### 强制推送\n\n```sh\ngit push -f <remote-name> <branch-name>\n```\n\n**[⬆ 返回目录](#目录)**\n\n## 高级教程\n* [小蝌蚪传记：git时光穿梭机](https://github.com/airuikun/blog/issues/5)","source":"_posts/Git基本操作.md","raw":"---\ntitle: Git基本操作\ntags: git\ncategories: 教程\nabbrlink: 235b27fb\ndate: 2018-02-02 13:53:23\n---\nGit是目前世界上最先进的分布式版本控制系统\n## 基础配置\n#### 设置全局用户名和邮箱\n```\ngit config --global user.name 'langwenda' \ngit config --global user.email 'langwdalan@gmail.com'\n```\n<!-- more -->\n#### 当前项目设置用户名和邮箱\n```\ngit config user.name 'langwenda' \ngit config user.email 'langwdalan@gmail.com'\n```\n#### 创建SSH Key\n```\nssh-keygen -t rsa -C \"langwdalan@gmail.com\"\n```\n密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。\n\n同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。\n\n输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘>用户>自己的用户名>.ssh]目录下已经生成好了。\n\n## 从GitHub 已有的项目上clone\n```\ngit clone ***\n```\n\n## 从本地新建版本库并提交至GItHub\n1.初始化项目\n```\ngit init\n```\n2.建立远程关联\n```\ngit remote add origin *****\n```\n## 基本命令\n1. git add\n\t* git add 命令可将该文件添加到缓存\n\t* dit add . 添加所有文件\n\n1. git commit\n\t* git commit -m '这里是提交的注释'\n\t* git commit -a 无需add 直接提交\n\n1. git push\n\t* git push [alias]  [branch]\n\n1. git status 查看状态\n\n1. git diff\n\t* 尚未缓存的改动：**git diff**\n\t* 查看已缓存的改动： **git diff --cached**\n\t* 查看已缓存的与未缓存的所有改动：**git diff HEAD**\n\t* 显示摘要而非整个 diff：**git diff --stat**\n\n1. git branch\n\t* git branch (branchname) 创建分支\n\t* git checkout (branchname) 切换分支\n\t* git branch -d (branchname) 删除分支\n\t* git merge 合并分支\n\n1. git log 查看历史\n\t* git log  --oneline 简洁模式\n\n1. git tag 查看标签\n\t* git tag -a v1.0 打标签\n\t* git tag -a v0.9  85fc7e7 对指定提交的版本打标签\n\t* git tag -a <tagname>  -m \"w3cschool.cc标签\" 指定标签信息\n\t\t\n## 问题解决\n### 因为重置密码或密码错误导致操作失败\n现象：\n提示atal: Authentication failed for ....\n解决：进入windows 凭据管理删除凭据\n或\n执行`git config --system --unset credential.helper`\n\n## emoji 指南\n\nemoji                                   | emoji 代码                   | commit 说明\n:--------                               | :--------                    | :--------\n:tada: (庆祝)                           | `:tada:`                     | 初次提交\n:sparkles: (火花)                       | `:sparkles:`                 | 引入新功能\n:bookmark: (书签)                       | `:bookmark:`                 | 发行/版本标签\n:bug: (bug)                             | `:bug:`                      | 修复 bug\n:ambulance: (急救车)                    | `:ambulance:`                | 重要补丁\n:globe_with_meridians: (地球)           | `:globe_with_meridians:`     | 国际化与本地化\n:lipstick: (口红)                       | `:lipstick:`                 | 更新 UI 和样式文件\n:rotating_light: (警车灯)               | `:rotating_light:`           | 移除 linter 警告\n:wrench: (扳手)                         | `:wrench:`                   | 修改配置文件\n:heavy_plus_sign: (加号)                | `:heavy_plus_sign:`          | 增加一个依赖\n:heavy_minus_sign: (减号)               | `:heavy_minus_sign:`         | 减少一个依赖\n:arrow_up: (上升箭头)                   | `:arrow_up:`                 | 升级依赖\n:arrow_down: (下降箭头)                 | `:arrow_down:`               | 降级依赖\n:zap: (闪电)<br>:racehorse: (赛马)      | `:zap:`<br>`:racehorse:`      | 提升性能\n:chart_with_upwards_trend: (上升趋势图) | `:chart_with_upwards_trend:` | 添加分析或跟踪代码\n:rocket: (火箭)                         | `:rocket:`                   | 部署功能\n:white_check_mark: (白色复选框)         | `:white_check_mark:`         | 增加测试\n:memo: (备忘录)                         | `:memo:`                     | 撰写文档\n:hammer: (锤子)                         | `:hammer:`                   | 重大重构\n:art: (调色板)                          | `:art:`                      | 改进代码结构/代码格式\n:fire: (火焰)                           | `:fire:`                     | 移除代码或文件\n:pencil2: (铅笔)                        | `:pencil2:`                  | 修复 typo\n:construction: (施工)                   | `:construction:`               | 工作进行中\n:construction_worker: (工人)            | `:construction_worker:`      | 添加 CI 构建系统\n:green_heart: (绿心)                    | `:green_heart:`              | 修复 CI 构建问题\n:lock: (锁)                             | `:lock:`                     | 修复安全问题\n:whale: (鲸鱼)                          | `:whale:`                    | Docker 相关工作\n:apple: (苹果)                          | `:apple:`                    | 修复 macOS 下的问题\n:penguin: (企鹅)                        | `:penguin:`                  | 修复 Linux 下的问题\n:checkered_flag: (旗帜)                 | `:checked_flag:`             | 修复 Windows 下的问题\n\n## 美化 git bash\n[参考](http://blog.csdn.net/weixin_37272286/article/details/78016277)\nvi  .minttyrc\n\n```\nBoldAsFont=-1\nFont=YaHei Consolas Hybrid\nFontHeight=10\n\nForegroundColour=131,148,150\nBackgroundColour=0,43,54\nCursorColour=220,50,47\n\nBlack=7,54,66\nBoldBlack=0,43,54\nRed=220,50,47\nBoldRed=203,75,22\nGreen=133,153,0\nBoldGreen=88,110,117\nYellow=181,137,0\nBoldYellow=101,123,131\nBlue=38,139,210\nBoldBlue=131,148,150\nMagenta=211,54,130\nBoldMagenta=108,113,196\nCyan=42,161,152\nBoldCyan=147,161,161\nWhite=238,232,213\nBoldWhite=253,246,227\n```\n\n## git客户端推荐\n* [GitKraken](https://www.gitkraken.com/)\n* [Fork](https://git-fork.com/home)\n\n## 奇淫技巧\n以下内容转自[Git的奇技淫巧](https://github.com/521xueweihan/git-tips)\n### 目录\n* [展示帮助信息](#展示帮助信息)\n* [回到远程仓库的状态](#回到远程仓库的状态)\n* [重设第一个commit](#重设第一个-commit)\n* [展示工作区和暂存区的不同](#展示工作区和暂存区的不同)\n* [展示暂存区和最近版本的不同](#展示暂存区和最近版本的不同)\n* [展示暂存区、工作区和最近版本的不同](#展示暂存区工作区和最近版本的不同)\n* [快速切换分支上一个分支](#快速切换分支上一个分支)\n* [删除已经合并到 master 的分支](#删除已经合并到-master-的分支)\n* [展示本地分支关联远程仓库的情况](#展示本地分支关联远程仓库的情况)\n* [关联远程分支](#关联远程分支)\n* [列出所有远程分支](#列出所有远程分支)\n* [列出本地和远程分支](#列出本地和远程分支)\n* [创建并切换到本地分支](#创建并切换到本地分支)\n* [从远程分支中创建并切换到本地分支](#从远程分支中创建并切换到本地分支)\n* [删除本地分支](#删除本地分支)\n* [删除远程分支](#删除远程分支)\n* [重命名本地分支](#重命名本地分支)\n* [查看标签](#查看标签)\n* [查看标签详细信息](#查看标签详细信息)\n* [本地创建标签](#本地创建标签)\n* [推送标签到远程仓库](#推送标签到远程仓库)\n* [删除本地标签](#删除本地标签)\n* [删除远程标签](#删除远程标签)\n* [切回到某个标签](#切回到某个标签)\n* [放弃工作区的修改](#放弃工作区的修改)\n* [恢复删除的文件](#恢复删除的文件)\n* [以新增一个 commit 的方式还原某一个 commit 的修改](#以新增一个-commit-的方式还原某一个-commit-的修改)\n* [回到某个 commit 的状态，并删除后面的 commit](#回到某个-commit-的状态并删除后面的-commit)\n* [修改上一个 commit 的描述](#修改上一个-commit-的描述)\n* [查看 commit 历史](#查看-commit-历史)\n* [显示本地更新过 HEAD 的 git 命令记录](#显示本地更新过-head-的-git-命令记录)\n* [修改作者名](#修改作者名)\n* [修改远程仓库的 url](#修改远程仓库的-url)\n* [增加远程仓库](#增加远程仓库)\n* [列出所有远程仓库](#列出所有远程仓库)\n* [查看两个星期内的改动](#查看两个星期内的改动)\n* [把 A 分支的某一个 commit，放到 B 分支上](#把-A-分支的某一个-commit-放到-B-分支上)\n* [给 git 命令起别名](#给-git-命令起别名)\n* [存储当前的修改，但不用提交 commit](#存储当前的修改但不用提交-commit)\n* [保存当前状态，包括 untracked 的文件](#保存当前状态包括-untracked-的文件)\n* [展示所有 stashes](#展示所有-stashes)\n* [回到某个 stash 的状态](#回到某个-stash-的状态)\n* [回到最后一个 stash 的状态，并删除这个 stash](#回到最后一个-stash-的状态并删除这个-stash)\n* [删除所有的 stash](#删除所有的-stash)\n* [从 stash 中拿出某个文件的修改](#从-stash-中拿出某个文件的修改)\n* [展示所有 tracked 的文件](#展示所有-tracked-的文件)\n* [展示所有 untracked 的文件](#展示所有-untracked-的文件)\n* [展示所有忽略的文件](#展示所有忽略的文件)\n* [强制删除 untracked 的文件](#强制删除-untracked-的文件)\n* [强制删除 untracked 的目录](#强制删除-untracked-的目录)\n* [展示简化的 commit 历史](#展示简化的-commit-历史)\n* [查看某段代码是谁写的](#查看某段代码是谁写的)\n* [把某一个分支到导出成一个文件](#把某一个分支到导出成一个文件)\n* [从包中导入分支](#从包中导入分支)\n* [执行 rebase 之前自动 stash](#执行-rebase-之前自动-stash)\n* [从远程仓库根据 ID，拉下某一状态，到本地分支](#从远程仓库根据-ID-拉下某一状态-到本地分支)\n* [详细展示一行中的修改](#详细展示一行中的修改)\n* [清除 `.gitignore` 文件中记录的文件](#清除-gitignore-文件中记录的文件)\n* [展示所有 alias 和 configs](#展示所有-alias-和-configs)\n* [展示忽略的文件](#展示忽略的文件)\n* [commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit](#commit-历史中显示-Branch1-有的但是-Branch2-没有-commit)\n* [在 commit log 中显示 GPG 签名](#在-commit-log-中显示-GPG-签名)\n* [删除全局设置](#删除全局设置)\n* [新建并切换到新分支上，同时这个分支没有任何 commit](#新建并切换到新分支上同时这个分支没有任何-commit)\n* [展示任意分支某一文件的内容](#展示任意分支某一文件的内容)\n* [clone 下来指定的单一分支](#clone-下来指定的单一分支)\n* [忽略某个文件的改动](#忽略某个文件的改动)\n* [忽略文件的权限变化](#忽略文件的权限变化)\n* [以最后提交的顺序列出所有 Git 分支](#以最后提交的顺序列出所有-Git-分支)\n* [在 commit log 中查找相关内容](#在-commit-log-中查找相关内容)\n* [把暂存区的指定 file 放到工作区中](#把暂存区的指定-file-放到工作区中)\n* [强制推送](#强制推送)\n* [一图详解](#一图详解)\n* [联系我](#联系我)\n\n#### 展示帮助信息\n```sh\ngit help -g\n```\nThe command output as below:\n\n```\nThe common Git guides are:\n   attributes          Defining attributes per path\n   cli                 Git command-line interface and conventions\n   core-tutorial       A Git core tutorial for developers\n   cvs-migration       Git for CVS users\n   diffcore            Tweaking diff output\n   everyday            A useful minimum set of commands for Everyday Git\n   glossary            A Git Glossary\n   hooks               Hooks used by Git\n   ignore              Specifies intentionally untracked files to ignore\n   modules             Defining submodule properties\n   namespaces          Git namespaces\n   repository-layout    Git Repository Layout\n   revisions           Specifying revisions and ranges for Git\n   tutorial            A tutorial introduction to Git\n   tutorial-2          A tutorial introduction to Git: part two\n   workflows           An overview of recommended workflows with Git\n\n'git help -a' and 'git help -g' list available subcommands and some concept guides. See 'git help <command>' or 'git help <concept>' to read about a specific subcommand or concept.\n```\n\n#### 回到远程仓库的状态\n\n抛弃本地所有的修改，回到远程仓库的状态。\n```sh\ngit fetch --all && git reset --hard origin/master\n```\n\n#### 重设第一个 commit\n\n也就是把所有的改动都重新放回工作区，并**清空所有的 commit**，这样就可以重新提交第一个 commit 了\n\n```sh\ngit update-ref -d HEAD\n```\n\n#### 展示工作区和暂存区的不同\n\n输出**工作区**和**暂存区**的 different (不同)。\n\n```sh\ngit diff\n```\n\n还可以展示本地仓库中任意两个 commit 之间的文件变动：\n```sh\ngit diff <commit-id> <commit-id>\n```\n\n#### 展示暂存区和最近版本的不同\n\n输出**暂存区**和本地最近的版本 (commit) 的 different (不同)。\n```sh\ngit diff --cached\n```\n\n#### 展示暂存区、工作区和最近版本的不同\n\n输出**工作区**、**暂存区** 和本地最近的版本 (commit) 的 different (不同)。\n\n```sh\ngit diff HEAD\n```\n\n#### 快速切换分支上一个分支\n\n```sh\ngit checkout -\n```\n\n#### 删除已经合并到 master 的分支\n\n```sh\ngit branch --merged master | grep -v '^\\*\\|  master' | xargs -n 1 git branch -d\n```\n\n#### 展示本地分支关联远程仓库的情况\n```sh\ngit branch -vv\n```\n\n#### 关联远程分支\n\n关联之后，`git branch -vv` 就可以展示关联的远程分支名了，同时推送到远程仓库直接：`git push`，不需要指定远程仓库了。\n```sh\ngit branch -u origin/mybranch\n```\n\n或者在 push 时加上 `-u` 参数\n```sh\ngit push origin/mybranch -u\n```\n\n#### 列出所有远程分支\n\n-r 参数相当于：remote\n```sh\ngit branch -r\n```\n\n#### 列出本地和远程分支\n\n-a 参数相当于：all\n```sh\ngit branch -a\n```\n\n#### 创建并切换到本地分支\n```sh\ngit checkout -b <branch-name>\n```\n\n#### 从远程分支中创建并切换到本地分支\n\n```sh\ngit checkout -b <branch-name> origin/<branch-name>\n```\n\n#### 删除本地分支\n\n```sh\ngit branch -d <local-branchname>\n```\n\n#### 删除远程分支\n\n```sh\ngit push origin --delete <remote-branchname>\n```\n\n或者\n\n```sh\ngit push origin :<remote-branchname>\n```\n\n#### 重命名本地分支\n\n```sh\ngit branch -m <new-branch-name>\n```\n\n#### 查看标签\n\n```sh\ngit tag\n```\n展示当前分支的最近的 tag\n\n```sh\ngit describe --tags --abbrev=0\n```\n\n#### 查看标签详细信息\n\n```sh\ngit tag -ln\n```\n\n#### 本地创建标签\n\n```sh\ngit tag <version-number>\n```\n\n默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：\n```sh\n$ git tag -a <version-number> -m \"v1.0 发布(描述)\" <commit-id>\n```\n\n#### 推送标签到远程仓库\n\n首先要保证本地创建好了标签才可以推送标签到远程仓库：\n\n```sh\ngit push origin <local-version-number>\n```\n\n一次性推送所有标签，同步到远程仓库：\n\n```sh\ngit push origin --tags\n```\n\n#### 删除本地标签\n\n```sh\ngit tag -d <tag-name>\n```\n\n#### 删除远程标签\n\n删除远程标签需要**先删除本地标签**，再执行下面的命令：\n\n```sh\ngit push origin :refs/tags/<tag-name>\n```\n\n#### 切回到某个标签\n\n一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：\n```sh\ngit checkout -b branch_name tag_name\n```\n\n#### 放弃工作区的修改\n```sh\ngit checkout <file-name>\n```\n\n放弃所有修改：\n```sh\ngit checkout .\n```\n\n#### 恢复删除的文件\n```sh\ngit rev-list -n 1 HEAD -- <file_path> #得到 deleting_commit\n\ngit checkout <deleting_commit>^ -- <file_path> #回到删除文件 deleting_commit 之前的状态\n```\n\n#### 以新增一个 commit 的方式还原某一个 commit 的修改\n\n```sh\ngit revert <commit-id>\n```\n\n#### 回到某个 commit 的状态，并删除后面的 commit\n\n和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit\n\n```sh\ngit reset <commit-id>  #默认就是-mixed参数。\n\ngit reset –mixed HEAD^  #回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。\n\ngit reset –soft HEAD~3  #回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  \n\ngit reset –hard <commit-id>  #彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容\n```\n\n#### 修改上一个 commit 的描述\n```sh\ngit commit --amend\n```\n\n#### 查看 commit 历史\n```sh\ngit log\n```\n\n#### 查看某段代码是谁写的\n\nblame 的意思为‘责怪’，你懂的。\n\n```sh\ngit blame <file-name>\n```\n\n#### 显示本地更新过 HEAD 的 git 命令记录\n\n每次更新了 HEAD 的 git 命令比如 commint、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。\n这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。\n\n```sh\ngit reflog\n```\n\n#### 修改作者名\n\n```sh\ngit commit --amend --author='Author Name <email@address.com>'\n```\n\n#### 修改远程仓库的 url\n\n```sh\ngit remote set-url origin <URL>\n```\n\n#### 增加远程仓库\n\n```sh\ngit remote add origin <remote-url>\n```\n\n#### 列出所有远程仓库\n\n```sh\ngit remote\n```\n\n#### 查看两个星期内的改动\n```sh\ngit whatchanged --since='2 weeks ago'\n```\n\n#### 把 A 分支的某一个 commit，放到 B 分支上\n\n这个过程需要 `cherry-pick` 命令，[参考](http://sg552.iteye.com/blog/1300713#bc2367928)\n\n```sh\ngit checkout <branch-name> && git cherry-pick <commit-id>\n```\n\n#### 给 git 命令起别名\n\n简化命令\n\n```sh\ngit config --global alias.<handle> <command>\n\n比如：git status 改成 git st，这样可以简化命令\n\ngit config --global alias.st status\n```\n\n#### 存储当前的修改，但不用提交 commit\n\n详解可以参考[廖雪峰老师的 git 教程](http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000)\n```sh\ngit stash\n```\n\n#### 保存当前状态，包括 untracked 的文件\n\nuntracked 文件：新建的文件\n```sh\ngit stash -u\n```\n\n#### 展示所有 stashes\n```sh\ngit stash list\n```\n\n#### 回到某个 stash 的状态\n```sh\ngit stash apply <stash@{n}>\n```\n\n#### 回到最后一个 stash 的状态，并删除这个 stash\n\n```sh\ngit stash pop\n```\n\n#### 删除所有的 stash\n\n```sh\ngit stash clear\n```\n\n#### 从 stash 中拿出某个文件的修改\n```sh\ngit checkout <stash@{n}> -- <file-path>\n```\n\n#### 展示所有 tracked 的文件\n```sh\ngit ls-files -t\n```\n\n#### 展示所有 untracked 的文件\n```sh\ngit ls-files --others\n```\n\n#### 展示所有忽略的文件\n\n```sh\ngit ls-files --others -i --exclude-standard\n```\n\n#### 强制删除 untracked 的文件\n\n可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。`clean` 命令，**注意两点**：\n1. clean 后，删除的文件无法找回\n2. 不会影响 tracked 的文件的改动，只会删除 untracked 的文件\n\n```sh\ngit clean <file-name> -f\n```\n\n#### 强制删除 untracked 的目录\n\n可以用来删除新建的目录，**注意**:这个命令也可以用来删除 untracked 的文件。详情见上一条\n\n```sh\ngit clean <directory-name> -df\n```\n\n#### 展示简化的 commit 历史\n```sh\ngit log --pretty=oneline --graph --decorate --all\n```\n\n#### 把某一个分支到导出成一个文件\n```sh\ngit bundle create <file> <branch-name>\n```\n\n#### 从包中导入分支\n\n新建一个分支，分支内容就是上面 `git bundle create` 命令导出的内容\n\n```sh\ngit clone repo.bundle <repo-dir> -b <branch-name>\n```\n\n#### 执行 rebase 之前自动 stash\n\n```sh\ngit rebase --autostash\n```\n\n#### 从远程仓库根据 ID，拉下某一状态，到本地分支\n\n```sh\ngit fetch origin pull/<id>/head:<branch-name>\n```\n\n#### 详细展示一行中的修改\n\n```sh\ngit diff --word-diff\n```\n\n#### 清除 gitignore 文件中记录的文件\n\n```sh\ngit clean -X -f\n```\n\n#### 展示所有 alias 和 configs\n\n**注意：** config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config\n\n```sh\ngit config --local --list (当前目录)\ngit config --global --list (全局)\n```\n\n#### 展示忽略的文件\n```sh\ngit status --ignored\n```\n\n#### commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit\n```sh\ngit log Branch1 ^Branch2\n```\n\n#### 在 commit log 中显示 GPG 签名\n```sh\ngit log --show-signature\n```\n\n#### 删除全局设置\n\n```sh\ngit config --global --unset <entry-name>\n```\n\n#### 新建并切换到新分支上，同时这个分支没有任何 commit\n\n相当于保存修改，但是重写 commit 历史\n\n```sh\ngit checkout --orphan <branch-name>\n```\n\n#### 展示任意分支某一文件的内容\n\n```sh\ngit show <branch-name>:<file-name>\n```\n\n#### clone 下来指定的单一分支\n```sh\ngit clone -b <branch-name> --single-branch https://github.com/user/repo.git\n```\n\n#### 忽略某个文件的改动\n\n关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动\n\n```sh\ngit update-index --assume-unchanged path/to/file\n```\n\n恢复 track 指定文件的改动\n\n```sh\ngit update-index --no-assume-unchanged path/to/file\n```\n\n#### 忽略文件的权限变化\n\n不再将文件的权限变化视作改动\n\n```sh\ngit config core.fileMode false\n```\n\n#### 以最后提交的顺序列出所有 Git 分支\n\n最新的放在最上面\n\n```sh\ngit for-each-ref --sort=-committerdate --format='%(refname:short)' refs/heads/\n```\n\n#### 在 commit log 中查找相关内容\n\n通过 grep 查找，given-text：所需要查找的字段\n\n\n```sh\ngit log --all --grep='<given-text>'\n```\n\n#### 把暂存区的指定 file 放到工作区中\n\n不添加参数，默认是 `-mixed`\n\n```sh\ngit reset <file-name>\n```\n\n#### 强制推送\n\n```sh\ngit push -f <remote-name> <branch-name>\n```\n\n**[⬆ 返回目录](#目录)**\n\n## 高级教程\n* [小蝌蚪传记：git时光穿梭机](https://github.com/airuikun/blog/issues/5)","slug":"Git基本操作","published":1,"updated":"2020-07-15T06:30:48.976Z","_id":"ckbkly7mg000x1q2dyxj9ikml","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Git是目前世界上最先进的分布式版本控制系统</p>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><h4 id=\"设置全局用户名和邮箱\"><a href=\"#设置全局用户名和邮箱\" class=\"headerlink\" title=\"设置全局用户名和邮箱\"></a>设置全局用户名和邮箱</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &apos;langwenda&apos; </span><br><span class=\"line\">git config --global user.email &apos;langwdalan@gmail.com&apos;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h4 id=\"当前项目设置用户名和邮箱\"><a href=\"#当前项目设置用户名和邮箱\" class=\"headerlink\" title=\"当前项目设置用户名和邮箱\"></a>当前项目设置用户名和邮箱</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name &apos;langwenda&apos; </span><br><span class=\"line\">git config user.email &apos;langwdalan@gmail.com&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建SSH-Key\"><a href=\"#创建SSH-Key\" class=\"headerlink\" title=\"创建SSH Key\"></a>创建SSH Key</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;langwdalan@gmail.com&quot;</span><br></pre></td></tr></table></figure>\n<p>密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。</p>\n<p>同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。</p>\n<p>输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘&gt;用户&gt;自己的用户名&gt;.ssh]目录下已经生成好了。</p>\n<h2 id=\"从GitHub-已有的项目上clone\"><a href=\"#从GitHub-已有的项目上clone\" class=\"headerlink\" title=\"从GitHub 已有的项目上clone\"></a>从GitHub 已有的项目上clone</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ***</span><br></pre></td></tr></table></figure>\n<h2 id=\"从本地新建版本库并提交至GItHub\"><a href=\"#从本地新建版本库并提交至GItHub\" class=\"headerlink\" title=\"从本地新建版本库并提交至GItHub\"></a>从本地新建版本库并提交至GItHub</h2><p>1.初始化项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<p>2.建立远程关联<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin *****</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ol>\n<li><p>git add</p>\n<ul>\n<li>git add 命令可将该文件添加到缓存</li>\n<li>dit add . 添加所有文件</li>\n</ul>\n</li>\n<li><p>git commit</p>\n<ul>\n<li>git commit -m ‘这里是提交的注释’</li>\n<li>git commit -a 无需add 直接提交</li>\n</ul>\n</li>\n<li><p>git push</p>\n<ul>\n<li>git push [alias]  [branch]</li>\n</ul>\n</li>\n<li><p>git status 查看状态</p>\n</li>\n<li><p>git diff</p>\n<ul>\n<li>尚未缓存的改动：<strong>git diff</strong></li>\n<li>查看已缓存的改动： <strong>git diff –cached</strong></li>\n<li>查看已缓存的与未缓存的所有改动：<strong>git diff HEAD</strong></li>\n<li>显示摘要而非整个 diff：<strong>git diff –stat</strong></li>\n</ul>\n</li>\n<li><p>git branch</p>\n<ul>\n<li>git branch (branchname) 创建分支</li>\n<li>git checkout (branchname) 切换分支</li>\n<li>git branch -d (branchname) 删除分支</li>\n<li>git merge 合并分支</li>\n</ul>\n</li>\n<li><p>git log 查看历史</p>\n<ul>\n<li>git log  –oneline 简洁模式</li>\n</ul>\n</li>\n<li><p>git tag 查看标签</p>\n<ul>\n<li>git tag -a v1.0 打标签</li>\n<li>git tag -a v0.9  85fc7e7 对指定提交的版本打标签</li>\n<li>git tag -a <tagname>  -m “w3cschool.cc标签” 指定标签信息</tagname></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"因为重置密码或密码错误导致操作失败\"><a href=\"#因为重置密码或密码错误导致操作失败\" class=\"headerlink\" title=\"因为重置密码或密码错误导致操作失败\"></a>因为重置密码或密码错误导致操作失败</h3><p>现象：<br>提示atal: Authentication failed for ….<br>解决：进入windows 凭据管理删除凭据<br>或<br>执行<code>git config --system --unset credential.helper</code></p>\n<h2 id=\"emoji-指南\"><a href=\"#emoji-指南\" class=\"headerlink\" title=\"emoji 指南\"></a>emoji 指南</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">emoji</th>\n<th style=\"text-align:left\">emoji 代码</th>\n<th style=\"text-align:left\">commit 说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:tada: (庆祝)</td>\n<td style=\"text-align:left\"><code>:tada:</code></td>\n<td style=\"text-align:left\">初次提交</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:sparkles: (火花)</td>\n<td style=\"text-align:left\"><code>:sparkles:</code></td>\n<td style=\"text-align:left\">引入新功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:bookmark: (书签)</td>\n<td style=\"text-align:left\"><code>:bookmark:</code></td>\n<td style=\"text-align:left\">发行/版本标签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:bug: (bug)</td>\n<td style=\"text-align:left\"><code>:bug:</code></td>\n<td style=\"text-align:left\">修复 bug</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:ambulance: (急救车)</td>\n<td style=\"text-align:left\"><code>:ambulance:</code></td>\n<td style=\"text-align:left\">重要补丁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:globe_with_meridians: (地球)</td>\n<td style=\"text-align:left\"><code>:globe_with_meridians:</code></td>\n<td style=\"text-align:left\">国际化与本地化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:lipstick: (口红)</td>\n<td style=\"text-align:left\"><code>:lipstick:</code></td>\n<td style=\"text-align:left\">更新 UI 和样式文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:rotating_light: (警车灯)</td>\n<td style=\"text-align:left\"><code>:rotating_light:</code></td>\n<td style=\"text-align:left\">移除 linter 警告</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:wrench: (扳手)</td>\n<td style=\"text-align:left\"><code>:wrench:</code></td>\n<td style=\"text-align:left\">修改配置文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:heavy_plus_sign: (加号)</td>\n<td style=\"text-align:left\"><code>:heavy_plus_sign:</code></td>\n<td style=\"text-align:left\">增加一个依赖</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:heavy_minus_sign: (减号)</td>\n<td style=\"text-align:left\"><code>:heavy_minus_sign:</code></td>\n<td style=\"text-align:left\">减少一个依赖</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:arrow_up: (上升箭头)</td>\n<td style=\"text-align:left\"><code>:arrow_up:</code></td>\n<td style=\"text-align:left\">升级依赖</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:arrow_down: (下降箭头)</td>\n<td style=\"text-align:left\"><code>:arrow_down:</code></td>\n<td style=\"text-align:left\">降级依赖</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:zap: (闪电)<br>:racehorse: (赛马)</td>\n<td style=\"text-align:left\"><code>:zap:</code><br><code>:racehorse:</code></td>\n<td style=\"text-align:left\">提升性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:chart_with_upwards_trend: (上升趋势图)</td>\n<td style=\"text-align:left\"><code>:chart_with_upwards_trend:</code></td>\n<td style=\"text-align:left\">添加分析或跟踪代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:rocket: (火箭)</td>\n<td style=\"text-align:left\"><code>:rocket:</code></td>\n<td style=\"text-align:left\">部署功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:white_check_mark: (白色复选框)</td>\n<td style=\"text-align:left\"><code>:white_check_mark:</code></td>\n<td style=\"text-align:left\">增加测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:memo: (备忘录)</td>\n<td style=\"text-align:left\"><code>:memo:</code></td>\n<td style=\"text-align:left\">撰写文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:hammer: (锤子)</td>\n<td style=\"text-align:left\"><code>:hammer:</code></td>\n<td style=\"text-align:left\">重大重构</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:art: (调色板)</td>\n<td style=\"text-align:left\"><code>:art:</code></td>\n<td style=\"text-align:left\">改进代码结构/代码格式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:fire: (火焰)</td>\n<td style=\"text-align:left\"><code>:fire:</code></td>\n<td style=\"text-align:left\">移除代码或文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:pencil2: (铅笔)</td>\n<td style=\"text-align:left\"><code>:pencil2:</code></td>\n<td style=\"text-align:left\">修复 typo</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:construction: (施工)</td>\n<td style=\"text-align:left\"><code>:construction:</code></td>\n<td style=\"text-align:left\">工作进行中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:construction_worker: (工人)</td>\n<td style=\"text-align:left\"><code>:construction_worker:</code></td>\n<td style=\"text-align:left\">添加 CI 构建系统</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:green_heart: (绿心)</td>\n<td style=\"text-align:left\"><code>:green_heart:</code></td>\n<td style=\"text-align:left\">修复 CI 构建问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:lock: (锁)</td>\n<td style=\"text-align:left\"><code>:lock:</code></td>\n<td style=\"text-align:left\">修复安全问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:whale: (鲸鱼)</td>\n<td style=\"text-align:left\"><code>:whale:</code></td>\n<td style=\"text-align:left\">Docker 相关工作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:apple: (苹果)</td>\n<td style=\"text-align:left\"><code>:apple:</code></td>\n<td style=\"text-align:left\">修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:penguin: (企鹅)</td>\n<td style=\"text-align:left\"><code>:penguin:</code></td>\n<td style=\"text-align:left\">修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:checkered_flag: (旗帜)</td>\n<td style=\"text-align:left\"><code>:checked_flag:</code></td>\n<td style=\"text-align:left\">修复 Windows 下的问题</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"美化-git-bash\"><a href=\"#美化-git-bash\" class=\"headerlink\" title=\"美化 git bash\"></a>美化 git bash</h2><p><a href=\"http://blog.csdn.net/weixin_37272286/article/details/78016277\" target=\"_blank\" rel=\"noopener\">参考</a><br>vi  .minttyrc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BoldAsFont=-1</span><br><span class=\"line\">Font=YaHei Consolas Hybrid</span><br><span class=\"line\">FontHeight=10</span><br><span class=\"line\"></span><br><span class=\"line\">ForegroundColour=131,148,150</span><br><span class=\"line\">BackgroundColour=0,43,54</span><br><span class=\"line\">CursorColour=220,50,47</span><br><span class=\"line\"></span><br><span class=\"line\">Black=7,54,66</span><br><span class=\"line\">BoldBlack=0,43,54</span><br><span class=\"line\">Red=220,50,47</span><br><span class=\"line\">BoldRed=203,75,22</span><br><span class=\"line\">Green=133,153,0</span><br><span class=\"line\">BoldGreen=88,110,117</span><br><span class=\"line\">Yellow=181,137,0</span><br><span class=\"line\">BoldYellow=101,123,131</span><br><span class=\"line\">Blue=38,139,210</span><br><span class=\"line\">BoldBlue=131,148,150</span><br><span class=\"line\">Magenta=211,54,130</span><br><span class=\"line\">BoldMagenta=108,113,196</span><br><span class=\"line\">Cyan=42,161,152</span><br><span class=\"line\">BoldCyan=147,161,161</span><br><span class=\"line\">White=238,232,213</span><br><span class=\"line\">BoldWhite=253,246,227</span><br></pre></td></tr></table></figure>\n<h2 id=\"git客户端推荐\"><a href=\"#git客户端推荐\" class=\"headerlink\" title=\"git客户端推荐\"></a>git客户端推荐</h2><ul>\n<li><a href=\"https://www.gitkraken.com/\" target=\"_blank\" rel=\"noopener\">GitKraken</a></li>\n<li><a href=\"https://git-fork.com/home\" target=\"_blank\" rel=\"noopener\">Fork</a></li>\n</ul>\n<h2 id=\"奇淫技巧\"><a href=\"#奇淫技巧\" class=\"headerlink\" title=\"奇淫技巧\"></a>奇淫技巧</h2><p>以下内容转自<a href=\"https://github.com/521xueweihan/git-tips\" target=\"_blank\" rel=\"noopener\">Git的奇技淫巧</a></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"#展示帮助信息\">展示帮助信息</a></li>\n<li><a href=\"#回到远程仓库的状态\">回到远程仓库的状态</a></li>\n<li><a href=\"#重设第一个-commit\">重设第一个commit</a></li>\n<li><a href=\"#展示工作区和暂存区的不同\">展示工作区和暂存区的不同</a></li>\n<li><a href=\"#展示暂存区和最近版本的不同\">展示暂存区和最近版本的不同</a></li>\n<li><a href=\"#展示暂存区工作区和最近版本的不同\">展示暂存区、工作区和最近版本的不同</a></li>\n<li><a href=\"#快速切换分支上一个分支\">快速切换分支上一个分支</a></li>\n<li><a href=\"#删除已经合并到-master-的分支\">删除已经合并到 master 的分支</a></li>\n<li><a href=\"#展示本地分支关联远程仓库的情况\">展示本地分支关联远程仓库的情况</a></li>\n<li><a href=\"#关联远程分支\">关联远程分支</a></li>\n<li><a href=\"#列出所有远程分支\">列出所有远程分支</a></li>\n<li><a href=\"#列出本地和远程分支\">列出本地和远程分支</a></li>\n<li><a href=\"#创建并切换到本地分支\">创建并切换到本地分支</a></li>\n<li><a href=\"#从远程分支中创建并切换到本地分支\">从远程分支中创建并切换到本地分支</a></li>\n<li><a href=\"#删除本地分支\">删除本地分支</a></li>\n<li><a href=\"#删除远程分支\">删除远程分支</a></li>\n<li><a href=\"#重命名本地分支\">重命名本地分支</a></li>\n<li><a href=\"#查看标签\">查看标签</a></li>\n<li><a href=\"#查看标签详细信息\">查看标签详细信息</a></li>\n<li><a href=\"#本地创建标签\">本地创建标签</a></li>\n<li><a href=\"#推送标签到远程仓库\">推送标签到远程仓库</a></li>\n<li><a href=\"#删除本地标签\">删除本地标签</a></li>\n<li><a href=\"#删除远程标签\">删除远程标签</a></li>\n<li><a href=\"#切回到某个标签\">切回到某个标签</a></li>\n<li><a href=\"#放弃工作区的修改\">放弃工作区的修改</a></li>\n<li><a href=\"#恢复删除的文件\">恢复删除的文件</a></li>\n<li><a href=\"#以新增一个-commit-的方式还原某一个-commit-的修改\">以新增一个 commit 的方式还原某一个 commit 的修改</a></li>\n<li><a href=\"#回到某个-commit-的状态并删除后面的-commit\">回到某个 commit 的状态，并删除后面的 commit</a></li>\n<li><a href=\"#修改上一个-commit-的描述\">修改上一个 commit 的描述</a></li>\n<li><a href=\"#查看-commit-历史\">查看 commit 历史</a></li>\n<li><a href=\"#显示本地更新过-head-的-git-命令记录\">显示本地更新过 HEAD 的 git 命令记录</a></li>\n<li><a href=\"#修改作者名\">修改作者名</a></li>\n<li><a href=\"#修改远程仓库的-url\">修改远程仓库的 url</a></li>\n<li><a href=\"#增加远程仓库\">增加远程仓库</a></li>\n<li><a href=\"#列出所有远程仓库\">列出所有远程仓库</a></li>\n<li><a href=\"#查看两个星期内的改动\">查看两个星期内的改动</a></li>\n<li><a href=\"#把-A-分支的某一个-commit-放到-B-分支上\">把 A 分支的某一个 commit，放到 B 分支上</a></li>\n<li><a href=\"#给-git-命令起别名\">给 git 命令起别名</a></li>\n<li><a href=\"#存储当前的修改但不用提交-commit\">存储当前的修改，但不用提交 commit</a></li>\n<li><a href=\"#保存当前状态包括-untracked-的文件\">保存当前状态，包括 untracked 的文件</a></li>\n<li><a href=\"#展示所有-stashes\">展示所有 stashes</a></li>\n<li><a href=\"#回到某个-stash-的状态\">回到某个 stash 的状态</a></li>\n<li><a href=\"#回到最后一个-stash-的状态并删除这个-stash\">回到最后一个 stash 的状态，并删除这个 stash</a></li>\n<li><a href=\"#删除所有的-stash\">删除所有的 stash</a></li>\n<li><a href=\"#从-stash-中拿出某个文件的修改\">从 stash 中拿出某个文件的修改</a></li>\n<li><a href=\"#展示所有-tracked-的文件\">展示所有 tracked 的文件</a></li>\n<li><a href=\"#展示所有-untracked-的文件\">展示所有 untracked 的文件</a></li>\n<li><a href=\"#展示所有忽略的文件\">展示所有忽略的文件</a></li>\n<li><a href=\"#强制删除-untracked-的文件\">强制删除 untracked 的文件</a></li>\n<li><a href=\"#强制删除-untracked-的目录\">强制删除 untracked 的目录</a></li>\n<li><a href=\"#展示简化的-commit-历史\">展示简化的 commit 历史</a></li>\n<li><a href=\"#查看某段代码是谁写的\">查看某段代码是谁写的</a></li>\n<li><a href=\"#把某一个分支到导出成一个文件\">把某一个分支到导出成一个文件</a></li>\n<li><a href=\"#从包中导入分支\">从包中导入分支</a></li>\n<li><a href=\"#执行-rebase-之前自动-stash\">执行 rebase 之前自动 stash</a></li>\n<li><a href=\"#从远程仓库根据-ID-拉下某一状态-到本地分支\">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li>\n<li><a href=\"#详细展示一行中的修改\">详细展示一行中的修改</a></li>\n<li><a href=\"#清除-gitignore-文件中记录的文件\">清除 <code>.gitignore</code> 文件中记录的文件</a></li>\n<li><a href=\"#展示所有-alias-和-configs\">展示所有 alias 和 configs</a></li>\n<li><a href=\"#展示忽略的文件\">展示忽略的文件</a></li>\n<li><a href=\"#commit-历史中显示-Branch1-有的但是-Branch2-没有-commit\">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li>\n<li><a href=\"#在-commit-log-中显示-GPG-签名\">在 commit log 中显示 GPG 签名</a></li>\n<li><a href=\"#删除全局设置\">删除全局设置</a></li>\n<li><a href=\"#新建并切换到新分支上同时这个分支没有任何-commit\">新建并切换到新分支上，同时这个分支没有任何 commit</a></li>\n<li><a href=\"#展示任意分支某一文件的内容\">展示任意分支某一文件的内容</a></li>\n<li><a href=\"#clone-下来指定的单一分支\">clone 下来指定的单一分支</a></li>\n<li><a href=\"#忽略某个文件的改动\">忽略某个文件的改动</a></li>\n<li><a href=\"#忽略文件的权限变化\">忽略文件的权限变化</a></li>\n<li><a href=\"#以最后提交的顺序列出所有-Git-分支\">以最后提交的顺序列出所有 Git 分支</a></li>\n<li><a href=\"#在-commit-log-中查找相关内容\">在 commit log 中查找相关内容</a></li>\n<li><a href=\"#把暂存区的指定-file-放到工作区中\">把暂存区的指定 file 放到工作区中</a></li>\n<li><a href=\"#强制推送\">强制推送</a></li>\n<li><a href=\"#一图详解\">一图详解</a></li>\n<li><a href=\"#联系我\">联系我</a></li>\n</ul>\n<h4 id=\"展示帮助信息\"><a href=\"#展示帮助信息\" class=\"headerlink\" title=\"展示帮助信息\"></a>展示帮助信息</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">help</span> -g</span><br></pre></td></tr></table></figure>\n<p>The command output as below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The common Git guides are:</span><br><span class=\"line\">   attributes          Defining attributes per path</span><br><span class=\"line\">   cli                 Git command-line interface and conventions</span><br><span class=\"line\">   core-tutorial       A Git core tutorial for developers</span><br><span class=\"line\">   cvs-migration       Git for CVS users</span><br><span class=\"line\">   diffcore            Tweaking diff output</span><br><span class=\"line\">   everyday            A useful minimum set of commands for Everyday Git</span><br><span class=\"line\">   glossary            A Git Glossary</span><br><span class=\"line\">   hooks               Hooks used by Git</span><br><span class=\"line\">   ignore              Specifies intentionally untracked files to ignore</span><br><span class=\"line\">   modules             Defining submodule properties</span><br><span class=\"line\">   namespaces          Git namespaces</span><br><span class=\"line\">   repository-layout    Git Repository Layout</span><br><span class=\"line\">   revisions           Specifying revisions and ranges for Git</span><br><span class=\"line\">   tutorial            A tutorial introduction to Git</span><br><span class=\"line\">   tutorial-2          A tutorial introduction to Git: part two</span><br><span class=\"line\">   workflows           An overview of recommended workflows with Git</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;git help -a&apos; and &apos;git help -g&apos; list available subcommands and some concept guides. See &apos;git help &lt;command&gt;&apos; or &apos;git help &lt;concept&gt;&apos; to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>\n<h4 id=\"回到远程仓库的状态\"><a href=\"#回到远程仓库的状态\" class=\"headerlink\" title=\"回到远程仓库的状态\"></a>回到远程仓库的状态</h4><p>抛弃本地所有的修改，回到远程仓库的状态。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"重设第一个-commit\"><a href=\"#重设第一个-commit\" class=\"headerlink\" title=\"重设第一个 commit\"></a>重设第一个 commit</h4><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-ref -d HEAD</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示工作区和暂存区的不同\"><a href=\"#展示工作区和暂存区的不同\" class=\"headerlink\" title=\"展示工作区和暂存区的不同\"></a>展示工作区和暂存区的不同</h4><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<p>还可以展示本地仓库中任意两个 commit 之间的文件变动：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"展示暂存区和最近版本的不同\"><a href=\"#展示暂存区和最近版本的不同\" class=\"headerlink\" title=\"展示暂存区和最近版本的不同\"></a>展示暂存区和最近版本的不同</h4><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"展示暂存区、工作区和最近版本的不同\"><a href=\"#展示暂存区、工作区和最近版本的不同\" class=\"headerlink\" title=\"展示暂存区、工作区和最近版本的不同\"></a>展示暂存区、工作区和最近版本的不同</h4><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD</span><br></pre></td></tr></table></figure>\n<h4 id=\"快速切换分支上一个分支\"><a href=\"#快速切换分支上一个分支\" class=\"headerlink\" title=\"快速切换分支上一个分支\"></a>快速切换分支上一个分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除已经合并到-master-的分支\"><a href=\"#删除已经合并到-master-的分支\" class=\"headerlink\" title=\"删除已经合并到 master 的分支\"></a>删除已经合并到 master 的分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --merged master | grep -v <span class=\"string\">'^\\*\\|  master'</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示本地分支关联远程仓库的情况\"><a href=\"#展示本地分支关联远程仓库的情况\" class=\"headerlink\" title=\"展示本地分支关联远程仓库的情况\"></a>展示本地分支关联远程仓库的情况</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<h4 id=\"关联远程分支\"><a href=\"#关联远程分支\" class=\"headerlink\" title=\"关联远程分支\"></a>关联远程分支</h4><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure></p>\n<p>或者在 push 时加上 <code>-u</code> 参数<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin/mybranch -u</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"列出所有远程分支\"><a href=\"#列出所有远程分支\" class=\"headerlink\" title=\"列出所有远程分支\"></a>列出所有远程分支</h4><p>-r 参数相当于：remote<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"列出本地和远程分支\"><a href=\"#列出本地和远程分支\" class=\"headerlink\" title=\"列出本地和远程分支\"></a>列出本地和远程分支</h4><p>-a 参数相当于：all<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建并切换到本地分支\"><a href=\"#创建并切换到本地分支\" class=\"headerlink\" title=\"创建并切换到本地分支\"></a>创建并切换到本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"从远程分支中创建并切换到本地分支\"><a href=\"#从远程分支中创建并切换到本地分支\" class=\"headerlink\" title=\"从远程分支中创建并切换到本地分支\"></a>从远程分支中创建并切换到本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;<span class=\"built_in\">local</span>-branchname&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"重命名本地分支\"><a href=\"#重命名本地分支\" class=\"headerlink\" title=\"重命名本地分支\"></a>重命名本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n<p>展示当前分支的最近的 tag</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看标签详细信息\"><a href=\"#查看标签详细信息\" class=\"headerlink\" title=\"查看标签详细信息\"></a>查看标签详细信息</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -ln</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地创建标签\"><a href=\"#本地创建标签\" class=\"headerlink\" title=\"本地创建标签\"></a>本地创建标签</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure>\n<p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a &lt;version-number&gt; -m <span class=\"string\">\"v1.0 发布(描述)\"</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"推送标签到远程仓库\"><a href=\"#推送标签到远程仓库\" class=\"headerlink\" title=\"推送标签到远程仓库\"></a>推送标签到远程仓库</h4><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;<span class=\"built_in\">local</span>-version-number&gt;</span><br></pre></td></tr></table></figure>\n<p>一次性推送所有标签，同步到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除本地标签\"><a href=\"#删除本地标签\" class=\"headerlink\" title=\"删除本地标签\"></a>删除本地标签</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h4><p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/&lt;tag-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"切回到某个标签\"><a href=\"#切回到某个标签\" class=\"headerlink\" title=\"切回到某个标签\"></a>切回到某个标签</h4><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"放弃工作区的修改\"><a href=\"#放弃工作区的修改\" class=\"headerlink\" title=\"放弃工作区的修改\"></a>放弃工作区的修改</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<p>放弃所有修改：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"恢复删除的文件\"><a href=\"#恢复删除的文件\" class=\"headerlink\" title=\"恢复删除的文件\"></a>恢复删除的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class=\"comment\">#得到 deleting_commit</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class=\"comment\">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"以新增一个-commit-的方式还原某一个-commit-的修改\"><a href=\"#以新增一个-commit-的方式还原某一个-commit-的修改\" class=\"headerlink\" title=\"以新增一个 commit 的方式还原某一个 commit 的修改\"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"回到某个-commit-的状态，并删除后面的-commit\"><a href=\"#回到某个-commit-的状态，并删除后面的-commit\" class=\"headerlink\" title=\"回到某个 commit 的状态，并删除后面的 commit\"></a>回到某个 commit 的状态，并删除后面的 commit</h4><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;commit-id&gt;  <span class=\"comment\">#默认就是-mixed参数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –mixed HEAD^  <span class=\"comment\">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –soft HEAD~3  <span class=\"comment\">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –hard &lt;commit-id&gt;  <span class=\"comment\">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改上一个-commit-的描述\"><a href=\"#修改上一个-commit-的描述\" class=\"headerlink\" title=\"修改上一个 commit 的描述\"></a>修改上一个 commit 的描述</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看-commit-历史\"><a href=\"#查看-commit-历史\" class=\"headerlink\" title=\"查看 commit 历史\"></a>查看 commit 历史</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"查看某段代码是谁写的\"><a href=\"#查看某段代码是谁写的\" class=\"headerlink\" title=\"查看某段代码是谁写的\"></a>查看某段代码是谁写的</h4><p>blame 的意思为‘责怪’，你懂的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"显示本地更新过-HEAD-的-git-命令记录\"><a href=\"#显示本地更新过-HEAD-的-git-命令记录\" class=\"headerlink\" title=\"显示本地更新过 HEAD 的 git 命令记录\"></a>显示本地更新过 HEAD 的 git 命令记录</h4><p>每次更新了 HEAD 的 git 命令比如 commint、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改作者名\"><a href=\"#修改作者名\" class=\"headerlink\" title=\"修改作者名\"></a>修改作者名</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend --author=<span class=\"string\">'Author Name &lt;email@address.com&gt;'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改远程仓库的-url\"><a href=\"#修改远程仓库的-url\" class=\"headerlink\" title=\"修改远程仓库的 url\"></a>修改远程仓库的 url</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加远程仓库\"><a href=\"#增加远程仓库\" class=\"headerlink\" title=\"增加远程仓库\"></a>增加远程仓库</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"列出所有远程仓库\"><a href=\"#列出所有远程仓库\" class=\"headerlink\" title=\"列出所有远程仓库\"></a>列出所有远程仓库</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看两个星期内的改动\"><a href=\"#查看两个星期内的改动\" class=\"headerlink\" title=\"查看两个星期内的改动\"></a>查看两个星期内的改动</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git whatchanged --since=<span class=\"string\">'2 weeks ago'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"把-A-分支的某一个-commit，放到-B-分支上\"><a href=\"#把-A-分支的某一个-commit，放到-B-分支上\" class=\"headerlink\" title=\"把 A 分支的某一个 commit，放到 B 分支上\"></a>把 A 分支的某一个 commit，放到 B 分支上</h4><p>这个过程需要 <code>cherry-pick</code> 命令，<a href=\"http://sg552.iteye.com/blog/1300713#bc2367928\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"给-git-命令起别名\"><a href=\"#给-git-命令起别名\" class=\"headerlink\" title=\"给 git 命令起别名\"></a>给 git 命令起别名</h4><p>简化命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global <span class=\"built_in\">alias</span>.&lt;handle&gt; &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">比如：git status 改成 git st，这样可以简化命令</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<h4 id=\"存储当前的修改，但不用提交-commit\"><a href=\"#存储当前的修改，但不用提交-commit\" class=\"headerlink\" title=\"存储当前的修改，但不用提交 commit\"></a>存储当前的修改，但不用提交 commit</h4><p>详解可以参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的 git 教程</a><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"保存当前状态，包括-untracked-的文件\"><a href=\"#保存当前状态，包括-untracked-的文件\" class=\"headerlink\" title=\"保存当前状态，包括 untracked 的文件\"></a>保存当前状态，包括 untracked 的文件</h4><p>untracked 文件：新建的文件<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash -u</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"展示所有-stashes\"><a href=\"#展示所有-stashes\" class=\"headerlink\" title=\"展示所有 stashes\"></a>展示所有 stashes</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure>\n<h4 id=\"回到某个-stash-的状态\"><a href=\"#回到某个-stash-的状态\" class=\"headerlink\" title=\"回到某个 stash 的状态\"></a>回到某个 stash 的状态</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"回到最后一个-stash-的状态，并删除这个-stash\"><a href=\"#回到最后一个-stash-的状态，并删除这个-stash\" class=\"headerlink\" title=\"回到最后一个 stash 的状态，并删除这个 stash\"></a>回到最后一个 stash 的状态，并删除这个 stash</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除所有的-stash\"><a href=\"#删除所有的-stash\" class=\"headerlink\" title=\"删除所有的 stash\"></a>删除所有的 stash</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash clear</span><br></pre></td></tr></table></figure>\n<h4 id=\"从-stash-中拿出某个文件的修改\"><a href=\"#从-stash-中拿出某个文件的修改\" class=\"headerlink\" title=\"从 stash 中拿出某个文件的修改\"></a>从 stash 中拿出某个文件的修改</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示所有-tracked-的文件\"><a href=\"#展示所有-tracked-的文件\" class=\"headerlink\" title=\"展示所有 tracked 的文件\"></a>展示所有 tracked 的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files -t</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示所有-untracked-的文件\"><a href=\"#展示所有-untracked-的文件\" class=\"headerlink\" title=\"展示所有 untracked 的文件\"></a>展示所有 untracked 的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示所有忽略的文件\"><a href=\"#展示所有忽略的文件\" class=\"headerlink\" title=\"展示所有忽略的文件\"></a>展示所有忽略的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>\n<h4 id=\"强制删除-untracked-的文件\"><a href=\"#强制删除-untracked-的文件\" class=\"headerlink\" title=\"强制删除 untracked 的文件\"></a>强制删除 untracked 的文件</h4><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p>\n<ol>\n<li>clean 后，删除的文件无法找回</li>\n<li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure>\n<h4 id=\"强制删除-untracked-的目录\"><a href=\"#强制删除-untracked-的目录\" class=\"headerlink\" title=\"强制删除 untracked 的目录\"></a>强制删除 untracked 的目录</h4><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean &lt;directory-name&gt; -df</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示简化的-commit-历史\"><a href=\"#展示简化的-commit-历史\" class=\"headerlink\" title=\"展示简化的 commit 历史\"></a>展示简化的 commit 历史</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"把某一个分支到导出成一个文件\"><a href=\"#把某一个分支到导出成一个文件\" class=\"headerlink\" title=\"把某一个分支到导出成一个文件\"></a>把某一个分支到导出成一个文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"从包中导入分支\"><a href=\"#从包中导入分支\" class=\"headerlink\" title=\"从包中导入分支\"></a>从包中导入分支</h4><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行-rebase-之前自动-stash\"><a href=\"#执行-rebase-之前自动-stash\" class=\"headerlink\" title=\"执行 rebase 之前自动 stash\"></a>执行 rebase 之前自动 stash</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --autostash</span><br></pre></td></tr></table></figure>\n<h4 id=\"从远程仓库根据-ID，拉下某一状态，到本地分支\"><a href=\"#从远程仓库根据-ID，拉下某一状态，到本地分支\" class=\"headerlink\" title=\"从远程仓库根据 ID，拉下某一状态，到本地分支\"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"详细展示一行中的修改\"><a href=\"#详细展示一行中的修改\" class=\"headerlink\" title=\"详细展示一行中的修改\"></a>详细展示一行中的修改</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --word-diff</span><br></pre></td></tr></table></figure>\n<h4 id=\"清除-gitignore-文件中记录的文件\"><a href=\"#清除-gitignore-文件中记录的文件\" class=\"headerlink\" title=\"清除 gitignore 文件中记录的文件\"></a>清除 gitignore 文件中记录的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -X -f</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示所有-alias-和-configs\"><a href=\"#展示所有-alias-和-configs\" class=\"headerlink\" title=\"展示所有 alias 和 configs\"></a>展示所有 alias 和 configs</h4><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">local</span> --list (当前目录)</span><br><span class=\"line\">git config --global --list (全局)</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示忽略的文件\"><a href=\"#展示忽略的文件\" class=\"headerlink\" title=\"展示忽略的文件\"></a>展示忽略的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status --ignored</span><br></pre></td></tr></table></figure>\n<h4 id=\"commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit\"><a href=\"#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit\" class=\"headerlink\" title=\"commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit\"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure>\n<h4 id=\"在-commit-log-中显示-GPG-签名\"><a href=\"#在-commit-log-中显示-GPG-签名\" class=\"headerlink\" title=\"在 commit log 中显示 GPG 签名\"></a>在 commit log 中显示 GPG 签名</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --show-signature</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除全局设置\"><a href=\"#删除全局设置\" class=\"headerlink\" title=\"删除全局设置\"></a>删除全局设置</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建并切换到新分支上，同时这个分支没有任何-commit\"><a href=\"#新建并切换到新分支上，同时这个分支没有任何-commit\" class=\"headerlink\" title=\"新建并切换到新分支上，同时这个分支没有任何 commit\"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h4><p>相当于保存修改，但是重写 commit 历史</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示任意分支某一文件的内容\"><a href=\"#展示任意分支某一文件的内容\" class=\"headerlink\" title=\"展示任意分支某一文件的内容\"></a>展示任意分支某一文件的内容</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clone-下来指定的单一分支\"><a href=\"#clone-下来指定的单一分支\" class=\"headerlink\" title=\"clone 下来指定的单一分支\"></a>clone 下来指定的单一分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略某个文件的改动\"><a href=\"#忽略某个文件的改动\" class=\"headerlink\" title=\"忽略某个文件的改动\"></a>忽略某个文件的改动</h4><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>\n<p>恢复 track 指定文件的改动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略文件的权限变化\"><a href=\"#忽略文件的权限变化\" class=\"headerlink\" title=\"忽略文件的权限变化\"></a>忽略文件的权限变化</h4><p>不再将文件的权限变化视作改动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.fileMode <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"以最后提交的顺序列出所有-Git-分支\"><a href=\"#以最后提交的顺序列出所有-Git-分支\" class=\"headerlink\" title=\"以最后提交的顺序列出所有 Git 分支\"></a>以最后提交的顺序列出所有 Git 分支</h4><p>最新的放在最上面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">for</span>-each-ref --sort=-committerdate --format=<span class=\"string\">'%(refname:short)'</span> refs/heads/</span><br></pre></td></tr></table></figure>\n<h4 id=\"在-commit-log-中查找相关内容\"><a href=\"#在-commit-log-中查找相关内容\" class=\"headerlink\" title=\"在 commit log 中查找相关内容\"></a>在 commit log 中查找相关内容</h4><p>通过 grep 查找，given-text：所需要查找的字段</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --all --grep=<span class=\"string\">'&lt;given-text&gt;'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"把暂存区的指定-file-放到工作区中\"><a href=\"#把暂存区的指定-file-放到工作区中\" class=\"headerlink\" title=\"把暂存区的指定 file 放到工作区中\"></a>把暂存区的指定 file 放到工作区中</h4><p>不添加参数，默认是 <code>-mixed</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"强制推送\"><a href=\"#强制推送\" class=\"headerlink\" title=\"强制推送\"></a>强制推送</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 返回目录</a></strong></p>\n<h2 id=\"高级教程\"><a href=\"#高级教程\" class=\"headerlink\" title=\"高级教程\"></a>高级教程</h2><ul>\n<li><a href=\"https://github.com/airuikun/blog/issues/5\" target=\"_blank\" rel=\"noopener\">小蝌蚪传记：git时光穿梭机</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>Git是目前世界上最先进的分布式版本控制系统</p>\n<h2 id=\"基础配置\"><a href=\"#基础配置\" class=\"headerlink\" title=\"基础配置\"></a>基础配置</h2><h4 id=\"设置全局用户名和邮箱\"><a href=\"#设置全局用户名和邮箱\" class=\"headerlink\" title=\"设置全局用户名和邮箱\"></a>设置全局用户名和邮箱</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &apos;langwenda&apos; </span><br><span class=\"line\">git config --global user.email &apos;langwdalan@gmail.com&apos;</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"当前项目设置用户名和邮箱\"><a href=\"#当前项目设置用户名和邮箱\" class=\"headerlink\" title=\"当前项目设置用户名和邮箱\"></a>当前项目设置用户名和邮箱</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config user.name &apos;langwenda&apos; </span><br><span class=\"line\">git config user.email &apos;langwdalan@gmail.com&apos;</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建SSH-Key\"><a href=\"#创建SSH-Key\" class=\"headerlink\" title=\"创建SSH Key\"></a>创建SSH Key</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;langwdalan@gmail.com&quot;</span><br></pre></td></tr></table></figure>\n<p>密钥类型可以用 -t 选项指定。如果没有指定则默认生成用于SSH-2的RSA密钥。这里使用的是rsa。</p>\n<p>同时在密钥中有一个注释字段，用-C来指定所指定的注释，可以方便用户标识这个密钥，指出密钥的用途或其他有用的信息。所以在这里输入自己的邮箱或者其他都行。</p>\n<p>输入完毕后程序同时要求输入一个密语字符串(passphrase)，空表示没有密语。接着会让输入2次口令(password)，空表示没有口令。3次回车即可完成当前步骤，此时[c盘&gt;用户&gt;自己的用户名&gt;.ssh]目录下已经生成好了。</p>\n<h2 id=\"从GitHub-已有的项目上clone\"><a href=\"#从GitHub-已有的项目上clone\" class=\"headerlink\" title=\"从GitHub 已有的项目上clone\"></a>从GitHub 已有的项目上clone</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone ***</span><br></pre></td></tr></table></figure>\n<h2 id=\"从本地新建版本库并提交至GItHub\"><a href=\"#从本地新建版本库并提交至GItHub\" class=\"headerlink\" title=\"从本地新建版本库并提交至GItHub\"></a>从本地新建版本库并提交至GItHub</h2><p>1.初始化项目<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure></p>\n<p>2.建立远程关联<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin *****</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ol>\n<li><p>git add</p>\n<ul>\n<li>git add 命令可将该文件添加到缓存</li>\n<li>dit add . 添加所有文件</li>\n</ul>\n</li>\n<li><p>git commit</p>\n<ul>\n<li>git commit -m ‘这里是提交的注释’</li>\n<li>git commit -a 无需add 直接提交</li>\n</ul>\n</li>\n<li><p>git push</p>\n<ul>\n<li>git push [alias]  [branch]</li>\n</ul>\n</li>\n<li><p>git status 查看状态</p>\n</li>\n<li><p>git diff</p>\n<ul>\n<li>尚未缓存的改动：<strong>git diff</strong></li>\n<li>查看已缓存的改动： <strong>git diff –cached</strong></li>\n<li>查看已缓存的与未缓存的所有改动：<strong>git diff HEAD</strong></li>\n<li>显示摘要而非整个 diff：<strong>git diff –stat</strong></li>\n</ul>\n</li>\n<li><p>git branch</p>\n<ul>\n<li>git branch (branchname) 创建分支</li>\n<li>git checkout (branchname) 切换分支</li>\n<li>git branch -d (branchname) 删除分支</li>\n<li>git merge 合并分支</li>\n</ul>\n</li>\n<li><p>git log 查看历史</p>\n<ul>\n<li>git log  –oneline 简洁模式</li>\n</ul>\n</li>\n<li><p>git tag 查看标签</p>\n<ul>\n<li>git tag -a v1.0 打标签</li>\n<li>git tag -a v0.9  85fc7e7 对指定提交的版本打标签</li>\n<li>git tag -a <tagname>  -m “w3cschool.cc标签” 指定标签信息</tagname></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"因为重置密码或密码错误导致操作失败\"><a href=\"#因为重置密码或密码错误导致操作失败\" class=\"headerlink\" title=\"因为重置密码或密码错误导致操作失败\"></a>因为重置密码或密码错误导致操作失败</h3><p>现象：<br>提示atal: Authentication failed for ….<br>解决：进入windows 凭据管理删除凭据<br>或<br>执行<code>git config --system --unset credential.helper</code></p>\n<h2 id=\"emoji-指南\"><a href=\"#emoji-指南\" class=\"headerlink\" title=\"emoji 指南\"></a>emoji 指南</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">emoji</th>\n<th style=\"text-align:left\">emoji 代码</th>\n<th style=\"text-align:left\">commit 说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">:tada: (庆祝)</td>\n<td style=\"text-align:left\"><code>:tada:</code></td>\n<td style=\"text-align:left\">初次提交</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:sparkles: (火花)</td>\n<td style=\"text-align:left\"><code>:sparkles:</code></td>\n<td style=\"text-align:left\">引入新功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:bookmark: (书签)</td>\n<td style=\"text-align:left\"><code>:bookmark:</code></td>\n<td style=\"text-align:left\">发行/版本标签</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:bug: (bug)</td>\n<td style=\"text-align:left\"><code>:bug:</code></td>\n<td style=\"text-align:left\">修复 bug</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:ambulance: (急救车)</td>\n<td style=\"text-align:left\"><code>:ambulance:</code></td>\n<td style=\"text-align:left\">重要补丁</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:globe_with_meridians: (地球)</td>\n<td style=\"text-align:left\"><code>:globe_with_meridians:</code></td>\n<td style=\"text-align:left\">国际化与本地化</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:lipstick: (口红)</td>\n<td style=\"text-align:left\"><code>:lipstick:</code></td>\n<td style=\"text-align:left\">更新 UI 和样式文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:rotating_light: (警车灯)</td>\n<td style=\"text-align:left\"><code>:rotating_light:</code></td>\n<td style=\"text-align:left\">移除 linter 警告</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:wrench: (扳手)</td>\n<td style=\"text-align:left\"><code>:wrench:</code></td>\n<td style=\"text-align:left\">修改配置文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:heavy_plus_sign: (加号)</td>\n<td style=\"text-align:left\"><code>:heavy_plus_sign:</code></td>\n<td style=\"text-align:left\">增加一个依赖</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:heavy_minus_sign: (减号)</td>\n<td style=\"text-align:left\"><code>:heavy_minus_sign:</code></td>\n<td style=\"text-align:left\">减少一个依赖</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:arrow_up: (上升箭头)</td>\n<td style=\"text-align:left\"><code>:arrow_up:</code></td>\n<td style=\"text-align:left\">升级依赖</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:arrow_down: (下降箭头)</td>\n<td style=\"text-align:left\"><code>:arrow_down:</code></td>\n<td style=\"text-align:left\">降级依赖</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:zap: (闪电)<br>:racehorse: (赛马)</td>\n<td style=\"text-align:left\"><code>:zap:</code><br><code>:racehorse:</code></td>\n<td style=\"text-align:left\">提升性能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:chart_with_upwards_trend: (上升趋势图)</td>\n<td style=\"text-align:left\"><code>:chart_with_upwards_trend:</code></td>\n<td style=\"text-align:left\">添加分析或跟踪代码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:rocket: (火箭)</td>\n<td style=\"text-align:left\"><code>:rocket:</code></td>\n<td style=\"text-align:left\">部署功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:white_check_mark: (白色复选框)</td>\n<td style=\"text-align:left\"><code>:white_check_mark:</code></td>\n<td style=\"text-align:left\">增加测试</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:memo: (备忘录)</td>\n<td style=\"text-align:left\"><code>:memo:</code></td>\n<td style=\"text-align:left\">撰写文档</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:hammer: (锤子)</td>\n<td style=\"text-align:left\"><code>:hammer:</code></td>\n<td style=\"text-align:left\">重大重构</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:art: (调色板)</td>\n<td style=\"text-align:left\"><code>:art:</code></td>\n<td style=\"text-align:left\">改进代码结构/代码格式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:fire: (火焰)</td>\n<td style=\"text-align:left\"><code>:fire:</code></td>\n<td style=\"text-align:left\">移除代码或文件</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:pencil2: (铅笔)</td>\n<td style=\"text-align:left\"><code>:pencil2:</code></td>\n<td style=\"text-align:left\">修复 typo</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:construction: (施工)</td>\n<td style=\"text-align:left\"><code>:construction:</code></td>\n<td style=\"text-align:left\">工作进行中</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:construction_worker: (工人)</td>\n<td style=\"text-align:left\"><code>:construction_worker:</code></td>\n<td style=\"text-align:left\">添加 CI 构建系统</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:green_heart: (绿心)</td>\n<td style=\"text-align:left\"><code>:green_heart:</code></td>\n<td style=\"text-align:left\">修复 CI 构建问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:lock: (锁)</td>\n<td style=\"text-align:left\"><code>:lock:</code></td>\n<td style=\"text-align:left\">修复安全问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:whale: (鲸鱼)</td>\n<td style=\"text-align:left\"><code>:whale:</code></td>\n<td style=\"text-align:left\">Docker 相关工作</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:apple: (苹果)</td>\n<td style=\"text-align:left\"><code>:apple:</code></td>\n<td style=\"text-align:left\">修复 macOS 下的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:penguin: (企鹅)</td>\n<td style=\"text-align:left\"><code>:penguin:</code></td>\n<td style=\"text-align:left\">修复 Linux 下的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">:checkered_flag: (旗帜)</td>\n<td style=\"text-align:left\"><code>:checked_flag:</code></td>\n<td style=\"text-align:left\">修复 Windows 下的问题</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"美化-git-bash\"><a href=\"#美化-git-bash\" class=\"headerlink\" title=\"美化 git bash\"></a>美化 git bash</h2><p><a href=\"http://blog.csdn.net/weixin_37272286/article/details/78016277\" target=\"_blank\" rel=\"noopener\">参考</a><br>vi  .minttyrc</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BoldAsFont=-1</span><br><span class=\"line\">Font=YaHei Consolas Hybrid</span><br><span class=\"line\">FontHeight=10</span><br><span class=\"line\"></span><br><span class=\"line\">ForegroundColour=131,148,150</span><br><span class=\"line\">BackgroundColour=0,43,54</span><br><span class=\"line\">CursorColour=220,50,47</span><br><span class=\"line\"></span><br><span class=\"line\">Black=7,54,66</span><br><span class=\"line\">BoldBlack=0,43,54</span><br><span class=\"line\">Red=220,50,47</span><br><span class=\"line\">BoldRed=203,75,22</span><br><span class=\"line\">Green=133,153,0</span><br><span class=\"line\">BoldGreen=88,110,117</span><br><span class=\"line\">Yellow=181,137,0</span><br><span class=\"line\">BoldYellow=101,123,131</span><br><span class=\"line\">Blue=38,139,210</span><br><span class=\"line\">BoldBlue=131,148,150</span><br><span class=\"line\">Magenta=211,54,130</span><br><span class=\"line\">BoldMagenta=108,113,196</span><br><span class=\"line\">Cyan=42,161,152</span><br><span class=\"line\">BoldCyan=147,161,161</span><br><span class=\"line\">White=238,232,213</span><br><span class=\"line\">BoldWhite=253,246,227</span><br></pre></td></tr></table></figure>\n<h2 id=\"git客户端推荐\"><a href=\"#git客户端推荐\" class=\"headerlink\" title=\"git客户端推荐\"></a>git客户端推荐</h2><ul>\n<li><a href=\"https://www.gitkraken.com/\" target=\"_blank\" rel=\"noopener\">GitKraken</a></li>\n<li><a href=\"https://git-fork.com/home\" target=\"_blank\" rel=\"noopener\">Fork</a></li>\n</ul>\n<h2 id=\"奇淫技巧\"><a href=\"#奇淫技巧\" class=\"headerlink\" title=\"奇淫技巧\"></a>奇淫技巧</h2><p>以下内容转自<a href=\"https://github.com/521xueweihan/git-tips\" target=\"_blank\" rel=\"noopener\">Git的奇技淫巧</a></p>\n<h3 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h3><ul>\n<li><a href=\"#展示帮助信息\">展示帮助信息</a></li>\n<li><a href=\"#回到远程仓库的状态\">回到远程仓库的状态</a></li>\n<li><a href=\"#重设第一个-commit\">重设第一个commit</a></li>\n<li><a href=\"#展示工作区和暂存区的不同\">展示工作区和暂存区的不同</a></li>\n<li><a href=\"#展示暂存区和最近版本的不同\">展示暂存区和最近版本的不同</a></li>\n<li><a href=\"#展示暂存区工作区和最近版本的不同\">展示暂存区、工作区和最近版本的不同</a></li>\n<li><a href=\"#快速切换分支上一个分支\">快速切换分支上一个分支</a></li>\n<li><a href=\"#删除已经合并到-master-的分支\">删除已经合并到 master 的分支</a></li>\n<li><a href=\"#展示本地分支关联远程仓库的情况\">展示本地分支关联远程仓库的情况</a></li>\n<li><a href=\"#关联远程分支\">关联远程分支</a></li>\n<li><a href=\"#列出所有远程分支\">列出所有远程分支</a></li>\n<li><a href=\"#列出本地和远程分支\">列出本地和远程分支</a></li>\n<li><a href=\"#创建并切换到本地分支\">创建并切换到本地分支</a></li>\n<li><a href=\"#从远程分支中创建并切换到本地分支\">从远程分支中创建并切换到本地分支</a></li>\n<li><a href=\"#删除本地分支\">删除本地分支</a></li>\n<li><a href=\"#删除远程分支\">删除远程分支</a></li>\n<li><a href=\"#重命名本地分支\">重命名本地分支</a></li>\n<li><a href=\"#查看标签\">查看标签</a></li>\n<li><a href=\"#查看标签详细信息\">查看标签详细信息</a></li>\n<li><a href=\"#本地创建标签\">本地创建标签</a></li>\n<li><a href=\"#推送标签到远程仓库\">推送标签到远程仓库</a></li>\n<li><a href=\"#删除本地标签\">删除本地标签</a></li>\n<li><a href=\"#删除远程标签\">删除远程标签</a></li>\n<li><a href=\"#切回到某个标签\">切回到某个标签</a></li>\n<li><a href=\"#放弃工作区的修改\">放弃工作区的修改</a></li>\n<li><a href=\"#恢复删除的文件\">恢复删除的文件</a></li>\n<li><a href=\"#以新增一个-commit-的方式还原某一个-commit-的修改\">以新增一个 commit 的方式还原某一个 commit 的修改</a></li>\n<li><a href=\"#回到某个-commit-的状态并删除后面的-commit\">回到某个 commit 的状态，并删除后面的 commit</a></li>\n<li><a href=\"#修改上一个-commit-的描述\">修改上一个 commit 的描述</a></li>\n<li><a href=\"#查看-commit-历史\">查看 commit 历史</a></li>\n<li><a href=\"#显示本地更新过-head-的-git-命令记录\">显示本地更新过 HEAD 的 git 命令记录</a></li>\n<li><a href=\"#修改作者名\">修改作者名</a></li>\n<li><a href=\"#修改远程仓库的-url\">修改远程仓库的 url</a></li>\n<li><a href=\"#增加远程仓库\">增加远程仓库</a></li>\n<li><a href=\"#列出所有远程仓库\">列出所有远程仓库</a></li>\n<li><a href=\"#查看两个星期内的改动\">查看两个星期内的改动</a></li>\n<li><a href=\"#把-A-分支的某一个-commit-放到-B-分支上\">把 A 分支的某一个 commit，放到 B 分支上</a></li>\n<li><a href=\"#给-git-命令起别名\">给 git 命令起别名</a></li>\n<li><a href=\"#存储当前的修改但不用提交-commit\">存储当前的修改，但不用提交 commit</a></li>\n<li><a href=\"#保存当前状态包括-untracked-的文件\">保存当前状态，包括 untracked 的文件</a></li>\n<li><a href=\"#展示所有-stashes\">展示所有 stashes</a></li>\n<li><a href=\"#回到某个-stash-的状态\">回到某个 stash 的状态</a></li>\n<li><a href=\"#回到最后一个-stash-的状态并删除这个-stash\">回到最后一个 stash 的状态，并删除这个 stash</a></li>\n<li><a href=\"#删除所有的-stash\">删除所有的 stash</a></li>\n<li><a href=\"#从-stash-中拿出某个文件的修改\">从 stash 中拿出某个文件的修改</a></li>\n<li><a href=\"#展示所有-tracked-的文件\">展示所有 tracked 的文件</a></li>\n<li><a href=\"#展示所有-untracked-的文件\">展示所有 untracked 的文件</a></li>\n<li><a href=\"#展示所有忽略的文件\">展示所有忽略的文件</a></li>\n<li><a href=\"#强制删除-untracked-的文件\">强制删除 untracked 的文件</a></li>\n<li><a href=\"#强制删除-untracked-的目录\">强制删除 untracked 的目录</a></li>\n<li><a href=\"#展示简化的-commit-历史\">展示简化的 commit 历史</a></li>\n<li><a href=\"#查看某段代码是谁写的\">查看某段代码是谁写的</a></li>\n<li><a href=\"#把某一个分支到导出成一个文件\">把某一个分支到导出成一个文件</a></li>\n<li><a href=\"#从包中导入分支\">从包中导入分支</a></li>\n<li><a href=\"#执行-rebase-之前自动-stash\">执行 rebase 之前自动 stash</a></li>\n<li><a href=\"#从远程仓库根据-ID-拉下某一状态-到本地分支\">从远程仓库根据 ID，拉下某一状态，到本地分支</a></li>\n<li><a href=\"#详细展示一行中的修改\">详细展示一行中的修改</a></li>\n<li><a href=\"#清除-gitignore-文件中记录的文件\">清除 <code>.gitignore</code> 文件中记录的文件</a></li>\n<li><a href=\"#展示所有-alias-和-configs\">展示所有 alias 和 configs</a></li>\n<li><a href=\"#展示忽略的文件\">展示忽略的文件</a></li>\n<li><a href=\"#commit-历史中显示-Branch1-有的但是-Branch2-没有-commit\">commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</a></li>\n<li><a href=\"#在-commit-log-中显示-GPG-签名\">在 commit log 中显示 GPG 签名</a></li>\n<li><a href=\"#删除全局设置\">删除全局设置</a></li>\n<li><a href=\"#新建并切换到新分支上同时这个分支没有任何-commit\">新建并切换到新分支上，同时这个分支没有任何 commit</a></li>\n<li><a href=\"#展示任意分支某一文件的内容\">展示任意分支某一文件的内容</a></li>\n<li><a href=\"#clone-下来指定的单一分支\">clone 下来指定的单一分支</a></li>\n<li><a href=\"#忽略某个文件的改动\">忽略某个文件的改动</a></li>\n<li><a href=\"#忽略文件的权限变化\">忽略文件的权限变化</a></li>\n<li><a href=\"#以最后提交的顺序列出所有-Git-分支\">以最后提交的顺序列出所有 Git 分支</a></li>\n<li><a href=\"#在-commit-log-中查找相关内容\">在 commit log 中查找相关内容</a></li>\n<li><a href=\"#把暂存区的指定-file-放到工作区中\">把暂存区的指定 file 放到工作区中</a></li>\n<li><a href=\"#强制推送\">强制推送</a></li>\n<li><a href=\"#一图详解\">一图详解</a></li>\n<li><a href=\"#联系我\">联系我</a></li>\n</ul>\n<h4 id=\"展示帮助信息\"><a href=\"#展示帮助信息\" class=\"headerlink\" title=\"展示帮助信息\"></a>展示帮助信息</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">help</span> -g</span><br></pre></td></tr></table></figure>\n<p>The command output as below:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">The common Git guides are:</span><br><span class=\"line\">   attributes          Defining attributes per path</span><br><span class=\"line\">   cli                 Git command-line interface and conventions</span><br><span class=\"line\">   core-tutorial       A Git core tutorial for developers</span><br><span class=\"line\">   cvs-migration       Git for CVS users</span><br><span class=\"line\">   diffcore            Tweaking diff output</span><br><span class=\"line\">   everyday            A useful minimum set of commands for Everyday Git</span><br><span class=\"line\">   glossary            A Git Glossary</span><br><span class=\"line\">   hooks               Hooks used by Git</span><br><span class=\"line\">   ignore              Specifies intentionally untracked files to ignore</span><br><span class=\"line\">   modules             Defining submodule properties</span><br><span class=\"line\">   namespaces          Git namespaces</span><br><span class=\"line\">   repository-layout    Git Repository Layout</span><br><span class=\"line\">   revisions           Specifying revisions and ranges for Git</span><br><span class=\"line\">   tutorial            A tutorial introduction to Git</span><br><span class=\"line\">   tutorial-2          A tutorial introduction to Git: part two</span><br><span class=\"line\">   workflows           An overview of recommended workflows with Git</span><br><span class=\"line\"></span><br><span class=\"line\">&apos;git help -a&apos; and &apos;git help -g&apos; list available subcommands and some concept guides. See &apos;git help &lt;command&gt;&apos; or &apos;git help &lt;concept&gt;&apos; to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure>\n<h4 id=\"回到远程仓库的状态\"><a href=\"#回到远程仓库的状态\" class=\"headerlink\" title=\"回到远程仓库的状态\"></a>回到远程仓库的状态</h4><p>抛弃本地所有的修改，回到远程仓库的状态。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch --all &amp;&amp; git reset --hard origin/master</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"重设第一个-commit\"><a href=\"#重设第一个-commit\" class=\"headerlink\" title=\"重设第一个 commit\"></a>重设第一个 commit</h4><p>也就是把所有的改动都重新放回工作区，并<strong>清空所有的 commit</strong>，这样就可以重新提交第一个 commit 了</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-ref -d HEAD</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示工作区和暂存区的不同\"><a href=\"#展示工作区和暂存区的不同\" class=\"headerlink\" title=\"展示工作区和暂存区的不同\"></a>展示工作区和暂存区的不同</h4><p>输出<strong>工作区</strong>和<strong>暂存区</strong>的 different (不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff</span><br></pre></td></tr></table></figure>\n<p>还可以展示本地仓库中任意两个 commit 之间的文件变动：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff &lt;commit-id&gt; &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"展示暂存区和最近版本的不同\"><a href=\"#展示暂存区和最近版本的不同\" class=\"headerlink\" title=\"展示暂存区和最近版本的不同\"></a>展示暂存区和最近版本的不同</h4><p>输出<strong>暂存区</strong>和本地最近的版本 (commit) 的 different (不同)。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --cached</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"展示暂存区、工作区和最近版本的不同\"><a href=\"#展示暂存区、工作区和最近版本的不同\" class=\"headerlink\" title=\"展示暂存区、工作区和最近版本的不同\"></a>展示暂存区、工作区和最近版本的不同</h4><p>输出<strong>工作区</strong>、<strong>暂存区</strong> 和本地最近的版本 (commit) 的 different (不同)。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff HEAD</span><br></pre></td></tr></table></figure>\n<h4 id=\"快速切换分支上一个分支\"><a href=\"#快速切换分支上一个分支\" class=\"headerlink\" title=\"快速切换分支上一个分支\"></a>快速切换分支上一个分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除已经合并到-master-的分支\"><a href=\"#删除已经合并到-master-的分支\" class=\"headerlink\" title=\"删除已经合并到 master 的分支\"></a>删除已经合并到 master 的分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --merged master | grep -v <span class=\"string\">'^\\*\\|  master'</span> | xargs -n 1 git branch -d</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示本地分支关联远程仓库的情况\"><a href=\"#展示本地分支关联远程仓库的情况\" class=\"headerlink\" title=\"展示本地分支关联远程仓库的情况\"></a>展示本地分支关联远程仓库的情况</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -vv</span><br></pre></td></tr></table></figure>\n<h4 id=\"关联远程分支\"><a href=\"#关联远程分支\" class=\"headerlink\" title=\"关联远程分支\"></a>关联远程分支</h4><p>关联之后，<code>git branch -vv</code> 就可以展示关联的远程分支名了，同时推送到远程仓库直接：<code>git push</code>，不需要指定远程仓库了。<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -u origin/mybranch</span><br></pre></td></tr></table></figure></p>\n<p>或者在 push 时加上 <code>-u</code> 参数<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin/mybranch -u</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"列出所有远程分支\"><a href=\"#列出所有远程分支\" class=\"headerlink\" title=\"列出所有远程分支\"></a>列出所有远程分支</h4><p>-r 参数相当于：remote<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -r</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"列出本地和远程分支\"><a href=\"#列出本地和远程分支\" class=\"headerlink\" title=\"列出本地和远程分支\"></a>列出本地和远程分支</h4><p>-a 参数相当于：all<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"创建并切换到本地分支\"><a href=\"#创建并切换到本地分支\" class=\"headerlink\" title=\"创建并切换到本地分支\"></a>创建并切换到本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"从远程分支中创建并切换到本地分支\"><a href=\"#从远程分支中创建并切换到本地分支\" class=\"headerlink\" title=\"从远程分支中创建并切换到本地分支\"></a>从远程分支中创建并切换到本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch-name&gt; origin/&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除本地分支\"><a href=\"#删除本地分支\" class=\"headerlink\" title=\"删除本地分支\"></a>删除本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d &lt;<span class=\"built_in\">local</span>-branchname&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除远程分支\"><a href=\"#删除远程分支\" class=\"headerlink\" title=\"删除远程分支\"></a>删除远程分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --delete &lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>\n<p>或者</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :&lt;remote-branchname&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"重命名本地分支\"><a href=\"#重命名本地分支\" class=\"headerlink\" title=\"重命名本地分支\"></a>重命名本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -m &lt;new-branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看标签\"><a href=\"#查看标签\" class=\"headerlink\" title=\"查看标签\"></a>查看标签</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag</span><br></pre></td></tr></table></figure>\n<p>展示当前分支的最近的 tag</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git describe --tags --abbrev=0</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看标签详细信息\"><a href=\"#查看标签详细信息\" class=\"headerlink\" title=\"查看标签详细信息\"></a>查看标签详细信息</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -ln</span><br></pre></td></tr></table></figure>\n<h4 id=\"本地创建标签\"><a href=\"#本地创建标签\" class=\"headerlink\" title=\"本地创建标签\"></a>本地创建标签</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag &lt;version-number&gt;</span><br></pre></td></tr></table></figure>\n<p>默认 tag 是打在最近的一次 commit 上，如果需要指定 commit 打 tag：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git tag -a &lt;version-number&gt; -m <span class=\"string\">\"v1.0 发布(描述)\"</span> &lt;commit-id&gt;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"推送标签到远程仓库\"><a href=\"#推送标签到远程仓库\" class=\"headerlink\" title=\"推送标签到远程仓库\"></a>推送标签到远程仓库</h4><p>首先要保证本地创建好了标签才可以推送标签到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;<span class=\"built_in\">local</span>-version-number&gt;</span><br></pre></td></tr></table></figure>\n<p>一次性推送所有标签，同步到远程仓库：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除本地标签\"><a href=\"#删除本地标签\" class=\"headerlink\" title=\"删除本地标签\"></a>删除本地标签</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -d &lt;tag-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除远程标签\"><a href=\"#删除远程标签\" class=\"headerlink\" title=\"删除远程标签\"></a>删除远程标签</h4><p>删除远程标签需要<strong>先删除本地标签</strong>，再执行下面的命令：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin :refs/tags/&lt;tag-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"切回到某个标签\"><a href=\"#切回到某个标签\" class=\"headerlink\" title=\"切回到某个标签\"></a>切回到某个标签</h4><p>一般上线之前都会打 tag，就是为了防止上线后出现问题，方便快速回退到上一版本。下面的命令是回到某一标签下的状态：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b branch_name tag_name</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"放弃工作区的修改\"><a href=\"#放弃工作区的修改\" class=\"headerlink\" title=\"放弃工作区的修改\"></a>放弃工作区的修改</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<p>放弃所有修改：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout .</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"恢复删除的文件\"><a href=\"#恢复删除的文件\" class=\"headerlink\" title=\"恢复删除的文件\"></a>恢复删除的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rev-list -n 1 HEAD -- &lt;file_path&gt; <span class=\"comment\">#得到 deleting_commit</span></span><br><span class=\"line\"></span><br><span class=\"line\">git checkout &lt;deleting_commit&gt;^ -- &lt;file_path&gt; <span class=\"comment\">#回到删除文件 deleting_commit 之前的状态</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"以新增一个-commit-的方式还原某一个-commit-的修改\"><a href=\"#以新增一个-commit-的方式还原某一个-commit-的修改\" class=\"headerlink\" title=\"以新增一个 commit 的方式还原某一个 commit 的修改\"></a>以新增一个 commit 的方式还原某一个 commit 的修改</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"回到某个-commit-的状态，并删除后面的-commit\"><a href=\"#回到某个-commit-的状态，并删除后面的-commit\" class=\"headerlink\" title=\"回到某个 commit 的状态，并删除后面的 commit\"></a>回到某个 commit 的状态，并删除后面的 commit</h4><p>和 revert 的区别：reset 命令会抹去某个 commit id 之后的所有 commit</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;commit-id&gt;  <span class=\"comment\">#默认就是-mixed参数。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –mixed HEAD^  <span class=\"comment\">#回退至上个版本，它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配，但是也到此为止。工作区不会被更改。</span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –soft HEAD~3  <span class=\"comment\">#回退至三个版本之前，只回退了commit的信息，暂存区和工作区与回退之前保持一致。如果还要提交，直接commit即可  </span></span><br><span class=\"line\"></span><br><span class=\"line\">git reset –hard &lt;commit-id&gt;  <span class=\"comment\">#彻底回退到指定commit-id的状态，暂存区和工作区也会变为指定commit-id版本的内容</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改上一个-commit-的描述\"><a href=\"#修改上一个-commit-的描述\" class=\"headerlink\" title=\"修改上一个 commit 的描述\"></a>修改上一个 commit 的描述</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看-commit-历史\"><a href=\"#查看-commit-历史\" class=\"headerlink\" title=\"查看 commit 历史\"></a>查看 commit 历史</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"查看某段代码是谁写的\"><a href=\"#查看某段代码是谁写的\" class=\"headerlink\" title=\"查看某段代码是谁写的\"></a>查看某段代码是谁写的</h4><p>blame 的意思为‘责怪’，你懂的。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git blame &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"显示本地更新过-HEAD-的-git-命令记录\"><a href=\"#显示本地更新过-HEAD-的-git-命令记录\" class=\"headerlink\" title=\"显示本地更新过 HEAD 的 git 命令记录\"></a>显示本地更新过 HEAD 的 git 命令记录</h4><p>每次更新了 HEAD 的 git 命令比如 commint、amend、cherry-pick、reset、revert 等都会被记录下来（不限分支），就像 shell 的 history 一样。<br>这样你可以 reset 到任何一次更新了 HEAD 的操作之后，而不仅仅是回到当前分支下的某个 commit 之后的状态。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改作者名\"><a href=\"#修改作者名\" class=\"headerlink\" title=\"修改作者名\"></a>修改作者名</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amend --author=<span class=\"string\">'Author Name &lt;email@address.com&gt;'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改远程仓库的-url\"><a href=\"#修改远程仓库的-url\" class=\"headerlink\" title=\"修改远程仓库的 url\"></a>修改远程仓库的 url</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote <span class=\"built_in\">set</span>-url origin &lt;URL&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"增加远程仓库\"><a href=\"#增加远程仓库\" class=\"headerlink\" title=\"增加远程仓库\"></a>增加远程仓库</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin &lt;remote-url&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"列出所有远程仓库\"><a href=\"#列出所有远程仓库\" class=\"headerlink\" title=\"列出所有远程仓库\"></a>列出所有远程仓库</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看两个星期内的改动\"><a href=\"#查看两个星期内的改动\" class=\"headerlink\" title=\"查看两个星期内的改动\"></a>查看两个星期内的改动</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git whatchanged --since=<span class=\"string\">'2 weeks ago'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"把-A-分支的某一个-commit，放到-B-分支上\"><a href=\"#把-A-分支的某一个-commit，放到-B-分支上\" class=\"headerlink\" title=\"把 A 分支的某一个 commit，放到 B 分支上\"></a>把 A 分支的某一个 commit，放到 B 分支上</h4><p>这个过程需要 <code>cherry-pick</code> 命令，<a href=\"http://sg552.iteye.com/blog/1300713#bc2367928\" target=\"_blank\" rel=\"noopener\">参考</a></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;branch-name&gt; &amp;&amp; git cherry-pick &lt;commit-id&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"给-git-命令起别名\"><a href=\"#给-git-命令起别名\" class=\"headerlink\" title=\"给 git 命令起别名\"></a>给 git 命令起别名</h4><p>简化命令</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global <span class=\"built_in\">alias</span>.&lt;handle&gt; &lt;<span class=\"built_in\">command</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">比如：git status 改成 git st，这样可以简化命令</span><br><span class=\"line\"></span><br><span class=\"line\">git config --global alias.st status</span><br></pre></td></tr></table></figure>\n<h4 id=\"存储当前的修改，但不用提交-commit\"><a href=\"#存储当前的修改，但不用提交-commit\" class=\"headerlink\" title=\"存储当前的修改，但不用提交 commit\"></a>存储当前的修改，但不用提交 commit</h4><p>详解可以参考<a href=\"http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137602359178794d966923e5c4134bc8bf98dfb03aea3000\" target=\"_blank\" rel=\"noopener\">廖雪峰老师的 git 教程</a><br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"保存当前状态，包括-untracked-的文件\"><a href=\"#保存当前状态，包括-untracked-的文件\" class=\"headerlink\" title=\"保存当前状态，包括 untracked 的文件\"></a>保存当前状态，包括 untracked 的文件</h4><p>untracked 文件：新建的文件<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash -u</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"展示所有-stashes\"><a href=\"#展示所有-stashes\" class=\"headerlink\" title=\"展示所有 stashes\"></a>展示所有 stashes</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash list</span><br></pre></td></tr></table></figure>\n<h4 id=\"回到某个-stash-的状态\"><a href=\"#回到某个-stash-的状态\" class=\"headerlink\" title=\"回到某个 stash 的状态\"></a>回到某个 stash 的状态</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash apply &lt;stash@&#123;n&#125;&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"回到最后一个-stash-的状态，并删除这个-stash\"><a href=\"#回到最后一个-stash-的状态，并删除这个-stash\" class=\"headerlink\" title=\"回到最后一个 stash 的状态，并删除这个 stash\"></a>回到最后一个 stash 的状态，并删除这个 stash</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash pop</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除所有的-stash\"><a href=\"#删除所有的-stash\" class=\"headerlink\" title=\"删除所有的 stash\"></a>删除所有的 stash</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash clear</span><br></pre></td></tr></table></figure>\n<h4 id=\"从-stash-中拿出某个文件的修改\"><a href=\"#从-stash-中拿出某个文件的修改\" class=\"headerlink\" title=\"从 stash 中拿出某个文件的修改\"></a>从 stash 中拿出某个文件的修改</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout &lt;stash@&#123;n&#125;&gt; -- &lt;file-path&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示所有-tracked-的文件\"><a href=\"#展示所有-tracked-的文件\" class=\"headerlink\" title=\"展示所有 tracked 的文件\"></a>展示所有 tracked 的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files -t</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示所有-untracked-的文件\"><a href=\"#展示所有-untracked-的文件\" class=\"headerlink\" title=\"展示所有 untracked 的文件\"></a>展示所有 untracked 的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示所有忽略的文件\"><a href=\"#展示所有忽略的文件\" class=\"headerlink\" title=\"展示所有忽略的文件\"></a>展示所有忽略的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git ls-files --others -i --exclude-standard</span><br></pre></td></tr></table></figure>\n<h4 id=\"强制删除-untracked-的文件\"><a href=\"#强制删除-untracked-的文件\" class=\"headerlink\" title=\"强制删除 untracked 的文件\"></a>强制删除 untracked 的文件</h4><p>可以用来删除新建的文件。如果不指定文件文件名，则清空所有工作的 untracked 文件。<code>clean</code> 命令，<strong>注意两点</strong>：</p>\n<ol>\n<li>clean 后，删除的文件无法找回</li>\n<li>不会影响 tracked 的文件的改动，只会删除 untracked 的文件</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean &lt;file-name&gt; -f</span><br></pre></td></tr></table></figure>\n<h4 id=\"强制删除-untracked-的目录\"><a href=\"#强制删除-untracked-的目录\" class=\"headerlink\" title=\"强制删除 untracked 的目录\"></a>强制删除 untracked 的目录</h4><p>可以用来删除新建的目录，<strong>注意</strong>:这个命令也可以用来删除 untracked 的文件。详情见上一条</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean &lt;directory-name&gt; -df</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示简化的-commit-历史\"><a href=\"#展示简化的-commit-历史\" class=\"headerlink\" title=\"展示简化的 commit 历史\"></a>展示简化的 commit 历史</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=oneline --graph --decorate --all</span><br></pre></td></tr></table></figure>\n<h4 id=\"把某一个分支到导出成一个文件\"><a href=\"#把某一个分支到导出成一个文件\" class=\"headerlink\" title=\"把某一个分支到导出成一个文件\"></a>把某一个分支到导出成一个文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git bundle create &lt;file&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"从包中导入分支\"><a href=\"#从包中导入分支\" class=\"headerlink\" title=\"从包中导入分支\"></a>从包中导入分支</h4><p>新建一个分支，分支内容就是上面 <code>git bundle create</code> 命令导出的内容</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> repo.bundle &lt;repo-dir&gt; -b &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"执行-rebase-之前自动-stash\"><a href=\"#执行-rebase-之前自动-stash\" class=\"headerlink\" title=\"执行 rebase 之前自动 stash\"></a>执行 rebase 之前自动 stash</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --autostash</span><br></pre></td></tr></table></figure>\n<h4 id=\"从远程仓库根据-ID，拉下某一状态，到本地分支\"><a href=\"#从远程仓库根据-ID，拉下某一状态，到本地分支\" class=\"headerlink\" title=\"从远程仓库根据 ID，拉下某一状态，到本地分支\"></a>从远程仓库根据 ID，拉下某一状态，到本地分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin pull/&lt;id&gt;/head:&lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"详细展示一行中的修改\"><a href=\"#详细展示一行中的修改\" class=\"headerlink\" title=\"详细展示一行中的修改\"></a>详细展示一行中的修改</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff --word-diff</span><br></pre></td></tr></table></figure>\n<h4 id=\"清除-gitignore-文件中记录的文件\"><a href=\"#清除-gitignore-文件中记录的文件\" class=\"headerlink\" title=\"清除 gitignore 文件中记录的文件\"></a>清除 gitignore 文件中记录的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clean -X -f</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示所有-alias-和-configs\"><a href=\"#展示所有-alias-和-configs\" class=\"headerlink\" title=\"展示所有 alias 和 configs\"></a>展示所有 alias 和 configs</h4><p><strong>注意：</strong> config 分为：当前目录（local）和全局（golbal）的 config，默认为当前目录的 config</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --<span class=\"built_in\">local</span> --list (当前目录)</span><br><span class=\"line\">git config --global --list (全局)</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示忽略的文件\"><a href=\"#展示忽略的文件\" class=\"headerlink\" title=\"展示忽略的文件\"></a>展示忽略的文件</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status --ignored</span><br></pre></td></tr></table></figure>\n<h4 id=\"commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit\"><a href=\"#commit-历史中显示-Branch1-有的，但是-Branch2-没有-commit\" class=\"headerlink\" title=\"commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit\"></a>commit 历史中显示 Branch1 有的，但是 Branch2 没有 commit</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> Branch1 ^Branch2</span><br></pre></td></tr></table></figure>\n<h4 id=\"在-commit-log-中显示-GPG-签名\"><a href=\"#在-commit-log-中显示-GPG-签名\" class=\"headerlink\" title=\"在 commit log 中显示 GPG 签名\"></a>在 commit log 中显示 GPG 签名</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --show-signature</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除全局设置\"><a href=\"#删除全局设置\" class=\"headerlink\" title=\"删除全局设置\"></a>删除全局设置</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> &lt;entry-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"新建并切换到新分支上，同时这个分支没有任何-commit\"><a href=\"#新建并切换到新分支上，同时这个分支没有任何-commit\" class=\"headerlink\" title=\"新建并切换到新分支上，同时这个分支没有任何 commit\"></a>新建并切换到新分支上，同时这个分支没有任何 commit</h4><p>相当于保存修改，但是重写 commit 历史</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --orphan &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"展示任意分支某一文件的内容\"><a href=\"#展示任意分支某一文件的内容\" class=\"headerlink\" title=\"展示任意分支某一文件的内容\"></a>展示任意分支某一文件的内容</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show &lt;branch-name&gt;:&lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clone-下来指定的单一分支\"><a href=\"#clone-下来指定的单一分支\" class=\"headerlink\" title=\"clone 下来指定的单一分支\"></a>clone 下来指定的单一分支</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> -b &lt;branch-name&gt; --single-branch https://github.com/user/repo.git</span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略某个文件的改动\"><a href=\"#忽略某个文件的改动\" class=\"headerlink\" title=\"忽略某个文件的改动\"></a>忽略某个文件的改动</h4><p>关闭 track 指定文件的改动，也就是 Git 将不会在记录这个文件的改动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>\n<p>恢复 track 指定文件的改动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git update-index --no-assume-unchanged path/to/file</span><br></pre></td></tr></table></figure>\n<h4 id=\"忽略文件的权限变化\"><a href=\"#忽略文件的权限变化\" class=\"headerlink\" title=\"忽略文件的权限变化\"></a>忽略文件的权限变化</h4><p>不再将文件的权限变化视作改动</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.fileMode <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"以最后提交的顺序列出所有-Git-分支\"><a href=\"#以最后提交的顺序列出所有-Git-分支\" class=\"headerlink\" title=\"以最后提交的顺序列出所有 Git 分支\"></a>以最后提交的顺序列出所有 Git 分支</h4><p>最新的放在最上面</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">for</span>-each-ref --sort=-committerdate --format=<span class=\"string\">'%(refname:short)'</span> refs/heads/</span><br></pre></td></tr></table></figure>\n<h4 id=\"在-commit-log-中查找相关内容\"><a href=\"#在-commit-log-中查找相关内容\" class=\"headerlink\" title=\"在 commit log 中查找相关内容\"></a>在 commit log 中查找相关内容</h4><p>通过 grep 查找，given-text：所需要查找的字段</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span> --all --grep=<span class=\"string\">'&lt;given-text&gt;'</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"把暂存区的指定-file-放到工作区中\"><a href=\"#把暂存区的指定-file-放到工作区中\" class=\"headerlink\" title=\"把暂存区的指定 file 放到工作区中\"></a>把暂存区的指定 file 放到工作区中</h4><p>不添加参数，默认是 <code>-mixed</code></p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset &lt;file-name&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"强制推送\"><a href=\"#强制推送\" class=\"headerlink\" title=\"强制推送\"></a>强制推送</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -f &lt;remote-name&gt; &lt;branch-name&gt;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 返回目录</a></strong></p>\n<h2 id=\"高级教程\"><a href=\"#高级教程\" class=\"headerlink\" title=\"高级教程\"></a>高级教程</h2><ul>\n<li><a href=\"https://github.com/airuikun/blog/issues/5\" target=\"_blank\" rel=\"noopener\">小蝌蚪传记：git时光穿梭机</a></li>\n</ul>"},{"title":"Kodi使用技巧","abbrlink":23494,"date":"2019-12-12T05:53:23.000Z","_content":"\n## 观看tvaddonsco\n\n1. 添加媒体源：http://fusion.tvaddons.co 命名为fusion\n2. 安装插件->视频插件->从zip安装->fusion->kodi-repos->English->找到repository.xbmchub-3.3.3.zip 安装\n3. 安装插件->视屏插件->从仓库安装->找到Indigo安装\n4. 打开indigo插件，会自动安装一些东西，待安装完毕，点击Addon Installe,安装Git Browser\n5. 打开Git Browser 选择 Search by GitHub Username->new search->搜索tvaddonsco\n6. 安装kodiadult-gitbrowser.installer-1.0.0.zip 安装成功后会提示重启\n\n​                                                                                    ","source":"_posts/Kodi使用技巧.md","raw":"---\ntitle: Kodi使用技巧\ntags: 软件\ncategories: 教程\nabbrlink: 23494\ndate: 2019-12-12 13:53:23\n---\n\n## 观看tvaddonsco\n\n1. 添加媒体源：http://fusion.tvaddons.co 命名为fusion\n2. 安装插件->视频插件->从zip安装->fusion->kodi-repos->English->找到repository.xbmchub-3.3.3.zip 安装\n3. 安装插件->视屏插件->从仓库安装->找到Indigo安装\n4. 打开indigo插件，会自动安装一些东西，待安装完毕，点击Addon Installe,安装Git Browser\n5. 打开Git Browser 选择 Search by GitHub Username->new search->搜索tvaddonsco\n6. 安装kodiadult-gitbrowser.installer-1.0.0.zip 安装成功后会提示重启\n\n​                                                                                    ","slug":"Kodi使用技巧","published":1,"updated":"2020-03-09T03:01:45.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mi00101q2dmc1wdrbc","content":"<h2 id=\"观看tvaddonsco\"><a href=\"#观看tvaddonsco\" class=\"headerlink\" title=\"观看tvaddonsco\"></a>观看tvaddonsco</h2><ol>\n<li>添加媒体源：<a href=\"http://fusion.tvaddons.co\" target=\"_blank\" rel=\"noopener\">http://fusion.tvaddons.co</a> 命名为fusion</li>\n<li>安装插件-&gt;视频插件-&gt;从zip安装-&gt;fusion-&gt;kodi-repos-&gt;English-&gt;找到repository.xbmchub-3.3.3.zip 安装</li>\n<li>安装插件-&gt;视屏插件-&gt;从仓库安装-&gt;找到Indigo安装</li>\n<li>打开indigo插件，会自动安装一些东西，待安装完毕，点击Addon Installe,安装Git Browser</li>\n<li>打开Git Browser 选择 Search by GitHub Username-&gt;new search-&gt;搜索tvaddonsco</li>\n<li>安装kodiadult-gitbrowser.installer-1.0.0.zip 安装成功后会提示重启</li>\n</ol>\n<p>​                                                                                    </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"观看tvaddonsco\"><a href=\"#观看tvaddonsco\" class=\"headerlink\" title=\"观看tvaddonsco\"></a>观看tvaddonsco</h2><ol>\n<li>添加媒体源：<a href=\"http://fusion.tvaddons.co\" target=\"_blank\" rel=\"noopener\">http://fusion.tvaddons.co</a> 命名为fusion</li>\n<li>安装插件-&gt;视频插件-&gt;从zip安装-&gt;fusion-&gt;kodi-repos-&gt;English-&gt;找到repository.xbmchub-3.3.3.zip 安装</li>\n<li>安装插件-&gt;视屏插件-&gt;从仓库安装-&gt;找到Indigo安装</li>\n<li>打开indigo插件，会自动安装一些东西，待安装完毕，点击Addon Installe,安装Git Browser</li>\n<li>打开Git Browser 选择 Search by GitHub Username-&gt;new search-&gt;搜索tvaddonsco</li>\n<li>安装kodiadult-gitbrowser.installer-1.0.0.zip 安装成功后会提示重启</li>\n</ol>\n<p>​                                                                                    </p>\n"},{"title":"IaaS,PaaS,SaaS 的区别","abbrlink":"8156ce4d","date":"2018-09-14T08:00:23.000Z","_content":"越来越多的软件，开始采用云服务。\n云服务只是一个统称，可以分成三大类。\n\n* IaaS：基础设施服务，Infrastructure-as-a-service\n* PaaS：平台服务，Platform-as-a-service\n* SaaS：软件服务，Software-as-a-service\n\n## IaaS\nInfrastructure as a Service 即基础设施即服务\n提供给消费者的服务是对所有计算基础设施的利用，包括处理CPU、内存、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、存储空间、部署的应用，也有可能获得有限制的网络组件（例如路由器、，防火墙，、负载均衡器等）的控制。\n\n## PaaS\nPlatform as a Service 即平台即服务\n提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java，python, .Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上去。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置。\n\n## SaaS\nSoftware as a Service 即软件即服务\n随着互联网技术的发展和应用软件的成熟， 在21世纪开始兴起的一种完全创新的软件应用模式。它与“on-demand software”（按需软件)，the application service provider(ASP，应用服务提供商)，hosted software(托管软件)所具有相似的含义。它是一种通过Internet提供软件的模式，厂商将应用软件统一部署在自己的服务器上，客户可以根据自己实际需求，通过互联网向厂商定购所需的应用软件服务，按定购的服务多少和时间长短向厂商支付费用，并通过互联网获得厂商提供的服务。用户不用再购买软件，而改用向提供商租用基于Web的软件，来管理企业经营活动，且无需对软件进行维护，服务提供商会全权管理和维护软件，软件厂商在向客户提供互联网应用的同时，也提供软件的离线操作和本地数据存储，让用户随时随地都可以使用其定购的软件和服务。对于许多小型企业来说，SaaS是采用先进技术的最好途径，它消除了企业购买、构建和维护基础设施和应用程序的需要。","source":"_posts/IaaS,PaaS,SaaS 的区别.md","raw":"---\ntitle: IaaS,PaaS,SaaS 的区别\ntags: 知识点\ncategories: 知识点\nabbrlink: 8156ce4d\ndate: 2018-09-14 16:00:23\n---\n越来越多的软件，开始采用云服务。\n云服务只是一个统称，可以分成三大类。\n\n* IaaS：基础设施服务，Infrastructure-as-a-service\n* PaaS：平台服务，Platform-as-a-service\n* SaaS：软件服务，Software-as-a-service\n\n## IaaS\nInfrastructure as a Service 即基础设施即服务\n提供给消费者的服务是对所有计算基础设施的利用，包括处理CPU、内存、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、存储空间、部署的应用，也有可能获得有限制的网络组件（例如路由器、，防火墙，、负载均衡器等）的控制。\n\n## PaaS\nPlatform as a Service 即平台即服务\n提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java，python, .Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上去。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置。\n\n## SaaS\nSoftware as a Service 即软件即服务\n随着互联网技术的发展和应用软件的成熟， 在21世纪开始兴起的一种完全创新的软件应用模式。它与“on-demand software”（按需软件)，the application service provider(ASP，应用服务提供商)，hosted software(托管软件)所具有相似的含义。它是一种通过Internet提供软件的模式，厂商将应用软件统一部署在自己的服务器上，客户可以根据自己实际需求，通过互联网向厂商定购所需的应用软件服务，按定购的服务多少和时间长短向厂商支付费用，并通过互联网获得厂商提供的服务。用户不用再购买软件，而改用向提供商租用基于Web的软件，来管理企业经营活动，且无需对软件进行维护，服务提供商会全权管理和维护软件，软件厂商在向客户提供互联网应用的同时，也提供软件的离线操作和本地数据存储，让用户随时随地都可以使用其定购的软件和服务。对于许多小型企业来说，SaaS是采用先进技术的最好途径，它消除了企业购买、构建和维护基础设施和应用程序的需要。","slug":"IaaS,PaaS,SaaS 的区别","published":1,"updated":"2020-03-09T03:01:45.084Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mk00141q2dlmivarck","content":"<p>越来越多的软件，开始采用云服务。<br>云服务只是一个统称，可以分成三大类。</p>\n<ul>\n<li>IaaS：基础设施服务，Infrastructure-as-a-service</li>\n<li>PaaS：平台服务，Platform-as-a-service</li>\n<li>SaaS：软件服务，Software-as-a-service</li>\n</ul>\n<h2 id=\"IaaS\"><a href=\"#IaaS\" class=\"headerlink\" title=\"IaaS\"></a>IaaS</h2><p>Infrastructure as a Service 即基础设施即服务<br>提供给消费者的服务是对所有计算基础设施的利用，包括处理CPU、内存、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、存储空间、部署的应用，也有可能获得有限制的网络组件（例如路由器、，防火墙，、负载均衡器等）的控制。</p>\n<h2 id=\"PaaS\"><a href=\"#PaaS\" class=\"headerlink\" title=\"PaaS\"></a>PaaS</h2><p>Platform as a Service 即平台即服务<br>提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java，python, .Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上去。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置。</p>\n<h2 id=\"SaaS\"><a href=\"#SaaS\" class=\"headerlink\" title=\"SaaS\"></a>SaaS</h2><p>Software as a Service 即软件即服务<br>随着互联网技术的发展和应用软件的成熟， 在21世纪开始兴起的一种完全创新的软件应用模式。它与“on-demand software”（按需软件)，the application service provider(ASP，应用服务提供商)，hosted software(托管软件)所具有相似的含义。它是一种通过Internet提供软件的模式，厂商将应用软件统一部署在自己的服务器上，客户可以根据自己实际需求，通过互联网向厂商定购所需的应用软件服务，按定购的服务多少和时间长短向厂商支付费用，并通过互联网获得厂商提供的服务。用户不用再购买软件，而改用向提供商租用基于Web的软件，来管理企业经营活动，且无需对软件进行维护，服务提供商会全权管理和维护软件，软件厂商在向客户提供互联网应用的同时，也提供软件的离线操作和本地数据存储，让用户随时随地都可以使用其定购的软件和服务。对于许多小型企业来说，SaaS是采用先进技术的最好途径，它消除了企业购买、构建和维护基础设施和应用程序的需要。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>越来越多的软件，开始采用云服务。<br>云服务只是一个统称，可以分成三大类。</p>\n<ul>\n<li>IaaS：基础设施服务，Infrastructure-as-a-service</li>\n<li>PaaS：平台服务，Platform-as-a-service</li>\n<li>SaaS：软件服务，Software-as-a-service</li>\n</ul>\n<h2 id=\"IaaS\"><a href=\"#IaaS\" class=\"headerlink\" title=\"IaaS\"></a>IaaS</h2><p>Infrastructure as a Service 即基础设施即服务<br>提供给消费者的服务是对所有计算基础设施的利用，包括处理CPU、内存、存储、网络和其它基本的计算资源，用户能够部署和运行任意软件，包括操作系统和应用程序。消费者不管理或控制任何云计算基础设施，但能控制操作系统的选择、存储空间、部署的应用，也有可能获得有限制的网络组件（例如路由器、，防火墙，、负载均衡器等）的控制。</p>\n<h2 id=\"PaaS\"><a href=\"#PaaS\" class=\"headerlink\" title=\"PaaS\"></a>PaaS</h2><p>Platform as a Service 即平台即服务<br>提供给消费者的服务是把客户采用提供的开发语言和工具（例如Java，python, .Net等）开发的或收购的应用程序部署到供应商的云计算基础设施上去。客户不需要管理或控制底层的云基础设施，包括网络、服务器、操作系统、存储等，但客户能控制部署的应用程序，也可能控制运行应用程序的托管环境配置。</p>\n<h2 id=\"SaaS\"><a href=\"#SaaS\" class=\"headerlink\" title=\"SaaS\"></a>SaaS</h2><p>Software as a Service 即软件即服务<br>随着互联网技术的发展和应用软件的成熟， 在21世纪开始兴起的一种完全创新的软件应用模式。它与“on-demand software”（按需软件)，the application service provider(ASP，应用服务提供商)，hosted software(托管软件)所具有相似的含义。它是一种通过Internet提供软件的模式，厂商将应用软件统一部署在自己的服务器上，客户可以根据自己实际需求，通过互联网向厂商定购所需的应用软件服务，按定购的服务多少和时间长短向厂商支付费用，并通过互联网获得厂商提供的服务。用户不用再购买软件，而改用向提供商租用基于Web的软件，来管理企业经营活动，且无需对软件进行维护，服务提供商会全权管理和维护软件，软件厂商在向客户提供互联网应用的同时，也提供软件的离线操作和本地数据存储，让用户随时随地都可以使用其定购的软件和服务。对于许多小型企业来说，SaaS是采用先进技术的最好途径，它消除了企业购买、构建和维护基础设施和应用程序的需要。</p>\n"},{"title":"Linux 笔记","abbrlink":13448,"date":"2019-04-19T01:49:23.000Z","_content":"## 环境变量\n### 方式1 修改`profile `\n```\nvi /etc/profile\n```\n在文档末尾添加\n\n```\nexport PATH=$PATH:[路径]\n```\n配置生效\n\n```\nsource /etc/profile\n```\n\n<!-- more -->\n### 方式2 建立软链接\n例如配置node的环境变量，node在`/usr/local/src/nodejs/bin`中：\n\n```\nln -s /usr/local/src/nodejs/bin/node  /usr/local/bin/node\n```\n## crontab\n## 配置定时任务\n\n```\ncrontab -e\n```\n### 服务操作命令\n\n```\nservice crond start //启动服务  \nservice crond stop //关闭服务  \nservice crond restart //重启服务  \nservice crond reload //重新载入配置\n```\n### 配置日志\n\n```\nvim /etc/rsyslog.d/50-default.conf\nservice rsyslog restart\n```\n### 查看日志\n\n```\nmore /var/log/cron.log\n```\n### 注意事项\n* 环境变量问题\n* 权限问题\n* 定时执行的sh脚本的环境变量问题\n\n## Docker\n### 常用命令\n* `docker exec -it centos1 bash` 进入指定镜像\n* `docker ps -all` 展示镜像\n* `docker commit b5926410fe60 herong/centos7-ssh` 将容器保存为镜像 b5926410fe60 为容器id herong/centos7-ssh为镜像名\n* `docker run -p 9003:22 -p 9100-9150:9100-9150 --name=\"ububtu-alan\" -d alan/ubuntu /usr/sbin/sshd -D` 运行\n\n### 新建镜像\n`vi Dockerfile`\n\n```Dockerfile\n#制定node镜像的版本\nFROM node:10.15.3\n#声明作者\nMAINTAINER alan\n#移动当前目录下面的文件到app目录下\nADD . /app/\n#进入到app目录下面，类似cd\nWORKDIR /app\n#安装依赖\nRUN npm i yarn\nRUN yarn\n#对外暴露的端口\nEXPOSE 9100\n#程序启动脚本\nCMD [\"yarn\", \"docker\"]\n```\n`docker build -t [文件夹名称] .`\n\n## pm2\n### 安装\n```\nnpm install pm2 -g\n```\n### 启动\n```\npm2 start npm --name project01 -- start\n```\n### 常用命令\n```\npm2 list               # 显示所有进程状态\npm2 monit              # 监视所有进程\npm2 logs               # 显示所有进程日志\npm2 stop all           # 停止所有进程\npm2 restart all        # 重启所有进程\npm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)\npm2 stop 0             # 停止指定的进程\npm2 restart 0          # 重启指定的进程\npm2 startup            # 产生 init 脚本 保持进程活着\npm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)\npm2 delete 0           # 杀死指定的进程\npm2 delete all         # 杀死全部进程\npm2 startup            # 开机启动\npm2 save               # 保存当前应用列表\n```\n\n## 后台执行程序\n例如执行pso\n```\nnohup  ./pso > pso.log 2>&1 &\n```\n\n```\n# 查看任务，返回任务编号n和进程号\njobs -l\n\n# 挂起当前任务\nctrl+z\n\n# 将编号为n的任务转后台运行\nbg %n\n\n# 将编号为n的任务转前台运行\n# fg %n\n\n# 结束当前任务\nctrl+c \n\n# 设置程序父进程为1，不中断\nsetsid ./test.sh &\n\n# 查看指定任务详细\nps -ef | grep test\n\n# 显示当窗口父进程ID\necho $$\n```","source":"_posts/Linux 笔记.md","raw":"---\ntitle: Linux 笔记\ntags: Linux\ncategories: Linux\nabbrlink: 13448\ndate: 2019-04-19 09:49:23\n---\n## 环境变量\n### 方式1 修改`profile `\n```\nvi /etc/profile\n```\n在文档末尾添加\n\n```\nexport PATH=$PATH:[路径]\n```\n配置生效\n\n```\nsource /etc/profile\n```\n\n<!-- more -->\n### 方式2 建立软链接\n例如配置node的环境变量，node在`/usr/local/src/nodejs/bin`中：\n\n```\nln -s /usr/local/src/nodejs/bin/node  /usr/local/bin/node\n```\n## crontab\n## 配置定时任务\n\n```\ncrontab -e\n```\n### 服务操作命令\n\n```\nservice crond start //启动服务  \nservice crond stop //关闭服务  \nservice crond restart //重启服务  \nservice crond reload //重新载入配置\n```\n### 配置日志\n\n```\nvim /etc/rsyslog.d/50-default.conf\nservice rsyslog restart\n```\n### 查看日志\n\n```\nmore /var/log/cron.log\n```\n### 注意事项\n* 环境变量问题\n* 权限问题\n* 定时执行的sh脚本的环境变量问题\n\n## Docker\n### 常用命令\n* `docker exec -it centos1 bash` 进入指定镜像\n* `docker ps -all` 展示镜像\n* `docker commit b5926410fe60 herong/centos7-ssh` 将容器保存为镜像 b5926410fe60 为容器id herong/centos7-ssh为镜像名\n* `docker run -p 9003:22 -p 9100-9150:9100-9150 --name=\"ububtu-alan\" -d alan/ubuntu /usr/sbin/sshd -D` 运行\n\n### 新建镜像\n`vi Dockerfile`\n\n```Dockerfile\n#制定node镜像的版本\nFROM node:10.15.3\n#声明作者\nMAINTAINER alan\n#移动当前目录下面的文件到app目录下\nADD . /app/\n#进入到app目录下面，类似cd\nWORKDIR /app\n#安装依赖\nRUN npm i yarn\nRUN yarn\n#对外暴露的端口\nEXPOSE 9100\n#程序启动脚本\nCMD [\"yarn\", \"docker\"]\n```\n`docker build -t [文件夹名称] .`\n\n## pm2\n### 安装\n```\nnpm install pm2 -g\n```\n### 启动\n```\npm2 start npm --name project01 -- start\n```\n### 常用命令\n```\npm2 list               # 显示所有进程状态\npm2 monit              # 监视所有进程\npm2 logs               # 显示所有进程日志\npm2 stop all           # 停止所有进程\npm2 restart all        # 重启所有进程\npm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)\npm2 stop 0             # 停止指定的进程\npm2 restart 0          # 重启指定的进程\npm2 startup            # 产生 init 脚本 保持进程活着\npm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)\npm2 delete 0           # 杀死指定的进程\npm2 delete all         # 杀死全部进程\npm2 startup            # 开机启动\npm2 save               # 保存当前应用列表\n```\n\n## 后台执行程序\n例如执行pso\n```\nnohup  ./pso > pso.log 2>&1 &\n```\n\n```\n# 查看任务，返回任务编号n和进程号\njobs -l\n\n# 挂起当前任务\nctrl+z\n\n# 将编号为n的任务转后台运行\nbg %n\n\n# 将编号为n的任务转前台运行\n# fg %n\n\n# 结束当前任务\nctrl+c \n\n# 设置程序父进程为1，不中断\nsetsid ./test.sh &\n\n# 查看指定任务详细\nps -ef | grep test\n\n# 显示当窗口父进程ID\necho $$\n```","slug":"Linux 笔记","published":1,"updated":"2020-04-10T09:20:45.543Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mm00181q2d4r2fv1mr","content":"<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><h3 id=\"方式1-修改profile\"><a href=\"#方式1-修改profile\" class=\"headerlink\" title=\"方式1 修改profile\"></a>方式1 修改<code>profile</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文档末尾添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:[路径]</span><br></pre></td></tr></table></figure>\n<p>配置生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"方式2-建立软链接\"><a href=\"#方式2-建立软链接\" class=\"headerlink\" title=\"方式2 建立软链接\"></a>方式2 建立软链接</h3><p>例如配置node的环境变量，node在<code>/usr/local/src/nodejs/bin</code>中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/src/nodejs/bin/node  /usr/local/bin/node</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab\"><a href=\"#crontab\" class=\"headerlink\" title=\"crontab\"></a>crontab</h2><h2 id=\"配置定时任务\"><a href=\"#配置定时任务\" class=\"headerlink\" title=\"配置定时任务\"></a>配置定时任务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务操作命令\"><a href=\"#服务操作命令\" class=\"headerlink\" title=\"服务操作命令\"></a>服务操作命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start //启动服务  </span><br><span class=\"line\">service crond stop //关闭服务  </span><br><span class=\"line\">service crond restart //重启服务  </span><br><span class=\"line\">service crond reload //重新载入配置</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置日志\"><a href=\"#配置日志\" class=\"headerlink\" title=\"配置日志\"></a>配置日志</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/rsyslog.d/50-default.conf</span><br><span class=\"line\">service rsyslog restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">more /var/log/cron.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>环境变量问题</li>\n<li>权限问题</li>\n<li>定时执行的sh脚本的环境变量问题</li>\n</ul>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li><code>docker exec -it centos1 bash</code> 进入指定镜像</li>\n<li><code>docker ps -all</code> 展示镜像</li>\n<li><code>docker commit b5926410fe60 herong/centos7-ssh</code> 将容器保存为镜像 b5926410fe60 为容器id herong/centos7-ssh为镜像名</li>\n<li><code>docker run -p 9003:22 -p 9100-9150:9100-9150 --name=&quot;ububtu-alan&quot; -d alan/ubuntu /usr/sbin/sshd -D</code> 运行</li>\n</ul>\n<h3 id=\"新建镜像\"><a href=\"#新建镜像\" class=\"headerlink\" title=\"新建镜像\"></a>新建镜像</h3><p><code>vi Dockerfile</code></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#制定node镜像的版本</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">10.15</span>.<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#声明作者</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> alan</span><br><span class=\"line\"><span class=\"comment\">#移动当前目录下面的文件到app目录下</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"comment\">#进入到app目录下面，类似cd</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\">#安装依赖</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> npm i yarn</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> yarn</span></span><br><span class=\"line\"><span class=\"comment\">#对外暴露的端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">9100</span></span><br><span class=\"line\"><span class=\"comment\">#程序启动脚本</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"yarn\"</span>, <span class=\"string\">\"docker\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p><code>docker build -t [文件夹名称] .</code></p>\n<h2 id=\"pm2\"><a href=\"#pm2\" class=\"headerlink\" title=\"pm2\"></a>pm2</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2 -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start npm --name project01 -- start</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 list               # 显示所有进程状态</span><br><span class=\"line\">pm2 monit              # 监视所有进程</span><br><span class=\"line\">pm2 logs               # 显示所有进程日志</span><br><span class=\"line\">pm2 stop all           # 停止所有进程</span><br><span class=\"line\">pm2 restart all        # 重启所有进程</span><br><span class=\"line\">pm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">pm2 stop 0             # 停止指定的进程</span><br><span class=\"line\">pm2 restart 0          # 重启指定的进程</span><br><span class=\"line\">pm2 startup            # 产生 init 脚本 保持进程活着</span><br><span class=\"line\">pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">pm2 delete 0           # 杀死指定的进程</span><br><span class=\"line\">pm2 delete all         # 杀死全部进程</span><br><span class=\"line\">pm2 startup            # 开机启动</span><br><span class=\"line\">pm2 save               # 保存当前应用列表</span><br></pre></td></tr></table></figure>\n<h2 id=\"后台执行程序\"><a href=\"#后台执行程序\" class=\"headerlink\" title=\"后台执行程序\"></a>后台执行程序</h2><p>例如执行pso<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup  ./pso &gt; pso.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看任务，返回任务编号n和进程号</span><br><span class=\"line\">jobs -l</span><br><span class=\"line\"></span><br><span class=\"line\"># 挂起当前任务</span><br><span class=\"line\">ctrl+z</span><br><span class=\"line\"></span><br><span class=\"line\"># 将编号为n的任务转后台运行</span><br><span class=\"line\">bg %n</span><br><span class=\"line\"></span><br><span class=\"line\"># 将编号为n的任务转前台运行</span><br><span class=\"line\"># fg %n</span><br><span class=\"line\"></span><br><span class=\"line\"># 结束当前任务</span><br><span class=\"line\">ctrl+c </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置程序父进程为1，不中断</span><br><span class=\"line\">setsid ./test.sh &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看指定任务详细</span><br><span class=\"line\">ps -ef | grep test</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示当窗口父进程ID</span><br><span class=\"line\">echo $$</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h2><h3 id=\"方式1-修改profile\"><a href=\"#方式1-修改profile\" class=\"headerlink\" title=\"方式1 修改profile\"></a>方式1 修改<code>profile</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/profile</span><br></pre></td></tr></table></figure>\n<p>在文档末尾添加</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:[路径]</span><br></pre></td></tr></table></figure>\n<p>配置生效</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source /etc/profile</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"方式2-建立软链接\"><a href=\"#方式2-建立软链接\" class=\"headerlink\" title=\"方式2 建立软链接\"></a>方式2 建立软链接</h3><p>例如配置node的环境变量，node在<code>/usr/local/src/nodejs/bin</code>中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/src/nodejs/bin/node  /usr/local/bin/node</span><br></pre></td></tr></table></figure>\n<h2 id=\"crontab\"><a href=\"#crontab\" class=\"headerlink\" title=\"crontab\"></a>crontab</h2><h2 id=\"配置定时任务\"><a href=\"#配置定时任务\" class=\"headerlink\" title=\"配置定时任务\"></a>配置定时任务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -e</span><br></pre></td></tr></table></figure>\n<h3 id=\"服务操作命令\"><a href=\"#服务操作命令\" class=\"headerlink\" title=\"服务操作命令\"></a>服务操作命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service crond start //启动服务  </span><br><span class=\"line\">service crond stop //关闭服务  </span><br><span class=\"line\">service crond restart //重启服务  </span><br><span class=\"line\">service crond reload //重新载入配置</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置日志\"><a href=\"#配置日志\" class=\"headerlink\" title=\"配置日志\"></a>配置日志</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/rsyslog.d/50-default.conf</span><br><span class=\"line\">service rsyslog restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">more /var/log/cron.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>环境变量问题</li>\n<li>权限问题</li>\n<li>定时执行的sh脚本的环境变量问题</li>\n</ul>\n<h2 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h2><h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><ul>\n<li><code>docker exec -it centos1 bash</code> 进入指定镜像</li>\n<li><code>docker ps -all</code> 展示镜像</li>\n<li><code>docker commit b5926410fe60 herong/centos7-ssh</code> 将容器保存为镜像 b5926410fe60 为容器id herong/centos7-ssh为镜像名</li>\n<li><code>docker run -p 9003:22 -p 9100-9150:9100-9150 --name=&quot;ububtu-alan&quot; -d alan/ubuntu /usr/sbin/sshd -D</code> 运行</li>\n</ul>\n<h3 id=\"新建镜像\"><a href=\"#新建镜像\" class=\"headerlink\" title=\"新建镜像\"></a>新建镜像</h3><p><code>vi Dockerfile</code></p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#制定node镜像的版本</span></span><br><span class=\"line\"><span class=\"keyword\">FROM</span> node:<span class=\"number\">10.15</span>.<span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\">#声明作者</span></span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> alan</span><br><span class=\"line\"><span class=\"comment\">#移动当前目录下面的文件到app目录下</span></span><br><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"bash\"> . /app/</span></span><br><span class=\"line\"><span class=\"comment\">#进入到app目录下面，类似cd</span></span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"bash\"> /app</span></span><br><span class=\"line\"><span class=\"comment\">#安装依赖</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> npm i yarn</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"bash\"> yarn</span></span><br><span class=\"line\"><span class=\"comment\">#对外暴露的端口</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">9100</span></span><br><span class=\"line\"><span class=\"comment\">#程序启动脚本</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"bash\"> [<span class=\"string\">\"yarn\"</span>, <span class=\"string\">\"docker\"</span>]</span></span><br></pre></td></tr></table></figure>\n<p><code>docker build -t [文件夹名称] .</code></p>\n<h2 id=\"pm2\"><a href=\"#pm2\" class=\"headerlink\" title=\"pm2\"></a>pm2</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install pm2 -g</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 start npm --name project01 -- start</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用命令-1\"><a href=\"#常用命令-1\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pm2 list               # 显示所有进程状态</span><br><span class=\"line\">pm2 monit              # 监视所有进程</span><br><span class=\"line\">pm2 logs               # 显示所有进程日志</span><br><span class=\"line\">pm2 stop all           # 停止所有进程</span><br><span class=\"line\">pm2 restart all        # 重启所有进程</span><br><span class=\"line\">pm2 reload all         # 0 秒停机重载进程 (用于 NETWORKED 进程)</span><br><span class=\"line\">pm2 stop 0             # 停止指定的进程</span><br><span class=\"line\">pm2 restart 0          # 重启指定的进程</span><br><span class=\"line\">pm2 startup            # 产生 init 脚本 保持进程活着</span><br><span class=\"line\">pm2 web                # 运行健壮的 computer API endpoint (http://localhost:9615)</span><br><span class=\"line\">pm2 delete 0           # 杀死指定的进程</span><br><span class=\"line\">pm2 delete all         # 杀死全部进程</span><br><span class=\"line\">pm2 startup            # 开机启动</span><br><span class=\"line\">pm2 save               # 保存当前应用列表</span><br></pre></td></tr></table></figure>\n<h2 id=\"后台执行程序\"><a href=\"#后台执行程序\" class=\"headerlink\" title=\"后台执行程序\"></a>后台执行程序</h2><p>例如执行pso<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup  ./pso &gt; pso.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看任务，返回任务编号n和进程号</span><br><span class=\"line\">jobs -l</span><br><span class=\"line\"></span><br><span class=\"line\"># 挂起当前任务</span><br><span class=\"line\">ctrl+z</span><br><span class=\"line\"></span><br><span class=\"line\"># 将编号为n的任务转后台运行</span><br><span class=\"line\">bg %n</span><br><span class=\"line\"></span><br><span class=\"line\"># 将编号为n的任务转前台运行</span><br><span class=\"line\"># fg %n</span><br><span class=\"line\"></span><br><span class=\"line\"># 结束当前任务</span><br><span class=\"line\">ctrl+c </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置程序父进程为1，不中断</span><br><span class=\"line\">setsid ./test.sh &amp;</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看指定任务详细</span><br><span class=\"line\">ps -ef | grep test</span><br><span class=\"line\"></span><br><span class=\"line\"># 显示当窗口父进程ID</span><br><span class=\"line\">echo $$</span><br></pre></td></tr></table></figure>"},{"title":"Pthon练习题(二)","abbrlink":"ffa5ee66","date":"2018-01-22T03:00:23.000Z","_content":"\n### 题目\n做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）\n<!-- more -->\n### UUID简介\nUUID是128位的全局唯一标识符，通常由32字节的字符串表示。它可以保证时间和空间的唯一性。\n*   uuid1:基于时间戳\n*   uuid2:基于分布式计算环境DCE（python中没有此函数）\n*   uuid3:基于名字的MD5散列值\n*   uuid4:基于随机数\n*   uuid5:基于名字的SHA-1散列值\n### 代码\n```Python\nimport uuid\n\ndef generateCode(num):\n    list = []\n    for i in range(num):\n        list.append(uuid.uuid1())\n    return list\n\nif __name__ == \"__main__\":\n    codes = generateCode(200)\n    code_file = open('gencodes.txt', 'w')\n    for code in codes:\n        code_file.write(str(code) + \"\\n\")\n    code_file.close()\n```\n### 效果\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-8/697127.jpg)","source":"_posts/Pthon练习题(二).md","raw":"---\ntitle: Pthon练习题(二)\ntags: python\ncategories: Pthon练习题\nabbrlink: ffa5ee66\ndate: 2018-01-22 11:00:23\n---\n\n### 题目\n做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）\n<!-- more -->\n### UUID简介\nUUID是128位的全局唯一标识符，通常由32字节的字符串表示。它可以保证时间和空间的唯一性。\n*   uuid1:基于时间戳\n*   uuid2:基于分布式计算环境DCE（python中没有此函数）\n*   uuid3:基于名字的MD5散列值\n*   uuid4:基于随机数\n*   uuid5:基于名字的SHA-1散列值\n### 代码\n```Python\nimport uuid\n\ndef generateCode(num):\n    list = []\n    for i in range(num):\n        list.append(uuid.uuid1())\n    return list\n\nif __name__ == \"__main__\":\n    codes = generateCode(200)\n    code_file = open('gencodes.txt', 'w')\n    for code in codes:\n        code_file.write(str(code) + \"\\n\")\n    code_file.close()\n```\n### 效果\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-8/697127.jpg)","slug":"Pthon练习题(二)","published":1,"updated":"2020-03-09T03:01:45.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mo001b1q2dg15mhbeo","content":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）<br><a id=\"more\"></a></p>\n<h3 id=\"UUID简介\"><a href=\"#UUID简介\" class=\"headerlink\" title=\"UUID简介\"></a>UUID简介</h3><p>UUID是128位的全局唯一标识符，通常由32字节的字符串表示。它可以保证时间和空间的唯一性。</p>\n<ul>\n<li>uuid1:基于时间戳</li>\n<li>uuid2:基于分布式计算环境DCE（python中没有此函数）</li>\n<li>uuid3:基于名字的MD5散列值</li>\n<li>uuid4:基于随机数</li>\n<li>uuid5:基于名字的SHA-1散列值<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generateCode</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\">    list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">        list.append(uuid.uuid1())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    codes = generateCode(<span class=\"number\">200</span>)</span><br><span class=\"line\">    code_file = open(<span class=\"string\">'gencodes.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> code <span class=\"keyword\">in</span> codes:</span><br><span class=\"line\">        code_file.write(str(code) + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    code_file.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-8/697127.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>做为 Apple Store App 独立开发者，你要搞限时促销，为你的应用生成激活码（或者优惠券），使用 Python 如何生成 200 个激活码（或者优惠券）<br>","more":"</p>\n<h3 id=\"UUID简介\"><a href=\"#UUID简介\" class=\"headerlink\" title=\"UUID简介\"></a>UUID简介</h3><p>UUID是128位的全局唯一标识符，通常由32字节的字符串表示。它可以保证时间和空间的唯一性。</p>\n<ul>\n<li>uuid1:基于时间戳</li>\n<li>uuid2:基于分布式计算环境DCE（python中没有此函数）</li>\n<li>uuid3:基于名字的MD5散列值</li>\n<li>uuid4:基于随机数</li>\n<li>uuid5:基于名字的SHA-1散列值<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generateCode</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\">    list = []</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">        list.append(uuid.uuid1())</span><br><span class=\"line\">    <span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">    codes = generateCode(<span class=\"number\">200</span>)</span><br><span class=\"line\">    code_file = open(<span class=\"string\">'gencodes.txt'</span>, <span class=\"string\">'w'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> code <span class=\"keyword\">in</span> codes:</span><br><span class=\"line\">        code_file.write(str(code) + <span class=\"string\">\"\\n\"</span>)</span><br><span class=\"line\">    code_file.close()</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-8/697127.jpg\" alt></p>"},{"title":"Pthon练习题(三)","abbrlink":"8156ce4d","date":"2018-02-01T03:00:23.000Z","_content":"## 题目\n将 0001 题生成的 200 个激活码（或者优惠券）保存到 **MySQL** 关系型数据库中。\n<!-- more -->\n## MySql学习\n[MySql教程|菜鸟教程](http://www.runoob.com/mysql/mysql-tutorial.html)\n## 安装MySql\n```\nyum install mysql\nyum install mysql-devel\nyum install mariadb-server mariadb\n```\n### 启动MySql\n```\nsystemctl start mariadb.service\n```\n### 登陆MySql\n```\nmysql -u root -p\n```\n### 授权远程连接\n```\nmysql -u root -p\nEnter password:\nMariaDB [(none)]>\ngrant all privileges on *.* to 'root'@'192.168.*.*' identified by 'root' with grant option;\n```\n### 关闭防火墙\n```\nsystemctl stop firewalld\n```\n## 新建表\n使用Navicat for MySql 连接数据库，并在数据库`text`新建表`uuid_table`,效果如下：\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-9/21750120.jpg)\n\n## 编码\n### 安装pymysql3\n```\npip3 install pymysql3\n```\n### demo.py\n```Python\nimport uuid\nimport pymysql\n\ndef insertCode(codes):\n\tdb = pymysql.connect(host='192.168.10.130', port=3306, user='root', passwd='123456',db='test')\n\tcursor = db.cursor()\n\ttry:\n\t\tfor code in codes:\n\t\t\tsql = \"INSERT INTO uuid_table(uuid,datestr) VALUES ('%s', '%s')\" % (code, '20180109')\n\t\t\tcursor.execute(sql)\n\t\t\tdb.commit()\n\texcept:\n\t\tdb.rollback()\n\tdb.close()\n\ndef generateCode(num):\n\tlist = []\n\tfor i in range(num):\n\t\tlist.append(uuid.uuid1())\n\treturn list\n\nif __name__ == \"__main__\":\n\tcodes = generateCode(200)\n\tinsertCode(codes)\n```\n### 效果\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-9/95571570.jpg)\n","source":"_posts/Pthon练习题(三).md","raw":"---\ntitle: Pthon练习题(三)\ntags: python\ncategories: Pthon练习题\nabbrlink: 8156ce4d\ndate: 2018-02-01 11:00:23\n---\n## 题目\n将 0001 题生成的 200 个激活码（或者优惠券）保存到 **MySQL** 关系型数据库中。\n<!-- more -->\n## MySql学习\n[MySql教程|菜鸟教程](http://www.runoob.com/mysql/mysql-tutorial.html)\n## 安装MySql\n```\nyum install mysql\nyum install mysql-devel\nyum install mariadb-server mariadb\n```\n### 启动MySql\n```\nsystemctl start mariadb.service\n```\n### 登陆MySql\n```\nmysql -u root -p\n```\n### 授权远程连接\n```\nmysql -u root -p\nEnter password:\nMariaDB [(none)]>\ngrant all privileges on *.* to 'root'@'192.168.*.*' identified by 'root' with grant option;\n```\n### 关闭防火墙\n```\nsystemctl stop firewalld\n```\n## 新建表\n使用Navicat for MySql 连接数据库，并在数据库`text`新建表`uuid_table`,效果如下：\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-9/21750120.jpg)\n\n## 编码\n### 安装pymysql3\n```\npip3 install pymysql3\n```\n### demo.py\n```Python\nimport uuid\nimport pymysql\n\ndef insertCode(codes):\n\tdb = pymysql.connect(host='192.168.10.130', port=3306, user='root', passwd='123456',db='test')\n\tcursor = db.cursor()\n\ttry:\n\t\tfor code in codes:\n\t\t\tsql = \"INSERT INTO uuid_table(uuid,datestr) VALUES ('%s', '%s')\" % (code, '20180109')\n\t\t\tcursor.execute(sql)\n\t\t\tdb.commit()\n\texcept:\n\t\tdb.rollback()\n\tdb.close()\n\ndef generateCode(num):\n\tlist = []\n\tfor i in range(num):\n\t\tlist.append(uuid.uuid1())\n\treturn list\n\nif __name__ == \"__main__\":\n\tcodes = generateCode(200)\n\tinsertCode(codes)\n```\n### 效果\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-9/95571570.jpg)\n","slug":"Pthon练习题(三)","published":1,"updated":"2020-03-09T03:01:45.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mq001f1q2d1mwaqkrj","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>将 0001 题生成的 200 个激活码（或者优惠券）保存到 <strong>MySQL</strong> 关系型数据库中。<br><a id=\"more\"></a></p>\n<h2 id=\"MySql学习\"><a href=\"#MySql学习\" class=\"headerlink\" title=\"MySql学习\"></a>MySql学习</h2><p><a href=\"http://www.runoob.com/mysql/mysql-tutorial.html\" target=\"_blank\" rel=\"noopener\">MySql教程|菜鸟教程</a></p>\n<h2 id=\"安装MySql\"><a href=\"#安装MySql\" class=\"headerlink\" title=\"安装MySql\"></a>安装MySql</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql</span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动MySql\"><a href=\"#启动MySql\" class=\"headerlink\" title=\"启动MySql\"></a>启动MySql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"登陆MySql\"><a href=\"#登陆MySql\" class=\"headerlink\" title=\"登陆MySql\"></a>登陆MySql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权远程连接\"><a href=\"#授权远程连接\" class=\"headerlink\" title=\"授权远程连接\"></a>授权远程连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">MariaDB [(none)]&gt;</span><br><span class=\"line\">grant all privileges on *.* to &apos;root&apos;@&apos;192.168.*.*&apos; identified by &apos;root&apos; with grant option;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br></pre></td></tr></table></figure>\n<h2 id=\"新建表\"><a href=\"#新建表\" class=\"headerlink\" title=\"新建表\"></a>新建表</h2><p>使用Navicat for MySql 连接数据库，并在数据库<code>text</code>新建表<code>uuid_table</code>,效果如下：<br><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-9/21750120.jpg\" alt></p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><h3 id=\"安装pymysql3\"><a href=\"#安装pymysql3\" class=\"headerlink\" title=\"安装pymysql3\"></a>安装pymysql3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install pymysql3</span><br></pre></td></tr></table></figure>\n<h3 id=\"demo-py\"><a href=\"#demo-py\" class=\"headerlink\" title=\"demo.py\"></a>demo.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertCode</span><span class=\"params\">(codes)</span>:</span></span><br><span class=\"line\">\tdb = pymysql.connect(host=<span class=\"string\">'192.168.10.130'</span>, port=<span class=\"number\">3306</span>, user=<span class=\"string\">'root'</span>, passwd=<span class=\"string\">'123456'</span>,db=<span class=\"string\">'test'</span>)</span><br><span class=\"line\">\tcursor = db.cursor()</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> code <span class=\"keyword\">in</span> codes:</span><br><span class=\"line\">\t\t\tsql = <span class=\"string\">\"INSERT INTO uuid_table(uuid,datestr) VALUES ('%s', '%s')\"</span> % (code, <span class=\"string\">'20180109'</span>)</span><br><span class=\"line\">\t\t\tcursor.execute(sql)</span><br><span class=\"line\">\t\t\tdb.commit()</span><br><span class=\"line\">\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\tdb.rollback()</span><br><span class=\"line\">\tdb.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generateCode</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\">\tlist = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">\t\tlist.append(uuid.uuid1())</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">\tcodes = generateCode(<span class=\"number\">200</span>)</span><br><span class=\"line\">\tinsertCode(codes)</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-9/95571570.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>将 0001 题生成的 200 个激活码（或者优惠券）保存到 <strong>MySQL</strong> 关系型数据库中。<br>","more":"</p>\n<h2 id=\"MySql学习\"><a href=\"#MySql学习\" class=\"headerlink\" title=\"MySql学习\"></a>MySql学习</h2><p><a href=\"http://www.runoob.com/mysql/mysql-tutorial.html\" target=\"_blank\" rel=\"noopener\">MySql教程|菜鸟教程</a></p>\n<h2 id=\"安装MySql\"><a href=\"#安装MySql\" class=\"headerlink\" title=\"安装MySql\"></a>安装MySql</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql</span><br><span class=\"line\">yum install mysql-devel</span><br><span class=\"line\">yum install mariadb-server mariadb</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动MySql\"><a href=\"#启动MySql\" class=\"headerlink\" title=\"启动MySql\"></a>启动MySql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start mariadb.service</span><br></pre></td></tr></table></figure>\n<h3 id=\"登陆MySql\"><a href=\"#登陆MySql\" class=\"headerlink\" title=\"登陆MySql\"></a>登陆MySql</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权远程连接\"><a href=\"#授权远程连接\" class=\"headerlink\" title=\"授权远程连接\"></a>授权远程连接</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -u root -p</span><br><span class=\"line\">Enter password:</span><br><span class=\"line\">MariaDB [(none)]&gt;</span><br><span class=\"line\">grant all privileges on *.* to &apos;root&apos;@&apos;192.168.*.*&apos; identified by &apos;root&apos; with grant option;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop firewalld</span><br></pre></td></tr></table></figure>\n<h2 id=\"新建表\"><a href=\"#新建表\" class=\"headerlink\" title=\"新建表\"></a>新建表</h2><p>使用Navicat for MySql 连接数据库，并在数据库<code>text</code>新建表<code>uuid_table</code>,效果如下：<br><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-9/21750120.jpg\" alt></p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><h3 id=\"安装pymysql3\"><a href=\"#安装pymysql3\" class=\"headerlink\" title=\"安装pymysql3\"></a>安装pymysql3</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install pymysql3</span><br></pre></td></tr></table></figure>\n<h3 id=\"demo-py\"><a href=\"#demo-py\" class=\"headerlink\" title=\"demo.py\"></a>demo.py</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\"><span class=\"keyword\">import</span> pymysql</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">insertCode</span><span class=\"params\">(codes)</span>:</span></span><br><span class=\"line\">\tdb = pymysql.connect(host=<span class=\"string\">'192.168.10.130'</span>, port=<span class=\"number\">3306</span>, user=<span class=\"string\">'root'</span>, passwd=<span class=\"string\">'123456'</span>,db=<span class=\"string\">'test'</span>)</span><br><span class=\"line\">\tcursor = db.cursor()</span><br><span class=\"line\">\t<span class=\"keyword\">try</span>:</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> code <span class=\"keyword\">in</span> codes:</span><br><span class=\"line\">\t\t\tsql = <span class=\"string\">\"INSERT INTO uuid_table(uuid,datestr) VALUES ('%s', '%s')\"</span> % (code, <span class=\"string\">'20180109'</span>)</span><br><span class=\"line\">\t\t\tcursor.execute(sql)</span><br><span class=\"line\">\t\t\tdb.commit()</span><br><span class=\"line\">\t<span class=\"keyword\">except</span>:</span><br><span class=\"line\">\t\tdb.rollback()</span><br><span class=\"line\">\tdb.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">generateCode</span><span class=\"params\">(num)</span>:</span></span><br><span class=\"line\">\tlist = []</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(num):</span><br><span class=\"line\">\t\tlist.append(uuid.uuid1())</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">\"__main__\"</span>:</span><br><span class=\"line\">\tcodes = generateCode(<span class=\"number\">200</span>)</span><br><span class=\"line\">\tinsertCode(codes)</span><br></pre></td></tr></table></figure>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-9/95571570.jpg\" alt></p>"},{"title":"Pthon练习题(四)","abbrlink":"7b152142","date":"2018-02-01T03:00:23.000Z","_content":"## 题目\n任一个英文的纯文本文件，统计其中的单词出现的个数。\n<!-- more -->\n## 编码\n```Python\n# -*- coding: utf-8 -*-\ndef count_words_byInput():\n    temp = open(\"page.text\")\n    myStr = temp.read()\n    print (\"请输入你想要查找的单词：\")\n    while True:\n        try:\n            key_word = raw_input(\">>\")\n            break\n        except Exception:\n            print (\"输入有误，请重新输入：\")\n    num = myStr.upper().count(key_word.upper())\n    print (\"搜索结果：\\n>>有%d个【%s】\" % (num, key_word))\n    temp.close()\n\nif __name__ == '__main__':\n    count_words_byInput()\n```","source":"_posts/Pthon练习题(四).md","raw":"---\ntitle: Pthon练习题(四)\ntags: python\ncategories: Pthon练习题\nabbrlink: 7b152142\ndate: 2018-02-01 11:00:23\n---\n## 题目\n任一个英文的纯文本文件，统计其中的单词出现的个数。\n<!-- more -->\n## 编码\n```Python\n# -*- coding: utf-8 -*-\ndef count_words_byInput():\n    temp = open(\"page.text\")\n    myStr = temp.read()\n    print (\"请输入你想要查找的单词：\")\n    while True:\n        try:\n            key_word = raw_input(\">>\")\n            break\n        except Exception:\n            print (\"输入有误，请重新输入：\")\n    num = myStr.upper().count(key_word.upper())\n    print (\"搜索结果：\\n>>有%d个【%s】\" % (num, key_word))\n    temp.close()\n\nif __name__ == '__main__':\n    count_words_byInput()\n```","slug":"Pthon练习题(四)","published":1,"updated":"2020-03-09T03:01:45.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mt001j1q2diyjwr1ht","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>任一个英文的纯文本文件，统计其中的单词出现的个数。<br><a id=\"more\"></a></p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_words_byInput</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    temp = open(<span class=\"string\">\"page.text\"</span>)</span><br><span class=\"line\">    myStr = temp.read()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"请输入你想要查找的单词：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            key_word = raw_input(<span class=\"string\">\"&gt;&gt;\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> (<span class=\"string\">\"输入有误，请重新输入：\"</span>)</span><br><span class=\"line\">    num = myStr.upper().count(key_word.upper())</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"搜索结果：\\n&gt;&gt;有%d个【%s】\"</span> % (num, key_word))</span><br><span class=\"line\">    temp.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    count_words_byInput()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>任一个英文的纯文本文件，统计其中的单词出现的个数。<br>","more":"</p>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count_words_byInput</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    temp = open(<span class=\"string\">\"page.text\"</span>)</span><br><span class=\"line\">    myStr = temp.read()</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"请输入你想要查找的单词：\"</span>)</span><br><span class=\"line\">    <span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            key_word = raw_input(<span class=\"string\">\"&gt;&gt;\"</span>)</span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">except</span> Exception:</span><br><span class=\"line\">            <span class=\"keyword\">print</span> (<span class=\"string\">\"输入有误，请重新输入：\"</span>)</span><br><span class=\"line\">    num = myStr.upper().count(key_word.upper())</span><br><span class=\"line\">    <span class=\"keyword\">print</span> (<span class=\"string\">\"搜索结果：\\n&gt;&gt;有%d个【%s】\"</span> % (num, key_word))</span><br><span class=\"line\">    temp.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    count_words_byInput()</span><br></pre></td></tr></table></figure>"},{"title":"Pthon练习题(一)","abbrlink":"50947504","date":"2018-01-02T03:00:23.000Z","_content":"\n2018年1月3日\n\nPython 版本 ：3.6.3\n\n[题目地址](https://github.com/AlanLang/show-me-the-code) | [参考地址](https://www.jianshu.com/p/05e3973a77ed) | [源码地址](https://github.com/AlanLang/show-me-the-code/tree/master/0000)\n<!-- more -->\n----\n### 使用 Python图像处理库：Pillow\n```\npip install pillow\n```\n### 新建文件demo.py\n输入：\n``` python\n# 引入Pillow\nfrom PIL import Image, ImageDraw, ImageFont, ImageColor\ndef add_num(img):\n    # 创建一个Draw对象\n    draw = ImageDraw.Draw(img)\n    # 创建一个Fount\n    myfont = ImageFont.truetype('C:/windows/fonts/Arial.ttf', size=40)\n    fillcolor = ImageColor.colormap.get('red')\n    width, height = img.size\n    draw.text((width-30, 0), '4', font=myfont, fill=fillcolor)\n    img.save('result.jpg', 'jpeg')\n    return 0\nif __name__ == '__main__':\n    image = Image.open('test.jpg')\n    add_num(image)\n```\n### 效果\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-3/6525123.jpg)\n\n","source":"_posts/Python联系题一.md","raw":"---\ntitle: Pthon练习题(一)\ntags: python\ncategories: Pthon练习题\nabbrlink: '50947504'\ndate: 2018-01-02 11:00:23\n---\n\n2018年1月3日\n\nPython 版本 ：3.6.3\n\n[题目地址](https://github.com/AlanLang/show-me-the-code) | [参考地址](https://www.jianshu.com/p/05e3973a77ed) | [源码地址](https://github.com/AlanLang/show-me-the-code/tree/master/0000)\n<!-- more -->\n----\n### 使用 Python图像处理库：Pillow\n```\npip install pillow\n```\n### 新建文件demo.py\n输入：\n``` python\n# 引入Pillow\nfrom PIL import Image, ImageDraw, ImageFont, ImageColor\ndef add_num(img):\n    # 创建一个Draw对象\n    draw = ImageDraw.Draw(img)\n    # 创建一个Fount\n    myfont = ImageFont.truetype('C:/windows/fonts/Arial.ttf', size=40)\n    fillcolor = ImageColor.colormap.get('red')\n    width, height = img.size\n    draw.text((width-30, 0), '4', font=myfont, fill=fillcolor)\n    img.save('result.jpg', 'jpeg')\n    return 0\nif __name__ == '__main__':\n    image = Image.open('test.jpg')\n    add_num(image)\n```\n### 效果\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-3/6525123.jpg)\n\n","slug":"Python联系题一","published":1,"updated":"2020-03-09T03:01:45.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mx001n1q2dzkshn267","content":"<p>2018年1月3日</p>\n<p>Python 版本 ：3.6.3</p>\n<p><a href=\"https://github.com/AlanLang/show-me-the-code\" target=\"_blank\" rel=\"noopener\">题目地址</a> | <a href=\"https://www.jianshu.com/p/05e3973a77ed\" target=\"_blank\" rel=\"noopener\">参考地址</a> | <a href=\"https://github.com/AlanLang/show-me-the-code/tree/master/0000\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<a id=\"more\"></a>\n<hr>\n<h3 id=\"使用-Python图像处理库：Pillow\"><a href=\"#使用-Python图像处理库：Pillow\" class=\"headerlink\" title=\"使用 Python图像处理库：Pillow\"></a>使用 Python图像处理库：Pillow</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pillow</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建文件demo-py\"><a href=\"#新建文件demo-py\" class=\"headerlink\" title=\"新建文件demo.py\"></a>新建文件demo.py</h3><p>输入：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 引入Pillow</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw, ImageFont, ImageColor</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_num</span><span class=\"params\">(img)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个Draw对象</span></span><br><span class=\"line\">    draw = ImageDraw.Draw(img)</span><br><span class=\"line\">    <span class=\"comment\"># 创建一个Fount</span></span><br><span class=\"line\">    myfont = ImageFont.truetype(<span class=\"string\">'C:/windows/fonts/Arial.ttf'</span>, size=<span class=\"number\">40</span>)</span><br><span class=\"line\">    fillcolor = ImageColor.colormap.get(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    width, height = img.size</span><br><span class=\"line\">    draw.text((width<span class=\"number\">-30</span>, <span class=\"number\">0</span>), <span class=\"string\">'4'</span>, font=myfont, fill=fillcolor)</span><br><span class=\"line\">    img.save(<span class=\"string\">'result.jpg'</span>, <span class=\"string\">'jpeg'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    image = Image.open(<span class=\"string\">'test.jpg'</span>)</span><br><span class=\"line\">    add_num(image)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-3/6525123.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>2018年1月3日</p>\n<p>Python 版本 ：3.6.3</p>\n<p><a href=\"https://github.com/AlanLang/show-me-the-code\" target=\"_blank\" rel=\"noopener\">题目地址</a> | <a href=\"https://www.jianshu.com/p/05e3973a77ed\" target=\"_blank\" rel=\"noopener\">参考地址</a> | <a href=\"https://github.com/AlanLang/show-me-the-code/tree/master/0000\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>","more":"<hr>\n<h3 id=\"使用-Python图像处理库：Pillow\"><a href=\"#使用-Python图像处理库：Pillow\" class=\"headerlink\" title=\"使用 Python图像处理库：Pillow\"></a>使用 Python图像处理库：Pillow</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pillow</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建文件demo-py\"><a href=\"#新建文件demo-py\" class=\"headerlink\" title=\"新建文件demo.py\"></a>新建文件demo.py</h3><p>输入：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 引入Pillow</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> PIL <span class=\"keyword\">import</span> Image, ImageDraw, ImageFont, ImageColor</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_num</span><span class=\"params\">(img)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 创建一个Draw对象</span></span><br><span class=\"line\">    draw = ImageDraw.Draw(img)</span><br><span class=\"line\">    <span class=\"comment\"># 创建一个Fount</span></span><br><span class=\"line\">    myfont = ImageFont.truetype(<span class=\"string\">'C:/windows/fonts/Arial.ttf'</span>, size=<span class=\"number\">40</span>)</span><br><span class=\"line\">    fillcolor = ImageColor.colormap.get(<span class=\"string\">'red'</span>)</span><br><span class=\"line\">    width, height = img.size</span><br><span class=\"line\">    draw.text((width<span class=\"number\">-30</span>, <span class=\"number\">0</span>), <span class=\"string\">'4'</span>, font=myfont, fill=fillcolor)</span><br><span class=\"line\">    img.save(<span class=\"string\">'result.jpg'</span>, <span class=\"string\">'jpeg'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    image = Image.open(<span class=\"string\">'test.jpg'</span>)</span><br><span class=\"line\">    add_num(image)</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-3/6525123.jpg\" alt></p>"},{"title":"React 使用browserHistory项目访问404问题","abbrlink":45936,"date":"2018-10-30T04:49:23.000Z","_content":"> 最近项目里面用到了React但是发布到iis站点之后,路由地址 刷新访问直接404错误。查阅资料之后发现是iis缺少配置URL重写 的问题导致的。下面我们来图形化配置，简单的配置下IIS\n\n<!-- more -->\n## IIS\n安装[url-rewrite](https://www.iis.net/downloads/microsoft/url-rewrite)\n项目根目录新建`web.config`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n<system.webServer>\n  <rewrite>\n    <rules>\n      <rule name=\"React Routes\" stopProcessing=\"true\">\n        <match url=\".*\" />\n        <conditions logicalGrouping=\"MatchAll\">\n          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          <add input=\"{REQUEST_URI}\" pattern=\"^/(api)\" negate=\"true\" />\n        </conditions>\n        <action type=\"Rewrite\" url=\"/\" />\n      </rule>\n    </rules>\n  </rewrite>\n</system.webServer>\n</configuration>\n```\n如果二级目录刷新后显示空白，手动把打包好的index.html中js引用路径 `./` 的 `.` 去掉。\n## Nginx\n```\nserver {\n  server_name react.yahui.wang\n  listen 80;\n\n  root /wwwroot/ReactDemo/dist;\n  index index.html;\n  location / {\n      try_files $uri /index.html;\n    }\n}\n```\n\n## Tomcat\n找到conf目录下的web.xml文件，然后加上一句话让他定位回来\n```\n<error-page>\n    <error-code>404</error-code>\n    <location>/index.html</location>\n</error-page>\n```\n\n## Apache\n开启rewrite\n\n```\nsudo a2enmod rewrite\n```\n\n```\nsudo vi /etc/apache2/sites-enabled/000-default.config\n```\n将其中的 AllowOverride None 修改为 AllowOverride All。\n\n网站根目录新建`.htaccess`文件配置如下：\n\n```\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-l\n  RewriteRule . /index.html [L]\n</IfModule>\n```","source":"_posts/React 使用browserHistory项目访问404问题.md","raw":"---\ntitle: React 使用browserHistory项目访问404问题\ntags: 前端\ncategories: 前端\nabbrlink: 45936\ndate: 2018-10-30 12:49:23\n---\n> 最近项目里面用到了React但是发布到iis站点之后,路由地址 刷新访问直接404错误。查阅资料之后发现是iis缺少配置URL重写 的问题导致的。下面我们来图形化配置，简单的配置下IIS\n\n<!-- more -->\n## IIS\n安装[url-rewrite](https://www.iis.net/downloads/microsoft/url-rewrite)\n项目根目录新建`web.config`\n```\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n<system.webServer>\n  <rewrite>\n    <rules>\n      <rule name=\"React Routes\" stopProcessing=\"true\">\n        <match url=\".*\" />\n        <conditions logicalGrouping=\"MatchAll\">\n          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsFile\" negate=\"true\" />\n          <add input=\"{REQUEST_FILENAME}\" matchType=\"IsDirectory\" negate=\"true\" />\n          <add input=\"{REQUEST_URI}\" pattern=\"^/(api)\" negate=\"true\" />\n        </conditions>\n        <action type=\"Rewrite\" url=\"/\" />\n      </rule>\n    </rules>\n  </rewrite>\n</system.webServer>\n</configuration>\n```\n如果二级目录刷新后显示空白，手动把打包好的index.html中js引用路径 `./` 的 `.` 去掉。\n## Nginx\n```\nserver {\n  server_name react.yahui.wang\n  listen 80;\n\n  root /wwwroot/ReactDemo/dist;\n  index index.html;\n  location / {\n      try_files $uri /index.html;\n    }\n}\n```\n\n## Tomcat\n找到conf目录下的web.xml文件，然后加上一句话让他定位回来\n```\n<error-page>\n    <error-code>404</error-code>\n    <location>/index.html</location>\n</error-page>\n```\n\n## Apache\n开启rewrite\n\n```\nsudo a2enmod rewrite\n```\n\n```\nsudo vi /etc/apache2/sites-enabled/000-default.config\n```\n将其中的 AllowOverride None 修改为 AllowOverride All。\n\n网站根目录新建`.htaccess`文件配置如下：\n\n```\n<IfModule mod_rewrite.c>\n  RewriteEngine On\n  RewriteBase /\n  RewriteRule ^index\\.html$ - [L]\n  RewriteCond %{REQUEST_FILENAME} !-f\n  RewriteCond %{REQUEST_FILENAME} !-d\n  RewriteCond %{REQUEST_FILENAME} !-l\n  RewriteRule . /index.html [L]\n</IfModule>\n```","slug":"React 使用browserHistory项目访问404问题","published":1,"updated":"2020-03-09T03:01:45.085Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7mz001r1q2d5i58tiwx","content":"<blockquote>\n<p>最近项目里面用到了React但是发布到iis站点之后,路由地址 刷新访问直接404错误。查阅资料之后发现是iis缺少配置URL重写 的问题导致的。下面我们来图形化配置，简单的配置下IIS</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"IIS\"><a href=\"#IIS\" class=\"headerlink\" title=\"IIS\"></a>IIS</h2><p>安装<a href=\"https://www.iis.net/downloads/microsoft/url-rewrite\" target=\"_blank\" rel=\"noopener\">url-rewrite</a><br>项目根目录新建<code>web.config</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">&lt;system.webServer&gt;</span><br><span class=\"line\">  &lt;rewrite&gt;</span><br><span class=\"line\">    &lt;rules&gt;</span><br><span class=\"line\">      &lt;rule name=&quot;React Routes&quot; stopProcessing=&quot;true&quot;&gt;</span><br><span class=\"line\">        &lt;match url=&quot;.*&quot; /&gt;</span><br><span class=\"line\">        &lt;conditions logicalGrouping=&quot;MatchAll&quot;&gt;</span><br><span class=\"line\">          &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsFile&quot; negate=&quot;true&quot; /&gt;</span><br><span class=\"line\">          &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsDirectory&quot; negate=&quot;true&quot; /&gt;</span><br><span class=\"line\">          &lt;add input=&quot;&#123;REQUEST_URI&#125;&quot; pattern=&quot;^/(api)&quot; negate=&quot;true&quot; /&gt;</span><br><span class=\"line\">        &lt;/conditions&gt;</span><br><span class=\"line\">        &lt;action type=&quot;Rewrite&quot; url=&quot;/&quot; /&gt;</span><br><span class=\"line\">      &lt;/rule&gt;</span><br><span class=\"line\">    &lt;/rules&gt;</span><br><span class=\"line\">  &lt;/rewrite&gt;</span><br><span class=\"line\">&lt;/system.webServer&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果二级目录刷新后显示空白，手动把打包好的index.html中js引用路径 <code>./</code> 的 <code>.</code> 去掉。</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name react.yahui.wang</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">  root /wwwroot/ReactDemo/dist;</span><br><span class=\"line\">  index index.html;</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">      try_files $uri /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><p>找到conf目录下的web.xml文件，然后加上一句话让他定位回来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;error-page&gt;</span><br><span class=\"line\">    &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class=\"line\">    &lt;location&gt;/index.html&lt;/location&gt;</span><br><span class=\"line\">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h2><p>开启rewrite</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/apache2/sites-enabled/000-default.config</span><br></pre></td></tr></table></figure>\n<p>将其中的 AllowOverride None 修改为 AllowOverride All。</p>\n<p>网站根目录新建<code>.htaccess</code>文件配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">  RewriteEngine On</span><br><span class=\"line\">  RewriteBase /</span><br><span class=\"line\">  RewriteRule ^index\\.html$ - [L]</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-l</span><br><span class=\"line\">  RewriteRule . /index.html [L]</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<blockquote>\n<p>最近项目里面用到了React但是发布到iis站点之后,路由地址 刷新访问直接404错误。查阅资料之后发现是iis缺少配置URL重写 的问题导致的。下面我们来图形化配置，简单的配置下IIS</p>\n</blockquote>","more":"<h2 id=\"IIS\"><a href=\"#IIS\" class=\"headerlink\" title=\"IIS\"></a>IIS</h2><p>安装<a href=\"https://www.iis.net/downloads/microsoft/url-rewrite\" target=\"_blank\" rel=\"noopener\">url-rewrite</a><br>项目根目录新建<code>web.config</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">&lt;system.webServer&gt;</span><br><span class=\"line\">  &lt;rewrite&gt;</span><br><span class=\"line\">    &lt;rules&gt;</span><br><span class=\"line\">      &lt;rule name=&quot;React Routes&quot; stopProcessing=&quot;true&quot;&gt;</span><br><span class=\"line\">        &lt;match url=&quot;.*&quot; /&gt;</span><br><span class=\"line\">        &lt;conditions logicalGrouping=&quot;MatchAll&quot;&gt;</span><br><span class=\"line\">          &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsFile&quot; negate=&quot;true&quot; /&gt;</span><br><span class=\"line\">          &lt;add input=&quot;&#123;REQUEST_FILENAME&#125;&quot; matchType=&quot;IsDirectory&quot; negate=&quot;true&quot; /&gt;</span><br><span class=\"line\">          &lt;add input=&quot;&#123;REQUEST_URI&#125;&quot; pattern=&quot;^/(api)&quot; negate=&quot;true&quot; /&gt;</span><br><span class=\"line\">        &lt;/conditions&gt;</span><br><span class=\"line\">        &lt;action type=&quot;Rewrite&quot; url=&quot;/&quot; /&gt;</span><br><span class=\"line\">      &lt;/rule&gt;</span><br><span class=\"line\">    &lt;/rules&gt;</span><br><span class=\"line\">  &lt;/rewrite&gt;</span><br><span class=\"line\">&lt;/system.webServer&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果二级目录刷新后显示空白，手动把打包好的index.html中js引用路径 <code>./</code> 的 <code>.</code> 去掉。</p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name react.yahui.wang</span><br><span class=\"line\">  listen 80;</span><br><span class=\"line\"></span><br><span class=\"line\">  root /wwwroot/ReactDemo/dist;</span><br><span class=\"line\">  index index.html;</span><br><span class=\"line\">  location / &#123;</span><br><span class=\"line\">      try_files $uri /index.html;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Tomcat\"><a href=\"#Tomcat\" class=\"headerlink\" title=\"Tomcat\"></a>Tomcat</h2><p>找到conf目录下的web.xml文件，然后加上一句话让他定位回来<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;error-page&gt;</span><br><span class=\"line\">    &lt;error-code&gt;404&lt;/error-code&gt;</span><br><span class=\"line\">    &lt;location&gt;/index.html&lt;/location&gt;</span><br><span class=\"line\">&lt;/error-page&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h2><p>开启rewrite</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo a2enmod rewrite</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vi /etc/apache2/sites-enabled/000-default.config</span><br></pre></td></tr></table></figure>\n<p>将其中的 AllowOverride None 修改为 AllowOverride All。</p>\n<p>网站根目录新建<code>.htaccess</code>文件配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule mod_rewrite.c&gt;</span><br><span class=\"line\">  RewriteEngine On</span><br><span class=\"line\">  RewriteBase /</span><br><span class=\"line\">  RewriteRule ^index\\.html$ - [L]</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class=\"line\">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-l</span><br><span class=\"line\">  RewriteRule . /index.html [L]</span><br><span class=\"line\">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>"},{"title":"SqlServer快速注释","abbrlink":"a240876f","date":"2018-02-02T03:00:23.000Z","_content":"`insert-sqlserver-notes.exe` 是为SqlServer数据库批量添加表注释和列注释的小工具，源码请看[GitHub](https://github.com/AlanLang/insert-sqlserver-notes).\n<!-- more -->\n## 1. 配置`yml`类型的配置文件, 格式如下：\n\n```\ntable: \n  - name: SysUser\n    note: 系统用户\n    column:\n      - name: UserID\n        note: 用户表自增ID\n      - name: UserCode\n        note: 用户代码\n      - name: UserName\n        note: 用户名称\n      - name: UserPwd\n        note: 用户密码\n      - name: UserMail\n        note: 用户邮件\n      - name: UserCreate\n        note: 条目生成时间\n      - name: UserModified\n        note: 条目修改时间\n\n  - name: SysMenu\n    note: 系统菜单\n    column: \n      - name: MenuID\n        note: 系统菜单自增ID\n      - name: MenuName\n        note: 菜单名称\n      - name: MenuDesc\n        note: 菜单描述\n```\n## 2. 打开 `insert-sqlserver-notes.exe`\n将配置的yml文件导出到系统中\n## 3. 系统解析配置文件，生成sql语句。效果如下：\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-18/1440409.jpg)","source":"_posts/SqlServer快速注释.md","raw":"---\ntitle: SqlServer快速注释\ntags: 'C#'\ncategories: 小工具\nabbrlink: a240876f\ndate: 2018-02-02 11:00:23\n---\n`insert-sqlserver-notes.exe` 是为SqlServer数据库批量添加表注释和列注释的小工具，源码请看[GitHub](https://github.com/AlanLang/insert-sqlserver-notes).\n<!-- more -->\n## 1. 配置`yml`类型的配置文件, 格式如下：\n\n```\ntable: \n  - name: SysUser\n    note: 系统用户\n    column:\n      - name: UserID\n        note: 用户表自增ID\n      - name: UserCode\n        note: 用户代码\n      - name: UserName\n        note: 用户名称\n      - name: UserPwd\n        note: 用户密码\n      - name: UserMail\n        note: 用户邮件\n      - name: UserCreate\n        note: 条目生成时间\n      - name: UserModified\n        note: 条目修改时间\n\n  - name: SysMenu\n    note: 系统菜单\n    column: \n      - name: MenuID\n        note: 系统菜单自增ID\n      - name: MenuName\n        note: 菜单名称\n      - name: MenuDesc\n        note: 菜单描述\n```\n## 2. 打开 `insert-sqlserver-notes.exe`\n将配置的yml文件导出到系统中\n## 3. 系统解析配置文件，生成sql语句。效果如下：\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-18/1440409.jpg)","slug":"SqlServer快速注释","published":1,"updated":"2020-03-09T03:01:45.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7n1001v1q2dx5zb570h","content":"<p><code>insert-sqlserver-notes.exe</code> 是为SqlServer数据库批量添加表注释和列注释的小工具，源码请看<a href=\"https://github.com/AlanLang/insert-sqlserver-notes\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br><a id=\"more\"></a></p>\n<h2 id=\"1-配置yml类型的配置文件-格式如下：\"><a href=\"#1-配置yml类型的配置文件-格式如下：\" class=\"headerlink\" title=\"1. 配置yml类型的配置文件, 格式如下：\"></a>1. 配置<code>yml</code>类型的配置文件, 格式如下：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table: </span><br><span class=\"line\">  - name: SysUser</span><br><span class=\"line\">    note: 系统用户</span><br><span class=\"line\">    column:</span><br><span class=\"line\">      - name: UserID</span><br><span class=\"line\">        note: 用户表自增ID</span><br><span class=\"line\">      - name: UserCode</span><br><span class=\"line\">        note: 用户代码</span><br><span class=\"line\">      - name: UserName</span><br><span class=\"line\">        note: 用户名称</span><br><span class=\"line\">      - name: UserPwd</span><br><span class=\"line\">        note: 用户密码</span><br><span class=\"line\">      - name: UserMail</span><br><span class=\"line\">        note: 用户邮件</span><br><span class=\"line\">      - name: UserCreate</span><br><span class=\"line\">        note: 条目生成时间</span><br><span class=\"line\">      - name: UserModified</span><br><span class=\"line\">        note: 条目修改时间</span><br><span class=\"line\"></span><br><span class=\"line\">  - name: SysMenu</span><br><span class=\"line\">    note: 系统菜单</span><br><span class=\"line\">    column: </span><br><span class=\"line\">      - name: MenuID</span><br><span class=\"line\">        note: 系统菜单自增ID</span><br><span class=\"line\">      - name: MenuName</span><br><span class=\"line\">        note: 菜单名称</span><br><span class=\"line\">      - name: MenuDesc</span><br><span class=\"line\">        note: 菜单描述</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-打开-insert-sqlserver-notes-exe\"><a href=\"#2-打开-insert-sqlserver-notes-exe\" class=\"headerlink\" title=\"2. 打开 insert-sqlserver-notes.exe\"></a>2. 打开 <code>insert-sqlserver-notes.exe</code></h2><p>将配置的yml文件导出到系统中</p>\n<h2 id=\"3-系统解析配置文件，生成sql语句。效果如下：\"><a href=\"#3-系统解析配置文件，生成sql语句。效果如下：\" class=\"headerlink\" title=\"3. 系统解析配置文件，生成sql语句。效果如下：\"></a>3. 系统解析配置文件，生成sql语句。效果如下：</h2><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-18/1440409.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p><code>insert-sqlserver-notes.exe</code> 是为SqlServer数据库批量添加表注释和列注释的小工具，源码请看<a href=\"https://github.com/AlanLang/insert-sqlserver-notes\" target=\"_blank\" rel=\"noopener\">GitHub</a>.<br>","more":"</p>\n<h2 id=\"1-配置yml类型的配置文件-格式如下：\"><a href=\"#1-配置yml类型的配置文件-格式如下：\" class=\"headerlink\" title=\"1. 配置yml类型的配置文件, 格式如下：\"></a>1. 配置<code>yml</code>类型的配置文件, 格式如下：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">table: </span><br><span class=\"line\">  - name: SysUser</span><br><span class=\"line\">    note: 系统用户</span><br><span class=\"line\">    column:</span><br><span class=\"line\">      - name: UserID</span><br><span class=\"line\">        note: 用户表自增ID</span><br><span class=\"line\">      - name: UserCode</span><br><span class=\"line\">        note: 用户代码</span><br><span class=\"line\">      - name: UserName</span><br><span class=\"line\">        note: 用户名称</span><br><span class=\"line\">      - name: UserPwd</span><br><span class=\"line\">        note: 用户密码</span><br><span class=\"line\">      - name: UserMail</span><br><span class=\"line\">        note: 用户邮件</span><br><span class=\"line\">      - name: UserCreate</span><br><span class=\"line\">        note: 条目生成时间</span><br><span class=\"line\">      - name: UserModified</span><br><span class=\"line\">        note: 条目修改时间</span><br><span class=\"line\"></span><br><span class=\"line\">  - name: SysMenu</span><br><span class=\"line\">    note: 系统菜单</span><br><span class=\"line\">    column: </span><br><span class=\"line\">      - name: MenuID</span><br><span class=\"line\">        note: 系统菜单自增ID</span><br><span class=\"line\">      - name: MenuName</span><br><span class=\"line\">        note: 菜单名称</span><br><span class=\"line\">      - name: MenuDesc</span><br><span class=\"line\">        note: 菜单描述</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-打开-insert-sqlserver-notes-exe\"><a href=\"#2-打开-insert-sqlserver-notes-exe\" class=\"headerlink\" title=\"2. 打开 insert-sqlserver-notes.exe\"></a>2. 打开 <code>insert-sqlserver-notes.exe</code></h2><p>将配置的yml文件导出到系统中</p>\n<h2 id=\"3-系统解析配置文件，生成sql语句。效果如下：\"><a href=\"#3-系统解析配置文件，生成sql语句。效果如下：\" class=\"headerlink\" title=\"3. 系统解析配置文件，生成sql语句。效果如下：\"></a>3. 系统解析配置文件，生成sql语句。效果如下：</h2><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-18/1440409.jpg\" alt></p>"},{"title":"URL schemes collecting","abbrlink":"a15bf862","date":"2018-02-02T04:00:23.000Z","_content":"\n**收集 iOS 常用 App 的 URL schemes，可用于各种启动器，或者添加到桌面。**\n<!-- more -->\n#### 1. 微信\n功能 | URL\n---- | ----\n扫一扫 | ~~weixin://dl/scan~~\n扫一扫（免内置浏览器跳转）|weixin://scanqrcode \n朋友圈 | weixin://dl/moments\n收藏 | weixin://dl/favorites\n我的二维码 | weixin://dl/myQRcode\n\n#### 2. 支付宝\n功能 | URL\n---- | ----\n扫一扫 | alipayqr://platformapi/startapp?saId=10000007\n付款码 | alipayqr://platformapi/startapp?saId=20000056\n红包 | alipay://platformapi/startapp?saId=88886666\n转账|alipayqr://platformapi/startapp?sald=09999988\n发起聊天|alipay://platformapi/startapp?appId=20000254&actionType=createGroup\n\n#### 3. 网易云音乐\n功能 | URL\n---- | ----\n听歌识曲 | orpheuswidget://recognize\n\n#### 4. Surge\n功能 | URL\n---- | ----\n启动 | surge:///start[?autoclose=true]\n停止 | surge:///stop[?autoclose=true]\n切换状态 | surge:///toggle[?autoclose=true]","source":"_posts/URL schemes collecting.md","raw":"---\ntitle: URL schemes collecting\ntags: ios\ncategories: 知识点\nabbrlink: a15bf862\ndate: 2018-02-02 12:00:23\n---\n\n**收集 iOS 常用 App 的 URL schemes，可用于各种启动器，或者添加到桌面。**\n<!-- more -->\n#### 1. 微信\n功能 | URL\n---- | ----\n扫一扫 | ~~weixin://dl/scan~~\n扫一扫（免内置浏览器跳转）|weixin://scanqrcode \n朋友圈 | weixin://dl/moments\n收藏 | weixin://dl/favorites\n我的二维码 | weixin://dl/myQRcode\n\n#### 2. 支付宝\n功能 | URL\n---- | ----\n扫一扫 | alipayqr://platformapi/startapp?saId=10000007\n付款码 | alipayqr://platformapi/startapp?saId=20000056\n红包 | alipay://platformapi/startapp?saId=88886666\n转账|alipayqr://platformapi/startapp?sald=09999988\n发起聊天|alipay://platformapi/startapp?appId=20000254&actionType=createGroup\n\n#### 3. 网易云音乐\n功能 | URL\n---- | ----\n听歌识曲 | orpheuswidget://recognize\n\n#### 4. Surge\n功能 | URL\n---- | ----\n启动 | surge:///start[?autoclose=true]\n停止 | surge:///stop[?autoclose=true]\n切换状态 | surge:///toggle[?autoclose=true]","slug":"URL schemes collecting","published":1,"updated":"2020-03-09T03:01:45.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7n2001z1q2dmmqqp0az","content":"<p><strong>收集 iOS 常用 App 的 URL schemes，可用于各种启动器，或者添加到桌面。</strong><br><a id=\"more\"></a></p>\n<h4 id=\"1-微信\"><a href=\"#1-微信\" class=\"headerlink\" title=\"1. 微信\"></a>1. 微信</h4><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>扫一扫</td>\n<td><del>weixin://dl/scan</del></td>\n</tr>\n<tr>\n<td>扫一扫（免内置浏览器跳转）</td>\n<td>weixin://scanqrcode </td>\n</tr>\n<tr>\n<td>朋友圈</td>\n<td>weixin://dl/moments</td>\n</tr>\n<tr>\n<td>收藏</td>\n<td>weixin://dl/favorites</td>\n</tr>\n<tr>\n<td>我的二维码</td>\n<td>weixin://dl/myQRcode</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-支付宝\"><a href=\"#2-支付宝\" class=\"headerlink\" title=\"2. 支付宝\"></a>2. 支付宝</h4><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>扫一扫</td>\n<td>alipayqr://platformapi/startapp?saId=10000007</td>\n</tr>\n<tr>\n<td>付款码</td>\n<td>alipayqr://platformapi/startapp?saId=20000056</td>\n</tr>\n<tr>\n<td>红包</td>\n<td>alipay://platformapi/startapp?saId=88886666</td>\n</tr>\n<tr>\n<td>转账</td>\n<td>alipayqr://platformapi/startapp?sald=09999988</td>\n</tr>\n<tr>\n<td>发起聊天</td>\n<td>alipay://platformapi/startapp?appId=20000254&amp;actionType=createGroup</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-网易云音乐\"><a href=\"#3-网易云音乐\" class=\"headerlink\" title=\"3. 网易云音乐\"></a>3. 网易云音乐</h4><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>听歌识曲</td>\n<td>orpheuswidget://recognize</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-Surge\"><a href=\"#4-Surge\" class=\"headerlink\" title=\"4. Surge\"></a>4. Surge</h4><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动</td>\n<td>surge:///start[?autoclose=true]</td>\n</tr>\n<tr>\n<td>停止</td>\n<td>surge:///stop[?autoclose=true]</td>\n</tr>\n<tr>\n<td>切换状态</td>\n<td>surge:///toggle[?autoclose=true]</td>\n</tr>\n</tbody>\n</table>\n","site":{"data":{}},"excerpt":"<p><strong>收集 iOS 常用 App 的 URL schemes，可用于各种启动器，或者添加到桌面。</strong><br>","more":"</p>\n<h4 id=\"1-微信\"><a href=\"#1-微信\" class=\"headerlink\" title=\"1. 微信\"></a>1. 微信</h4><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>扫一扫</td>\n<td><del>weixin://dl/scan</del></td>\n</tr>\n<tr>\n<td>扫一扫（免内置浏览器跳转）</td>\n<td>weixin://scanqrcode </td>\n</tr>\n<tr>\n<td>朋友圈</td>\n<td>weixin://dl/moments</td>\n</tr>\n<tr>\n<td>收藏</td>\n<td>weixin://dl/favorites</td>\n</tr>\n<tr>\n<td>我的二维码</td>\n<td>weixin://dl/myQRcode</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"2-支付宝\"><a href=\"#2-支付宝\" class=\"headerlink\" title=\"2. 支付宝\"></a>2. 支付宝</h4><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>扫一扫</td>\n<td>alipayqr://platformapi/startapp?saId=10000007</td>\n</tr>\n<tr>\n<td>付款码</td>\n<td>alipayqr://platformapi/startapp?saId=20000056</td>\n</tr>\n<tr>\n<td>红包</td>\n<td>alipay://platformapi/startapp?saId=88886666</td>\n</tr>\n<tr>\n<td>转账</td>\n<td>alipayqr://platformapi/startapp?sald=09999988</td>\n</tr>\n<tr>\n<td>发起聊天</td>\n<td>alipay://platformapi/startapp?appId=20000254&amp;actionType=createGroup</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"3-网易云音乐\"><a href=\"#3-网易云音乐\" class=\"headerlink\" title=\"3. 网易云音乐\"></a>3. 网易云音乐</h4><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>听歌识曲</td>\n<td>orpheuswidget://recognize</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"4-Surge\"><a href=\"#4-Surge\" class=\"headerlink\" title=\"4. Surge\"></a>4. Surge</h4><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>URL</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>启动</td>\n<td>surge:///start[?autoclose=true]</td>\n</tr>\n<tr>\n<td>停止</td>\n<td>surge:///stop[?autoclose=true]</td>\n</tr>\n<tr>\n<td>切换状态</td>\n<td>surge:///toggle[?autoclose=true]</td>\n</tr>\n</tbody>\n</table>"},{"title":"React+Electron 从搭建到发布","abbrlink":12273,"date":"2019-01-09T01:28:23.000Z","_content":"\n## 准备工作\n安装`node`环境\nhttps://nodejs.org/zh-cn/\n安装过程不做赘述。\n\n安装`react`脚手架`create-react-app`和[yarn](https://github.com/yarnpkg/yarn/)\n```\nnpm install -g create-react-app yarn\n```\n\n创建`React`项目\n脚手架安装完成后，执行以下命令，创建一个名为`react-electron-demo`的应用\n```\ncreate-react-app react-electron-demo\n```\n<!-- more -->\n\n## 引入`Electron`\n安装 `electron`\n```\ncd react-electron-demo\nyarn add electron --dev\nyarn add electron-is-dev\n```\n根目录新建入口文件`main.js`\n```\nconst electron = require('electron');\nconst app = electron.app;\nconst BrowserWindow = electron.BrowserWindow;\n\nconst path = require('path');\nconst url = require('url');\nconst isDev = require('electron-is-dev');\n\nlet mainWindow;\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({width: 900, height: 680});\n  mainWindow.loadURL(isDev ? 'http://localhost:3000' : `file://${path.join(__dirname, './build/index.html')}`);\n  mainWindow.on('closed', () => mainWindow = null);\n}\n\napp.on('ready', createWindow);\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n```\n将入口文件加入到package.json中\n```\n\"main\": \"main.js\",\n\"homepage\": \".\",\n```\n添加 `npm scripts`\n```\n\"electron\": \"electron .\",\n```\n启动\n```\nyarn start\n// 新建一个终端\nyarn electron\n```\n启动后效果如图：\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/18305917.jpg)\n\n## 优化\n### 使用`concurrently`并行运行\n同时开两个终端有点繁琐，所以可以借助工具`concurrently`。\n安装`concurrently`\n```\nyarn add concurrently --dev\n```\n添加 `npm scripts`\n```\n\"dev\": \"concurrently \\\"yarn start\\\" \\\"electron .\\\"\"\n```\n\n### 禁止启动时在浏览器中打开\n根目录新建文件`.env`，输入：\n```\nBROWSER=none\n```\n保存后重新启动即可\n\n### 优化启动顺序\n由于electron启动需要先等react启动完毕，所以可以使用工具`wait-on`。\n安装`wait-on`\n```\nyarn add wait-on --dev\n```\n修改`npm scripts`\n```\n\"dev\": \"concurrently \\\"yarn start\\\" \\\"wait-on http://localhost:3000 && electron .\\\"\"\n```\n\n## 打包发布\n安装`electron-builder`\n```\nyarn add electron-builder --dev\n```\n在`package.json`中添加`build`字段\n```\n\"build\": {\n  \"appId\": \"com.example.electron-cra\",\n  \"files\": [\n    \"build/**/*\",\n    \"node_modules/**/*\",\n    \"public/**/*\",\n    \"main.js\"\n  ],\n  \"directories\":{\n    \"buildResources\": \"assets\"\n  }\n}\n```\n添加 `npm scripts`\n以windows平台为例，其他平台请参考`electron-builder`文档\n```\n\"package\": \"yarn build && electron-builder -c.extraMetadata.main=main.js --win --x64\"\n```\n打包\n```\nyarn package\n```\n打包后的文件会在`dist`目录中\n\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/95561492.jpg)\n\n此教程的源码已托管在github：\nhttps://github.com/AlanLang/react-electron-demo\n\n谢谢您的阅读，如发现本文有任何不妥，欢迎指正，不胜感激。","source":"_posts/React+Electron 从搭建到发布.md","raw":"---\ntitle: React+Electron 从搭建到发布\ntags: 前端\ncategories: 前端\nabbrlink: 12273\ndate: 2019-01-09 09:28:23\n---\n\n## 准备工作\n安装`node`环境\nhttps://nodejs.org/zh-cn/\n安装过程不做赘述。\n\n安装`react`脚手架`create-react-app`和[yarn](https://github.com/yarnpkg/yarn/)\n```\nnpm install -g create-react-app yarn\n```\n\n创建`React`项目\n脚手架安装完成后，执行以下命令，创建一个名为`react-electron-demo`的应用\n```\ncreate-react-app react-electron-demo\n```\n<!-- more -->\n\n## 引入`Electron`\n安装 `electron`\n```\ncd react-electron-demo\nyarn add electron --dev\nyarn add electron-is-dev\n```\n根目录新建入口文件`main.js`\n```\nconst electron = require('electron');\nconst app = electron.app;\nconst BrowserWindow = electron.BrowserWindow;\n\nconst path = require('path');\nconst url = require('url');\nconst isDev = require('electron-is-dev');\n\nlet mainWindow;\n\nfunction createWindow() {\n  mainWindow = new BrowserWindow({width: 900, height: 680});\n  mainWindow.loadURL(isDev ? 'http://localhost:3000' : `file://${path.join(__dirname, './build/index.html')}`);\n  mainWindow.on('closed', () => mainWindow = null);\n}\n\napp.on('ready', createWindow);\n\napp.on('window-all-closed', () => {\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp.on('activate', () => {\n  if (mainWindow === null) {\n    createWindow();\n  }\n});\n```\n将入口文件加入到package.json中\n```\n\"main\": \"main.js\",\n\"homepage\": \".\",\n```\n添加 `npm scripts`\n```\n\"electron\": \"electron .\",\n```\n启动\n```\nyarn start\n// 新建一个终端\nyarn electron\n```\n启动后效果如图：\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/18305917.jpg)\n\n## 优化\n### 使用`concurrently`并行运行\n同时开两个终端有点繁琐，所以可以借助工具`concurrently`。\n安装`concurrently`\n```\nyarn add concurrently --dev\n```\n添加 `npm scripts`\n```\n\"dev\": \"concurrently \\\"yarn start\\\" \\\"electron .\\\"\"\n```\n\n### 禁止启动时在浏览器中打开\n根目录新建文件`.env`，输入：\n```\nBROWSER=none\n```\n保存后重新启动即可\n\n### 优化启动顺序\n由于electron启动需要先等react启动完毕，所以可以使用工具`wait-on`。\n安装`wait-on`\n```\nyarn add wait-on --dev\n```\n修改`npm scripts`\n```\n\"dev\": \"concurrently \\\"yarn start\\\" \\\"wait-on http://localhost:3000 && electron .\\\"\"\n```\n\n## 打包发布\n安装`electron-builder`\n```\nyarn add electron-builder --dev\n```\n在`package.json`中添加`build`字段\n```\n\"build\": {\n  \"appId\": \"com.example.electron-cra\",\n  \"files\": [\n    \"build/**/*\",\n    \"node_modules/**/*\",\n    \"public/**/*\",\n    \"main.js\"\n  ],\n  \"directories\":{\n    \"buildResources\": \"assets\"\n  }\n}\n```\n添加 `npm scripts`\n以windows平台为例，其他平台请参考`electron-builder`文档\n```\n\"package\": \"yarn build && electron-builder -c.extraMetadata.main=main.js --win --x64\"\n```\n打包\n```\nyarn package\n```\n打包后的文件会在`dist`目录中\n\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/95561492.jpg)\n\n此教程的源码已托管在github：\nhttps://github.com/AlanLang/react-electron-demo\n\n谢谢您的阅读，如发现本文有任何不妥，欢迎指正，不胜感激。","slug":"React+Electron 从搭建到发布","published":1,"updated":"2020-03-09T03:01:45.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7n500231q2dx4a45h8c","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>安装<code>node</code>环境<br><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/zh-cn/</a><br>安装过程不做赘述。</p>\n<p>安装<code>react</code>脚手架<code>create-react-app</code>和<a href=\"https://github.com/yarnpkg/yarn/\" target=\"_blank\" rel=\"noopener\">yarn</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app yarn</span><br></pre></td></tr></table></figure></p>\n<p>创建<code>React</code>项目<br>脚手架安装完成后，执行以下命令，创建一个名为<code>react-electron-demo</code>的应用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-app react-electron-demo</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"引入Electron\"><a href=\"#引入Electron\" class=\"headerlink\" title=\"引入Electron\"></a>引入<code>Electron</code></h2><p>安装 <code>electron</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd react-electron-demo</span><br><span class=\"line\">yarn add electron --dev</span><br><span class=\"line\">yarn add electron-is-dev</span><br></pre></td></tr></table></figure></p>\n<p>根目录新建入口文件<code>main.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const electron = require(&apos;electron&apos;);</span><br><span class=\"line\">const app = electron.app;</span><br><span class=\"line\">const BrowserWindow = electron.BrowserWindow;</span><br><span class=\"line\"></span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const url = require(&apos;url&apos;);</span><br><span class=\"line\">const isDev = require(&apos;electron-is-dev&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let mainWindow;</span><br><span class=\"line\"></span><br><span class=\"line\">function createWindow() &#123;</span><br><span class=\"line\">  mainWindow = new BrowserWindow(&#123;width: 900, height: 680&#125;);</span><br><span class=\"line\">  mainWindow.loadURL(isDev ? &apos;http://localhost:3000&apos; : `file://$&#123;path.join(__dirname, &apos;./build/index.html&apos;)&#125;`);</span><br><span class=\"line\">  mainWindow.on(&apos;closed&apos;, () =&gt; mainWindow = null);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&apos;ready&apos;, createWindow);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&apos;window-all-closed&apos;, () =&gt; &#123;</span><br><span class=\"line\">  if (process.platform !== &apos;darwin&apos;) &#123;</span><br><span class=\"line\">    app.quit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&apos;activate&apos;, () =&gt; &#123;</span><br><span class=\"line\">  if (mainWindow === null) &#123;</span><br><span class=\"line\">    createWindow();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>将入口文件加入到package.json中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot;: &quot;main.js&quot;,</span><br><span class=\"line\">&quot;homepage&quot;: &quot;.&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>添加 <code>npm scripts</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;electron&quot;: &quot;electron .&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn start</span><br><span class=\"line\">// 新建一个终端</span><br><span class=\"line\">yarn electron</span><br></pre></td></tr></table></figure></p>\n<p>启动后效果如图：<br><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/18305917.jpg\" alt></p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h3 id=\"使用concurrently并行运行\"><a href=\"#使用concurrently并行运行\" class=\"headerlink\" title=\"使用concurrently并行运行\"></a>使用<code>concurrently</code>并行运行</h3><p>同时开两个终端有点繁琐，所以可以借助工具<code>concurrently</code>。<br>安装<code>concurrently</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add concurrently --dev</span><br></pre></td></tr></table></figure></p>\n<p>添加 <code>npm scripts</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;concurrently \\&quot;yarn start\\&quot; \\&quot;electron .\\&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"禁止启动时在浏览器中打开\"><a href=\"#禁止启动时在浏览器中打开\" class=\"headerlink\" title=\"禁止启动时在浏览器中打开\"></a>禁止启动时在浏览器中打开</h3><p>根目录新建文件<code>.env</code>，输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BROWSER=none</span><br></pre></td></tr></table></figure></p>\n<p>保存后重新启动即可</p>\n<h3 id=\"优化启动顺序\"><a href=\"#优化启动顺序\" class=\"headerlink\" title=\"优化启动顺序\"></a>优化启动顺序</h3><p>由于electron启动需要先等react启动完毕，所以可以使用工具<code>wait-on</code>。<br>安装<code>wait-on</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add wait-on --dev</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>npm scripts</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;concurrently \\&quot;yarn start\\&quot; \\&quot;wait-on http://localhost:3000 &amp;&amp; electron .\\&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"打包发布\"><a href=\"#打包发布\" class=\"headerlink\" title=\"打包发布\"></a>打包发布</h2><p>安装<code>electron-builder</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add electron-builder --dev</span><br></pre></td></tr></table></figure></p>\n<p>在<code>package.json</code>中添加<code>build</code>字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;build&quot;: &#123;</span><br><span class=\"line\">  &quot;appId&quot;: &quot;com.example.electron-cra&quot;,</span><br><span class=\"line\">  &quot;files&quot;: [</span><br><span class=\"line\">    &quot;build/**/*&quot;,</span><br><span class=\"line\">    &quot;node_modules/**/*&quot;,</span><br><span class=\"line\">    &quot;public/**/*&quot;,</span><br><span class=\"line\">    &quot;main.js&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;directories&quot;:&#123;</span><br><span class=\"line\">    &quot;buildResources&quot;: &quot;assets&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加 <code>npm scripts</code><br>以windows平台为例，其他平台请参考<code>electron-builder</code>文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;package&quot;: &quot;yarn build &amp;&amp; electron-builder -c.extraMetadata.main=main.js --win --x64&quot;</span><br></pre></td></tr></table></figure></p>\n<p>打包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn package</span><br></pre></td></tr></table></figure></p>\n<p>打包后的文件会在<code>dist</code>目录中</p>\n<p><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/95561492.jpg\" alt></p>\n<p>此教程的源码已托管在github：<br><a href=\"https://github.com/AlanLang/react-electron-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/AlanLang/react-electron-demo</a></p>\n<p>谢谢您的阅读，如发现本文有任何不妥，欢迎指正，不胜感激。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>安装<code>node</code>环境<br><a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\">https://nodejs.org/zh-cn/</a><br>安装过程不做赘述。</p>\n<p>安装<code>react</code>脚手架<code>create-react-app</code>和<a href=\"https://github.com/yarnpkg/yarn/\" target=\"_blank\" rel=\"noopener\">yarn</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app yarn</span><br></pre></td></tr></table></figure></p>\n<p>创建<code>React</code>项目<br>脚手架安装完成后，执行以下命令，创建一个名为<code>react-electron-demo</code>的应用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-app react-electron-demo</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"引入Electron\"><a href=\"#引入Electron\" class=\"headerlink\" title=\"引入Electron\"></a>引入<code>Electron</code></h2><p>安装 <code>electron</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd react-electron-demo</span><br><span class=\"line\">yarn add electron --dev</span><br><span class=\"line\">yarn add electron-is-dev</span><br></pre></td></tr></table></figure></p>\n<p>根目录新建入口文件<code>main.js</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const electron = require(&apos;electron&apos;);</span><br><span class=\"line\">const app = electron.app;</span><br><span class=\"line\">const BrowserWindow = electron.BrowserWindow;</span><br><span class=\"line\"></span><br><span class=\"line\">const path = require(&apos;path&apos;);</span><br><span class=\"line\">const url = require(&apos;url&apos;);</span><br><span class=\"line\">const isDev = require(&apos;electron-is-dev&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">let mainWindow;</span><br><span class=\"line\"></span><br><span class=\"line\">function createWindow() &#123;</span><br><span class=\"line\">  mainWindow = new BrowserWindow(&#123;width: 900, height: 680&#125;);</span><br><span class=\"line\">  mainWindow.loadURL(isDev ? &apos;http://localhost:3000&apos; : `file://$&#123;path.join(__dirname, &apos;./build/index.html&apos;)&#125;`);</span><br><span class=\"line\">  mainWindow.on(&apos;closed&apos;, () =&gt; mainWindow = null);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&apos;ready&apos;, createWindow);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&apos;window-all-closed&apos;, () =&gt; &#123;</span><br><span class=\"line\">  if (process.platform !== &apos;darwin&apos;) &#123;</span><br><span class=\"line\">    app.quit();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.on(&apos;activate&apos;, () =&gt; &#123;</span><br><span class=\"line\">  if (mainWindow === null) &#123;</span><br><span class=\"line\">    createWindow();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>将入口文件加入到package.json中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;main&quot;: &quot;main.js&quot;,</span><br><span class=\"line\">&quot;homepage&quot;: &quot;.&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>添加 <code>npm scripts</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;electron&quot;: &quot;electron .&quot;,</span><br></pre></td></tr></table></figure></p>\n<p>启动<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn start</span><br><span class=\"line\">// 新建一个终端</span><br><span class=\"line\">yarn electron</span><br></pre></td></tr></table></figure></p>\n<p>启动后效果如图：<br><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/18305917.jpg\" alt></p>\n<h2 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h2><h3 id=\"使用concurrently并行运行\"><a href=\"#使用concurrently并行运行\" class=\"headerlink\" title=\"使用concurrently并行运行\"></a>使用<code>concurrently</code>并行运行</h3><p>同时开两个终端有点繁琐，所以可以借助工具<code>concurrently</code>。<br>安装<code>concurrently</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add concurrently --dev</span><br></pre></td></tr></table></figure></p>\n<p>添加 <code>npm scripts</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;concurrently \\&quot;yarn start\\&quot; \\&quot;electron .\\&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"禁止启动时在浏览器中打开\"><a href=\"#禁止启动时在浏览器中打开\" class=\"headerlink\" title=\"禁止启动时在浏览器中打开\"></a>禁止启动时在浏览器中打开</h3><p>根目录新建文件<code>.env</code>，输入：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BROWSER=none</span><br></pre></td></tr></table></figure></p>\n<p>保存后重新启动即可</p>\n<h3 id=\"优化启动顺序\"><a href=\"#优化启动顺序\" class=\"headerlink\" title=\"优化启动顺序\"></a>优化启动顺序</h3><p>由于electron启动需要先等react启动完毕，所以可以使用工具<code>wait-on</code>。<br>安装<code>wait-on</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add wait-on --dev</span><br></pre></td></tr></table></figure></p>\n<p>修改<code>npm scripts</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;concurrently \\&quot;yarn start\\&quot; \\&quot;wait-on http://localhost:3000 &amp;&amp; electron .\\&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"打包发布\"><a href=\"#打包发布\" class=\"headerlink\" title=\"打包发布\"></a>打包发布</h2><p>安装<code>electron-builder</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add electron-builder --dev</span><br></pre></td></tr></table></figure></p>\n<p>在<code>package.json</code>中添加<code>build</code>字段<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;build&quot;: &#123;</span><br><span class=\"line\">  &quot;appId&quot;: &quot;com.example.electron-cra&quot;,</span><br><span class=\"line\">  &quot;files&quot;: [</span><br><span class=\"line\">    &quot;build/**/*&quot;,</span><br><span class=\"line\">    &quot;node_modules/**/*&quot;,</span><br><span class=\"line\">    &quot;public/**/*&quot;,</span><br><span class=\"line\">    &quot;main.js&quot;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  &quot;directories&quot;:&#123;</span><br><span class=\"line\">    &quot;buildResources&quot;: &quot;assets&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>添加 <code>npm scripts</code><br>以windows平台为例，其他平台请参考<code>electron-builder</code>文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;package&quot;: &quot;yarn build &amp;&amp; electron-builder -c.extraMetadata.main=main.js --win --x64&quot;</span><br></pre></td></tr></table></figure></p>\n<p>打包<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn package</span><br></pre></td></tr></table></figure></p>\n<p>打包后的文件会在<code>dist</code>目录中</p>\n<p><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/19-1-9/95561492.jpg\" alt></p>\n<p>此教程的源码已托管在github：<br><a href=\"https://github.com/AlanLang/react-electron-demo\" target=\"_blank\" rel=\"noopener\">https://github.com/AlanLang/react-electron-demo</a></p>\n<p>谢谢您的阅读，如发现本文有任何不妥，欢迎指正，不胜感激。</p>"},{"title":"OpenCore安装黑苹果","abbrlink":11242,"date":"2020-06-11T01:49:23.000Z","_content":"[EFI文件](https://github.com/AlanLang/ASRock-Z390-Phantom-Gaming-ITXac-OpenCore-Hackintosh)\n## 配置清单\n|硬件配置|选型|\n|---|---|\n|CPU|i7 9700k|\n|主板|华擎 Z390 Phantom Gaming-ITX AC|\n|显卡|蓝宝石RX560 + 显卡延长线|\n|内存条|芝奇幻光戟16G * 1|\n|硬盘|WD/西部数据 SN550系列500G SSD|\n|电源|全汉MS600 铜牌全模组+定制线|\n|无线网卡|博通DW1560 (可以直接替换主板上的)|\n|散热|乔思伯240水冷|\n|机箱|定制的A4机箱|\n\n<!-- more -->\n\n## BIOS设置\n禁用如下：\n\n|英文|中文|\n|:----|:---|\n| Fast Boot | 快速启动 |\n| CFG Lock (MSR 0xE2 write protection) | CFG 锁 (MSR 0xE2 写入保护) |\n| vt-d | vt-d |\n\n启用如下:\n\n| 英文 | 中文 |\n| :------------------- | :------------------------------------------------------- |\n| Above 4G decoding | 大于 4G 地址空间解码 |\n| CSM | 兼容性支持模块 |\n|IGPU|IGPU多监视器|\n|XHCI Hand-off|XHCI Hand-off|\n\n注意 关于CSM看网上教程都说要关闭它，但是我关闭了之后有一定概率引导失败，所以就把它打开了\n\n## config.plist\n### ACPI\n#### ACPI—–Add\n根据ACPI目录下所用的SSDT填写\n#### ACPI—–Block\n不用填\n#### ACPI—–Patch\n一些热补丁\n#### ACPI—–Quirks\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n|FadtEnableReset| Boolean| false |一些旧的主板需要对FADT进行标记来激活电脑的开机和关机功能，这里我们不许要启动它（如果你遇到关机变重启，可以打开试试，我们之后也会在nvram中将这个问题修复）|\n|NormalizeHeaders| Boolean| false |清理ACPI头，一些主板的ACPI表需要打开这个修复启动。但如果补丁点亮系统，请试试NO|\n|RebaseRegions| Boolean| false |换硬件、升级BIOS等对硬件的操作会对ACPI表产生影响，一般不需要打开，若发现卡PCI Configuraion Begin，请尝试打开|\n|ResetHwSig| Boolean| false |休眠相关项，台式机不需要|\n|ResetLogoStatus| Boolean| false |重置登录状态|\n\n### Booter\n内存相关选项设置。\n#### Booter--MmioWhitelist\n默认的第一项是为Haswell芯片提供的内存寻址修复，如果此类芯片碰到内存相关问题，请开启它(enable选择yes)。\n默认第二项是开机卡PCI Configuration这里。ACPI、PCI device同时释放到内存时发生0x1000内存地址被占用而卡在PCI Configration.如果碰到此类问题，请开启它。\n\n#### Boot—Quirks\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AvoidRuntimeDefrag | Boolean | true | 修复UEFI运行时服务，例如日期，时间，NVRAM，电源控制等|\n| DevirtualiseMmio | Boolean | false | 减少被盗的内存占用空间，扩展值的选项|\n| DisableSingleUser | Boolean | false | 禁止单用户模式|\n| DisableVariableWrite | Boolean | false | 非原生NVRAM主板需要模拟nvram.plist进而写入variable值，因此要禁止此项来防止其他程序对nvram进行写入, 如果你的主板支持原生nvram，请选择NO|\n| DiscardHibernateMap | Boolean | false | 重用原始的休眠内存映射 |\n| EnableSafeModeSlide | Boolean | true | 允许在安全模式下使用Slide 值|\n| EnableWriteUnprotector | boolean | true | 在执行期间从CR0寄存器中删除写保护|\n| ForceExitBootServices| boolean | false | 这个选项是让那些非常老旧的主板也能使用内存寻址|\n| ProtectMemoryRegions | boolean | false | 官方对此项目的解释与AvoidRuntimeDefrag类似，除非你明白这是什么，不然选择NO，其实我也不明白。|\n| ProtectSecureBoot | boolean | fasle | 保护uefi安全启动被写入|\n| ProtectUefiServices | boolean | fasle | 保护UEFI服务不被固件覆盖，主要与VM，Icelake和较新的Coffeelake系统有关， 一般Z490的主板需要|\n| ProvideCustomSlide | boolean | true | 如果Slide 值存在冲突，则此选项将强制macOS使用伪随机值。接收调试消息的人需要Only N/256 slide values are usable!|\n| RebuildAppleMemoryMap | boolean | false | 生成与macOS兼容的内存映射|\n| SetupVirtualMap | boolean | true | 将SetVirtualAddresses调用修复为虚拟地址，在Skylake和更高版本上不需要|\n| SignalAppleOS | boolean | false | 促使硬件始终启动macOS，主要是对带有dGPU的MacBook Pro有利，因为启动Windows不允许使用iGPU|\n| SyncRuntimePermissions | boolean | true |修正硬件在注入内存时无法注入权限的问题|\n\n### DeviceProperties\n此项是用来注入你的设备的，主要是显卡和声卡两部分。\n#### DeviceProperties--Add\n根据实际情况填写声卡和显卡的信息\n#### DeviceProperties--Block\n这里是禁用一些设备的，我们按默认就行了，不需要任何修改。\n\n### Kernel\n这里是内核相关选项。\n#### Kernel--Add\n根据Kexts目录下的文件进行填写\n#### Kernel--Block\n不需要\n#### Kernel--Emulate\n此选项帮助Ivy Bridge 和一些不受支持的CPU加载电源管理的，所有选项按默认即可。\n#### Kernel--Patch\n保持默认\n#### Kernel--Quirks\n内核相关的快捷选项\n\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AppleCpuPmCfgLock | boolean | false | 仅当无法在BIOS中禁用CFG-Lock时才需要 |\n| AppleXcpmCfgLock | boolean | false | 仅当无法在BIOS中禁用CFG-Lock时才需要+1 | \n| AppleXcpmExtraMsrs | boolean | false | 禁用奔腾和许多Xeon等不受支持的CPU所需的多个MSR访问。|\n| AppleXcpmForceBoost | boolean | false | 强制使用最大性能，仅建议在持续负载的设备或媒体计算机上启用。|\n| CustomSMBIOSGuid | boolean | false | 对UpdateSMBIOSMode自定义模式执行GUID修补。通常与戴尔笔记本电脑有关|\n| DisableIoMapper | boolean | false | 禁用vt-d，我们在BIOS里已经禁用vt-d了，这里我们选择NO就行了。|\n| DisableRtcChecksum | boolean | false | 越过两条rtc检查(0x58及0x59) |\n| DummyPowerManagement | boolean | false | 替代NullCpuPowerManagement.kext，如果你使用此补丁，请删除并选择yes。我们一般选择no。|\n| ExternalDiskIcons | boolean | false | 修复苹果系统把内部硬盘识别为外置硬盘时（黄色图标的硬盘）开启，我们一般选择NO。|\n| IncreasePciBarSize | boolean | false | 解决卡PCI configuration，如果碰到请选择yes, 我们选择no。|\n| LapicKernelPanic | boolean | false | 适用于HP笔记本的内核奔溃选项|\n| PanicNoKextDump | boolean | false | 防止kext出错打报告而让我们看不到真正的panic原因，这个随便选，我选择NO。|\n| PowerTimeoutKernelPanic | boolean | false | 10.15系统中存在一些设备自身的电源管理无法让系统进入睡眠而超时，导致内核奔溃，如果有这个问题请选择YES。|\n| ThirdPartyDrives | boolean | false | 开启Sata类SSD的trim功能，我没有sata类的ssd，我选择NO。\n| XhciPortLimit | boolean | true | 解除15个端口限制|\n### Misc\n开机引导类的设置。\n#### Misc--BlessOverride\n这个选项是帮助我们寻找一些不寻常的EFI位置的，除非你有这种情况，不然我们不需要填写任何东西。\n#### Misc--Boot\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| ConsoleAttributes | Number | 0 | 开机选择界面的颜色 |\n| HibernateMode | String | None | 检测休眠模式。|\n| HideAuxiliary | Boolean | false | 在开机选择画面隐藏一些辅助项目，比如recovery盘，clean NVRAM等。一般我们选择NO。|\n| HideSelf | Boolean | YES | 隐藏自身的EFI引导盘选项|\n| PickerAttributes| Number | 0 | 用于设置自定义选择器属性，此处将不介绍 | \n| PickerAudioAssist | Boolean | No | 用于在选择器中启用VoiceOver之类的支持 |\n| PickerMode | String | Builtin | 设置OpenCore使用内置的选择器 |\n| PollAppleHotKeys | Boolean | true | 允许您在引导过程中使用Apple的热键 |\n| ShowPicker | Boolean | true | 是否显示开机启动盘选项 |\n| TakeoffDelay | Number | 0 | 开机热键延时 |\n| Timeout | Number | 5 | 倒计时进入指定硬盘 |\n#### Misc--Debug\n是否开启debug模式，这里我们暂时不需要，全部忽略过。\n#### Misc--Entries\n这里是帮助我们添加一些你希望的引导路径，不用修改。\n#### Misc--Security\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AllowNvramReset | Boolean | false | 是否在开机引导项中加入重置nvram缓存功能的选项 |\n| AllowSetDefault | Boolean | false | 选择yes后即可在开机选择系统页面中通过Ctrl+enter键设置默认启动盘|\n| AuthRestart | Boolean | false | filevault相关项，选择NO。|\n| BootProtect | String | None ||\n| ExposeSensitiveData | Number | 6 | 显示更多的调试信息 |\n| HaltLevel | Number | 2,147,483,648 | 按默认设置即可 |\n| ScanPolicy | Number | 11,470,595 | |\n| Vault | String | Optional | 黑苹果的vault加密方式，我们不需要这个功能，填Optional |\n#### Misc--Tools\n这里是加入一些开机时候的工具的。\n### NVRAM\n#### NVRAM--Add\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| DefaultBackgroundColor | Data | 00000000 | 默认开机背景色为黑色 |\n| UIScale | Data | 01 | 01为普通的UI显示模式，02为开启HIDPI的UI显示模式|\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| boot-args | String | keepsyms=1 alcid=1 agdpmod=pikera | slide=1表示从第一组内存开始连续注入；darkwake=0代表一键唤醒机器并偏好设置中节能选项的小憩功能。如果你要用小憩功能请填8； -v是跑代码，在没装好稳定的黑果前我建议加上，方便定位错误，弄完后再删除-v |\n| csr-active-config | Data | 00000000 | |\n| prev-lang:kbd | Data | 7A682D48 616E733A 323532 | |\n#### NVRAM--Block\n禁用一些nvram变量，我们这里按默认设置不必理会。\n#### NVRAM--LegacyEnable\n如果你的主板不支持原生NVRAM，请一定要选择YES! 如果你的主板支持原生nvram的，填no。\n#### NVRAM-LegacyOverwrite\n对模拟nvram用户来说，将nvram.plist写入硬件，我认为不管是原生nvram还是模拟nvram，都选择no。\n#### NVRAM-LegacySchema\nnvram的变量设置\n#### NVRAM-WriteFlash\n如果你的主板bios因为nvram导入垃圾内容，请关闭它，一般都是选择no。\n### PlatformInfo\n机型信息\n#### PlatformInfo--Automatic\n这里意思是是否自动填写系统信息。因为后面的很多选项都好繁琐，我们只要认真填几个选项就行了，这里我选YES，不重要的信息让它自动填。\n#### PlatformInfo--Generic\n填写三码信息\n#### PlatformInfo--UpdateDataHub\nyes\n#### PlatformInfo--UpdateNVRAM\nyess\n#### PlatformInfo--UpdateSMBIOS\nyes\n#### PlatformInfo--UpdateSMBIOSMode\nCreate\n### UEFI\nUEFI相关的设置。\n#### UEFI--APFS\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| EnableJumpstart | Boolean | false | 从APFS容器中加载内置APFS驱动 |\n| HideVerbose | Boolean | false | 是否隐藏啰嗦模式，一般我们需要看日志的时候才开启|\n| JumpstartHotPlug | Boolean | false | 是否加载APFS格式的热插设备 |\n| MinDate | Number | 0 | 加载最低发行的APFS格式 |\n| MinVersion | Number | 0 | 加载最低版本的APFS格式。填0代表从HIGH SIERRA开始加载。|\n#### UEFI--Audio\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AudioSupport | Boolean | False | 是否开启黑苹果的开机提示音支持。如果你选择YES，后面的内容你必须认真看，不支持DP类的数字音频。|\n| AudioCodec | Number | 0 | 填写音频声卡in节点 |\n| AudioDevice | String  | PciRoot(0x0)/Pci(0x1b,0x0) | 填写你声卡的路径 |\n| AudioOut | Number | 0 | 音频声卡out节点 |\n| MinimumVolume | Number | 20 | 声音音量 |\n| PlayChime | Boolean | false | 如果要使用开机duang声音 |\n| VolumeAmplifier | Number | 0 | 按照默认设置 |\n#### UEFI--ConnectDrivers\n是否加载补丁，我们选择YES\n#### UEFI--Drivers\n根据用的驱动填写\n#### UEFI--Input\n默认即可，无需修改\n#### UEFI--Output\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| ClearScreenOnModeSwitch | Boolean | false | 消除开机时从图形模式转换到文本时出现残影的问题 |\n| ConsoleMode | String | | 这里填主机的输出方式,留空即可|\n| DirectGopCacheMode | String | | 此项请留空！ |\n| DirectGopRendering | Boolean | false | 是否使用内置显卡直接渲染开机画面，建议选择no|\n| IgnoreTextInGraphics | Boolean | false | 修复在不使用-v跑马模式时候，开机日志导致的苹果logo显示不正确的问题|\n| ProvideConsoleGop | Boolean | True | 调用显卡gop|\n| ReconnectOnResChange | Boolean | false | 一些固件在 GOP 分辨率改变后会重新连接显示器才能输出|\n| ReplaceTabWithSpace | Boolean | false | 一些固件在UEFI Shell下TAB功能键不生效。开启这个会用空格键代替。|\n| Resolution | String | Max | 开机分辨率 |\n| SanitiseClearScreen | Boolean | false | 修复4k及以上显示器的输出问题|\n| TextRenderer | String | BuiltinGraphics | OC开机代码字体渲染方式，我这里填BuiltinGraphics|\n#### UEFI--ProtocolOverrides\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AppleAudio | Boolean | false | 是否有开机DUANG的声音 |\n| AppleBootPolicy | Boolean | false | 虚拟机的mac需要用的 |\n| AppleDebugLog | Boolean | false | 重新安装苹果错误日志界面|\n| AppleEvent | Boolean | false | 虚拟机并具有vault的mac需要用的|\n| AppleImageConversion | Boolean | false | 重建apple图标|\n| AppleKeyMap | Boolean | false | 重建苹果功能键|\n| AppleRtcRam | Boolean | false | 重装applertc协议|\n| AppleSmcIo | Boolean | false | 代替之前的VirtualSMC.efi|\n| AppleUserInterfaceTheme | Boolean | false | 重新安装 Apple User Interface Theme 协议|\n| DataHub | Boolean | false | 重建datahub|\n| DeviceProperties | Boolean | false | 虚拟机或者老款的电脑需要选择YES才能注入device property|\n| FirmwareVolume | Boolean | false | VAULT相关项|\n| HashServices | Boolean | false | VAULT相关项|\n| OSInfo | Boolean | false | 通知主板以及一些程序关于MAC引导的信息|\n| UnicodeCollation | Boolean | false | 旧的主板需要|\n#### UEFI--Quirks\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| ExitBootServicesDelay | Number | 0 | 旧主板需要给予主板退出时间|\n| IgnoreInvalidFlexRatio | Boolean | false | 如果你没有在bios中解锁MSR0x194，一定要选YES|\n| ReleaseUsbOwnership | Boolean | false | 自动释放USB所有权的功能 |\n| RequestBootVarFallback | Boolean | false | 一些固件会主动扫描系统启动盘的位置而阻止OC扫描，如果碰到这样的问题选择YES，一般这个BUG在华硕的主板中比较常见。|\n| RequestBootVarRouting | Boolean | true | 增加”启动磁盘” 的可靠性|\n| UnblockFsConnect | Boolean | false | 惠普笔记本可能会让OC无法扫描到启动项，一般选择NO|\n#### UEFI--ReservedMemory\n空\n\n## 挂载EFI分区\n```\ndiskutil list //使用diskutil list 查看磁盘分区情况\ndiskutil mount disk1s1 //使用diskutil mount disk0s1 挂载disk1的EFI分区。\n```\n\n## Thank\n* [使用OpenCore引导黑苹果 by XJN](https://blog.xjn819.com/?p=543)\n* [精读OpenCore by 黑果小兵](https://blog.daliansky.net/OpenCore-BootLoader.html)","source":"_posts/OpenCore安装黑苹果.md","raw":"---\ntitle: OpenCore安装黑苹果\ntags: 瞎折腾\ncategories: 瞎折腾\nabbrlink: 11242\ndate: 2020-06-11 09:49:23\n---\n[EFI文件](https://github.com/AlanLang/ASRock-Z390-Phantom-Gaming-ITXac-OpenCore-Hackintosh)\n## 配置清单\n|硬件配置|选型|\n|---|---|\n|CPU|i7 9700k|\n|主板|华擎 Z390 Phantom Gaming-ITX AC|\n|显卡|蓝宝石RX560 + 显卡延长线|\n|内存条|芝奇幻光戟16G * 1|\n|硬盘|WD/西部数据 SN550系列500G SSD|\n|电源|全汉MS600 铜牌全模组+定制线|\n|无线网卡|博通DW1560 (可以直接替换主板上的)|\n|散热|乔思伯240水冷|\n|机箱|定制的A4机箱|\n\n<!-- more -->\n\n## BIOS设置\n禁用如下：\n\n|英文|中文|\n|:----|:---|\n| Fast Boot | 快速启动 |\n| CFG Lock (MSR 0xE2 write protection) | CFG 锁 (MSR 0xE2 写入保护) |\n| vt-d | vt-d |\n\n启用如下:\n\n| 英文 | 中文 |\n| :------------------- | :------------------------------------------------------- |\n| Above 4G decoding | 大于 4G 地址空间解码 |\n| CSM | 兼容性支持模块 |\n|IGPU|IGPU多监视器|\n|XHCI Hand-off|XHCI Hand-off|\n\n注意 关于CSM看网上教程都说要关闭它，但是我关闭了之后有一定概率引导失败，所以就把它打开了\n\n## config.plist\n### ACPI\n#### ACPI—–Add\n根据ACPI目录下所用的SSDT填写\n#### ACPI—–Block\n不用填\n#### ACPI—–Patch\n一些热补丁\n#### ACPI—–Quirks\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n|FadtEnableReset| Boolean| false |一些旧的主板需要对FADT进行标记来激活电脑的开机和关机功能，这里我们不许要启动它（如果你遇到关机变重启，可以打开试试，我们之后也会在nvram中将这个问题修复）|\n|NormalizeHeaders| Boolean| false |清理ACPI头，一些主板的ACPI表需要打开这个修复启动。但如果补丁点亮系统，请试试NO|\n|RebaseRegions| Boolean| false |换硬件、升级BIOS等对硬件的操作会对ACPI表产生影响，一般不需要打开，若发现卡PCI Configuraion Begin，请尝试打开|\n|ResetHwSig| Boolean| false |休眠相关项，台式机不需要|\n|ResetLogoStatus| Boolean| false |重置登录状态|\n\n### Booter\n内存相关选项设置。\n#### Booter--MmioWhitelist\n默认的第一项是为Haswell芯片提供的内存寻址修复，如果此类芯片碰到内存相关问题，请开启它(enable选择yes)。\n默认第二项是开机卡PCI Configuration这里。ACPI、PCI device同时释放到内存时发生0x1000内存地址被占用而卡在PCI Configration.如果碰到此类问题，请开启它。\n\n#### Boot—Quirks\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AvoidRuntimeDefrag | Boolean | true | 修复UEFI运行时服务，例如日期，时间，NVRAM，电源控制等|\n| DevirtualiseMmio | Boolean | false | 减少被盗的内存占用空间，扩展值的选项|\n| DisableSingleUser | Boolean | false | 禁止单用户模式|\n| DisableVariableWrite | Boolean | false | 非原生NVRAM主板需要模拟nvram.plist进而写入variable值，因此要禁止此项来防止其他程序对nvram进行写入, 如果你的主板支持原生nvram，请选择NO|\n| DiscardHibernateMap | Boolean | false | 重用原始的休眠内存映射 |\n| EnableSafeModeSlide | Boolean | true | 允许在安全模式下使用Slide 值|\n| EnableWriteUnprotector | boolean | true | 在执行期间从CR0寄存器中删除写保护|\n| ForceExitBootServices| boolean | false | 这个选项是让那些非常老旧的主板也能使用内存寻址|\n| ProtectMemoryRegions | boolean | false | 官方对此项目的解释与AvoidRuntimeDefrag类似，除非你明白这是什么，不然选择NO，其实我也不明白。|\n| ProtectSecureBoot | boolean | fasle | 保护uefi安全启动被写入|\n| ProtectUefiServices | boolean | fasle | 保护UEFI服务不被固件覆盖，主要与VM，Icelake和较新的Coffeelake系统有关， 一般Z490的主板需要|\n| ProvideCustomSlide | boolean | true | 如果Slide 值存在冲突，则此选项将强制macOS使用伪随机值。接收调试消息的人需要Only N/256 slide values are usable!|\n| RebuildAppleMemoryMap | boolean | false | 生成与macOS兼容的内存映射|\n| SetupVirtualMap | boolean | true | 将SetVirtualAddresses调用修复为虚拟地址，在Skylake和更高版本上不需要|\n| SignalAppleOS | boolean | false | 促使硬件始终启动macOS，主要是对带有dGPU的MacBook Pro有利，因为启动Windows不允许使用iGPU|\n| SyncRuntimePermissions | boolean | true |修正硬件在注入内存时无法注入权限的问题|\n\n### DeviceProperties\n此项是用来注入你的设备的，主要是显卡和声卡两部分。\n#### DeviceProperties--Add\n根据实际情况填写声卡和显卡的信息\n#### DeviceProperties--Block\n这里是禁用一些设备的，我们按默认就行了，不需要任何修改。\n\n### Kernel\n这里是内核相关选项。\n#### Kernel--Add\n根据Kexts目录下的文件进行填写\n#### Kernel--Block\n不需要\n#### Kernel--Emulate\n此选项帮助Ivy Bridge 和一些不受支持的CPU加载电源管理的，所有选项按默认即可。\n#### Kernel--Patch\n保持默认\n#### Kernel--Quirks\n内核相关的快捷选项\n\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AppleCpuPmCfgLock | boolean | false | 仅当无法在BIOS中禁用CFG-Lock时才需要 |\n| AppleXcpmCfgLock | boolean | false | 仅当无法在BIOS中禁用CFG-Lock时才需要+1 | \n| AppleXcpmExtraMsrs | boolean | false | 禁用奔腾和许多Xeon等不受支持的CPU所需的多个MSR访问。|\n| AppleXcpmForceBoost | boolean | false | 强制使用最大性能，仅建议在持续负载的设备或媒体计算机上启用。|\n| CustomSMBIOSGuid | boolean | false | 对UpdateSMBIOSMode自定义模式执行GUID修补。通常与戴尔笔记本电脑有关|\n| DisableIoMapper | boolean | false | 禁用vt-d，我们在BIOS里已经禁用vt-d了，这里我们选择NO就行了。|\n| DisableRtcChecksum | boolean | false | 越过两条rtc检查(0x58及0x59) |\n| DummyPowerManagement | boolean | false | 替代NullCpuPowerManagement.kext，如果你使用此补丁，请删除并选择yes。我们一般选择no。|\n| ExternalDiskIcons | boolean | false | 修复苹果系统把内部硬盘识别为外置硬盘时（黄色图标的硬盘）开启，我们一般选择NO。|\n| IncreasePciBarSize | boolean | false | 解决卡PCI configuration，如果碰到请选择yes, 我们选择no。|\n| LapicKernelPanic | boolean | false | 适用于HP笔记本的内核奔溃选项|\n| PanicNoKextDump | boolean | false | 防止kext出错打报告而让我们看不到真正的panic原因，这个随便选，我选择NO。|\n| PowerTimeoutKernelPanic | boolean | false | 10.15系统中存在一些设备自身的电源管理无法让系统进入睡眠而超时，导致内核奔溃，如果有这个问题请选择YES。|\n| ThirdPartyDrives | boolean | false | 开启Sata类SSD的trim功能，我没有sata类的ssd，我选择NO。\n| XhciPortLimit | boolean | true | 解除15个端口限制|\n### Misc\n开机引导类的设置。\n#### Misc--BlessOverride\n这个选项是帮助我们寻找一些不寻常的EFI位置的，除非你有这种情况，不然我们不需要填写任何东西。\n#### Misc--Boot\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| ConsoleAttributes | Number | 0 | 开机选择界面的颜色 |\n| HibernateMode | String | None | 检测休眠模式。|\n| HideAuxiliary | Boolean | false | 在开机选择画面隐藏一些辅助项目，比如recovery盘，clean NVRAM等。一般我们选择NO。|\n| HideSelf | Boolean | YES | 隐藏自身的EFI引导盘选项|\n| PickerAttributes| Number | 0 | 用于设置自定义选择器属性，此处将不介绍 | \n| PickerAudioAssist | Boolean | No | 用于在选择器中启用VoiceOver之类的支持 |\n| PickerMode | String | Builtin | 设置OpenCore使用内置的选择器 |\n| PollAppleHotKeys | Boolean | true | 允许您在引导过程中使用Apple的热键 |\n| ShowPicker | Boolean | true | 是否显示开机启动盘选项 |\n| TakeoffDelay | Number | 0 | 开机热键延时 |\n| Timeout | Number | 5 | 倒计时进入指定硬盘 |\n#### Misc--Debug\n是否开启debug模式，这里我们暂时不需要，全部忽略过。\n#### Misc--Entries\n这里是帮助我们添加一些你希望的引导路径，不用修改。\n#### Misc--Security\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AllowNvramReset | Boolean | false | 是否在开机引导项中加入重置nvram缓存功能的选项 |\n| AllowSetDefault | Boolean | false | 选择yes后即可在开机选择系统页面中通过Ctrl+enter键设置默认启动盘|\n| AuthRestart | Boolean | false | filevault相关项，选择NO。|\n| BootProtect | String | None ||\n| ExposeSensitiveData | Number | 6 | 显示更多的调试信息 |\n| HaltLevel | Number | 2,147,483,648 | 按默认设置即可 |\n| ScanPolicy | Number | 11,470,595 | |\n| Vault | String | Optional | 黑苹果的vault加密方式，我们不需要这个功能，填Optional |\n#### Misc--Tools\n这里是加入一些开机时候的工具的。\n### NVRAM\n#### NVRAM--Add\n4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14\n\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| DefaultBackgroundColor | Data | 00000000 | 默认开机背景色为黑色 |\n| UIScale | Data | 01 | 01为普通的UI显示模式，02为开启HIDPI的UI显示模式|\n7C436110-AB2A-4BBB-A880-FE41995C9F82\n\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| boot-args | String | keepsyms=1 alcid=1 agdpmod=pikera | slide=1表示从第一组内存开始连续注入；darkwake=0代表一键唤醒机器并偏好设置中节能选项的小憩功能。如果你要用小憩功能请填8； -v是跑代码，在没装好稳定的黑果前我建议加上，方便定位错误，弄完后再删除-v |\n| csr-active-config | Data | 00000000 | |\n| prev-lang:kbd | Data | 7A682D48 616E733A 323532 | |\n#### NVRAM--Block\n禁用一些nvram变量，我们这里按默认设置不必理会。\n#### NVRAM--LegacyEnable\n如果你的主板不支持原生NVRAM，请一定要选择YES! 如果你的主板支持原生nvram的，填no。\n#### NVRAM-LegacyOverwrite\n对模拟nvram用户来说，将nvram.plist写入硬件，我认为不管是原生nvram还是模拟nvram，都选择no。\n#### NVRAM-LegacySchema\nnvram的变量设置\n#### NVRAM-WriteFlash\n如果你的主板bios因为nvram导入垃圾内容，请关闭它，一般都是选择no。\n### PlatformInfo\n机型信息\n#### PlatformInfo--Automatic\n这里意思是是否自动填写系统信息。因为后面的很多选项都好繁琐，我们只要认真填几个选项就行了，这里我选YES，不重要的信息让它自动填。\n#### PlatformInfo--Generic\n填写三码信息\n#### PlatformInfo--UpdateDataHub\nyes\n#### PlatformInfo--UpdateNVRAM\nyess\n#### PlatformInfo--UpdateSMBIOS\nyes\n#### PlatformInfo--UpdateSMBIOSMode\nCreate\n### UEFI\nUEFI相关的设置。\n#### UEFI--APFS\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| EnableJumpstart | Boolean | false | 从APFS容器中加载内置APFS驱动 |\n| HideVerbose | Boolean | false | 是否隐藏啰嗦模式，一般我们需要看日志的时候才开启|\n| JumpstartHotPlug | Boolean | false | 是否加载APFS格式的热插设备 |\n| MinDate | Number | 0 | 加载最低发行的APFS格式 |\n| MinVersion | Number | 0 | 加载最低版本的APFS格式。填0代表从HIGH SIERRA开始加载。|\n#### UEFI--Audio\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AudioSupport | Boolean | False | 是否开启黑苹果的开机提示音支持。如果你选择YES，后面的内容你必须认真看，不支持DP类的数字音频。|\n| AudioCodec | Number | 0 | 填写音频声卡in节点 |\n| AudioDevice | String  | PciRoot(0x0)/Pci(0x1b,0x0) | 填写你声卡的路径 |\n| AudioOut | Number | 0 | 音频声卡out节点 |\n| MinimumVolume | Number | 20 | 声音音量 |\n| PlayChime | Boolean | false | 如果要使用开机duang声音 |\n| VolumeAmplifier | Number | 0 | 按照默认设置 |\n#### UEFI--ConnectDrivers\n是否加载补丁，我们选择YES\n#### UEFI--Drivers\n根据用的驱动填写\n#### UEFI--Input\n默认即可，无需修改\n#### UEFI--Output\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| ClearScreenOnModeSwitch | Boolean | false | 消除开机时从图形模式转换到文本时出现残影的问题 |\n| ConsoleMode | String | | 这里填主机的输出方式,留空即可|\n| DirectGopCacheMode | String | | 此项请留空！ |\n| DirectGopRendering | Boolean | false | 是否使用内置显卡直接渲染开机画面，建议选择no|\n| IgnoreTextInGraphics | Boolean | false | 修复在不使用-v跑马模式时候，开机日志导致的苹果logo显示不正确的问题|\n| ProvideConsoleGop | Boolean | True | 调用显卡gop|\n| ReconnectOnResChange | Boolean | false | 一些固件在 GOP 分辨率改变后会重新连接显示器才能输出|\n| ReplaceTabWithSpace | Boolean | false | 一些固件在UEFI Shell下TAB功能键不生效。开启这个会用空格键代替。|\n| Resolution | String | Max | 开机分辨率 |\n| SanitiseClearScreen | Boolean | false | 修复4k及以上显示器的输出问题|\n| TextRenderer | String | BuiltinGraphics | OC开机代码字体渲染方式，我这里填BuiltinGraphics|\n#### UEFI--ProtocolOverrides\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| AppleAudio | Boolean | false | 是否有开机DUANG的声音 |\n| AppleBootPolicy | Boolean | false | 虚拟机的mac需要用的 |\n| AppleDebugLog | Boolean | false | 重新安装苹果错误日志界面|\n| AppleEvent | Boolean | false | 虚拟机并具有vault的mac需要用的|\n| AppleImageConversion | Boolean | false | 重建apple图标|\n| AppleKeyMap | Boolean | false | 重建苹果功能键|\n| AppleRtcRam | Boolean | false | 重装applertc协议|\n| AppleSmcIo | Boolean | false | 代替之前的VirtualSMC.efi|\n| AppleUserInterfaceTheme | Boolean | false | 重新安装 Apple User Interface Theme 协议|\n| DataHub | Boolean | false | 重建datahub|\n| DeviceProperties | Boolean | false | 虚拟机或者老款的电脑需要选择YES才能注入device property|\n| FirmwareVolume | Boolean | false | VAULT相关项|\n| HashServices | Boolean | false | VAULT相关项|\n| OSInfo | Boolean | false | 通知主板以及一些程序关于MAC引导的信息|\n| UnicodeCollation | Boolean | false | 旧的主板需要|\n#### UEFI--Quirks\n| 名称 | 类型 | 值 | 解释|\n| :--- | :---- | :----- | :----- |\n| ExitBootServicesDelay | Number | 0 | 旧主板需要给予主板退出时间|\n| IgnoreInvalidFlexRatio | Boolean | false | 如果你没有在bios中解锁MSR0x194，一定要选YES|\n| ReleaseUsbOwnership | Boolean | false | 自动释放USB所有权的功能 |\n| RequestBootVarFallback | Boolean | false | 一些固件会主动扫描系统启动盘的位置而阻止OC扫描，如果碰到这样的问题选择YES，一般这个BUG在华硕的主板中比较常见。|\n| RequestBootVarRouting | Boolean | true | 增加”启动磁盘” 的可靠性|\n| UnblockFsConnect | Boolean | false | 惠普笔记本可能会让OC无法扫描到启动项，一般选择NO|\n#### UEFI--ReservedMemory\n空\n\n## 挂载EFI分区\n```\ndiskutil list //使用diskutil list 查看磁盘分区情况\ndiskutil mount disk1s1 //使用diskutil mount disk0s1 挂载disk1的EFI分区。\n```\n\n## Thank\n* [使用OpenCore引导黑苹果 by XJN](https://blog.xjn819.com/?p=543)\n* [精读OpenCore by 黑果小兵](https://blog.daliansky.net/OpenCore-BootLoader.html)","slug":"OpenCore安装黑苹果","published":1,"updated":"2020-06-12T07:10:36.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7n700271q2d1jvvvmhj","content":"<p><a href=\"https://github.com/AlanLang/ASRock-Z390-Phantom-Gaming-ITXac-OpenCore-Hackintosh\" target=\"_blank\" rel=\"noopener\">EFI文件</a></p>\n<h2 id=\"配置清单\"><a href=\"#配置清单\" class=\"headerlink\" title=\"配置清单\"></a>配置清单</h2><table>\n<thead>\n<tr>\n<th>硬件配置</th>\n<th>选型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>i7 9700k</td>\n</tr>\n<tr>\n<td>主板</td>\n<td>华擎 Z390 Phantom Gaming-ITX AC</td>\n</tr>\n<tr>\n<td>显卡</td>\n<td>蓝宝石RX560 + 显卡延长线</td>\n</tr>\n<tr>\n<td>内存条</td>\n<td>芝奇幻光戟16G * 1</td>\n</tr>\n<tr>\n<td>硬盘</td>\n<td>WD/西部数据 SN550系列500G SSD</td>\n</tr>\n<tr>\n<td>电源</td>\n<td>全汉MS600 铜牌全模组+定制线</td>\n</tr>\n<tr>\n<td>无线网卡</td>\n<td>博通DW1560 (可以直接替换主板上的)</td>\n</tr>\n<tr>\n<td>散热</td>\n<td>乔思伯240水冷</td>\n</tr>\n<tr>\n<td>机箱</td>\n<td>定制的A4机箱</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<h2 id=\"BIOS设置\"><a href=\"#BIOS设置\" class=\"headerlink\" title=\"BIOS设置\"></a>BIOS设置</h2><p>禁用如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">英文</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Fast Boot</td>\n<td style=\"text-align:left\">快速启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CFG Lock (MSR 0xE2 write protection)</td>\n<td style=\"text-align:left\">CFG 锁 (MSR 0xE2 写入保护)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vt-d</td>\n<td style=\"text-align:left\">vt-d</td>\n</tr>\n</tbody>\n</table>\n<p>启用如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">英文</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Above 4G decoding</td>\n<td style=\"text-align:left\">大于 4G 地址空间解码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CSM</td>\n<td style=\"text-align:left\">兼容性支持模块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IGPU</td>\n<td style=\"text-align:left\">IGPU多监视器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XHCI Hand-off</td>\n<td style=\"text-align:left\">XHCI Hand-off</td>\n</tr>\n</tbody>\n</table>\n<p>注意 关于CSM看网上教程都说要关闭它，但是我关闭了之后有一定概率引导失败，所以就把它打开了</p>\n<h2 id=\"config-plist\"><a href=\"#config-plist\" class=\"headerlink\" title=\"config.plist\"></a>config.plist</h2><h3 id=\"ACPI\"><a href=\"#ACPI\" class=\"headerlink\" title=\"ACPI\"></a>ACPI</h3><h4 id=\"ACPI—–Add\"><a href=\"#ACPI—–Add\" class=\"headerlink\" title=\"ACPI—–Add\"></a>ACPI—–Add</h4><p>根据ACPI目录下所用的SSDT填写</p>\n<h4 id=\"ACPI—–Block\"><a href=\"#ACPI—–Block\" class=\"headerlink\" title=\"ACPI—–Block\"></a>ACPI—–Block</h4><p>不用填</p>\n<h4 id=\"ACPI—–Patch\"><a href=\"#ACPI—–Patch\" class=\"headerlink\" title=\"ACPI—–Patch\"></a>ACPI—–Patch</h4><p>一些热补丁</p>\n<h4 id=\"ACPI—–Quirks\"><a href=\"#ACPI—–Quirks\" class=\"headerlink\" title=\"ACPI—–Quirks\"></a>ACPI—–Quirks</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">FadtEnableReset</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">一些旧的主板需要对FADT进行标记来激活电脑的开机和关机功能，这里我们不许要启动它（如果你遇到关机变重启，可以打开试试，我们之后也会在nvram中将这个问题修复）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NormalizeHeaders</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">清理ACPI头，一些主板的ACPI表需要打开这个修复启动。但如果补丁点亮系统，请试试NO</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RebaseRegions</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">换硬件、升级BIOS等对硬件的操作会对ACPI表产生影响，一般不需要打开，若发现卡PCI Configuraion Begin，请尝试打开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ResetHwSig</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">休眠相关项，台式机不需要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ResetLogoStatus</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重置登录状态</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Booter\"><a href=\"#Booter\" class=\"headerlink\" title=\"Booter\"></a>Booter</h3><p>内存相关选项设置。</p>\n<h4 id=\"Booter–MmioWhitelist\"><a href=\"#Booter–MmioWhitelist\" class=\"headerlink\" title=\"Booter–MmioWhitelist\"></a>Booter–MmioWhitelist</h4><p>默认的第一项是为Haswell芯片提供的内存寻址修复，如果此类芯片碰到内存相关问题，请开启它(enable选择yes)。<br>默认第二项是开机卡PCI Configuration这里。ACPI、PCI device同时释放到内存时发生0x1000内存地址被占用而卡在PCI Configration.如果碰到此类问题，请开启它。</p>\n<h4 id=\"Boot—Quirks\"><a href=\"#Boot—Quirks\" class=\"headerlink\" title=\"Boot—Quirks\"></a>Boot—Quirks</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AvoidRuntimeDefrag</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">修复UEFI运行时服务，例如日期，时间，NVRAM，电源控制等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DevirtualiseMmio</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">减少被盗的内存占用空间，扩展值的选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DisableSingleUser</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">禁止单用户模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DisableVariableWrite</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">非原生NVRAM主板需要模拟nvram.plist进而写入variable值，因此要禁止此项来防止其他程序对nvram进行写入, 如果你的主板支持原生nvram，请选择NO</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DiscardHibernateMap</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重用原始的休眠内存映射</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EnableSafeModeSlide</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">允许在安全模式下使用Slide 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EnableWriteUnprotector</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">在执行期间从CR0寄存器中删除写保护</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ForceExitBootServices</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">这个选项是让那些非常老旧的主板也能使用内存寻址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProtectMemoryRegions</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">官方对此项目的解释与AvoidRuntimeDefrag类似，除非你明白这是什么，不然选择NO，其实我也不明白。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProtectSecureBoot</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">fasle</td>\n<td style=\"text-align:left\">保护uefi安全启动被写入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProtectUefiServices</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">fasle</td>\n<td style=\"text-align:left\">保护UEFI服务不被固件覆盖，主要与VM，Icelake和较新的Coffeelake系统有关， 一般Z490的主板需要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProvideCustomSlide</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">如果Slide 值存在冲突，则此选项将强制macOS使用伪随机值。接收调试消息的人需要Only N/256 slide values are usable!</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RebuildAppleMemoryMap</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">生成与macOS兼容的内存映射</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SetupVirtualMap</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">将SetVirtualAddresses调用修复为虚拟地址，在Skylake和更高版本上不需要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SignalAppleOS</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">促使硬件始终启动macOS，主要是对带有dGPU的MacBook Pro有利，因为启动Windows不允许使用iGPU</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SyncRuntimePermissions</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">修正硬件在注入内存时无法注入权限的问题</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"DeviceProperties\"><a href=\"#DeviceProperties\" class=\"headerlink\" title=\"DeviceProperties\"></a>DeviceProperties</h3><p>此项是用来注入你的设备的，主要是显卡和声卡两部分。</p>\n<h4 id=\"DeviceProperties–Add\"><a href=\"#DeviceProperties–Add\" class=\"headerlink\" title=\"DeviceProperties–Add\"></a>DeviceProperties–Add</h4><p>根据实际情况填写声卡和显卡的信息</p>\n<h4 id=\"DeviceProperties–Block\"><a href=\"#DeviceProperties–Block\" class=\"headerlink\" title=\"DeviceProperties–Block\"></a>DeviceProperties–Block</h4><p>这里是禁用一些设备的，我们按默认就行了，不需要任何修改。</p>\n<h3 id=\"Kernel\"><a href=\"#Kernel\" class=\"headerlink\" title=\"Kernel\"></a>Kernel</h3><p>这里是内核相关选项。</p>\n<h4 id=\"Kernel–Add\"><a href=\"#Kernel–Add\" class=\"headerlink\" title=\"Kernel–Add\"></a>Kernel–Add</h4><p>根据Kexts目录下的文件进行填写</p>\n<h4 id=\"Kernel–Block\"><a href=\"#Kernel–Block\" class=\"headerlink\" title=\"Kernel–Block\"></a>Kernel–Block</h4><p>不需要</p>\n<h4 id=\"Kernel–Emulate\"><a href=\"#Kernel–Emulate\" class=\"headerlink\" title=\"Kernel–Emulate\"></a>Kernel–Emulate</h4><p>此选项帮助Ivy Bridge 和一些不受支持的CPU加载电源管理的，所有选项按默认即可。</p>\n<h4 id=\"Kernel–Patch\"><a href=\"#Kernel–Patch\" class=\"headerlink\" title=\"Kernel–Patch\"></a>Kernel–Patch</h4><p>保持默认</p>\n<h4 id=\"Kernel–Quirks\"><a href=\"#Kernel–Quirks\" class=\"headerlink\" title=\"Kernel–Quirks\"></a>Kernel–Quirks</h4><p>内核相关的快捷选项</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AppleCpuPmCfgLock</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">仅当无法在BIOS中禁用CFG-Lock时才需要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleXcpmCfgLock</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">仅当无法在BIOS中禁用CFG-Lock时才需要+1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleXcpmExtraMsrs</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">禁用奔腾和许多Xeon等不受支持的CPU所需的多个MSR访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleXcpmForceBoost</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">强制使用最大性能，仅建议在持续负载的设备或媒体计算机上启用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CustomSMBIOSGuid</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">对UpdateSMBIOSMode自定义模式执行GUID修补。通常与戴尔笔记本电脑有关</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DisableIoMapper</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">禁用vt-d，我们在BIOS里已经禁用vt-d了，这里我们选择NO就行了。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DisableRtcChecksum</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">越过两条rtc检查(0x58及0x59)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DummyPowerManagement</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">替代NullCpuPowerManagement.kext，如果你使用此补丁，请删除并选择yes。我们一般选择no。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ExternalDiskIcons</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">修复苹果系统把内部硬盘识别为外置硬盘时（黄色图标的硬盘）开启，我们一般选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IncreasePciBarSize</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">解决卡PCI configuration，如果碰到请选择yes, 我们选择no。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LapicKernelPanic</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">适用于HP笔记本的内核奔溃选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PanicNoKextDump</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">防止kext出错打报告而让我们看不到真正的panic原因，这个随便选，我选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PowerTimeoutKernelPanic</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">10.15系统中存在一些设备自身的电源管理无法让系统进入睡眠而超时，导致内核奔溃，如果有这个问题请选择YES。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ThirdPartyDrives</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">开启Sata类SSD的trim功能，我没有sata类的ssd，我选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XhciPortLimit</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">解除15个端口限制</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h3><p>开机引导类的设置。</p>\n<h4 id=\"Misc–BlessOverride\"><a href=\"#Misc–BlessOverride\" class=\"headerlink\" title=\"Misc–BlessOverride\"></a>Misc–BlessOverride</h4><p>这个选项是帮助我们寻找一些不寻常的EFI位置的，除非你有这种情况，不然我们不需要填写任何东西。</p>\n<h4 id=\"Misc–Boot\"><a href=\"#Misc–Boot\" class=\"headerlink\" title=\"Misc–Boot\"></a>Misc–Boot</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ConsoleAttributes</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">开机选择界面的颜色</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HibernateMode</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">None</td>\n<td style=\"text-align:left\">检测休眠模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HideAuxiliary</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">在开机选择画面隐藏一些辅助项目，比如recovery盘，clean NVRAM等。一般我们选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HideSelf</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">YES</td>\n<td style=\"text-align:left\">隐藏自身的EFI引导盘选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PickerAttributes</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">用于设置自定义选择器属性，此处将不介绍</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PickerAudioAssist</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">No</td>\n<td style=\"text-align:left\">用于在选择器中启用VoiceOver之类的支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PickerMode</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">Builtin</td>\n<td style=\"text-align:left\">设置OpenCore使用内置的选择器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PollAppleHotKeys</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">允许您在引导过程中使用Apple的热键</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ShowPicker</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">是否显示开机启动盘选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TakeoffDelay</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">开机热键延时</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Timeout</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">倒计时进入指定硬盘</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Misc–Debug\"><a href=\"#Misc–Debug\" class=\"headerlink\" title=\"Misc–Debug\"></a>Misc–Debug</h4><p>是否开启debug模式，这里我们暂时不需要，全部忽略过。</p>\n<h4 id=\"Misc–Entries\"><a href=\"#Misc–Entries\" class=\"headerlink\" title=\"Misc–Entries\"></a>Misc–Entries</h4><p>这里是帮助我们添加一些你希望的引导路径，不用修改。</p>\n<h4 id=\"Misc–Security\"><a href=\"#Misc–Security\" class=\"headerlink\" title=\"Misc–Security\"></a>Misc–Security</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AllowNvramReset</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否在开机引导项中加入重置nvram缓存功能的选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AllowSetDefault</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">选择yes后即可在开机选择系统页面中通过Ctrl+enter键设置默认启动盘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AuthRestart</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">filevault相关项，选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BootProtect</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">None</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ExposeSensitiveData</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">显示更多的调试信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HaltLevel</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">2,147,483,648</td>\n<td style=\"text-align:left\">按默认设置即可</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ScanPolicy</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">11,470,595</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Vault</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">Optional</td>\n<td style=\"text-align:left\">黑苹果的vault加密方式，我们不需要这个功能，填Optional</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Misc–Tools\"><a href=\"#Misc–Tools\" class=\"headerlink\" title=\"Misc–Tools\"></a>Misc–Tools</h4><p>这里是加入一些开机时候的工具的。</p>\n<h3 id=\"NVRAM\"><a href=\"#NVRAM\" class=\"headerlink\" title=\"NVRAM\"></a>NVRAM</h3><h4 id=\"NVRAM–Add\"><a href=\"#NVRAM–Add\" class=\"headerlink\" title=\"NVRAM–Add\"></a>NVRAM–Add</h4><p>4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">DefaultBackgroundColor</td>\n<td style=\"text-align:left\">Data</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\">默认开机背景色为黑色</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UIScale</td>\n<td style=\"text-align:left\">Data</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">01为普通的UI显示模式，02为开启HIDPI的UI显示模式</td>\n</tr>\n</tbody>\n</table>\n<p>7C436110-AB2A-4BBB-A880-FE41995C9F82</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">boot-args</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">keepsyms=1 alcid=1 agdpmod=pikera</td>\n<td style=\"text-align:left\">slide=1表示从第一组内存开始连续注入；darkwake=0代表一键唤醒机器并偏好设置中节能选项的小憩功能。如果你要用小憩功能请填8； -v是跑代码，在没装好稳定的黑果前我建议加上，方便定位错误，弄完后再删除-v</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">csr-active-config</td>\n<td style=\"text-align:left\">Data</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">prev-lang:kbd</td>\n<td style=\"text-align:left\">Data</td>\n<td style=\"text-align:left\">7A682D48 616E733A 323532</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"NVRAM–Block\"><a href=\"#NVRAM–Block\" class=\"headerlink\" title=\"NVRAM–Block\"></a>NVRAM–Block</h4><p>禁用一些nvram变量，我们这里按默认设置不必理会。</p>\n<h4 id=\"NVRAM–LegacyEnable\"><a href=\"#NVRAM–LegacyEnable\" class=\"headerlink\" title=\"NVRAM–LegacyEnable\"></a>NVRAM–LegacyEnable</h4><p>如果你的主板不支持原生NVRAM，请一定要选择YES! 如果你的主板支持原生nvram的，填no。</p>\n<h4 id=\"NVRAM-LegacyOverwrite\"><a href=\"#NVRAM-LegacyOverwrite\" class=\"headerlink\" title=\"NVRAM-LegacyOverwrite\"></a>NVRAM-LegacyOverwrite</h4><p>对模拟nvram用户来说，将nvram.plist写入硬件，我认为不管是原生nvram还是模拟nvram，都选择no。</p>\n<h4 id=\"NVRAM-LegacySchema\"><a href=\"#NVRAM-LegacySchema\" class=\"headerlink\" title=\"NVRAM-LegacySchema\"></a>NVRAM-LegacySchema</h4><p>nvram的变量设置</p>\n<h4 id=\"NVRAM-WriteFlash\"><a href=\"#NVRAM-WriteFlash\" class=\"headerlink\" title=\"NVRAM-WriteFlash\"></a>NVRAM-WriteFlash</h4><p>如果你的主板bios因为nvram导入垃圾内容，请关闭它，一般都是选择no。</p>\n<h3 id=\"PlatformInfo\"><a href=\"#PlatformInfo\" class=\"headerlink\" title=\"PlatformInfo\"></a>PlatformInfo</h3><p>机型信息</p>\n<h4 id=\"PlatformInfo–Automatic\"><a href=\"#PlatformInfo–Automatic\" class=\"headerlink\" title=\"PlatformInfo–Automatic\"></a>PlatformInfo–Automatic</h4><p>这里意思是是否自动填写系统信息。因为后面的很多选项都好繁琐，我们只要认真填几个选项就行了，这里我选YES，不重要的信息让它自动填。</p>\n<h4 id=\"PlatformInfo–Generic\"><a href=\"#PlatformInfo–Generic\" class=\"headerlink\" title=\"PlatformInfo–Generic\"></a>PlatformInfo–Generic</h4><p>填写三码信息</p>\n<h4 id=\"PlatformInfo–UpdateDataHub\"><a href=\"#PlatformInfo–UpdateDataHub\" class=\"headerlink\" title=\"PlatformInfo–UpdateDataHub\"></a>PlatformInfo–UpdateDataHub</h4><p>yes</p>\n<h4 id=\"PlatformInfo–UpdateNVRAM\"><a href=\"#PlatformInfo–UpdateNVRAM\" class=\"headerlink\" title=\"PlatformInfo–UpdateNVRAM\"></a>PlatformInfo–UpdateNVRAM</h4><p>yess</p>\n<h4 id=\"PlatformInfo–UpdateSMBIOS\"><a href=\"#PlatformInfo–UpdateSMBIOS\" class=\"headerlink\" title=\"PlatformInfo–UpdateSMBIOS\"></a>PlatformInfo–UpdateSMBIOS</h4><p>yes</p>\n<h4 id=\"PlatformInfo–UpdateSMBIOSMode\"><a href=\"#PlatformInfo–UpdateSMBIOSMode\" class=\"headerlink\" title=\"PlatformInfo–UpdateSMBIOSMode\"></a>PlatformInfo–UpdateSMBIOSMode</h4><p>Create</p>\n<h3 id=\"UEFI\"><a href=\"#UEFI\" class=\"headerlink\" title=\"UEFI\"></a>UEFI</h3><p>UEFI相关的设置。</p>\n<h4 id=\"UEFI–APFS\"><a href=\"#UEFI–APFS\" class=\"headerlink\" title=\"UEFI–APFS\"></a>UEFI–APFS</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">EnableJumpstart</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">从APFS容器中加载内置APFS驱动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HideVerbose</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否隐藏啰嗦模式，一般我们需要看日志的时候才开启</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JumpstartHotPlug</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否加载APFS格式的热插设备</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MinDate</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">加载最低发行的APFS格式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MinVersion</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">加载最低版本的APFS格式。填0代表从HIGH SIERRA开始加载。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–Audio\"><a href=\"#UEFI–Audio\" class=\"headerlink\" title=\"UEFI–Audio\"></a>UEFI–Audio</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AudioSupport</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">False</td>\n<td style=\"text-align:left\">是否开启黑苹果的开机提示音支持。如果你选择YES，后面的内容你必须认真看，不支持DP类的数字音频。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AudioCodec</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">填写音频声卡in节点</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AudioDevice</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">PciRoot(0x0)/Pci(0x1b,0x0)</td>\n<td style=\"text-align:left\">填写你声卡的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AudioOut</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">音频声卡out节点</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MinimumVolume</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">声音音量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PlayChime</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">如果要使用开机duang声音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VolumeAmplifier</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">按照默认设置</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–ConnectDrivers\"><a href=\"#UEFI–ConnectDrivers\" class=\"headerlink\" title=\"UEFI–ConnectDrivers\"></a>UEFI–ConnectDrivers</h4><p>是否加载补丁，我们选择YES</p>\n<h4 id=\"UEFI–Drivers\"><a href=\"#UEFI–Drivers\" class=\"headerlink\" title=\"UEFI–Drivers\"></a>UEFI–Drivers</h4><p>根据用的驱动填写</p>\n<h4 id=\"UEFI–Input\"><a href=\"#UEFI–Input\" class=\"headerlink\" title=\"UEFI–Input\"></a>UEFI–Input</h4><p>默认即可，无需修改</p>\n<h4 id=\"UEFI–Output\"><a href=\"#UEFI–Output\" class=\"headerlink\" title=\"UEFI–Output\"></a>UEFI–Output</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ClearScreenOnModeSwitch</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">消除开机时从图形模式转换到文本时出现残影的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConsoleMode</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">这里填主机的输出方式,留空即可</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DirectGopCacheMode</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">此项请留空！</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DirectGopRendering</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否使用内置显卡直接渲染开机画面，建议选择no</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IgnoreTextInGraphics</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">修复在不使用-v跑马模式时候，开机日志导致的苹果logo显示不正确的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProvideConsoleGop</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">True</td>\n<td style=\"text-align:left\">调用显卡gop</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ReconnectOnResChange</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">一些固件在 GOP 分辨率改变后会重新连接显示器才能输出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ReplaceTabWithSpace</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">一些固件在UEFI Shell下TAB功能键不生效。开启这个会用空格键代替。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Resolution</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">Max</td>\n<td style=\"text-align:left\">开机分辨率</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SanitiseClearScreen</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">修复4k及以上显示器的输出问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TextRenderer</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">BuiltinGraphics</td>\n<td style=\"text-align:left\">OC开机代码字体渲染方式，我这里填BuiltinGraphics</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–ProtocolOverrides\"><a href=\"#UEFI–ProtocolOverrides\" class=\"headerlink\" title=\"UEFI–ProtocolOverrides\"></a>UEFI–ProtocolOverrides</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AppleAudio</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否有开机DUANG的声音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleBootPolicy</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">虚拟机的mac需要用的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleDebugLog</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重新安装苹果错误日志界面</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleEvent</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">虚拟机并具有vault的mac需要用的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleImageConversion</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重建apple图标</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleKeyMap</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重建苹果功能键</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleRtcRam</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重装applertc协议</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleSmcIo</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">代替之前的VirtualSMC.efi</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleUserInterfaceTheme</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重新安装 Apple User Interface Theme 协议</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DataHub</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重建datahub</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DeviceProperties</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">虚拟机或者老款的电脑需要选择YES才能注入device property</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FirmwareVolume</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">VAULT相关项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HashServices</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">VAULT相关项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OSInfo</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">通知主板以及一些程序关于MAC引导的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UnicodeCollation</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">旧的主板需要</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–Quirks\"><a href=\"#UEFI–Quirks\" class=\"headerlink\" title=\"UEFI–Quirks\"></a>UEFI–Quirks</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ExitBootServicesDelay</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">旧主板需要给予主板退出时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IgnoreInvalidFlexRatio</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">如果你没有在bios中解锁MSR0x194，一定要选YES</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ReleaseUsbOwnership</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">自动释放USB所有权的功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RequestBootVarFallback</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">一些固件会主动扫描系统启动盘的位置而阻止OC扫描，如果碰到这样的问题选择YES，一般这个BUG在华硕的主板中比较常见。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RequestBootVarRouting</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">增加”启动磁盘” 的可靠性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UnblockFsConnect</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">惠普笔记本可能会让OC无法扫描到启动项，一般选择NO</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–ReservedMemory\"><a href=\"#UEFI–ReservedMemory\" class=\"headerlink\" title=\"UEFI–ReservedMemory\"></a>UEFI–ReservedMemory</h4><p>空</p>\n<h2 id=\"挂载EFI分区\"><a href=\"#挂载EFI分区\" class=\"headerlink\" title=\"挂载EFI分区\"></a>挂载EFI分区</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diskutil list //使用diskutil list 查看磁盘分区情况</span><br><span class=\"line\">diskutil mount disk1s1 //使用diskutil mount disk0s1 挂载disk1的EFI分区。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Thank\"><a href=\"#Thank\" class=\"headerlink\" title=\"Thank\"></a>Thank</h2><ul>\n<li><a href=\"https://blog.xjn819.com/?p=543\" target=\"_blank\" rel=\"noopener\">使用OpenCore引导黑苹果 by XJN</a></li>\n<li><a href=\"https://blog.daliansky.net/OpenCore-BootLoader.html\" target=\"_blank\" rel=\"noopener\">精读OpenCore by 黑果小兵</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://github.com/AlanLang/ASRock-Z390-Phantom-Gaming-ITXac-OpenCore-Hackintosh\" target=\"_blank\" rel=\"noopener\">EFI文件</a></p>\n<h2 id=\"配置清单\"><a href=\"#配置清单\" class=\"headerlink\" title=\"配置清单\"></a>配置清单</h2><table>\n<thead>\n<tr>\n<th>硬件配置</th>\n<th>选型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CPU</td>\n<td>i7 9700k</td>\n</tr>\n<tr>\n<td>主板</td>\n<td>华擎 Z390 Phantom Gaming-ITX AC</td>\n</tr>\n<tr>\n<td>显卡</td>\n<td>蓝宝石RX560 + 显卡延长线</td>\n</tr>\n<tr>\n<td>内存条</td>\n<td>芝奇幻光戟16G * 1</td>\n</tr>\n<tr>\n<td>硬盘</td>\n<td>WD/西部数据 SN550系列500G SSD</td>\n</tr>\n<tr>\n<td>电源</td>\n<td>全汉MS600 铜牌全模组+定制线</td>\n</tr>\n<tr>\n<td>无线网卡</td>\n<td>博通DW1560 (可以直接替换主板上的)</td>\n</tr>\n<tr>\n<td>散热</td>\n<td>乔思伯240水冷</td>\n</tr>\n<tr>\n<td>机箱</td>\n<td>定制的A4机箱</td>\n</tr>\n</tbody>\n</table>","more":"<h2 id=\"BIOS设置\"><a href=\"#BIOS设置\" class=\"headerlink\" title=\"BIOS设置\"></a>BIOS设置</h2><p>禁用如下：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">英文</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Fast Boot</td>\n<td style=\"text-align:left\">快速启动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CFG Lock (MSR 0xE2 write protection)</td>\n<td style=\"text-align:left\">CFG 锁 (MSR 0xE2 写入保护)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">vt-d</td>\n<td style=\"text-align:left\">vt-d</td>\n</tr>\n</tbody>\n</table>\n<p>启用如下:</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">英文</th>\n<th style=\"text-align:left\">中文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">Above 4G decoding</td>\n<td style=\"text-align:left\">大于 4G 地址空间解码</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CSM</td>\n<td style=\"text-align:left\">兼容性支持模块</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IGPU</td>\n<td style=\"text-align:left\">IGPU多监视器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XHCI Hand-off</td>\n<td style=\"text-align:left\">XHCI Hand-off</td>\n</tr>\n</tbody>\n</table>\n<p>注意 关于CSM看网上教程都说要关闭它，但是我关闭了之后有一定概率引导失败，所以就把它打开了</p>\n<h2 id=\"config-plist\"><a href=\"#config-plist\" class=\"headerlink\" title=\"config.plist\"></a>config.plist</h2><h3 id=\"ACPI\"><a href=\"#ACPI\" class=\"headerlink\" title=\"ACPI\"></a>ACPI</h3><h4 id=\"ACPI—–Add\"><a href=\"#ACPI—–Add\" class=\"headerlink\" title=\"ACPI—–Add\"></a>ACPI—–Add</h4><p>根据ACPI目录下所用的SSDT填写</p>\n<h4 id=\"ACPI—–Block\"><a href=\"#ACPI—–Block\" class=\"headerlink\" title=\"ACPI—–Block\"></a>ACPI—–Block</h4><p>不用填</p>\n<h4 id=\"ACPI—–Patch\"><a href=\"#ACPI—–Patch\" class=\"headerlink\" title=\"ACPI—–Patch\"></a>ACPI—–Patch</h4><p>一些热补丁</p>\n<h4 id=\"ACPI—–Quirks\"><a href=\"#ACPI—–Quirks\" class=\"headerlink\" title=\"ACPI—–Quirks\"></a>ACPI—–Quirks</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">FadtEnableReset</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">一些旧的主板需要对FADT进行标记来激活电脑的开机和关机功能，这里我们不许要启动它（如果你遇到关机变重启，可以打开试试，我们之后也会在nvram中将这个问题修复）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">NormalizeHeaders</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">清理ACPI头，一些主板的ACPI表需要打开这个修复启动。但如果补丁点亮系统，请试试NO</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RebaseRegions</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">换硬件、升级BIOS等对硬件的操作会对ACPI表产生影响，一般不需要打开，若发现卡PCI Configuraion Begin，请尝试打开</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ResetHwSig</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">休眠相关项，台式机不需要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ResetLogoStatus</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重置登录状态</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Booter\"><a href=\"#Booter\" class=\"headerlink\" title=\"Booter\"></a>Booter</h3><p>内存相关选项设置。</p>\n<h4 id=\"Booter–MmioWhitelist\"><a href=\"#Booter–MmioWhitelist\" class=\"headerlink\" title=\"Booter–MmioWhitelist\"></a>Booter–MmioWhitelist</h4><p>默认的第一项是为Haswell芯片提供的内存寻址修复，如果此类芯片碰到内存相关问题，请开启它(enable选择yes)。<br>默认第二项是开机卡PCI Configuration这里。ACPI、PCI device同时释放到内存时发生0x1000内存地址被占用而卡在PCI Configration.如果碰到此类问题，请开启它。</p>\n<h4 id=\"Boot—Quirks\"><a href=\"#Boot—Quirks\" class=\"headerlink\" title=\"Boot—Quirks\"></a>Boot—Quirks</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AvoidRuntimeDefrag</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">修复UEFI运行时服务，例如日期，时间，NVRAM，电源控制等</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DevirtualiseMmio</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">减少被盗的内存占用空间，扩展值的选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DisableSingleUser</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">禁止单用户模式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DisableVariableWrite</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">非原生NVRAM主板需要模拟nvram.plist进而写入variable值，因此要禁止此项来防止其他程序对nvram进行写入, 如果你的主板支持原生nvram，请选择NO</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DiscardHibernateMap</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重用原始的休眠内存映射</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EnableSafeModeSlide</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">允许在安全模式下使用Slide 值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">EnableWriteUnprotector</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">在执行期间从CR0寄存器中删除写保护</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ForceExitBootServices</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">这个选项是让那些非常老旧的主板也能使用内存寻址</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProtectMemoryRegions</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">官方对此项目的解释与AvoidRuntimeDefrag类似，除非你明白这是什么，不然选择NO，其实我也不明白。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProtectSecureBoot</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">fasle</td>\n<td style=\"text-align:left\">保护uefi安全启动被写入</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProtectUefiServices</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">fasle</td>\n<td style=\"text-align:left\">保护UEFI服务不被固件覆盖，主要与VM，Icelake和较新的Coffeelake系统有关， 一般Z490的主板需要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProvideCustomSlide</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">如果Slide 值存在冲突，则此选项将强制macOS使用伪随机值。接收调试消息的人需要Only N/256 slide values are usable!</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RebuildAppleMemoryMap</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">生成与macOS兼容的内存映射</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SetupVirtualMap</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">将SetVirtualAddresses调用修复为虚拟地址，在Skylake和更高版本上不需要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SignalAppleOS</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">促使硬件始终启动macOS，主要是对带有dGPU的MacBook Pro有利，因为启动Windows不允许使用iGPU</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SyncRuntimePermissions</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">修正硬件在注入内存时无法注入权限的问题</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"DeviceProperties\"><a href=\"#DeviceProperties\" class=\"headerlink\" title=\"DeviceProperties\"></a>DeviceProperties</h3><p>此项是用来注入你的设备的，主要是显卡和声卡两部分。</p>\n<h4 id=\"DeviceProperties–Add\"><a href=\"#DeviceProperties–Add\" class=\"headerlink\" title=\"DeviceProperties–Add\"></a>DeviceProperties–Add</h4><p>根据实际情况填写声卡和显卡的信息</p>\n<h4 id=\"DeviceProperties–Block\"><a href=\"#DeviceProperties–Block\" class=\"headerlink\" title=\"DeviceProperties–Block\"></a>DeviceProperties–Block</h4><p>这里是禁用一些设备的，我们按默认就行了，不需要任何修改。</p>\n<h3 id=\"Kernel\"><a href=\"#Kernel\" class=\"headerlink\" title=\"Kernel\"></a>Kernel</h3><p>这里是内核相关选项。</p>\n<h4 id=\"Kernel–Add\"><a href=\"#Kernel–Add\" class=\"headerlink\" title=\"Kernel–Add\"></a>Kernel–Add</h4><p>根据Kexts目录下的文件进行填写</p>\n<h4 id=\"Kernel–Block\"><a href=\"#Kernel–Block\" class=\"headerlink\" title=\"Kernel–Block\"></a>Kernel–Block</h4><p>不需要</p>\n<h4 id=\"Kernel–Emulate\"><a href=\"#Kernel–Emulate\" class=\"headerlink\" title=\"Kernel–Emulate\"></a>Kernel–Emulate</h4><p>此选项帮助Ivy Bridge 和一些不受支持的CPU加载电源管理的，所有选项按默认即可。</p>\n<h4 id=\"Kernel–Patch\"><a href=\"#Kernel–Patch\" class=\"headerlink\" title=\"Kernel–Patch\"></a>Kernel–Patch</h4><p>保持默认</p>\n<h4 id=\"Kernel–Quirks\"><a href=\"#Kernel–Quirks\" class=\"headerlink\" title=\"Kernel–Quirks\"></a>Kernel–Quirks</h4><p>内核相关的快捷选项</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AppleCpuPmCfgLock</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">仅当无法在BIOS中禁用CFG-Lock时才需要</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleXcpmCfgLock</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">仅当无法在BIOS中禁用CFG-Lock时才需要+1</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleXcpmExtraMsrs</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">禁用奔腾和许多Xeon等不受支持的CPU所需的多个MSR访问。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleXcpmForceBoost</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">强制使用最大性能，仅建议在持续负载的设备或媒体计算机上启用。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">CustomSMBIOSGuid</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">对UpdateSMBIOSMode自定义模式执行GUID修补。通常与戴尔笔记本电脑有关</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DisableIoMapper</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">禁用vt-d，我们在BIOS里已经禁用vt-d了，这里我们选择NO就行了。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DisableRtcChecksum</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">越过两条rtc检查(0x58及0x59)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DummyPowerManagement</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">替代NullCpuPowerManagement.kext，如果你使用此补丁，请删除并选择yes。我们一般选择no。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ExternalDiskIcons</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">修复苹果系统把内部硬盘识别为外置硬盘时（黄色图标的硬盘）开启，我们一般选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IncreasePciBarSize</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">解决卡PCI configuration，如果碰到请选择yes, 我们选择no。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">LapicKernelPanic</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">适用于HP笔记本的内核奔溃选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PanicNoKextDump</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">防止kext出错打报告而让我们看不到真正的panic原因，这个随便选，我选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PowerTimeoutKernelPanic</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">10.15系统中存在一些设备自身的电源管理无法让系统进入睡眠而超时，导致内核奔溃，如果有这个问题请选择YES。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ThirdPartyDrives</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">开启Sata类SSD的trim功能，我没有sata类的ssd，我选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">XhciPortLimit</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">解除15个端口限制</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"Misc\"><a href=\"#Misc\" class=\"headerlink\" title=\"Misc\"></a>Misc</h3><p>开机引导类的设置。</p>\n<h4 id=\"Misc–BlessOverride\"><a href=\"#Misc–BlessOverride\" class=\"headerlink\" title=\"Misc–BlessOverride\"></a>Misc–BlessOverride</h4><p>这个选项是帮助我们寻找一些不寻常的EFI位置的，除非你有这种情况，不然我们不需要填写任何东西。</p>\n<h4 id=\"Misc–Boot\"><a href=\"#Misc–Boot\" class=\"headerlink\" title=\"Misc–Boot\"></a>Misc–Boot</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ConsoleAttributes</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">开机选择界面的颜色</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HibernateMode</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">None</td>\n<td style=\"text-align:left\">检测休眠模式。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HideAuxiliary</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">在开机选择画面隐藏一些辅助项目，比如recovery盘，clean NVRAM等。一般我们选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HideSelf</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">YES</td>\n<td style=\"text-align:left\">隐藏自身的EFI引导盘选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PickerAttributes</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">用于设置自定义选择器属性，此处将不介绍</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PickerAudioAssist</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">No</td>\n<td style=\"text-align:left\">用于在选择器中启用VoiceOver之类的支持</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PickerMode</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">Builtin</td>\n<td style=\"text-align:left\">设置OpenCore使用内置的选择器</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PollAppleHotKeys</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">允许您在引导过程中使用Apple的热键</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ShowPicker</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">是否显示开机启动盘选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TakeoffDelay</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">开机热键延时</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Timeout</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\">倒计时进入指定硬盘</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Misc–Debug\"><a href=\"#Misc–Debug\" class=\"headerlink\" title=\"Misc–Debug\"></a>Misc–Debug</h4><p>是否开启debug模式，这里我们暂时不需要，全部忽略过。</p>\n<h4 id=\"Misc–Entries\"><a href=\"#Misc–Entries\" class=\"headerlink\" title=\"Misc–Entries\"></a>Misc–Entries</h4><p>这里是帮助我们添加一些你希望的引导路径，不用修改。</p>\n<h4 id=\"Misc–Security\"><a href=\"#Misc–Security\" class=\"headerlink\" title=\"Misc–Security\"></a>Misc–Security</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AllowNvramReset</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否在开机引导项中加入重置nvram缓存功能的选项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AllowSetDefault</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">选择yes后即可在开机选择系统页面中通过Ctrl+enter键设置默认启动盘</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AuthRestart</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">filevault相关项，选择NO。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">BootProtect</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">None</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ExposeSensitiveData</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\">显示更多的调试信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HaltLevel</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">2,147,483,648</td>\n<td style=\"text-align:left\">按默认设置即可</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ScanPolicy</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">11,470,595</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Vault</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">Optional</td>\n<td style=\"text-align:left\">黑苹果的vault加密方式，我们不需要这个功能，填Optional</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"Misc–Tools\"><a href=\"#Misc–Tools\" class=\"headerlink\" title=\"Misc–Tools\"></a>Misc–Tools</h4><p>这里是加入一些开机时候的工具的。</p>\n<h3 id=\"NVRAM\"><a href=\"#NVRAM\" class=\"headerlink\" title=\"NVRAM\"></a>NVRAM</h3><h4 id=\"NVRAM–Add\"><a href=\"#NVRAM–Add\" class=\"headerlink\" title=\"NVRAM–Add\"></a>NVRAM–Add</h4><p>4D1EDE05-38C7-4A6A-9CC6-4BCCA8B38C14</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">DefaultBackgroundColor</td>\n<td style=\"text-align:left\">Data</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\">默认开机背景色为黑色</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UIScale</td>\n<td style=\"text-align:left\">Data</td>\n<td style=\"text-align:left\">01</td>\n<td style=\"text-align:left\">01为普通的UI显示模式，02为开启HIDPI的UI显示模式</td>\n</tr>\n</tbody>\n</table>\n<p>7C436110-AB2A-4BBB-A880-FE41995C9F82</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">boot-args</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">keepsyms=1 alcid=1 agdpmod=pikera</td>\n<td style=\"text-align:left\">slide=1表示从第一组内存开始连续注入；darkwake=0代表一键唤醒机器并偏好设置中节能选项的小憩功能。如果你要用小憩功能请填8； -v是跑代码，在没装好稳定的黑果前我建议加上，方便定位错误，弄完后再删除-v</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">csr-active-config</td>\n<td style=\"text-align:left\">Data</td>\n<td style=\"text-align:left\">00000000</td>\n<td style=\"text-align:left\"></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">prev-lang:kbd</td>\n<td style=\"text-align:left\">Data</td>\n<td style=\"text-align:left\">7A682D48 616E733A 323532</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"NVRAM–Block\"><a href=\"#NVRAM–Block\" class=\"headerlink\" title=\"NVRAM–Block\"></a>NVRAM–Block</h4><p>禁用一些nvram变量，我们这里按默认设置不必理会。</p>\n<h4 id=\"NVRAM–LegacyEnable\"><a href=\"#NVRAM–LegacyEnable\" class=\"headerlink\" title=\"NVRAM–LegacyEnable\"></a>NVRAM–LegacyEnable</h4><p>如果你的主板不支持原生NVRAM，请一定要选择YES! 如果你的主板支持原生nvram的，填no。</p>\n<h4 id=\"NVRAM-LegacyOverwrite\"><a href=\"#NVRAM-LegacyOverwrite\" class=\"headerlink\" title=\"NVRAM-LegacyOverwrite\"></a>NVRAM-LegacyOverwrite</h4><p>对模拟nvram用户来说，将nvram.plist写入硬件，我认为不管是原生nvram还是模拟nvram，都选择no。</p>\n<h4 id=\"NVRAM-LegacySchema\"><a href=\"#NVRAM-LegacySchema\" class=\"headerlink\" title=\"NVRAM-LegacySchema\"></a>NVRAM-LegacySchema</h4><p>nvram的变量设置</p>\n<h4 id=\"NVRAM-WriteFlash\"><a href=\"#NVRAM-WriteFlash\" class=\"headerlink\" title=\"NVRAM-WriteFlash\"></a>NVRAM-WriteFlash</h4><p>如果你的主板bios因为nvram导入垃圾内容，请关闭它，一般都是选择no。</p>\n<h3 id=\"PlatformInfo\"><a href=\"#PlatformInfo\" class=\"headerlink\" title=\"PlatformInfo\"></a>PlatformInfo</h3><p>机型信息</p>\n<h4 id=\"PlatformInfo–Automatic\"><a href=\"#PlatformInfo–Automatic\" class=\"headerlink\" title=\"PlatformInfo–Automatic\"></a>PlatformInfo–Automatic</h4><p>这里意思是是否自动填写系统信息。因为后面的很多选项都好繁琐，我们只要认真填几个选项就行了，这里我选YES，不重要的信息让它自动填。</p>\n<h4 id=\"PlatformInfo–Generic\"><a href=\"#PlatformInfo–Generic\" class=\"headerlink\" title=\"PlatformInfo–Generic\"></a>PlatformInfo–Generic</h4><p>填写三码信息</p>\n<h4 id=\"PlatformInfo–UpdateDataHub\"><a href=\"#PlatformInfo–UpdateDataHub\" class=\"headerlink\" title=\"PlatformInfo–UpdateDataHub\"></a>PlatformInfo–UpdateDataHub</h4><p>yes</p>\n<h4 id=\"PlatformInfo–UpdateNVRAM\"><a href=\"#PlatformInfo–UpdateNVRAM\" class=\"headerlink\" title=\"PlatformInfo–UpdateNVRAM\"></a>PlatformInfo–UpdateNVRAM</h4><p>yess</p>\n<h4 id=\"PlatformInfo–UpdateSMBIOS\"><a href=\"#PlatformInfo–UpdateSMBIOS\" class=\"headerlink\" title=\"PlatformInfo–UpdateSMBIOS\"></a>PlatformInfo–UpdateSMBIOS</h4><p>yes</p>\n<h4 id=\"PlatformInfo–UpdateSMBIOSMode\"><a href=\"#PlatformInfo–UpdateSMBIOSMode\" class=\"headerlink\" title=\"PlatformInfo–UpdateSMBIOSMode\"></a>PlatformInfo–UpdateSMBIOSMode</h4><p>Create</p>\n<h3 id=\"UEFI\"><a href=\"#UEFI\" class=\"headerlink\" title=\"UEFI\"></a>UEFI</h3><p>UEFI相关的设置。</p>\n<h4 id=\"UEFI–APFS\"><a href=\"#UEFI–APFS\" class=\"headerlink\" title=\"UEFI–APFS\"></a>UEFI–APFS</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">EnableJumpstart</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">从APFS容器中加载内置APFS驱动</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HideVerbose</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否隐藏啰嗦模式，一般我们需要看日志的时候才开启</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">JumpstartHotPlug</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否加载APFS格式的热插设备</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MinDate</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">加载最低发行的APFS格式</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MinVersion</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">加载最低版本的APFS格式。填0代表从HIGH SIERRA开始加载。</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–Audio\"><a href=\"#UEFI–Audio\" class=\"headerlink\" title=\"UEFI–Audio\"></a>UEFI–Audio</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AudioSupport</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">False</td>\n<td style=\"text-align:left\">是否开启黑苹果的开机提示音支持。如果你选择YES，后面的内容你必须认真看，不支持DP类的数字音频。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AudioCodec</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">填写音频声卡in节点</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AudioDevice</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">PciRoot(0x0)/Pci(0x1b,0x0)</td>\n<td style=\"text-align:left\">填写你声卡的路径</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AudioOut</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">音频声卡out节点</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">MinimumVolume</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">20</td>\n<td style=\"text-align:left\">声音音量</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">PlayChime</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">如果要使用开机duang声音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">VolumeAmplifier</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">按照默认设置</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–ConnectDrivers\"><a href=\"#UEFI–ConnectDrivers\" class=\"headerlink\" title=\"UEFI–ConnectDrivers\"></a>UEFI–ConnectDrivers</h4><p>是否加载补丁，我们选择YES</p>\n<h4 id=\"UEFI–Drivers\"><a href=\"#UEFI–Drivers\" class=\"headerlink\" title=\"UEFI–Drivers\"></a>UEFI–Drivers</h4><p>根据用的驱动填写</p>\n<h4 id=\"UEFI–Input\"><a href=\"#UEFI–Input\" class=\"headerlink\" title=\"UEFI–Input\"></a>UEFI–Input</h4><p>默认即可，无需修改</p>\n<h4 id=\"UEFI–Output\"><a href=\"#UEFI–Output\" class=\"headerlink\" title=\"UEFI–Output\"></a>UEFI–Output</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ClearScreenOnModeSwitch</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">消除开机时从图形模式转换到文本时出现残影的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ConsoleMode</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">这里填主机的输出方式,留空即可</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DirectGopCacheMode</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\"></td>\n<td style=\"text-align:left\">此项请留空！</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DirectGopRendering</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否使用内置显卡直接渲染开机画面，建议选择no</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IgnoreTextInGraphics</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">修复在不使用-v跑马模式时候，开机日志导致的苹果logo显示不正确的问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ProvideConsoleGop</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">True</td>\n<td style=\"text-align:left\">调用显卡gop</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ReconnectOnResChange</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">一些固件在 GOP 分辨率改变后会重新连接显示器才能输出</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ReplaceTabWithSpace</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">一些固件在UEFI Shell下TAB功能键不生效。开启这个会用空格键代替。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">Resolution</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">Max</td>\n<td style=\"text-align:left\">开机分辨率</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">SanitiseClearScreen</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">修复4k及以上显示器的输出问题</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">TextRenderer</td>\n<td style=\"text-align:left\">String</td>\n<td style=\"text-align:left\">BuiltinGraphics</td>\n<td style=\"text-align:left\">OC开机代码字体渲染方式，我这里填BuiltinGraphics</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–ProtocolOverrides\"><a href=\"#UEFI–ProtocolOverrides\" class=\"headerlink\" title=\"UEFI–ProtocolOverrides\"></a>UEFI–ProtocolOverrides</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">AppleAudio</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">是否有开机DUANG的声音</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleBootPolicy</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">虚拟机的mac需要用的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleDebugLog</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重新安装苹果错误日志界面</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleEvent</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">虚拟机并具有vault的mac需要用的</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleImageConversion</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重建apple图标</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleKeyMap</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重建苹果功能键</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleRtcRam</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重装applertc协议</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleSmcIo</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">代替之前的VirtualSMC.efi</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">AppleUserInterfaceTheme</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重新安装 Apple User Interface Theme 协议</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DataHub</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">重建datahub</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">DeviceProperties</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">虚拟机或者老款的电脑需要选择YES才能注入device property</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">FirmwareVolume</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">VAULT相关项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">HashServices</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">VAULT相关项</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">OSInfo</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">通知主板以及一些程序关于MAC引导的信息</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UnicodeCollation</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">旧的主板需要</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–Quirks\"><a href=\"#UEFI–Quirks\" class=\"headerlink\" title=\"UEFI–Quirks\"></a>UEFI–Quirks</h4><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">名称</th>\n<th style=\"text-align:left\">类型</th>\n<th style=\"text-align:left\">值</th>\n<th style=\"text-align:left\">解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">ExitBootServicesDelay</td>\n<td style=\"text-align:left\">Number</td>\n<td style=\"text-align:left\">0</td>\n<td style=\"text-align:left\">旧主板需要给予主板退出时间</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">IgnoreInvalidFlexRatio</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">如果你没有在bios中解锁MSR0x194，一定要选YES</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">ReleaseUsbOwnership</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">自动释放USB所有权的功能</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RequestBootVarFallback</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">一些固件会主动扫描系统启动盘的位置而阻止OC扫描，如果碰到这样的问题选择YES，一般这个BUG在华硕的主板中比较常见。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">RequestBootVarRouting</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">增加”启动磁盘” 的可靠性</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">UnblockFsConnect</td>\n<td style=\"text-align:left\">Boolean</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">惠普笔记本可能会让OC无法扫描到启动项，一般选择NO</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"UEFI–ReservedMemory\"><a href=\"#UEFI–ReservedMemory\" class=\"headerlink\" title=\"UEFI–ReservedMemory\"></a>UEFI–ReservedMemory</h4><p>空</p>\n<h2 id=\"挂载EFI分区\"><a href=\"#挂载EFI分区\" class=\"headerlink\" title=\"挂载EFI分区\"></a>挂载EFI分区</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diskutil list //使用diskutil list 查看磁盘分区情况</span><br><span class=\"line\">diskutil mount disk1s1 //使用diskutil mount disk0s1 挂载disk1的EFI分区。</span><br></pre></td></tr></table></figure>\n<h2 id=\"Thank\"><a href=\"#Thank\" class=\"headerlink\" title=\"Thank\"></a>Thank</h2><ul>\n<li><a href=\"https://blog.xjn819.com/?p=543\" target=\"_blank\" rel=\"noopener\">使用OpenCore引导黑苹果 by XJN</a></li>\n<li><a href=\"https://blog.daliansky.net/OpenCore-BootLoader.html\" target=\"_blank\" rel=\"noopener\">精读OpenCore by 黑果小兵</a></li>\n</ul>"},{"title":"Windows 问题解决","abbrlink":62820,"date":"2018-07-22T04:00:34.000Z","_content":"## 简介\n主要收集windows使用期间所遇到的问题以及解决方法。\n<!-- more -->\n\n## 问题描述\n远程桌面登录时，出现身份验证错误，要求的函数不正确，这可能是由于CredSSP加密Oracle修正。\n## 解决\n解决方法1\n运行 gpedit.msc 本地组策略，“计算机配置”->“管理模板”->“系统”->“凭据分配”但是我的却找不到“加密Oracle修正”选项，选择启用并选择易受攻击。\n\n解决方法2\n* 运行 regedit\n* 打开注册表\n* HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters\n* 在 System（之后没有的文件夹，需自己创建）然后在最底部文件夹Parameters里面\n* 新建 DWORD（32）位值（D）。文件名 “AllowEncryptionOracle” ，值 : 2，\n* 保存，重启\n\n以上2种方法都试了还不行，控制面板->所有控制面板项->Windows 更新，更新下。\n\n## 问题描述\n端口号被占用\n## 解决\n1. 打开控制台，执行 ` netstat -ano | findstr 1099` ，1099被占用的端口号。\n2. 执行 `taskkill -pid 16704 -f` 16704 为占用次端口号的进程ID。\n\n-----------","source":"_posts/Windows 问题解决.md","raw":"---\ntitle: Windows 问题解决\ntags: Windows\ncategories: 问题解决\nabbrlink: 62820\ndate: 2018-07-22 12:00:34\n---\n## 简介\n主要收集windows使用期间所遇到的问题以及解决方法。\n<!-- more -->\n\n## 问题描述\n远程桌面登录时，出现身份验证错误，要求的函数不正确，这可能是由于CredSSP加密Oracle修正。\n## 解决\n解决方法1\n运行 gpedit.msc 本地组策略，“计算机配置”->“管理模板”->“系统”->“凭据分配”但是我的却找不到“加密Oracle修正”选项，选择启用并选择易受攻击。\n\n解决方法2\n* 运行 regedit\n* 打开注册表\n* HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters\n* 在 System（之后没有的文件夹，需自己创建）然后在最底部文件夹Parameters里面\n* 新建 DWORD（32）位值（D）。文件名 “AllowEncryptionOracle” ，值 : 2，\n* 保存，重启\n\n以上2种方法都试了还不行，控制面板->所有控制面板项->Windows 更新，更新下。\n\n## 问题描述\n端口号被占用\n## 解决\n1. 打开控制台，执行 ` netstat -ano | findstr 1099` ，1099被占用的端口号。\n2. 执行 `taskkill -pid 16704 -f` 16704 为占用次端口号的进程ID。\n\n-----------","slug":"Windows 问题解决","published":1,"updated":"2020-03-09T03:01:45.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7n9002b1q2djhhj1ms7","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>主要收集windows使用期间所遇到的问题以及解决方法。<br><a id=\"more\"></a></p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>远程桌面登录时，出现身份验证错误，要求的函数不正确，这可能是由于CredSSP加密Oracle修正。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>解决方法1<br>运行 gpedit.msc 本地组策略，“计算机配置”-&gt;“管理模板”-&gt;“系统”-&gt;“凭据分配”但是我的却找不到“加密Oracle修正”选项，选择启用并选择易受攻击。</p>\n<p>解决方法2</p>\n<ul>\n<li>运行 regedit</li>\n<li>打开注册表</li>\n<li>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters</li>\n<li>在 System（之后没有的文件夹，需自己创建）然后在最底部文件夹Parameters里面</li>\n<li>新建 DWORD（32）位值（D）。文件名 “AllowEncryptionOracle” ，值 : 2，</li>\n<li>保存，重启</li>\n</ul>\n<p>以上2种方法都试了还不行，控制面板-&gt;所有控制面板项-&gt;Windows 更新，更新下。</p>\n<h2 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>端口号被占用</p>\n<h2 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ol>\n<li>打开控制台，执行 <code>netstat -ano | findstr 1099</code> ，1099被占用的端口号。</li>\n<li>执行 <code>taskkill -pid 16704 -f</code> 16704 为占用次端口号的进程ID。</li>\n</ol>\n<hr>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>主要收集windows使用期间所遇到的问题以及解决方法。<br>","more":"</p>\n<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>远程桌面登录时，出现身份验证错误，要求的函数不正确，这可能是由于CredSSP加密Oracle修正。</p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h2><p>解决方法1<br>运行 gpedit.msc 本地组策略，“计算机配置”-&gt;“管理模板”-&gt;“系统”-&gt;“凭据分配”但是我的却找不到“加密Oracle修正”选项，选择启用并选择易受攻击。</p>\n<p>解决方法2</p>\n<ul>\n<li>运行 regedit</li>\n<li>打开注册表</li>\n<li>HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\CredSSP\\Parameters</li>\n<li>在 System（之后没有的文件夹，需自己创建）然后在最底部文件夹Parameters里面</li>\n<li>新建 DWORD（32）位值（D）。文件名 “AllowEncryptionOracle” ，值 : 2，</li>\n<li>保存，重启</li>\n</ul>\n<p>以上2种方法都试了还不行，控制面板-&gt;所有控制面板项-&gt;Windows 更新，更新下。</p>\n<h2 id=\"问题描述-1\"><a href=\"#问题描述-1\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>端口号被占用</p>\n<h2 id=\"解决-1\"><a href=\"#解决-1\" class=\"headerlink\" title=\"解决\"></a>解决</h2><ol>\n<li>打开控制台，执行 <code>netstat -ano | findstr 1099</code> ，1099被占用的端口号。</li>\n<li>执行 <code>taskkill -pid 16704 -f</code> 16704 为占用次端口号的进程ID。</li>\n</ol>\n<hr>"},{"title":"Wox插件：快速打开收藏的目录","abbrlink":"8156ce4d","date":"2018-02-02T04:00:23.000Z","_content":"wox的一款插件，可以根据配置快速打开收藏的目录。源码请移步[这里](https://github.com/AlanLang/wox.plugin.marks)。\n<!-- more -->\n## 使用方法\n直接将public目录下的文件夹拷贝到wox插件目录 `Plugins` 下。\n## 编辑配置文件`config.yml`，例如：\n```\n# 井号开头代表注释\n# 添加的格式为 名称: 地址\n# 例如：\n百度: www.baidu.com\n谷歌: www.google.com.hk\n工作目录: C:\\Users\\alan2\\AppData\\Local\\Wox\\app-1.3.424\\Plugins\\wox.plugin.marks\n```\n## 使用\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-26/55404371.jpg)\n\n支持首字母拼音查询\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-26/79977127.jpg)","source":"_posts/Wox插件：快速打开收藏的目录.md","raw":"---\ntitle: Wox插件：快速打开收藏的目录\ntags: C#\ncategories: 小工具\nabbrlink: 8156ce4d\ndate: 2018-02-02 12:00:23\n---\nwox的一款插件，可以根据配置快速打开收藏的目录。源码请移步[这里](https://github.com/AlanLang/wox.plugin.marks)。\n<!-- more -->\n## 使用方法\n直接将public目录下的文件夹拷贝到wox插件目录 `Plugins` 下。\n## 编辑配置文件`config.yml`，例如：\n```\n# 井号开头代表注释\n# 添加的格式为 名称: 地址\n# 例如：\n百度: www.baidu.com\n谷歌: www.google.com.hk\n工作目录: C:\\Users\\alan2\\AppData\\Local\\Wox\\app-1.3.424\\Plugins\\wox.plugin.marks\n```\n## 使用\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-26/55404371.jpg)\n\n支持首字母拼音查询\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-26/79977127.jpg)","slug":"Wox插件：快速打开收藏的目录","published":1,"updated":"2020-03-09T03:01:45.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nb002f1q2d67oxba27","content":"<p>wox的一款插件，可以根据配置快速打开收藏的目录。源码请移步<a href=\"https://github.com/AlanLang/wox.plugin.marks\" target=\"_blank\" rel=\"noopener\">这里</a>。<br><a id=\"more\"></a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>直接将public目录下的文件夹拷贝到wox插件目录 <code>Plugins</code> 下。</p>\n<h2 id=\"编辑配置文件config-yml，例如：\"><a href=\"#编辑配置文件config-yml，例如：\" class=\"headerlink\" title=\"编辑配置文件config.yml，例如：\"></a>编辑配置文件<code>config.yml</code>，例如：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 井号开头代表注释</span><br><span class=\"line\"># 添加的格式为 名称: 地址</span><br><span class=\"line\"># 例如：</span><br><span class=\"line\">百度: www.baidu.com</span><br><span class=\"line\">谷歌: www.google.com.hk</span><br><span class=\"line\">工作目录: C:\\Users\\alan2\\AppData\\Local\\Wox\\app-1.3.424\\Plugins\\wox.plugin.marks</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-26/55404371.jpg\" alt></p>\n<p>支持首字母拼音查询<br><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-26/79977127.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>wox的一款插件，可以根据配置快速打开收藏的目录。源码请移步<a href=\"https://github.com/AlanLang/wox.plugin.marks\" target=\"_blank\" rel=\"noopener\">这里</a>。<br>","more":"</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>直接将public目录下的文件夹拷贝到wox插件目录 <code>Plugins</code> 下。</p>\n<h2 id=\"编辑配置文件config-yml，例如：\"><a href=\"#编辑配置文件config-yml，例如：\" class=\"headerlink\" title=\"编辑配置文件config.yml，例如：\"></a>编辑配置文件<code>config.yml</code>，例如：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 井号开头代表注释</span><br><span class=\"line\"># 添加的格式为 名称: 地址</span><br><span class=\"line\"># 例如：</span><br><span class=\"line\">百度: www.baidu.com</span><br><span class=\"line\">谷歌: www.google.com.hk</span><br><span class=\"line\">工作目录: C:\\Users\\alan2\\AppData\\Local\\Wox\\app-1.3.424\\Plugins\\wox.plugin.marks</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-26/55404371.jpg\" alt></p>\n<p>支持首字母拼音查询<br><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-26/79977127.jpg\" alt></p>"},{"title":"ubuntu 使用技巧","abbrlink":59562,"date":"2019-07-09T04:00:34.000Z","_content":"\n## 快速安装最新版的node.js\n### 去 nodejs 官网 https://nodejs.org 看最新的版本号\n例如现在最新的版本号是12.6.0\n### 添加源并安装\nnodejs 的每个大版本号都有相对应的源，比如这里的 12.x.x版本的源是https://deb.nodesource.com/setup_12.x。\n\n所以在终端执行： \n```\ncurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\n```\n稍等片刻，源已经添加完毕，再执行：\n``` \nsudo apt-get install -y nodejs\n```\n等待安装完成。\n\n<!-- more -->\n\n## 防火墙操作\n打开或关闭某个端口，例如：\n```\nsudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口\nsudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口\nsudo ufw allow 53 允许外部访问53端口(tcp/udp)\nsudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口\nsudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53\nsudo ufw deny smtp 禁止外部访问smtp服务\nsudo ufw delete allow smtp 删除上面建立的某条规则\n```\n查看防火墙状态\n```\nsudo ufw status\n```\n\n## 安装fish\n```\nsudo apt-add-repository ppa:fish-shell/release-3\nsudo apt-get update\nsudo apt-get install fish\n```\n\n## 安装jenkins\n### 安装 open-jdk\n```\nsudo apt-get install openjdk-8-jdk\n```\n### 安装jenkins\n将存储库密钥添加到系统。\n```\nwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\n```\n我们将Debian包存储库地址附加到服务器的`sources.list`\n```\necho deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list\n```\n更新存储库\n```\nsudo apt-get update\n```\n安装`Jenkins`\n```\nsudo apt-get install jenkins\n```\n安装完成后，jenkins的文件目录如下所示\n```\n安装目录：/var/lib/jenkins  \n日志目录：/var/log/jenkins/jenkins.log  \n```\n### 修改端口号\n```\nvi /etc/default/jenkins\n```\n### 启动\n```\nservice jenkins start \n```","source":"_posts/ubuntu 使用技巧.md","raw":"---\ntitle: ubuntu 使用技巧\ntags: ubuntu\nabbrlink: 59562\ndate: 2019-07-09 12:00:34\n---\n\n## 快速安装最新版的node.js\n### 去 nodejs 官网 https://nodejs.org 看最新的版本号\n例如现在最新的版本号是12.6.0\n### 添加源并安装\nnodejs 的每个大版本号都有相对应的源，比如这里的 12.x.x版本的源是https://deb.nodesource.com/setup_12.x。\n\n所以在终端执行： \n```\ncurl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -\n```\n稍等片刻，源已经添加完毕，再执行：\n``` \nsudo apt-get install -y nodejs\n```\n等待安装完成。\n\n<!-- more -->\n\n## 防火墙操作\n打开或关闭某个端口，例如：\n```\nsudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口\nsudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口\nsudo ufw allow 53 允许外部访问53端口(tcp/udp)\nsudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口\nsudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53\nsudo ufw deny smtp 禁止外部访问smtp服务\nsudo ufw delete allow smtp 删除上面建立的某条规则\n```\n查看防火墙状态\n```\nsudo ufw status\n```\n\n## 安装fish\n```\nsudo apt-add-repository ppa:fish-shell/release-3\nsudo apt-get update\nsudo apt-get install fish\n```\n\n## 安装jenkins\n### 安装 open-jdk\n```\nsudo apt-get install openjdk-8-jdk\n```\n### 安装jenkins\n将存储库密钥添加到系统。\n```\nwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\n```\n我们将Debian包存储库地址附加到服务器的`sources.list`\n```\necho deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list\n```\n更新存储库\n```\nsudo apt-get update\n```\n安装`Jenkins`\n```\nsudo apt-get install jenkins\n```\n安装完成后，jenkins的文件目录如下所示\n```\n安装目录：/var/lib/jenkins  \n日志目录：/var/log/jenkins/jenkins.log  \n```\n### 修改端口号\n```\nvi /etc/default/jenkins\n```\n### 启动\n```\nservice jenkins start \n```","slug":"ubuntu 使用技巧","published":1,"updated":"2020-03-09T03:01:45.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nd002j1q2diuyzitbj","content":"<h2 id=\"快速安装最新版的node-js\"><a href=\"#快速安装最新版的node-js\" class=\"headerlink\" title=\"快速安装最新版的node.js\"></a>快速安装最新版的node.js</h2><h3 id=\"去-nodejs-官网-https-nodejs-org-看最新的版本号\"><a href=\"#去-nodejs-官网-https-nodejs-org-看最新的版本号\" class=\"headerlink\" title=\"去 nodejs 官网 https://nodejs.org 看最新的版本号\"></a>去 nodejs 官网 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">https://nodejs.org</a> 看最新的版本号</h3><p>例如现在最新的版本号是12.6.0</p>\n<h3 id=\"添加源并安装\"><a href=\"#添加源并安装\" class=\"headerlink\" title=\"添加源并安装\"></a>添加源并安装</h3><p>nodejs 的每个大版本号都有相对应的源，比如这里的 12.x.x版本的源是<a href=\"https://deb.nodesource.com/setup_12.x。\" target=\"_blank\" rel=\"noopener\">https://deb.nodesource.com/setup_12.x。</a></p>\n<p>所以在终端执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br></pre></td></tr></table></figure></p>\n<p>稍等片刻，源已经添加完毕，再执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p>\n<p>等待安装完成。</p>\n<a id=\"more\"></a>\n<h2 id=\"防火墙操作\"><a href=\"#防火墙操作\" class=\"headerlink\" title=\"防火墙操作\"></a>防火墙操作</h2><p>打开或关闭某个端口，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口</span><br><span class=\"line\">sudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口</span><br><span class=\"line\">sudo ufw allow 53 允许外部访问53端口(tcp/udp)</span><br><span class=\"line\">sudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口</span><br><span class=\"line\">sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53</span><br><span class=\"line\">sudo ufw deny smtp 禁止外部访问smtp服务</span><br><span class=\"line\">sudo ufw delete allow smtp 删除上面建立的某条规则</span><br></pre></td></tr></table></figure></p>\n<p>查看防火墙状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装fish\"><a href=\"#安装fish\" class=\"headerlink\" title=\"安装fish\"></a>安装fish</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-add-repository ppa:fish-shell/release-3</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install fish</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装jenkins\"><a href=\"#安装jenkins\" class=\"headerlink\" title=\"安装jenkins\"></a>安装jenkins</h2><h3 id=\"安装-open-jdk\"><a href=\"#安装-open-jdk\" class=\"headerlink\" title=\"安装 open-jdk\"></a>安装 open-jdk</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装jenkins-1\"><a href=\"#安装jenkins-1\" class=\"headerlink\" title=\"安装jenkins\"></a>安装jenkins</h3><p>将存储库密钥添加到系统。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>\n<p>我们将Debian包存储库地址附加到服务器的<code>sources.list</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list</span><br></pre></td></tr></table></figure></p>\n<p>更新存储库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>安装<code>Jenkins</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，jenkins的文件目录如下所示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装目录：/var/lib/jenkins  </span><br><span class=\"line\">日志目录：/var/log/jenkins/jenkins.log</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改端口号\"><a href=\"#修改端口号\" class=\"headerlink\" title=\"修改端口号\"></a>修改端口号</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/default/jenkins</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"快速安装最新版的node-js\"><a href=\"#快速安装最新版的node-js\" class=\"headerlink\" title=\"快速安装最新版的node.js\"></a>快速安装最新版的node.js</h2><h3 id=\"去-nodejs-官网-https-nodejs-org-看最新的版本号\"><a href=\"#去-nodejs-官网-https-nodejs-org-看最新的版本号\" class=\"headerlink\" title=\"去 nodejs 官网 https://nodejs.org 看最新的版本号\"></a>去 nodejs 官网 <a href=\"https://nodejs.org\" target=\"_blank\" rel=\"noopener\">https://nodejs.org</a> 看最新的版本号</h3><p>例如现在最新的版本号是12.6.0</p>\n<h3 id=\"添加源并安装\"><a href=\"#添加源并安装\" class=\"headerlink\" title=\"添加源并安装\"></a>添加源并安装</h3><p>nodejs 的每个大版本号都有相对应的源，比如这里的 12.x.x版本的源是<a href=\"https://deb.nodesource.com/setup_12.x。\" target=\"_blank\" rel=\"noopener\">https://deb.nodesource.com/setup_12.x。</a></p>\n<p>所以在终端执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -sL https://deb.nodesource.com/setup_12.x | sudo -E bash -</span><br></pre></td></tr></table></figure></p>\n<p>稍等片刻，源已经添加完毕，再执行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y nodejs</span><br></pre></td></tr></table></figure></p>\n<p>等待安装完成。</p>","more":"<h2 id=\"防火墙操作\"><a href=\"#防火墙操作\" class=\"headerlink\" title=\"防火墙操作\"></a>防火墙操作</h2><p>打开或关闭某个端口，例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow smtp　允许所有的外部IP访问本机的25/tcp (smtp)端口</span><br><span class=\"line\">sudo ufw allow 22/tcp 允许所有的外部IP访问本机的22/tcp (ssh)端口</span><br><span class=\"line\">sudo ufw allow 53 允许外部访问53端口(tcp/udp)</span><br><span class=\"line\">sudo ufw allow from 192.168.1.100 允许此IP访问所有的本机端口</span><br><span class=\"line\">sudo ufw allow proto udp 192.168.0.1 port 53 to 192.168.0.2 port 53</span><br><span class=\"line\">sudo ufw deny smtp 禁止外部访问smtp服务</span><br><span class=\"line\">sudo ufw delete allow smtp 删除上面建立的某条规则</span><br></pre></td></tr></table></figure></p>\n<p>查看防火墙状态<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"安装fish\"><a href=\"#安装fish\" class=\"headerlink\" title=\"安装fish\"></a>安装fish</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-add-repository ppa:fish-shell/release-3</span><br><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install fish</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装jenkins\"><a href=\"#安装jenkins\" class=\"headerlink\" title=\"安装jenkins\"></a>安装jenkins</h2><h3 id=\"安装-open-jdk\"><a href=\"#安装-open-jdk\" class=\"headerlink\" title=\"安装 open-jdk\"></a>安装 open-jdk</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装jenkins-1\"><a href=\"#安装jenkins-1\" class=\"headerlink\" title=\"安装jenkins\"></a>安装jenkins</h3><p>将存储库密钥添加到系统。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>\n<p>我们将Debian包存储库地址附加到服务器的<code>sources.list</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list</span><br></pre></td></tr></table></figure></p>\n<p>更新存储库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>安装<code>Jenkins</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，jenkins的文件目录如下所示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装目录：/var/lib/jenkins  </span><br><span class=\"line\">日志目录：/var/log/jenkins/jenkins.log</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改端口号\"><a href=\"#修改端口号\" class=\"headerlink\" title=\"修改端口号\"></a>修改端口号</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/default/jenkins</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure>"},{"title":"npm常用命令及参数详解","abbrlink":13788,"date":"2019-01-19T00:48:23.000Z","_content":"## NPM命令详解\n平时工作中经常用npm安装，每次用的时候有些命令都要去查一次，这次就自己把这些命令整理下，让自己可以多记住一些。\n对于还不知道NPM是什么的同学请自行google吧 这里我就不多BB了，主要记录一下NPM几个常用命令和参数的意思\n<!-- more -->\n```\nnpm install packagename\n```\n安装模块如不指定版本号 默认会安装最新的版本\n```\nnpm install packagename 0.0.1\n```\n安装指定版本的模块\n```\nnpm init\n```\n这个命令会在当前目录生成一个package.json文件，这个文件中会记录一些关于项目的信息，比如：项目的作者，git地址，入口文件、命令设置、项目名称和版本号等等，一般情况下这个文件是必须要有的，方便后续的项目添加和其他开发人员的使用。\n```\nnpm install packagename --save 或 -S\n```\n--save、-S参数意思是把模块的版本信息保存到dependencies（生产环境依赖）中，即你的package.json文件的dependencies字段中；\n```\nnpm install packagename --save-dev 或 -D\n```\n--save-dev 、 -D参数意思是吧模块版本信息保存到devDependencies（开发环境依赖）中，即你的package.json文件的devDependencies字段中；\n```\nnpm install packagename --save-optional 或 -O\n```\n--save-optional 、 -O参数意思是把模块安装到optionalDependencies（可选环境依赖）中，即你的package.json文件的optionalDependencies字段中。\n```\nnpm install packagename --save-exact 或 -E\n```\n--save-exact 、 -E参数的意思是精确的安装指定版本的模块，细心的同学会发现dependencies字段里每个模块版本号前面的^不见鸟。。。\n\n如果你打开的是别人的项目，这个时候一般是没有任何依赖包的，但是所以需要的包已在package.json里面写好了，这个时候我们就可以使用npm install来安装所有项目中需要的依赖包了\n```\nnpm install packagename -g 或 --global\n```\n安装全局的模块（不加参数的时候默认安装本地模块）\n```\nnpm list 或 npm ll 或 npm la 或 npm ls\n```\n查看所有已经安装的模块 ll 、 ls 、 la 三个命令意思都一样 但是列表的展示方式不一样 喜欢用哪个就看个人喜好了,不懂的同学可以每个都去试下。\n```\nnpm uninstall packagename [options]\n```\n卸载已经安装的模块，后面的options参数意思与安装时候的意思一样,与这个命令相同的还有npm remove 、npm rm、npm r 、 npm un 、 npm unlink 这几个命令功能和npm uninstall基本一样，个人觉得没什么区别。\n```\nnpm outdated\n```\n这个命令会列出所有已经过时了的模块，对于已经过时了的模块可以使用下面的命令去更新\n```\nnpm update [-g]\n```\n更新已经安装的模块(或全局的模块)\n```\nnpm help '命令'\n```\n查看某条命令的详细帮助\n```\nnpm root\n```\n查看命令的绝对路径\n```\nnpm config\n```\n设置npm命令的配置路径，这个命令一般用于设置代理，毕竟大部分都是国外的模块，不过个人还是比较喜欢用cnpm 这个命令是用的淘宝的镜像，用法与npm一样，速度还可以。\n\n除去以上的这些命令外，经常还能见到一些npm start、npm deploy、 npm build等等之类的命令，这些一般都是在package.json 中自定义的一些启动、重启、停止服务之类的命令。可以在package.json文件的scripts字段里自定义。例如：\n```\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"start\": \"webpack-dev-server main.js,\n    \"deploy\": \"set NODE_ENV=production\"\n  }\n```\n关于package.json的详细文档，有兴趣的同学可以参考[《package.json中文文档》](https://github.com/ericdum/mujiang.info/issues/6/)；\n","source":"_posts/npm常用命令及参数详解.md","raw":"---\ntitle: npm常用命令及参数详解\ntags: 前端\ncategories: 前端\nabbrlink: 13788\ndate: 2019-01-19 08:48:23\n---\n## NPM命令详解\n平时工作中经常用npm安装，每次用的时候有些命令都要去查一次，这次就自己把这些命令整理下，让自己可以多记住一些。\n对于还不知道NPM是什么的同学请自行google吧 这里我就不多BB了，主要记录一下NPM几个常用命令和参数的意思\n<!-- more -->\n```\nnpm install packagename\n```\n安装模块如不指定版本号 默认会安装最新的版本\n```\nnpm install packagename 0.0.1\n```\n安装指定版本的模块\n```\nnpm init\n```\n这个命令会在当前目录生成一个package.json文件，这个文件中会记录一些关于项目的信息，比如：项目的作者，git地址，入口文件、命令设置、项目名称和版本号等等，一般情况下这个文件是必须要有的，方便后续的项目添加和其他开发人员的使用。\n```\nnpm install packagename --save 或 -S\n```\n--save、-S参数意思是把模块的版本信息保存到dependencies（生产环境依赖）中，即你的package.json文件的dependencies字段中；\n```\nnpm install packagename --save-dev 或 -D\n```\n--save-dev 、 -D参数意思是吧模块版本信息保存到devDependencies（开发环境依赖）中，即你的package.json文件的devDependencies字段中；\n```\nnpm install packagename --save-optional 或 -O\n```\n--save-optional 、 -O参数意思是把模块安装到optionalDependencies（可选环境依赖）中，即你的package.json文件的optionalDependencies字段中。\n```\nnpm install packagename --save-exact 或 -E\n```\n--save-exact 、 -E参数的意思是精确的安装指定版本的模块，细心的同学会发现dependencies字段里每个模块版本号前面的^不见鸟。。。\n\n如果你打开的是别人的项目，这个时候一般是没有任何依赖包的，但是所以需要的包已在package.json里面写好了，这个时候我们就可以使用npm install来安装所有项目中需要的依赖包了\n```\nnpm install packagename -g 或 --global\n```\n安装全局的模块（不加参数的时候默认安装本地模块）\n```\nnpm list 或 npm ll 或 npm la 或 npm ls\n```\n查看所有已经安装的模块 ll 、 ls 、 la 三个命令意思都一样 但是列表的展示方式不一样 喜欢用哪个就看个人喜好了,不懂的同学可以每个都去试下。\n```\nnpm uninstall packagename [options]\n```\n卸载已经安装的模块，后面的options参数意思与安装时候的意思一样,与这个命令相同的还有npm remove 、npm rm、npm r 、 npm un 、 npm unlink 这几个命令功能和npm uninstall基本一样，个人觉得没什么区别。\n```\nnpm outdated\n```\n这个命令会列出所有已经过时了的模块，对于已经过时了的模块可以使用下面的命令去更新\n```\nnpm update [-g]\n```\n更新已经安装的模块(或全局的模块)\n```\nnpm help '命令'\n```\n查看某条命令的详细帮助\n```\nnpm root\n```\n查看命令的绝对路径\n```\nnpm config\n```\n设置npm命令的配置路径，这个命令一般用于设置代理，毕竟大部分都是国外的模块，不过个人还是比较喜欢用cnpm 这个命令是用的淘宝的镜像，用法与npm一样，速度还可以。\n\n除去以上的这些命令外，经常还能见到一些npm start、npm deploy、 npm build等等之类的命令，这些一般都是在package.json 中自定义的一些启动、重启、停止服务之类的命令。可以在package.json文件的scripts字段里自定义。例如：\n```\n\"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\",\n    \"build\": \"webpack\",\n    \"start\": \"webpack-dev-server main.js,\n    \"deploy\": \"set NODE_ENV=production\"\n  }\n```\n关于package.json的详细文档，有兴趣的同学可以参考[《package.json中文文档》](https://github.com/ericdum/mujiang.info/issues/6/)；\n","slug":"npm常用命令及参数详解","published":1,"updated":"2020-03-09T03:01:45.086Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7ne002n1q2d2izm3ddo","content":"<h2 id=\"NPM命令详解\"><a href=\"#NPM命令详解\" class=\"headerlink\" title=\"NPM命令详解\"></a>NPM命令详解</h2><p>平时工作中经常用npm安装，每次用的时候有些命令都要去查一次，这次就自己把这些命令整理下，让自己可以多记住一些。<br>对于还不知道NPM是什么的同学请自行google吧 这里我就不多BB了，主要记录一下NPM几个常用命令和参数的意思<br><a id=\"more\"></a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename</span><br></pre></td></tr></table></figure></p>\n<p>安装模块如不指定版本号 默认会安装最新的版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename 0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>安装指定版本的模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure></p>\n<p>这个命令会在当前目录生成一个package.json文件，这个文件中会记录一些关于项目的信息，比如：项目的作者，git地址，入口文件、命令设置、项目名称和版本号等等，一般情况下这个文件是必须要有的，方便后续的项目添加和其他开发人员的使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename --save 或 -S</span><br></pre></td></tr></table></figure></p>\n<p>–save、-S参数意思是把模块的版本信息保存到dependencies（生产环境依赖）中，即你的package.json文件的dependencies字段中；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename --save-dev 或 -D</span><br></pre></td></tr></table></figure></p>\n<p>–save-dev 、 -D参数意思是吧模块版本信息保存到devDependencies（开发环境依赖）中，即你的package.json文件的devDependencies字段中；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename --save-optional 或 -O</span><br></pre></td></tr></table></figure></p>\n<p>–save-optional 、 -O参数意思是把模块安装到optionalDependencies（可选环境依赖）中，即你的package.json文件的optionalDependencies字段中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename --save-exact 或 -E</span><br></pre></td></tr></table></figure></p>\n<p>–save-exact 、 -E参数的意思是精确的安装指定版本的模块，细心的同学会发现dependencies字段里每个模块版本号前面的^不见鸟。。。</p>\n<p>如果你打开的是别人的项目，这个时候一般是没有任何依赖包的，但是所以需要的包已在package.json里面写好了，这个时候我们就可以使用npm install来安装所有项目中需要的依赖包了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename -g 或 --global</span><br></pre></td></tr></table></figure></p>\n<p>安装全局的模块（不加参数的时候默认安装本地模块）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list 或 npm ll 或 npm la 或 npm ls</span><br></pre></td></tr></table></figure></p>\n<p>查看所有已经安装的模块 ll 、 ls 、 la 三个命令意思都一样 但是列表的展示方式不一样 喜欢用哪个就看个人喜好了,不懂的同学可以每个都去试下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall packagename [options]</span><br></pre></td></tr></table></figure></p>\n<p>卸载已经安装的模块，后面的options参数意思与安装时候的意思一样,与这个命令相同的还有npm remove 、npm rm、npm r 、 npm un 、 npm unlink 这几个命令功能和npm uninstall基本一样，个人觉得没什么区别。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm outdated</span><br></pre></td></tr></table></figure></p>\n<p>这个命令会列出所有已经过时了的模块，对于已经过时了的模块可以使用下面的命令去更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update [-g]</span><br></pre></td></tr></table></figure></p>\n<p>更新已经安装的模块(或全局的模块)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help &apos;命令&apos;</span><br></pre></td></tr></table></figure></p>\n<p>查看某条命令的详细帮助<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root</span><br></pre></td></tr></table></figure></p>\n<p>查看命令的绝对路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config</span><br></pre></td></tr></table></figure></p>\n<p>设置npm命令的配置路径，这个命令一般用于设置代理，毕竟大部分都是国外的模块，不过个人还是比较喜欢用cnpm 这个命令是用的淘宝的镜像，用法与npm一样，速度还可以。</p>\n<p>除去以上的这些命令外，经常还能见到一些npm start、npm deploy、 npm build等等之类的命令，这些一般都是在package.json 中自定义的一些启动、重启、停止服务之类的命令。可以在package.json文件的scripts字段里自定义。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack-dev-server main.js,</span><br><span class=\"line\">    &quot;deploy&quot;: &quot;set NODE_ENV=production&quot;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于package.json的详细文档，有兴趣的同学可以参考<a href=\"https://github.com/ericdum/mujiang.info/issues/6/\" target=\"_blank\" rel=\"noopener\">《package.json中文文档》</a>；</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"NPM命令详解\"><a href=\"#NPM命令详解\" class=\"headerlink\" title=\"NPM命令详解\"></a>NPM命令详解</h2><p>平时工作中经常用npm安装，每次用的时候有些命令都要去查一次，这次就自己把这些命令整理下，让自己可以多记住一些。<br>对于还不知道NPM是什么的同学请自行google吧 这里我就不多BB了，主要记录一下NPM几个常用命令和参数的意思<br>","more":"<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename</span><br></pre></td></tr></table></figure></p>\n<p>安装模块如不指定版本号 默认会安装最新的版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename 0.0.1</span><br></pre></td></tr></table></figure></p>\n<p>安装指定版本的模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init</span><br></pre></td></tr></table></figure></p>\n<p>这个命令会在当前目录生成一个package.json文件，这个文件中会记录一些关于项目的信息，比如：项目的作者，git地址，入口文件、命令设置、项目名称和版本号等等，一般情况下这个文件是必须要有的，方便后续的项目添加和其他开发人员的使用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename --save 或 -S</span><br></pre></td></tr></table></figure></p>\n<p>–save、-S参数意思是把模块的版本信息保存到dependencies（生产环境依赖）中，即你的package.json文件的dependencies字段中；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename --save-dev 或 -D</span><br></pre></td></tr></table></figure></p>\n<p>–save-dev 、 -D参数意思是吧模块版本信息保存到devDependencies（开发环境依赖）中，即你的package.json文件的devDependencies字段中；<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename --save-optional 或 -O</span><br></pre></td></tr></table></figure></p>\n<p>–save-optional 、 -O参数意思是把模块安装到optionalDependencies（可选环境依赖）中，即你的package.json文件的optionalDependencies字段中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename --save-exact 或 -E</span><br></pre></td></tr></table></figure></p>\n<p>–save-exact 、 -E参数的意思是精确的安装指定版本的模块，细心的同学会发现dependencies字段里每个模块版本号前面的^不见鸟。。。</p>\n<p>如果你打开的是别人的项目，这个时候一般是没有任何依赖包的，但是所以需要的包已在package.json里面写好了，这个时候我们就可以使用npm install来安装所有项目中需要的依赖包了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install packagename -g 或 --global</span><br></pre></td></tr></table></figure></p>\n<p>安装全局的模块（不加参数的时候默认安装本地模块）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list 或 npm ll 或 npm la 或 npm ls</span><br></pre></td></tr></table></figure></p>\n<p>查看所有已经安装的模块 ll 、 ls 、 la 三个命令意思都一样 但是列表的展示方式不一样 喜欢用哪个就看个人喜好了,不懂的同学可以每个都去试下。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall packagename [options]</span><br></pre></td></tr></table></figure></p>\n<p>卸载已经安装的模块，后面的options参数意思与安装时候的意思一样,与这个命令相同的还有npm remove 、npm rm、npm r 、 npm un 、 npm unlink 这几个命令功能和npm uninstall基本一样，个人觉得没什么区别。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm outdated</span><br></pre></td></tr></table></figure></p>\n<p>这个命令会列出所有已经过时了的模块，对于已经过时了的模块可以使用下面的命令去更新<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update [-g]</span><br></pre></td></tr></table></figure></p>\n<p>更新已经安装的模块(或全局的模块)<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help &apos;命令&apos;</span><br></pre></td></tr></table></figure></p>\n<p>查看某条命令的详细帮助<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root</span><br></pre></td></tr></table></figure></p>\n<p>查看命令的绝对路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config</span><br></pre></td></tr></table></figure></p>\n<p>设置npm命令的配置路径，这个命令一般用于设置代理，毕竟大部分都是国外的模块，不过个人还是比较喜欢用cnpm 这个命令是用的淘宝的镜像，用法与npm一样，速度还可以。</p>\n<p>除去以上的这些命令外，经常还能见到一些npm start、npm deploy、 npm build等等之类的命令，这些一般都是在package.json 中自定义的一些启动、重启、停止服务之类的命令。可以在package.json文件的scripts字段里自定义。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;webpack&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;webpack-dev-server main.js,</span><br><span class=\"line\">    &quot;deploy&quot;: &quot;set NODE_ENV=production&quot;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>关于package.json的详细文档，有兴趣的同学可以参考<a href=\"https://github.com/ericdum/mujiang.info/issues/6/\" target=\"_blank\" rel=\"noopener\">《package.json中文文档》</a>；</p>"},{"title":"wsl配置开机启动","abbrlink":59040,"date":"2018-12-24T01:49:23.000Z","_content":"以`ubuntu`配置开机启动`ssh`为例。\n### 免密码使用`sudo`直接使用`root`权限执行命令\nvi /etc/sudoers\n<!-- more -->\n\n```\nalan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic\n```\n### 在windows下新建`wslstartup.vbs`\n```\nset ws=wscript.createobject(\"wscript.shell\")\nws.run \"C:\\Windows\\System32\\bash.exe\",0\nws.run \"C:\\Windows\\System32\\bash.exe  -c 'sudo /usr/sbin/service ssh start'\",0\n```\n###将 `wslstartup.vbs`加入计划任务\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/94766517.jpg)\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/9969189.jpg)\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/23785132.jpg)","source":"_posts/wsl配置开机启动.md","raw":"---\ntitle: wsl配置开机启动\ntags: linux\ncategories: linux\nabbrlink: 59040\ndate: 2018-12-24 09:49:23\n---\n以`ubuntu`配置开机启动`ssh`为例。\n### 免密码使用`sudo`直接使用`root`权限执行命令\nvi /etc/sudoers\n<!-- more -->\n\n```\nalan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic\n```\n### 在windows下新建`wslstartup.vbs`\n```\nset ws=wscript.createobject(\"wscript.shell\")\nws.run \"C:\\Windows\\System32\\bash.exe\",0\nws.run \"C:\\Windows\\System32\\bash.exe  -c 'sudo /usr/sbin/service ssh start'\",0\n```\n###将 `wslstartup.vbs`加入计划任务\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/94766517.jpg)\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/9969189.jpg)\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/23785132.jpg)","slug":"wsl配置开机启动","published":1,"updated":"2020-03-09T03:01:45.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7ng002r1q2db0070c0z","content":"<p>以<code>ubuntu</code>配置开机启动<code>ssh</code>为例。</p>\n<h3 id=\"免密码使用sudo直接使用root权限执行命令\"><a href=\"#免密码使用sudo直接使用root权限执行命令\" class=\"headerlink\" title=\"免密码使用sudo直接使用root权限执行命令\"></a>免密码使用<code>sudo</code>直接使用<code>root</code>权限执行命令</h3><p>vi /etc/sudoers<br><a id=\"more\"></a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic</span><br></pre></td></tr></table></figure>\n<h3 id=\"在windows下新建wslstartup-vbs\"><a href=\"#在windows下新建wslstartup-vbs\" class=\"headerlink\" title=\"在windows下新建wslstartup.vbs\"></a>在windows下新建<code>wslstartup.vbs</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set ws=wscript.createobject(&quot;wscript.shell&quot;)</span><br><span class=\"line\">ws.run &quot;C:\\Windows\\System32\\bash.exe&quot;,0</span><br><span class=\"line\">ws.run &quot;C:\\Windows\\System32\\bash.exe  -c &apos;sudo /usr/sbin/service ssh start&apos;&quot;,0</span><br></pre></td></tr></table></figure>\n<p>###将 <code>wslstartup.vbs</code>加入计划任务<br><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/94766517.jpg\" alt><br><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/9969189.jpg\" alt><br><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/23785132.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>以<code>ubuntu</code>配置开机启动<code>ssh</code>为例。</p>\n<h3 id=\"免密码使用sudo直接使用root权限执行命令\"><a href=\"#免密码使用sudo直接使用root权限执行命令\" class=\"headerlink\" title=\"免密码使用sudo直接使用root权限执行命令\"></a>免密码使用<code>sudo</code>直接使用<code>root</code>权限执行命令</h3><p>vi /etc/sudoers<br>","more":"</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic</span><br></pre></td></tr></table></figure>\n<h3 id=\"在windows下新建wslstartup-vbs\"><a href=\"#在windows下新建wslstartup-vbs\" class=\"headerlink\" title=\"在windows下新建wslstartup.vbs\"></a>在windows下新建<code>wslstartup.vbs</code></h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set ws=wscript.createobject(&quot;wscript.shell&quot;)</span><br><span class=\"line\">ws.run &quot;C:\\Windows\\System32\\bash.exe&quot;,0</span><br><span class=\"line\">ws.run &quot;C:\\Windows\\System32\\bash.exe  -c &apos;sudo /usr/sbin/service ssh start&apos;&quot;,0</span><br></pre></td></tr></table></figure>\n<p>###将 <code>wslstartup.vbs</code>加入计划任务<br><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/94766517.jpg\" alt><br><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/9969189.jpg\" alt><br><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-12-24/23785132.jpg\" alt></p>"},{"title":"vscode中的依赖注入","abbrlink":16210,"date":"2020-02-13T00:48:23.000Z","_content":"\n## 介绍\nvscode 项目中，对象基本都是通过依赖注入模式构造的。比如编辑器实例 `CodeApplication` 的 [constructor](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/app.ts#L84) 如下，所有被装饰的参数都是依赖注入项：\n如果你还不了解 TypeScript 装饰器，你可以先阅读[官方文档](https://www.typescriptlang.org/docs/handbook/decorators.html)。\n<!-- more -->\n\n```typescript\nexport class CodeApplication extends Disposable {\n\tconstructor(\n\t\tprivate readonly mainIpcServer: Server,\n\t\tprivate readonly userEnv: IProcessEnvironment,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStateService private readonly stateService: IStateService\n\t) {\n\t\t// ...\n\t}\n}\n```\n\nCodeMain 类将会在应用初始化的时候[实例化该类](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/main.ts#L118-L128)：\n```typescript\nawait instantiationService.invokeFunction(async accessor => {\n\t// 进行实例化，可以看到除了要被构造的类 CodeApplication 之外\n\t// 剩下参数的数目和 constructor 中未被装饰的参数的数目一致\n    const environmentService = accessor.get(IEnvironmentService);\n    const logService = accessor.get(ILogService);\n    const lifecycleMainService = accessor.get(ILifecycleMainService);\n    const configurationService = accessor.get(IConfigurationService);\n    const mainIpcServer = await this.doStartup(logService, environmentService, lifecycleMainService, instantiationService, true);\n\treturn instantiationService.createInstance(CodeApplication, mainIpcServer, instanceEnvironment).startup();\n});\n```\n我们提炼出在 vsocde 中使用依赖注入模式的三个要素：\n* 一个将要被实例化的类，在其构造函数中使用装饰器声明了需要注入的参数（依赖注入项）\n* 装饰器，是注入的参数的类型标识（indentifier）\n* InstantiationService，提供方法实例化类，并且也是依赖注入项所存放的位置\n\n下面介绍一些实现细节。\n## 实现\n### 装饰器\n所有 identifier 均由 createDecorator 方法创建，比如 ILogService\n```typescript\nimport { createDecorator as createServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\n// ...\nexport const ILogService = createServiceDecorator<ILogService>('logService');\n```\n我们看这个文件中，不仅有变量声明：\n```typescript\nexport const ILogService = createServiceDecorator<ILogService>('logService');\n```\n同时也有类型声明：\n```typescript\nexport interface ILogService extends ILogger {\n\t_serviceBrand: undefined;\n}\n```\nTypeScript 允许同名的类型声明和变量声明，这就是为什么 ILogService 同时可以作为装饰器函数的名称和接口的名称。\n[createDecorator](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiation.ts#L128-L128)方法内容如下：\n```typescript\nfunction storeServiceDependency(id: Function, target: Function, index: number, optional: boolean): void {\n    // 在被装饰的类上记录一个依赖项\n\tif ((target as any)[_util.DI_TARGET] === target) {\n\t\t(target as any)[_util.DI_DEPENDENCIES].push({ id, index, optional });\n\t} else {\n\t\t(target as any)[_util.DI_DEPENDENCIES] = [{ id, index, optional }];\n\t\t(target as any)[_util.DI_TARGET] = target;\n\t}\n}\n\n/**\n * A *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator<T>(serviceId: string): ServiceIdentifier<T> {\n    // 判断装饰器是否已在缓存中\n\tif (_util.serviceIds.has(serviceId)) {\n\t\treturn _util.serviceIds.get(serviceId)!;\n\t}\n    // 创建装饰器\n\tconst id = <any>function (target: Function, key: string, index: number): any {\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@IServiceName-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(id, target, index, false);\n\t};\n\n\tid.toString = () => serviceId;\n\n\t_util.serviceIds.set(serviceId, id);\n\treturn id;\n}\n```\n可以看到代码的核心是实现了一个装饰器函数`id`，在装饰器被应用的时候，它就会调用 storeServiceDependency 方法在被装饰的类（比如 CodeApplication）上记录依赖项，包括装饰器本身（id），参数的下标（index）以及是否可选（optional）。\n当类**声明**的时候，装饰器就会被应用（可以通过一个[demo](https://stackblitz.com/edit/typescript-decorator-when-kaigic?file=index.ts)证明），所以在有类被实例化之前依赖关系就已经确定好了。\n\n### InstantiationService\n[InstantiantionService](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L29-L29) 用于提供依赖注入项，也就是起到依赖注入框架中的注入器（Injector）的功能，它以 identifier 为 key 在自身的 _services 属性中保存了各个依赖项的实例。\n\n它暴露了三个公开方法：\n* createInstance，该方法接受一个类以及构造该类的非依赖注入参数，然后创建该类的实例。\n* invokeFunction，该方法接受一个回调函数，该回调函数通过 acessor 参数可以访问该 InstantiationService 中的所有依赖注入项。\n* createChild，该方法接受一个依赖项集合，并创造一个新的 InstantiationService，说明 vscode 的依赖注入机制也是有层次的。\n\n_createInstance 方法是实例化的核心方法：\n```typescript\nprivate _createInstance<T>(ctor: any, args: any[] = [], _trace: Trace): T {\n\t// arguments defined by service decorators\n\tlet serviceDependencies = _util.getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\tlet serviceArgs: any[] = [];\n\tfor (const dependency of serviceDependencies) {\n\t\tlet service = this._getOrCreateServiceInstance(dependency.id, _trace);\n\t\tif (!service && this._strict && !dependency.optional) {\n\t\t\tthrow new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n\t\t}\n\t\tserviceArgs.push(service);\n\t}\n\n\tlet firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n\t// check for argument mismatches, adjust static args if needed\n\tif (args.length !== firstServiceArgPos) {\n\t\tconsole.warn(`[createInstance] First service dependency of ${ctor.name} at position ${\n\t\t\tfirstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n\n\t\tlet delta = firstServiceArgPos - args.length;\n\t\tif (delta > 0) {\n\t\t\targs = args.concat(new Array(delta));\n\t\t} else {\n\t\t\targs = args.slice(0, firstServiceArgPos);\n\t\t}\n\t}\n\n\t// now create the instance\n\treturn <T>new ctor(...[...args, ...serviceArgs]);\n}\n```\n这个方法首先通过`getServiceDependencies`获取被构造类的依赖，这里获取到的依赖就是我们在声明该类的时候就已经通过`storeServiceDependency`所注册的（见上文）。然后通过`_getOrCreateServiceInstance`根据方法`indentifer`拿到`_services`中注册的依赖项，如果拿不到的话就构建一个（我们先假设我们总是能拿到所需要的依赖注册项，需要现场构建的情形我们会在后面的小节中说明），拿到的依赖项会被`push`到`serviceArgs`数组当中。然后会进行`constructor`参数处理。总而言之，`args`数组的长度应该满足被构造的类声明的非注入参数的数量，这样才能确保依赖注入的参数和非依赖注入的参数都能被送到构造函数中正确的顺序上。\n最后用实例化目标类。\n\n### 依赖项不存在的情形\n我们先前提到在调用`_getOrCreateServiceInstance`时可能会拿不到依赖注入项而需要现场构建一个，下面是具体的实现过程。\n首先会调用`_getServiceInstanceOrDescriptor`尝试拿到已经注册的实例，或者是一个`SyncDescriptor`对象。`SyncDescriptor`是什么东西呢，它其实就是封装了实例构造参数的一个数据对象，包括以下属性：\n* ctor 将要被构造的类\n* staticArguments 被传入这个类的参数，和上文中的 args 意义相同\n* supportsDelayedInstantiation 是否支持延迟实例化\n使用起来就像这样：\n```typescript\nservices.set(ILifecycleMainService, new SyncDescriptor(LifecycleMainService));\n```\n表示的其实就是 **不立刻实例化这个类，而当需要被注入的时候再进行实例化**。\n拿到了`SyncDescriptor`之后，会通过[_createAndCacheServiceInstance](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L149-L149) 方法先实例化这个依赖项，它的代码如下：\n```typescript\nprivate _createAndCacheServiceInstance<T>(id: ServiceIdentifier<T>, desc: SyncDescriptor<T>, _trace: Trace): T {\n    type Triple = { id: ServiceIdentifier<any>, desc: SyncDescriptor<any>, _trace: Trace };\n    const graph = new Graph<Triple>(data => data.id.toString());\n\n    let cycleCount = 0;\n    const stack = [{ id, desc, _trace }];\n    while (stack.length) {\n        const item = stack.pop()!;\n        graph.lookupOrInsertNode(item);\n\n        // a weak but working heuristic for cycle checks\n        if (cycleCount++ > 150) {\n            throw new CyclicDependencyError(graph);\n        }\n\n        // check all dependencies for existence and if they need to be created first\n        for (let dependency of _util.getServiceDependencies(item.desc.ctor)) {\n\n            let instanceOrDesc = this._getServiceInstanceOrDescriptor(dependency.id);\n            if (!instanceOrDesc && !dependency.optional) {\n                console.warn(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`);\n            }\n\n            if (instanceOrDesc instanceof SyncDescriptor) {\n                const d = { id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, true) };\n                graph.insertEdge(item, d);\n                stack.push(d);\n            }\n        }\n    }\n\n    while (true) {\n        const roots = graph.roots();\n\n        // if there is no more roots but still\n        // nodes in the graph we have a cycle\n        if (roots.length === 0) {\n            if (!graph.isEmpty()) {\n                throw new CyclicDependencyError(graph);\n            }\n            break;\n        }\n\n        for (const { data } of roots) {\n            // create instance and overwrite the service collections\n            const instance = this._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);\n            this._setServiceInstance(data.id, instance);\n            graph.removeNode(data);\n        }\n    }\n\n    return <T>this._getServiceInstanceOrDescriptor(id);\n}\n```\n这里有两个 while，分别做了以下这几件事情：\n* 第一个 while 是利用 DFS 的方法，找到一个类的所有未实例化的依赖（还是基于 SyncDescriptor），以及依赖的未实例化的依赖……最终得到一个依赖树\n* 第二个 while 根据前一步得到的依赖树，从根节点开始构造实例\n最后我们就得到了我们最初想要的依赖。\n### 全局单例依赖注入\n在 vscode 中，有的依赖是全局唯一、单例的，即在 JavaScript 线程中该类最多只有一个实例（这在 render process 中用得非常多）。vscode 提供了一个简单的机制实现全局单例依赖。\n比方说我们想要创建一个单例的生命周期依赖，就这样做：\n```typescript\nregisterSingleton(ILifecycleService, BrowserLifecycleService);\n```\n即调用 registerSingleton 方法，将 identifier 和具体的实现类绑定即可。\n而`registerSingleton`的实现也异常简单，仅仅是在一个数组中保存一条记录。\n```typescript\nconst _registry: [ServiceIdentifier<any>, SyncDescriptor<any>][] = [];\n\nexport function registerSingleton<T, Services extends BrandedService[]>(id: ServiceIdentifier<T>, ctor: { new(...services: Services): T }, supportsDelayedInstantiation?: boolean): void {\n\t_registry.push([id, new SyncDescriptor<T>(ctor, [], supportsDelayedInstantiation)]);\n}\n\nexport function getSingletonServiceDescriptors(): [ServiceIdentifier<any>, SyncDescriptor<any>][] {\n\treturn _registry;\n}\n```\n在需要用到这些依赖注入项的时候，调用 getSingletonServiceDescriptor 获取这个数组就好。\n所以从本质上来说，全局单例依赖注入其实就是把所有的依赖注入项保存在一个全局变量里。\n### 可选依赖\n有时候我们想让一个依赖是可选的，即允许依赖不存在。对此 vscode 提供了 optional 方法用于标记可选依赖。\n```typescript\nexport function optional<T>(serviceIdentifier: ServiceIdentifier<T>) {\n\n\treturn function (target: Function, key: string, index: number) {\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@optional-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(serviceIdentifier, target, index, true);\n\t};\n}\n```\n可见它与`createDecorator`方法的主要区别在于在调用`storeServiceDependency`的时候第四个参数为`true`。这样当获取不到`serviceIdentifier`所对应的依赖项时`InstantiationService`能够允许这样的情况而不是抛出错误。\n\n### 延迟实例化\n在上文中，我们看到`SyncDecriptor`可以被当作依赖项实例的占位符使用，从而做到在需要依赖它的类被实例化的时候，再进行自身的实例化，即延迟实例化。另外，它还能把实例化过程进一步延迟到访问实例的属性和方法的时候！我们来看看这是如何实现的。\n当创建一个`SyncDescriptor`的时候我们可以传参`supportsDelayedInstantiation = true`，比如这里：\n```typescript\nregisterSingleton(IExtensionGalleryService, ExtensionGalleryService, true);\n```\n这样在调用`_createServiceInstance`的时候就会进入`else`分支。\n```typescript\n// Return a proxy object that's backed by an idle value. That\n// strategy is to instantiate services in our idle time or when actually\n// needed but not when injected into a consumer\nconst idle = new IdleValue<any>(() => this._createInstance<T>(ctor, args, _trace));\nreturn <T>new Proxy(Object.create(null), {\n    get(target: any, key: PropertyKey): any {\n        if (key in target) {\n            return target[key];\n        }\n        let obj = idle.getValue();\n        let prop = obj[key];\n        if (typeof prop !== 'function') {\n            return prop;\n        }\n        prop = prop.bind(obj);\n        target[key] = prop;\n        return prop;\n    },\n    set(_target: T, p: PropertyKey, value: any): boolean {\n        idle.getValue()[p] = value;\n        return true;\n    }\n});\n```\n原理是用一个 Proxy 代替实例返回，当需要用到实例上的属性或方法时，再调用`this._createInstance`方法（通过闭包来保存参数）。这里用到了一种被称为`Idle Until Urgent`的模式。\n\n### InstantiationService 的那些方法\n`InstatiationService` 这个类有很多方法，而且名字都很接近，这里列一个梗概，方便大家阅读源码：\n* createChild 创建一个子 InstantiationService\n* invokeFunction 执行一个函数，该函数可以通过 accessor 访问 InstantiationService 里存储的服务\n* createInstance 创建一个服务\n* _createInstance 实例化的最终方法，new 调用的位置\n* _setServiceInstance 将一个创建好的 service set 到保存了对应的 identifier 的 InstantiationService 当中\n* _getServiceInstaneOrDescriptor 根据 identifier 从某个 InstantiationService 中拿到服务实例或者 SyncDescriptor\n* _getOrCreateServiceInstance 被 invokeFunction 所调用，会尝试调用 _getServiceInstanceOrDescriptor 拿到服务实例，如果拿到的是一个 SyncDescriptor，则走 _createAndCacheServiceInstance\n* _createAndCacheServiceInstance 这里根据“要被创建的服务”的“未被实例化的依赖”来构建依赖树，然后依次构建这些未被实例化的依赖\n* _createServiceInstanceWithOwner 寻找保存了对应的 identifier 的 InstantiationService ，调用它的 _createServiceInstance 方法进行实例化\n* _createServiceInstance 这里处理延迟实例化逻辑，调用 _createInstance 的时候，所有依赖应该都已经被实例化，而不是 SyncDescriptor\n## 总结\nvscode 自己实现了一套依赖注入机制，并没有依赖 reflect-metadata\nInstantiationService 是实现依赖注入的核心\n用装饰器来声明依赖关系\n允许可选依赖\n允许延迟实例化\n支持多层依赖注入","source":"_posts/vscode中的依赖注入.md","raw":"---\ntitle: vscode中的依赖注入\ntags: 前端\ncategories: 前端\nabbrlink: 16210\ndate: 2020-02-13 08:48:23\n---\n\n## 介绍\nvscode 项目中，对象基本都是通过依赖注入模式构造的。比如编辑器实例 `CodeApplication` 的 [constructor](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/app.ts#L84) 如下，所有被装饰的参数都是依赖注入项：\n如果你还不了解 TypeScript 装饰器，你可以先阅读[官方文档](https://www.typescriptlang.org/docs/handbook/decorators.html)。\n<!-- more -->\n\n```typescript\nexport class CodeApplication extends Disposable {\n\tconstructor(\n\t\tprivate readonly mainIpcServer: Server,\n\t\tprivate readonly userEnv: IProcessEnvironment,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStateService private readonly stateService: IStateService\n\t) {\n\t\t// ...\n\t}\n}\n```\n\nCodeMain 类将会在应用初始化的时候[实例化该类](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/main.ts#L118-L128)：\n```typescript\nawait instantiationService.invokeFunction(async accessor => {\n\t// 进行实例化，可以看到除了要被构造的类 CodeApplication 之外\n\t// 剩下参数的数目和 constructor 中未被装饰的参数的数目一致\n    const environmentService = accessor.get(IEnvironmentService);\n    const logService = accessor.get(ILogService);\n    const lifecycleMainService = accessor.get(ILifecycleMainService);\n    const configurationService = accessor.get(IConfigurationService);\n    const mainIpcServer = await this.doStartup(logService, environmentService, lifecycleMainService, instantiationService, true);\n\treturn instantiationService.createInstance(CodeApplication, mainIpcServer, instanceEnvironment).startup();\n});\n```\n我们提炼出在 vsocde 中使用依赖注入模式的三个要素：\n* 一个将要被实例化的类，在其构造函数中使用装饰器声明了需要注入的参数（依赖注入项）\n* 装饰器，是注入的参数的类型标识（indentifier）\n* InstantiationService，提供方法实例化类，并且也是依赖注入项所存放的位置\n\n下面介绍一些实现细节。\n## 实现\n### 装饰器\n所有 identifier 均由 createDecorator 方法创建，比如 ILogService\n```typescript\nimport { createDecorator as createServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\n// ...\nexport const ILogService = createServiceDecorator<ILogService>('logService');\n```\n我们看这个文件中，不仅有变量声明：\n```typescript\nexport const ILogService = createServiceDecorator<ILogService>('logService');\n```\n同时也有类型声明：\n```typescript\nexport interface ILogService extends ILogger {\n\t_serviceBrand: undefined;\n}\n```\nTypeScript 允许同名的类型声明和变量声明，这就是为什么 ILogService 同时可以作为装饰器函数的名称和接口的名称。\n[createDecorator](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiation.ts#L128-L128)方法内容如下：\n```typescript\nfunction storeServiceDependency(id: Function, target: Function, index: number, optional: boolean): void {\n    // 在被装饰的类上记录一个依赖项\n\tif ((target as any)[_util.DI_TARGET] === target) {\n\t\t(target as any)[_util.DI_DEPENDENCIES].push({ id, index, optional });\n\t} else {\n\t\t(target as any)[_util.DI_DEPENDENCIES] = [{ id, index, optional }];\n\t\t(target as any)[_util.DI_TARGET] = target;\n\t}\n}\n\n/**\n * A *only* valid way to create a {{ServiceIdentifier}}.\n */\nexport function createDecorator<T>(serviceId: string): ServiceIdentifier<T> {\n    // 判断装饰器是否已在缓存中\n\tif (_util.serviceIds.has(serviceId)) {\n\t\treturn _util.serviceIds.get(serviceId)!;\n\t}\n    // 创建装饰器\n\tconst id = <any>function (target: Function, key: string, index: number): any {\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@IServiceName-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(id, target, index, false);\n\t};\n\n\tid.toString = () => serviceId;\n\n\t_util.serviceIds.set(serviceId, id);\n\treturn id;\n}\n```\n可以看到代码的核心是实现了一个装饰器函数`id`，在装饰器被应用的时候，它就会调用 storeServiceDependency 方法在被装饰的类（比如 CodeApplication）上记录依赖项，包括装饰器本身（id），参数的下标（index）以及是否可选（optional）。\n当类**声明**的时候，装饰器就会被应用（可以通过一个[demo](https://stackblitz.com/edit/typescript-decorator-when-kaigic?file=index.ts)证明），所以在有类被实例化之前依赖关系就已经确定好了。\n\n### InstantiationService\n[InstantiantionService](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L29-L29) 用于提供依赖注入项，也就是起到依赖注入框架中的注入器（Injector）的功能，它以 identifier 为 key 在自身的 _services 属性中保存了各个依赖项的实例。\n\n它暴露了三个公开方法：\n* createInstance，该方法接受一个类以及构造该类的非依赖注入参数，然后创建该类的实例。\n* invokeFunction，该方法接受一个回调函数，该回调函数通过 acessor 参数可以访问该 InstantiationService 中的所有依赖注入项。\n* createChild，该方法接受一个依赖项集合，并创造一个新的 InstantiationService，说明 vscode 的依赖注入机制也是有层次的。\n\n_createInstance 方法是实例化的核心方法：\n```typescript\nprivate _createInstance<T>(ctor: any, args: any[] = [], _trace: Trace): T {\n\t// arguments defined by service decorators\n\tlet serviceDependencies = _util.getServiceDependencies(ctor).sort((a, b) => a.index - b.index);\n\tlet serviceArgs: any[] = [];\n\tfor (const dependency of serviceDependencies) {\n\t\tlet service = this._getOrCreateServiceInstance(dependency.id, _trace);\n\t\tif (!service && this._strict && !dependency.optional) {\n\t\t\tthrow new Error(`[createInstance] ${ctor.name} depends on UNKNOWN service ${dependency.id}.`);\n\t\t}\n\t\tserviceArgs.push(service);\n\t}\n\n\tlet firstServiceArgPos = serviceDependencies.length > 0 ? serviceDependencies[0].index : args.length;\n\n\t// check for argument mismatches, adjust static args if needed\n\tif (args.length !== firstServiceArgPos) {\n\t\tconsole.warn(`[createInstance] First service dependency of ${ctor.name} at position ${\n\t\t\tfirstServiceArgPos + 1} conflicts with ${args.length} static arguments`);\n\n\t\tlet delta = firstServiceArgPos - args.length;\n\t\tif (delta > 0) {\n\t\t\targs = args.concat(new Array(delta));\n\t\t} else {\n\t\t\targs = args.slice(0, firstServiceArgPos);\n\t\t}\n\t}\n\n\t// now create the instance\n\treturn <T>new ctor(...[...args, ...serviceArgs]);\n}\n```\n这个方法首先通过`getServiceDependencies`获取被构造类的依赖，这里获取到的依赖就是我们在声明该类的时候就已经通过`storeServiceDependency`所注册的（见上文）。然后通过`_getOrCreateServiceInstance`根据方法`indentifer`拿到`_services`中注册的依赖项，如果拿不到的话就构建一个（我们先假设我们总是能拿到所需要的依赖注册项，需要现场构建的情形我们会在后面的小节中说明），拿到的依赖项会被`push`到`serviceArgs`数组当中。然后会进行`constructor`参数处理。总而言之，`args`数组的长度应该满足被构造的类声明的非注入参数的数量，这样才能确保依赖注入的参数和非依赖注入的参数都能被送到构造函数中正确的顺序上。\n最后用实例化目标类。\n\n### 依赖项不存在的情形\n我们先前提到在调用`_getOrCreateServiceInstance`时可能会拿不到依赖注入项而需要现场构建一个，下面是具体的实现过程。\n首先会调用`_getServiceInstanceOrDescriptor`尝试拿到已经注册的实例，或者是一个`SyncDescriptor`对象。`SyncDescriptor`是什么东西呢，它其实就是封装了实例构造参数的一个数据对象，包括以下属性：\n* ctor 将要被构造的类\n* staticArguments 被传入这个类的参数，和上文中的 args 意义相同\n* supportsDelayedInstantiation 是否支持延迟实例化\n使用起来就像这样：\n```typescript\nservices.set(ILifecycleMainService, new SyncDescriptor(LifecycleMainService));\n```\n表示的其实就是 **不立刻实例化这个类，而当需要被注入的时候再进行实例化**。\n拿到了`SyncDescriptor`之后，会通过[_createAndCacheServiceInstance](https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L149-L149) 方法先实例化这个依赖项，它的代码如下：\n```typescript\nprivate _createAndCacheServiceInstance<T>(id: ServiceIdentifier<T>, desc: SyncDescriptor<T>, _trace: Trace): T {\n    type Triple = { id: ServiceIdentifier<any>, desc: SyncDescriptor<any>, _trace: Trace };\n    const graph = new Graph<Triple>(data => data.id.toString());\n\n    let cycleCount = 0;\n    const stack = [{ id, desc, _trace }];\n    while (stack.length) {\n        const item = stack.pop()!;\n        graph.lookupOrInsertNode(item);\n\n        // a weak but working heuristic for cycle checks\n        if (cycleCount++ > 150) {\n            throw new CyclicDependencyError(graph);\n        }\n\n        // check all dependencies for existence and if they need to be created first\n        for (let dependency of _util.getServiceDependencies(item.desc.ctor)) {\n\n            let instanceOrDesc = this._getServiceInstanceOrDescriptor(dependency.id);\n            if (!instanceOrDesc && !dependency.optional) {\n                console.warn(`[createInstance] ${id} depends on ${dependency.id} which is NOT registered.`);\n            }\n\n            if (instanceOrDesc instanceof SyncDescriptor) {\n                const d = { id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, true) };\n                graph.insertEdge(item, d);\n                stack.push(d);\n            }\n        }\n    }\n\n    while (true) {\n        const roots = graph.roots();\n\n        // if there is no more roots but still\n        // nodes in the graph we have a cycle\n        if (roots.length === 0) {\n            if (!graph.isEmpty()) {\n                throw new CyclicDependencyError(graph);\n            }\n            break;\n        }\n\n        for (const { data } of roots) {\n            // create instance and overwrite the service collections\n            const instance = this._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);\n            this._setServiceInstance(data.id, instance);\n            graph.removeNode(data);\n        }\n    }\n\n    return <T>this._getServiceInstanceOrDescriptor(id);\n}\n```\n这里有两个 while，分别做了以下这几件事情：\n* 第一个 while 是利用 DFS 的方法，找到一个类的所有未实例化的依赖（还是基于 SyncDescriptor），以及依赖的未实例化的依赖……最终得到一个依赖树\n* 第二个 while 根据前一步得到的依赖树，从根节点开始构造实例\n最后我们就得到了我们最初想要的依赖。\n### 全局单例依赖注入\n在 vscode 中，有的依赖是全局唯一、单例的，即在 JavaScript 线程中该类最多只有一个实例（这在 render process 中用得非常多）。vscode 提供了一个简单的机制实现全局单例依赖。\n比方说我们想要创建一个单例的生命周期依赖，就这样做：\n```typescript\nregisterSingleton(ILifecycleService, BrowserLifecycleService);\n```\n即调用 registerSingleton 方法，将 identifier 和具体的实现类绑定即可。\n而`registerSingleton`的实现也异常简单，仅仅是在一个数组中保存一条记录。\n```typescript\nconst _registry: [ServiceIdentifier<any>, SyncDescriptor<any>][] = [];\n\nexport function registerSingleton<T, Services extends BrandedService[]>(id: ServiceIdentifier<T>, ctor: { new(...services: Services): T }, supportsDelayedInstantiation?: boolean): void {\n\t_registry.push([id, new SyncDescriptor<T>(ctor, [], supportsDelayedInstantiation)]);\n}\n\nexport function getSingletonServiceDescriptors(): [ServiceIdentifier<any>, SyncDescriptor<any>][] {\n\treturn _registry;\n}\n```\n在需要用到这些依赖注入项的时候，调用 getSingletonServiceDescriptor 获取这个数组就好。\n所以从本质上来说，全局单例依赖注入其实就是把所有的依赖注入项保存在一个全局变量里。\n### 可选依赖\n有时候我们想让一个依赖是可选的，即允许依赖不存在。对此 vscode 提供了 optional 方法用于标记可选依赖。\n```typescript\nexport function optional<T>(serviceIdentifier: ServiceIdentifier<T>) {\n\n\treturn function (target: Function, key: string, index: number) {\n\t\tif (arguments.length !== 3) {\n\t\t\tthrow new Error('@optional-decorator can only be used to decorate a parameter');\n\t\t}\n\t\tstoreServiceDependency(serviceIdentifier, target, index, true);\n\t};\n}\n```\n可见它与`createDecorator`方法的主要区别在于在调用`storeServiceDependency`的时候第四个参数为`true`。这样当获取不到`serviceIdentifier`所对应的依赖项时`InstantiationService`能够允许这样的情况而不是抛出错误。\n\n### 延迟实例化\n在上文中，我们看到`SyncDecriptor`可以被当作依赖项实例的占位符使用，从而做到在需要依赖它的类被实例化的时候，再进行自身的实例化，即延迟实例化。另外，它还能把实例化过程进一步延迟到访问实例的属性和方法的时候！我们来看看这是如何实现的。\n当创建一个`SyncDescriptor`的时候我们可以传参`supportsDelayedInstantiation = true`，比如这里：\n```typescript\nregisterSingleton(IExtensionGalleryService, ExtensionGalleryService, true);\n```\n这样在调用`_createServiceInstance`的时候就会进入`else`分支。\n```typescript\n// Return a proxy object that's backed by an idle value. That\n// strategy is to instantiate services in our idle time or when actually\n// needed but not when injected into a consumer\nconst idle = new IdleValue<any>(() => this._createInstance<T>(ctor, args, _trace));\nreturn <T>new Proxy(Object.create(null), {\n    get(target: any, key: PropertyKey): any {\n        if (key in target) {\n            return target[key];\n        }\n        let obj = idle.getValue();\n        let prop = obj[key];\n        if (typeof prop !== 'function') {\n            return prop;\n        }\n        prop = prop.bind(obj);\n        target[key] = prop;\n        return prop;\n    },\n    set(_target: T, p: PropertyKey, value: any): boolean {\n        idle.getValue()[p] = value;\n        return true;\n    }\n});\n```\n原理是用一个 Proxy 代替实例返回，当需要用到实例上的属性或方法时，再调用`this._createInstance`方法（通过闭包来保存参数）。这里用到了一种被称为`Idle Until Urgent`的模式。\n\n### InstantiationService 的那些方法\n`InstatiationService` 这个类有很多方法，而且名字都很接近，这里列一个梗概，方便大家阅读源码：\n* createChild 创建一个子 InstantiationService\n* invokeFunction 执行一个函数，该函数可以通过 accessor 访问 InstantiationService 里存储的服务\n* createInstance 创建一个服务\n* _createInstance 实例化的最终方法，new 调用的位置\n* _setServiceInstance 将一个创建好的 service set 到保存了对应的 identifier 的 InstantiationService 当中\n* _getServiceInstaneOrDescriptor 根据 identifier 从某个 InstantiationService 中拿到服务实例或者 SyncDescriptor\n* _getOrCreateServiceInstance 被 invokeFunction 所调用，会尝试调用 _getServiceInstanceOrDescriptor 拿到服务实例，如果拿到的是一个 SyncDescriptor，则走 _createAndCacheServiceInstance\n* _createAndCacheServiceInstance 这里根据“要被创建的服务”的“未被实例化的依赖”来构建依赖树，然后依次构建这些未被实例化的依赖\n* _createServiceInstanceWithOwner 寻找保存了对应的 identifier 的 InstantiationService ，调用它的 _createServiceInstance 方法进行实例化\n* _createServiceInstance 这里处理延迟实例化逻辑，调用 _createInstance 的时候，所有依赖应该都已经被实例化，而不是 SyncDescriptor\n## 总结\nvscode 自己实现了一套依赖注入机制，并没有依赖 reflect-metadata\nInstantiationService 是实现依赖注入的核心\n用装饰器来声明依赖关系\n允许可选依赖\n允许延迟实例化\n支持多层依赖注入","slug":"vscode中的依赖注入","published":1,"updated":"2020-03-09T03:01:45.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7ni002v1q2d5021gpi0","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>vscode 项目中，对象基本都是通过依赖注入模式构造的。比如编辑器实例 <code>CodeApplication</code> 的 <a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/app.ts#L84\" target=\"_blank\" rel=\"noopener\">constructor</a> 如下，所有被装饰的参数都是依赖注入项：<br>如果你还不了解 TypeScript 装饰器，你可以先阅读<a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。<br><a id=\"more\"></a></p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CodeApplication <span class=\"keyword\">extends</span> Disposable &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> readonly mainIpcServer: Server,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> readonly userEnv: IProcessEnvironment,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@IInstantiationService</span> <span class=\"keyword\">private</span> readonly instantiationService: IInstantiationService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@ILogService</span> <span class=\"keyword\">private</span> readonly logService: ILogService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@IEnvironmentService</span> <span class=\"keyword\">private</span> readonly environmentService: IEnvironmentService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@ILifecycleMainService</span> <span class=\"keyword\">private</span> readonly lifecycleMainService: ILifecycleMainService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@IConfigurationService</span> <span class=\"keyword\">private</span> readonly configurationService: IConfigurationService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@IStateService</span> <span class=\"keyword\">private</span> readonly stateService: IStateService</span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CodeMain 类将会在应用初始化的时候<a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/main.ts#L118-L128\" target=\"_blank\" rel=\"noopener\">实例化该类</a>：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> instantiationService.invokeFunction(<span class=\"keyword\">async</span> accessor =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 进行实例化，可以看到除了要被构造的类 CodeApplication 之外</span></span><br><span class=\"line\">\t<span class=\"comment\">// 剩下参数的数目和 constructor 中未被装饰的参数的数目一致</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> environmentService = accessor.get(IEnvironmentService);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> logService = accessor.get(ILogService);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lifecycleMainService = accessor.get(ILifecycleMainService);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> configurationService = accessor.get(IConfigurationService);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mainIpcServer = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.doStartup(logService, environmentService, lifecycleMainService, instantiationService, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> instantiationService.createInstance(CodeApplication, mainIpcServer, instanceEnvironment).startup();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>我们提炼出在 vsocde 中使用依赖注入模式的三个要素：</p>\n<ul>\n<li>一个将要被实例化的类，在其构造函数中使用装饰器声明了需要注入的参数（依赖注入项）</li>\n<li>装饰器，是注入的参数的类型标识（indentifier）</li>\n<li>InstantiationService，提供方法实例化类，并且也是依赖注入项所存放的位置</li>\n</ul>\n<p>下面介绍一些实现细节。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>所有 identifier 均由 createDecorator 方法创建，比如 ILogService<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createDecorator <span class=\"keyword\">as</span> createServiceDecorator &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vs/platform/instantiation/common/instantiation'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ILogService = createServiceDecorator&lt;ILogService&gt;(<span class=\"string\">'logService'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>我们看这个文件中，不仅有变量声明：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ILogService = createServiceDecorator&lt;ILogService&gt;(<span class=\"string\">'logService'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>同时也有类型声明：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> ILogService <span class=\"keyword\">extends</span> ILogger &#123;</span><br><span class=\"line\">\t_serviceBrand: <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>TypeScript 允许同名的类型声明和变量声明，这就是为什么 ILogService 同时可以作为装饰器函数的名称和接口的名称。<br><a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiation.ts#L128-L128\" target=\"_blank\" rel=\"noopener\">createDecorator</a>方法内容如下：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storeServiceDependency</span>(<span class=\"params\">id: <span class=\"built_in\">Function</span>, target: <span class=\"built_in\">Function</span>, index: <span class=\"built_in\">number</span>, optional: <span class=\"built_in\">boolean</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在被装饰的类上记录一个依赖项</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[_util.DI_TARGET] === target) &#123;</span><br><span class=\"line\">\t\t(target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[_util.DI_DEPENDENCIES].push(&#123; id, index, optional &#125;);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t(target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[_util.DI_DEPENDENCIES] = [&#123; id, index, optional &#125;];</span><br><span class=\"line\">\t\t(target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[_util.DI_TARGET] = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A *only* valid way to create a &#123;&#123;ServiceIdentifier&#125;&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDecorator</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">serviceId: <span class=\"built_in\">string</span></span>): <span class=\"title\">ServiceIdentifier</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断装饰器是否已在缓存中</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_util.serviceIds.has(serviceId)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _util.serviceIds.get(serviceId)!;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建装饰器</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> id = &lt;<span class=\"built_in\">any</span>&gt;<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">Function</span>, key: <span class=\"built_in\">string</span>, index: <span class=\"built_in\">number</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length !== <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'@IServiceName-decorator can only be used to decorate a parameter'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstoreServiceDependency(id, target, index, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tid.toString = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> serviceId;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_util.serviceIds.set(serviceId, id);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到代码的核心是实现了一个装饰器函数<code>id</code>，在装饰器被应用的时候，它就会调用 storeServiceDependency 方法在被装饰的类（比如 CodeApplication）上记录依赖项，包括装饰器本身（id），参数的下标（index）以及是否可选（optional）。<br>当类<strong>声明</strong>的时候，装饰器就会被应用（可以通过一个<a href=\"https://stackblitz.com/edit/typescript-decorator-when-kaigic?file=index.ts\" target=\"_blank\" rel=\"noopener\">demo</a>证明），所以在有类被实例化之前依赖关系就已经确定好了。</p>\n<h3 id=\"InstantiationService\"><a href=\"#InstantiationService\" class=\"headerlink\" title=\"InstantiationService\"></a>InstantiationService</h3><p><a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L29-L29\" target=\"_blank\" rel=\"noopener\">InstantiantionService</a> 用于提供依赖注入项，也就是起到依赖注入框架中的注入器（Injector）的功能，它以 identifier 为 key 在自身的 _services 属性中保存了各个依赖项的实例。</p>\n<p>它暴露了三个公开方法：</p>\n<ul>\n<li>createInstance，该方法接受一个类以及构造该类的非依赖注入参数，然后创建该类的实例。</li>\n<li>invokeFunction，该方法接受一个回调函数，该回调函数通过 acessor 参数可以访问该 InstantiationService 中的所有依赖注入项。</li>\n<li>createChild，该方法接受一个依赖项集合，并创造一个新的 InstantiationService，说明 vscode 的依赖注入机制也是有层次的。</li>\n</ul>\n<p>_createInstance 方法是实例化的核心方法：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> _createInstance&lt;T&gt;(ctor: <span class=\"built_in\">any</span>, args: <span class=\"built_in\">any</span>[] = [], _trace: Trace): T &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// arguments defined by service decorators</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> serviceDependencies = _util.getServiceDependencies(ctor).sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.index - b.index);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> serviceArgs: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dependency of serviceDependencies) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> service = <span class=\"keyword\">this</span>._getOrCreateServiceInstance(dependency.id, _trace);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!service &amp;&amp; <span class=\"keyword\">this</span>._strict &amp;&amp; !dependency.optional) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`[createInstance] <span class=\"subst\">$&#123;ctor.name&#125;</span> depends on UNKNOWN service <span class=\"subst\">$&#123;dependency.id&#125;</span>.`</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tserviceArgs.push(service);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> firstServiceArgPos = serviceDependencies.length &gt; <span class=\"number\">0</span> ? serviceDependencies[<span class=\"number\">0</span>].index : args.length;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// check for argument mismatches, adjust static args if needed</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length !== firstServiceArgPos) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.warn(<span class=\"string\">`[createInstance] First service dependency of <span class=\"subst\">$&#123;ctor.name&#125;</span> at position <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">\t\t\tfirstServiceArgPos + <span class=\"number\">1</span>&#125;</span> conflicts with <span class=\"subst\">$&#123;args.length&#125;</span> static arguments`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> delta = firstServiceArgPos - args.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (delta &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\targs = args.concat(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(delta));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = args.slice(<span class=\"number\">0</span>, firstServiceArgPos);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// now create the instance</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &lt;T&gt;<span class=\"keyword\">new</span> ctor(...[...args, ...serviceArgs]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个方法首先通过<code>getServiceDependencies</code>获取被构造类的依赖，这里获取到的依赖就是我们在声明该类的时候就已经通过<code>storeServiceDependency</code>所注册的（见上文）。然后通过<code>_getOrCreateServiceInstance</code>根据方法<code>indentifer</code>拿到<code>_services</code>中注册的依赖项，如果拿不到的话就构建一个（我们先假设我们总是能拿到所需要的依赖注册项，需要现场构建的情形我们会在后面的小节中说明），拿到的依赖项会被<code>push</code>到<code>serviceArgs</code>数组当中。然后会进行<code>constructor</code>参数处理。总而言之，<code>args</code>数组的长度应该满足被构造的类声明的非注入参数的数量，这样才能确保依赖注入的参数和非依赖注入的参数都能被送到构造函数中正确的顺序上。<br>最后用实例化目标类。</p>\n<h3 id=\"依赖项不存在的情形\"><a href=\"#依赖项不存在的情形\" class=\"headerlink\" title=\"依赖项不存在的情形\"></a>依赖项不存在的情形</h3><p>我们先前提到在调用<code>_getOrCreateServiceInstance</code>时可能会拿不到依赖注入项而需要现场构建一个，下面是具体的实现过程。<br>首先会调用<code>_getServiceInstanceOrDescriptor</code>尝试拿到已经注册的实例，或者是一个<code>SyncDescriptor</code>对象。<code>SyncDescriptor</code>是什么东西呢，它其实就是封装了实例构造参数的一个数据对象，包括以下属性：</p>\n<ul>\n<li>ctor 将要被构造的类</li>\n<li>staticArguments 被传入这个类的参数，和上文中的 args 意义相同</li>\n<li>supportsDelayedInstantiation 是否支持延迟实例化<br>使用起来就像这样：<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.set(ILifecycleMainService, <span class=\"keyword\">new</span> SyncDescriptor(LifecycleMainService));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>表示的其实就是 <strong>不立刻实例化这个类，而当需要被注入的时候再进行实例化</strong>。<br>拿到了<code>SyncDescriptor</code>之后，会通过<a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L149-L149\" target=\"_blank\" rel=\"noopener\">_createAndCacheServiceInstance</a> 方法先实例化这个依赖项，它的代码如下：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> _createAndCacheServiceInstance&lt;T&gt;(id: ServiceIdentifier&lt;T&gt;, desc: SyncDescriptor&lt;T&gt;, _trace: Trace): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> Triple = &#123; id: ServiceIdentifier&lt;<span class=\"built_in\">any</span>&gt;, desc: SyncDescriptor&lt;<span class=\"built_in\">any</span>&gt;, _trace: Trace &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> graph = <span class=\"keyword\">new</span> Graph&lt;Triple&gt;(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> data.id.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cycleCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stack = [&#123; id, desc, _trace &#125;];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> item = stack.pop()!;</span><br><span class=\"line\">        graph.lookupOrInsertNode(item);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a weak but working heuristic for cycle checks</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cycleCount++ &gt; <span class=\"number\">150</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CyclicDependencyError(graph);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// check all dependencies for existence and if they need to be created first</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> dependency of _util.getServiceDependencies(item.desc.ctor)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> instanceOrDesc = <span class=\"keyword\">this</span>._getServiceInstanceOrDescriptor(dependency.id);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!instanceOrDesc &amp;&amp; !dependency.optional) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.warn(<span class=\"string\">`[createInstance] <span class=\"subst\">$&#123;id&#125;</span> depends on <span class=\"subst\">$&#123;dependency.id&#125;</span> which is NOT registered.`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instanceOrDesc <span class=\"keyword\">instanceof</span> SyncDescriptor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> d = &#123; id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, <span class=\"literal\">true</span>) &#125;;</span><br><span class=\"line\">                graph.insertEdge(item, d);</span><br><span class=\"line\">                stack.push(d);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> roots = graph.roots();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// if there is no more roots but still</span></span><br><span class=\"line\">        <span class=\"comment\">// nodes in the graph we have a cycle</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (roots.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!graph.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CyclicDependencyError(graph);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> &#123; data &#125; of roots) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// create instance and overwrite the service collections</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> instance = <span class=\"keyword\">this</span>._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._setServiceInstance(data.id, instance);</span><br><span class=\"line\">            graph.removeNode(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;T&gt;<span class=\"keyword\">this</span>._getServiceInstanceOrDescriptor(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里有两个 while，分别做了以下这几件事情：</p>\n<ul>\n<li>第一个 while 是利用 DFS 的方法，找到一个类的所有未实例化的依赖（还是基于 SyncDescriptor），以及依赖的未实例化的依赖……最终得到一个依赖树</li>\n<li>第二个 while 根据前一步得到的依赖树，从根节点开始构造实例<br>最后我们就得到了我们最初想要的依赖。<h3 id=\"全局单例依赖注入\"><a href=\"#全局单例依赖注入\" class=\"headerlink\" title=\"全局单例依赖注入\"></a>全局单例依赖注入</h3>在 vscode 中，有的依赖是全局唯一、单例的，即在 JavaScript 线程中该类最多只有一个实例（这在 render process 中用得非常多）。vscode 提供了一个简单的机制实现全局单例依赖。<br>比方说我们想要创建一个单例的生命周期依赖，就这样做：<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerSingleton(ILifecycleService, BrowserLifecycleService);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>即调用 registerSingleton 方法，将 identifier 和具体的实现类绑定即可。<br>而<code>registerSingleton</code>的实现也异常简单，仅仅是在一个数组中保存一条记录。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _registry: [ServiceIdentifier&lt;<span class=\"built_in\">any</span>&gt;, SyncDescriptor&lt;<span class=\"built_in\">any</span>&gt;][] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerSingleton</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">Services</span> <span class=\"title\">extends</span> <span class=\"title\">BrandedService</span>[]&gt;(<span class=\"params\">id: ServiceIdentifier&lt;T&gt;, ctor: &#123; <span class=\"keyword\">new</span>(...services: Services): T &#125;, supportsDelayedInstantiation?: <span class=\"built_in\">boolean</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">\t_registry.push([id, <span class=\"keyword\">new</span> SyncDescriptor&lt;T&gt;(ctor, [], supportsDelayedInstantiation)]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSingletonServiceDescriptors</span>(<span class=\"params\"></span>): [<span class=\"title\">ServiceIdentifier</span>&lt;<span class=\"title\">any</span>&gt;, <span class=\"title\">SyncDescriptor</span>&lt;<span class=\"title\">any</span>&gt;][] </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> _registry;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在需要用到这些依赖注入项的时候，调用 getSingletonServiceDescriptor 获取这个数组就好。<br>所以从本质上来说，全局单例依赖注入其实就是把所有的依赖注入项保存在一个全局变量里。</p>\n<h3 id=\"可选依赖\"><a href=\"#可选依赖\" class=\"headerlink\" title=\"可选依赖\"></a>可选依赖</h3><p>有时候我们想让一个依赖是可选的，即允许依赖不存在。对此 vscode 提供了 optional 方法用于标记可选依赖。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">optional</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">serviceIdentifier: ServiceIdentifier&lt;T&gt;</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">Function</span>, key: <span class=\"built_in\">string</span>, index: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length !== <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'@optional-decorator can only be used to decorate a parameter'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstoreServiceDependency(serviceIdentifier, target, index, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可见它与<code>createDecorator</code>方法的主要区别在于在调用<code>storeServiceDependency</code>的时候第四个参数为<code>true</code>。这样当获取不到<code>serviceIdentifier</code>所对应的依赖项时<code>InstantiationService</code>能够允许这样的情况而不是抛出错误。</p>\n<h3 id=\"延迟实例化\"><a href=\"#延迟实例化\" class=\"headerlink\" title=\"延迟实例化\"></a>延迟实例化</h3><p>在上文中，我们看到<code>SyncDecriptor</code>可以被当作依赖项实例的占位符使用，从而做到在需要依赖它的类被实例化的时候，再进行自身的实例化，即延迟实例化。另外，它还能把实例化过程进一步延迟到访问实例的属性和方法的时候！我们来看看这是如何实现的。<br>当创建一个<code>SyncDescriptor</code>的时候我们可以传参<code>supportsDelayedInstantiation = true</code>，比如这里：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerSingleton(IExtensionGalleryService, ExtensionGalleryService, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样在调用<code>_createServiceInstance</code>的时候就会进入<code>else</code>分支。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Return a proxy object that's backed by an idle value. That</span></span><br><span class=\"line\"><span class=\"comment\">// strategy is to instantiate services in our idle time or when actually</span></span><br><span class=\"line\"><span class=\"comment\">// needed but not when injected into a consumer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> idle = <span class=\"keyword\">new</span> IdleValue&lt;<span class=\"built_in\">any</span>&gt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"keyword\">this</span>._createInstance&lt;T&gt;(<span class=\"params\">ctor, args, _trace</span>)</span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">return</span> &lt;<span class=\"params\">T</span>&gt;<span class=\"params\">new</span> <span class=\"params\">Proxy</span>(<span class=\"params\"><span class=\"built_in\">Object</span>.create(<span class=\"params\"><span class=\"literal\">null</span></span>), &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">get</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, key: PropertyKey</span>): <span class=\"built_in\">any</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">if</span> (<span class=\"params\">key <span class=\"keyword\">in</span> target</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">return</span> target[key];</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">let</span> obj = idle.getValue(<span class=\"params\"></span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">let</span> prop = obj[key];</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">if</span> (<span class=\"params\"><span class=\"keyword\">typeof</span> prop !== '<span class=\"keyword\">function</span>'</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">return</span> prop;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        prop = prop.bind(<span class=\"params\">obj</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        target[key] = prop;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">return</span> prop;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">set</span>(<span class=\"params\">_target: T, p: PropertyKey, value: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">boolean</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        idle.getValue(<span class=\"params\"></span>)[p] = value;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;</span>);</span></span><br></pre></td></tr></table></figure></p>\n<p>原理是用一个 Proxy 代替实例返回，当需要用到实例上的属性或方法时，再调用<code>this._createInstance</code>方法（通过闭包来保存参数）。这里用到了一种被称为<code>Idle Until Urgent</code>的模式。</p>\n<h3 id=\"InstantiationService-的那些方法\"><a href=\"#InstantiationService-的那些方法\" class=\"headerlink\" title=\"InstantiationService 的那些方法\"></a>InstantiationService 的那些方法</h3><p><code>InstatiationService</code> 这个类有很多方法，而且名字都很接近，这里列一个梗概，方便大家阅读源码：</p>\n<ul>\n<li>createChild 创建一个子 InstantiationService</li>\n<li>invokeFunction 执行一个函数，该函数可以通过 accessor 访问 InstantiationService 里存储的服务</li>\n<li>createInstance 创建一个服务</li>\n<li>_createInstance 实例化的最终方法，new 调用的位置</li>\n<li>_setServiceInstance 将一个创建好的 service set 到保存了对应的 identifier 的 InstantiationService 当中</li>\n<li>_getServiceInstaneOrDescriptor 根据 identifier 从某个 InstantiationService 中拿到服务实例或者 SyncDescriptor</li>\n<li>_getOrCreateServiceInstance 被 invokeFunction 所调用，会尝试调用 _getServiceInstanceOrDescriptor 拿到服务实例，如果拿到的是一个 SyncDescriptor，则走 _createAndCacheServiceInstance</li>\n<li>_createAndCacheServiceInstance 这里根据“要被创建的服务”的“未被实例化的依赖”来构建依赖树，然后依次构建这些未被实例化的依赖</li>\n<li>_createServiceInstanceWithOwner 寻找保存了对应的 identifier 的 InstantiationService ，调用它的 _createServiceInstance 方法进行实例化</li>\n<li>_createServiceInstance 这里处理延迟实例化逻辑，调用 _createInstance 的时候，所有依赖应该都已经被实例化，而不是 SyncDescriptor<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>vscode 自己实现了一套依赖注入机制，并没有依赖 reflect-metadata<br>InstantiationService 是实现依赖注入的核心<br>用装饰器来声明依赖关系<br>允许可选依赖<br>允许延迟实例化<br>支持多层依赖注入</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>vscode 项目中，对象基本都是通过依赖注入模式构造的。比如编辑器实例 <code>CodeApplication</code> 的 <a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/app.ts#L84\" target=\"_blank\" rel=\"noopener\">constructor</a> 如下，所有被装饰的参数都是依赖注入项：<br>如果你还不了解 TypeScript 装饰器，你可以先阅读<a href=\"https://www.typescriptlang.org/docs/handbook/decorators.html\" target=\"_blank\" rel=\"noopener\">官方文档</a>。<br>","more":"</p>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">class</span> CodeApplication <span class=\"keyword\">extends</span> Disposable &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> readonly mainIpcServer: Server,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"keyword\">private</span> readonly userEnv: IProcessEnvironment,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@IInstantiationService</span> <span class=\"keyword\">private</span> readonly instantiationService: IInstantiationService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@ILogService</span> <span class=\"keyword\">private</span> readonly logService: ILogService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@IEnvironmentService</span> <span class=\"keyword\">private</span> readonly environmentService: IEnvironmentService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@ILifecycleMainService</span> <span class=\"keyword\">private</span> readonly lifecycleMainService: ILifecycleMainService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@IConfigurationService</span> <span class=\"keyword\">private</span> readonly configurationService: IConfigurationService,</span></span><br><span class=\"line\"><span class=\"params\">\t\t<span class=\"meta\">@IStateService</span> <span class=\"keyword\">private</span> readonly stateService: IStateService</span></span><br><span class=\"line\"><span class=\"params\">\t</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// ...</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>CodeMain 类将会在应用初始化的时候<a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/code/electron-main/main.ts#L118-L128\" target=\"_blank\" rel=\"noopener\">实例化该类</a>：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">await</span> instantiationService.invokeFunction(<span class=\"keyword\">async</span> accessor =&gt; &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 进行实例化，可以看到除了要被构造的类 CodeApplication 之外</span></span><br><span class=\"line\">\t<span class=\"comment\">// 剩下参数的数目和 constructor 中未被装饰的参数的数目一致</span></span><br><span class=\"line\">    <span class=\"keyword\">const</span> environmentService = accessor.get(IEnvironmentService);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> logService = accessor.get(ILogService);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> lifecycleMainService = accessor.get(ILifecycleMainService);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> configurationService = accessor.get(IConfigurationService);</span><br><span class=\"line\">    <span class=\"keyword\">const</span> mainIpcServer = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.doStartup(logService, environmentService, lifecycleMainService, instantiationService, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> instantiationService.createInstance(CodeApplication, mainIpcServer, instanceEnvironment).startup();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>我们提炼出在 vsocde 中使用依赖注入模式的三个要素：</p>\n<ul>\n<li>一个将要被实例化的类，在其构造函数中使用装饰器声明了需要注入的参数（依赖注入项）</li>\n<li>装饰器，是注入的参数的类型标识（indentifier）</li>\n<li>InstantiationService，提供方法实例化类，并且也是依赖注入项所存放的位置</li>\n</ul>\n<p>下面介绍一些实现细节。</p>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>所有 identifier 均由 createDecorator 方法创建，比如 ILogService<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; createDecorator <span class=\"keyword\">as</span> createServiceDecorator &#125; <span class=\"keyword\">from</span> <span class=\"string\">'vs/platform/instantiation/common/instantiation'</span>;</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ILogService = createServiceDecorator&lt;ILogService&gt;(<span class=\"string\">'logService'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>我们看这个文件中，不仅有变量声明：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> ILogService = createServiceDecorator&lt;ILogService&gt;(<span class=\"string\">'logService'</span>);</span><br></pre></td></tr></table></figure></p>\n<p>同时也有类型声明：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">interface</span> ILogService <span class=\"keyword\">extends</span> ILogger &#123;</span><br><span class=\"line\">\t_serviceBrand: <span class=\"literal\">undefined</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>TypeScript 允许同名的类型声明和变量声明，这就是为什么 ILogService 同时可以作为装饰器函数的名称和接口的名称。<br><a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiation.ts#L128-L128\" target=\"_blank\" rel=\"noopener\">createDecorator</a>方法内容如下：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">storeServiceDependency</span>(<span class=\"params\">id: <span class=\"built_in\">Function</span>, target: <span class=\"built_in\">Function</span>, index: <span class=\"built_in\">number</span>, optional: <span class=\"built_in\">boolean</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 在被装饰的类上记录一个依赖项</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[_util.DI_TARGET] === target) &#123;</span><br><span class=\"line\">\t\t(target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[_util.DI_DEPENDENCIES].push(&#123; id, index, optional &#125;);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t(target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[_util.DI_DEPENDENCIES] = [&#123; id, index, optional &#125;];</span><br><span class=\"line\">\t\t(target <span class=\"keyword\">as</span> <span class=\"built_in\">any</span>)[_util.DI_TARGET] = target;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A *only* valid way to create a &#123;&#123;ServiceIdentifier&#125;&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createDecorator</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">serviceId: <span class=\"built_in\">string</span></span>): <span class=\"title\">ServiceIdentifier</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 判断装饰器是否已在缓存中</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (_util.serviceIds.has(serviceId)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> _util.serviceIds.get(serviceId)!;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    <span class=\"comment\">// 创建装饰器</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> id = &lt;<span class=\"built_in\">any</span>&gt;<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">Function</span>, key: <span class=\"built_in\">string</span>, index: <span class=\"built_in\">number</span></span>): <span class=\"title\">any</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length !== <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'@IServiceName-decorator can only be used to decorate a parameter'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstoreServiceDependency(id, target, index, <span class=\"literal\">false</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\tid.toString = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> serviceId;</span><br><span class=\"line\"></span><br><span class=\"line\">\t_util.serviceIds.set(serviceId, id);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> id;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可以看到代码的核心是实现了一个装饰器函数<code>id</code>，在装饰器被应用的时候，它就会调用 storeServiceDependency 方法在被装饰的类（比如 CodeApplication）上记录依赖项，包括装饰器本身（id），参数的下标（index）以及是否可选（optional）。<br>当类<strong>声明</strong>的时候，装饰器就会被应用（可以通过一个<a href=\"https://stackblitz.com/edit/typescript-decorator-when-kaigic?file=index.ts\" target=\"_blank\" rel=\"noopener\">demo</a>证明），所以在有类被实例化之前依赖关系就已经确定好了。</p>\n<h3 id=\"InstantiationService\"><a href=\"#InstantiationService\" class=\"headerlink\" title=\"InstantiationService\"></a>InstantiationService</h3><p><a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L29-L29\" target=\"_blank\" rel=\"noopener\">InstantiantionService</a> 用于提供依赖注入项，也就是起到依赖注入框架中的注入器（Injector）的功能，它以 identifier 为 key 在自身的 _services 属性中保存了各个依赖项的实例。</p>\n<p>它暴露了三个公开方法：</p>\n<ul>\n<li>createInstance，该方法接受一个类以及构造该类的非依赖注入参数，然后创建该类的实例。</li>\n<li>invokeFunction，该方法接受一个回调函数，该回调函数通过 acessor 参数可以访问该 InstantiationService 中的所有依赖注入项。</li>\n<li>createChild，该方法接受一个依赖项集合，并创造一个新的 InstantiationService，说明 vscode 的依赖注入机制也是有层次的。</li>\n</ul>\n<p>_createInstance 方法是实例化的核心方法：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> _createInstance&lt;T&gt;(ctor: <span class=\"built_in\">any</span>, args: <span class=\"built_in\">any</span>[] = [], _trace: Trace): T &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// arguments defined by service decorators</span></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> serviceDependencies = _util.getServiceDependencies(ctor).sort(<span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a.index - b.index);</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> serviceArgs: <span class=\"built_in\">any</span>[] = [];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> dependency of serviceDependencies) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> service = <span class=\"keyword\">this</span>._getOrCreateServiceInstance(dependency.id, _trace);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!service &amp;&amp; <span class=\"keyword\">this</span>._strict &amp;&amp; !dependency.optional) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">`[createInstance] <span class=\"subst\">$&#123;ctor.name&#125;</span> depends on UNKNOWN service <span class=\"subst\">$&#123;dependency.id&#125;</span>.`</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tserviceArgs.push(service);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">let</span> firstServiceArgPos = serviceDependencies.length &gt; <span class=\"number\">0</span> ? serviceDependencies[<span class=\"number\">0</span>].index : args.length;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// check for argument mismatches, adjust static args if needed</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (args.length !== firstServiceArgPos) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">console</span>.warn(<span class=\"string\">`[createInstance] First service dependency of <span class=\"subst\">$&#123;ctor.name&#125;</span> at position <span class=\"subst\">$&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"subst\">\t\t\tfirstServiceArgPos + <span class=\"number\">1</span>&#125;</span> conflicts with <span class=\"subst\">$&#123;args.length&#125;</span> static arguments`</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">let</span> delta = firstServiceArgPos - args.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (delta &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\targs = args.concat(<span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(delta));</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\targs = args.slice(<span class=\"number\">0</span>, firstServiceArgPos);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// now create the instance</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &lt;T&gt;<span class=\"keyword\">new</span> ctor(...[...args, ...serviceArgs]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这个方法首先通过<code>getServiceDependencies</code>获取被构造类的依赖，这里获取到的依赖就是我们在声明该类的时候就已经通过<code>storeServiceDependency</code>所注册的（见上文）。然后通过<code>_getOrCreateServiceInstance</code>根据方法<code>indentifer</code>拿到<code>_services</code>中注册的依赖项，如果拿不到的话就构建一个（我们先假设我们总是能拿到所需要的依赖注册项，需要现场构建的情形我们会在后面的小节中说明），拿到的依赖项会被<code>push</code>到<code>serviceArgs</code>数组当中。然后会进行<code>constructor</code>参数处理。总而言之，<code>args</code>数组的长度应该满足被构造的类声明的非注入参数的数量，这样才能确保依赖注入的参数和非依赖注入的参数都能被送到构造函数中正确的顺序上。<br>最后用实例化目标类。</p>\n<h3 id=\"依赖项不存在的情形\"><a href=\"#依赖项不存在的情形\" class=\"headerlink\" title=\"依赖项不存在的情形\"></a>依赖项不存在的情形</h3><p>我们先前提到在调用<code>_getOrCreateServiceInstance</code>时可能会拿不到依赖注入项而需要现场构建一个，下面是具体的实现过程。<br>首先会调用<code>_getServiceInstanceOrDescriptor</code>尝试拿到已经注册的实例，或者是一个<code>SyncDescriptor</code>对象。<code>SyncDescriptor</code>是什么东西呢，它其实就是封装了实例构造参数的一个数据对象，包括以下属性：</p>\n<ul>\n<li>ctor 将要被构造的类</li>\n<li>staticArguments 被传入这个类的参数，和上文中的 args 意义相同</li>\n<li>supportsDelayedInstantiation 是否支持延迟实例化<br>使用起来就像这样：<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">services.set(ILifecycleMainService, <span class=\"keyword\">new</span> SyncDescriptor(LifecycleMainService));</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>表示的其实就是 <strong>不立刻实例化这个类，而当需要被注入的时候再进行实例化</strong>。<br>拿到了<code>SyncDescriptor</code>之后，会通过<a href=\"https://github.com/microsoft/vscode/blob/ff5f581425da6230b6f9216ecf19abf6c9d285a6/src/vs/platform/instantiation/common/instantiationService.ts#L149-L149\" target=\"_blank\" rel=\"noopener\">_createAndCacheServiceInstance</a> 方法先实例化这个依赖项，它的代码如下：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> _createAndCacheServiceInstance&lt;T&gt;(id: ServiceIdentifier&lt;T&gt;, desc: SyncDescriptor&lt;T&gt;, _trace: Trace): T &#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span> Triple = &#123; id: ServiceIdentifier&lt;<span class=\"built_in\">any</span>&gt;, desc: SyncDescriptor&lt;<span class=\"built_in\">any</span>&gt;, _trace: Trace &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> graph = <span class=\"keyword\">new</span> Graph&lt;Triple&gt;(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> data.id.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> cycleCount = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> stack = [&#123; id, desc, _trace &#125;];</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (stack.length) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> item = stack.pop()!;</span><br><span class=\"line\">        graph.lookupOrInsertNode(item);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// a weak but working heuristic for cycle checks</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cycleCount++ &gt; <span class=\"number\">150</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CyclicDependencyError(graph);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// check all dependencies for existence and if they need to be created first</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> dependency of _util.getServiceDependencies(item.desc.ctor)) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">let</span> instanceOrDesc = <span class=\"keyword\">this</span>._getServiceInstanceOrDescriptor(dependency.id);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!instanceOrDesc &amp;&amp; !dependency.optional) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">console</span>.warn(<span class=\"string\">`[createInstance] <span class=\"subst\">$&#123;id&#125;</span> depends on <span class=\"subst\">$&#123;dependency.id&#125;</span> which is NOT registered.`</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (instanceOrDesc <span class=\"keyword\">instanceof</span> SyncDescriptor) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">const</span> d = &#123; id: dependency.id, desc: instanceOrDesc, _trace: item._trace.branch(dependency.id, <span class=\"literal\">true</span>) &#125;;</span><br><span class=\"line\">                graph.insertEdge(item, d);</span><br><span class=\"line\">                stack.push(d);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> roots = graph.roots();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// if there is no more roots but still</span></span><br><span class=\"line\">        <span class=\"comment\">// nodes in the graph we have a cycle</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (roots.length === <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!graph.isEmpty()) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> CyclicDependencyError(graph);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> &#123; data &#125; of roots) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// create instance and overwrite the service collections</span></span><br><span class=\"line\">            <span class=\"keyword\">const</span> instance = <span class=\"keyword\">this</span>._createServiceInstanceWithOwner(data.id, data.desc.ctor, data.desc.staticArguments, data.desc.supportsDelayedInstantiation, data._trace);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>._setServiceInstance(data.id, instance);</span><br><span class=\"line\">            graph.removeNode(data);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &lt;T&gt;<span class=\"keyword\">this</span>._getServiceInstanceOrDescriptor(id);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里有两个 while，分别做了以下这几件事情：</p>\n<ul>\n<li>第一个 while 是利用 DFS 的方法，找到一个类的所有未实例化的依赖（还是基于 SyncDescriptor），以及依赖的未实例化的依赖……最终得到一个依赖树</li>\n<li>第二个 while 根据前一步得到的依赖树，从根节点开始构造实例<br>最后我们就得到了我们最初想要的依赖。<h3 id=\"全局单例依赖注入\"><a href=\"#全局单例依赖注入\" class=\"headerlink\" title=\"全局单例依赖注入\"></a>全局单例依赖注入</h3>在 vscode 中，有的依赖是全局唯一、单例的，即在 JavaScript 线程中该类最多只有一个实例（这在 render process 中用得非常多）。vscode 提供了一个简单的机制实现全局单例依赖。<br>比方说我们想要创建一个单例的生命周期依赖，就这样做：<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerSingleton(ILifecycleService, BrowserLifecycleService);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>即调用 registerSingleton 方法，将 identifier 和具体的实现类绑定即可。<br>而<code>registerSingleton</code>的实现也异常简单，仅仅是在一个数组中保存一条记录。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> _registry: [ServiceIdentifier&lt;<span class=\"built_in\">any</span>&gt;, SyncDescriptor&lt;<span class=\"built_in\">any</span>&gt;][] = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">registerSingleton</span>&lt;<span class=\"title\">T</span>, <span class=\"title\">Services</span> <span class=\"title\">extends</span> <span class=\"title\">BrandedService</span>[]&gt;(<span class=\"params\">id: ServiceIdentifier&lt;T&gt;, ctor: &#123; <span class=\"keyword\">new</span>(...services: Services): T &#125;, supportsDelayedInstantiation?: <span class=\"built_in\">boolean</span></span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">\t_registry.push([id, <span class=\"keyword\">new</span> SyncDescriptor&lt;T&gt;(ctor, [], supportsDelayedInstantiation)]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSingletonServiceDescriptors</span>(<span class=\"params\"></span>): [<span class=\"title\">ServiceIdentifier</span>&lt;<span class=\"title\">any</span>&gt;, <span class=\"title\">SyncDescriptor</span>&lt;<span class=\"title\">any</span>&gt;][] </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> _registry;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在需要用到这些依赖注入项的时候，调用 getSingletonServiceDescriptor 获取这个数组就好。<br>所以从本质上来说，全局单例依赖注入其实就是把所有的依赖注入项保存在一个全局变量里。</p>\n<h3 id=\"可选依赖\"><a href=\"#可选依赖\" class=\"headerlink\" title=\"可选依赖\"></a>可选依赖</h3><p>有时候我们想让一个依赖是可选的，即允许依赖不存在。对此 vscode 提供了 optional 方法用于标记可选依赖。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">optional</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">serviceIdentifier: ServiceIdentifier&lt;T&gt;</span>) </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">target: <span class=\"built_in\">Function</span>, key: <span class=\"built_in\">string</span>, index: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"built_in\">arguments</span>.length !== <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'@optional-decorator can only be used to decorate a parameter'</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tstoreServiceDependency(serviceIdentifier, target, index, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>可见它与<code>createDecorator</code>方法的主要区别在于在调用<code>storeServiceDependency</code>的时候第四个参数为<code>true</code>。这样当获取不到<code>serviceIdentifier</code>所对应的依赖项时<code>InstantiationService</code>能够允许这样的情况而不是抛出错误。</p>\n<h3 id=\"延迟实例化\"><a href=\"#延迟实例化\" class=\"headerlink\" title=\"延迟实例化\"></a>延迟实例化</h3><p>在上文中，我们看到<code>SyncDecriptor</code>可以被当作依赖项实例的占位符使用，从而做到在需要依赖它的类被实例化的时候，再进行自身的实例化，即延迟实例化。另外，它还能把实例化过程进一步延迟到访问实例的属性和方法的时候！我们来看看这是如何实现的。<br>当创建一个<code>SyncDescriptor</code>的时候我们可以传参<code>supportsDelayedInstantiation = true</code>，比如这里：<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registerSingleton(IExtensionGalleryService, ExtensionGalleryService, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure></p>\n<p>这样在调用<code>_createServiceInstance</code>的时候就会进入<code>else</code>分支。<br><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Return a proxy object that's backed by an idle value. That</span></span><br><span class=\"line\"><span class=\"comment\">// strategy is to instantiate services in our idle time or when actually</span></span><br><span class=\"line\"><span class=\"comment\">// needed but not when injected into a consumer</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> idle = <span class=\"keyword\">new</span> IdleValue&lt;<span class=\"built_in\">any</span>&gt;<span class=\"function\">(<span class=\"params\">(<span class=\"params\"></span>) =&gt; <span class=\"keyword\">this</span>._createInstance&lt;T&gt;(<span class=\"params\">ctor, args, _trace</span>)</span>);</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">return</span> &lt;<span class=\"params\">T</span>&gt;<span class=\"params\">new</span> <span class=\"params\">Proxy</span>(<span class=\"params\"><span class=\"built_in\">Object</span>.create(<span class=\"params\"><span class=\"literal\">null</span></span>), &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">get</span>(<span class=\"params\">target: <span class=\"built_in\">any</span>, key: PropertyKey</span>): <span class=\"built_in\">any</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">if</span> (<span class=\"params\">key <span class=\"keyword\">in</span> target</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">return</span> target[key];</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">let</span> obj = idle.getValue(<span class=\"params\"></span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">let</span> prop = obj[key];</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">if</span> (<span class=\"params\"><span class=\"keyword\">typeof</span> prop !== '<span class=\"keyword\">function</span>'</span>) &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">            <span class=\"keyword\">return</span> prop;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        prop = prop.bind(<span class=\"params\">obj</span>);</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        target[key] = prop;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">return</span> prop;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    <span class=\"keyword\">set</span>(<span class=\"params\">_target: T, p: PropertyKey, value: <span class=\"built_in\">any</span></span>): <span class=\"built_in\">boolean</span> &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        idle.getValue(<span class=\"params\"></span>)[p] = value;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">&#125;</span>);</span></span><br></pre></td></tr></table></figure></p>\n<p>原理是用一个 Proxy 代替实例返回，当需要用到实例上的属性或方法时，再调用<code>this._createInstance</code>方法（通过闭包来保存参数）。这里用到了一种被称为<code>Idle Until Urgent</code>的模式。</p>\n<h3 id=\"InstantiationService-的那些方法\"><a href=\"#InstantiationService-的那些方法\" class=\"headerlink\" title=\"InstantiationService 的那些方法\"></a>InstantiationService 的那些方法</h3><p><code>InstatiationService</code> 这个类有很多方法，而且名字都很接近，这里列一个梗概，方便大家阅读源码：</p>\n<ul>\n<li>createChild 创建一个子 InstantiationService</li>\n<li>invokeFunction 执行一个函数，该函数可以通过 accessor 访问 InstantiationService 里存储的服务</li>\n<li>createInstance 创建一个服务</li>\n<li>_createInstance 实例化的最终方法，new 调用的位置</li>\n<li>_setServiceInstance 将一个创建好的 service set 到保存了对应的 identifier 的 InstantiationService 当中</li>\n<li>_getServiceInstaneOrDescriptor 根据 identifier 从某个 InstantiationService 中拿到服务实例或者 SyncDescriptor</li>\n<li>_getOrCreateServiceInstance 被 invokeFunction 所调用，会尝试调用 _getServiceInstanceOrDescriptor 拿到服务实例，如果拿到的是一个 SyncDescriptor，则走 _createAndCacheServiceInstance</li>\n<li>_createAndCacheServiceInstance 这里根据“要被创建的服务”的“未被实例化的依赖”来构建依赖树，然后依次构建这些未被实例化的依赖</li>\n<li>_createServiceInstanceWithOwner 寻找保存了对应的 identifier 的 InstantiationService ，调用它的 _createServiceInstance 方法进行实例化</li>\n<li>_createServiceInstance 这里处理延迟实例化逻辑，调用 _createInstance 的时候，所有依赖应该都已经被实例化，而不是 SyncDescriptor<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2>vscode 自己实现了一套依赖注入机制，并没有依赖 reflect-metadata<br>InstantiationService 是实现依赖注入的核心<br>用装饰器来声明依赖关系<br>允许可选依赖<br>允许延迟实例化<br>支持多层依赖注入</li>\n</ul>"},{"title":"一步一步打造 finui 脚手架工具","abbrlink":15520,"date":"2019-06-17T10:48:23.000Z","_content":"## 工程结构\n工程基于nodejs 8.4以及ES6进行开发，目录结构如下\n\n```\n/bin  # ------ 命令执行文件\n/lib  # ------ 工具模块\npackage.json\n```\n<!-- more -->\n\n## 使用commander.js开发命令行工具\nnodejs内置了对命令行操作的支持，node工程下`package.json`中的`bin`字段可以定义命令名和关联的执行文件。\n\n``` json\n{\n  \"name\": \"finui-cli\",\n  \"version\": \"1.0.0\",\n  \"description\": \"finui脚手架工具\",\n  \"bin\": {\n    \"bi\": \"./bin/command.js\"\n  },\n}\n```\n\n经过这样配置的nodejs项目，在使用`-g`选项进行全局安装的时候，会自动在系统的`[prefix]/bin`目录下创建相应的符号链接（symlink）关联到执行文件。如果是本地安装，这个符号链接会生成在`./node_modules/.bin`目录下。这样做的好处是可以直接在终端中像执行命令一样执行nodejs文件。关于`prefix`，可以通过`npm config get prefix`获取。\n\n### hello,commander.js\n在bin目录下创建一个`command.js`文件，用于处理命令行的逻辑。\n\n```\ntouch ./bin/command.js\n```\n[commander.js](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcommander.js)可以自动的解析命令和参数，合并多选项，处理短参，等等，功能强大，上手简单。具体的使用方法可以参见官方文档。\n在`command.js`编写命令行的入口逻辑\n\n``` js\nconst program = require('commander')  // npm i commander -D\n\nprogram.version('1.0.0')\n\t.usage('<command> [项目名称]')\n\t.command('hello', 'hello')\n\t.parse(process.argv)\n```\n然后继续在`bin`目录下新建文件`command-hello.js`，并写一个打印语句：\n\n```\nconsole.log('hello, commander')\n```\n这样，通过node命令测试一下\n\n```\nnode ./bin/command hello\n```\n不出意外，可以在终端上看到一句话：`hello, commander`。\n\n## 创建项目\n### 新建项目目录\n在正式下载项目模板之前，还需要判断当前目录是否有相同名称的项目，如果没有则开始创建项目。\n在`lib`目录下创建`createProject.js`\n\n```js\nconst path = require('path')\nconst fs = require('fs')\nconst glob = require('glob')\nmodule.exports = function (projectName){\n  return new Promise(function(resolve, reject){\n    const list = glob.sync('*')\n    let rootName = path.basename(process.cwd())\n    if (list.length){\n      if (list.filter(name => {\n        const fileName = path.resolve(process.cwd(), path.join('.', name))\n        const isDir = fs.statSync(fileName).isDirectory()\n        return name.indexOf(projectName) !== -1 && isDir\n      }).length !== 0) {\n        reject(`${projectName} directory is exist`)\n      }else{\n        resolve(Promise.resolve(projectName))\n      }\n    } else if (rootName === projectName){\n      inquirer.prompt([\n        {\n          name: 'buildInCurrent',\n          message: 'The current directory is empty and the directory name is the same as the project name. Do you want to create a new project directly in the current directory?',\n          type: 'confirm',\n          default: true\n        }\n      ]).then(answer => {\n        resolve(Promise.resolve(answer.buildInCurrent ? projectName : '.'))\n      })\n\n    }else {\n      resolve(Promise.resolve(projectName))\n    }\n  })\n}\n```\n\n### 使用download-git-repo下载项目模板\n在`lib`目录下创建`download.js`\n\n```js\n/**\n * A library of download-git-repo to download according the git address\n * Alan<alan@fanruan.com>\n */\nconst download = require('download-git-repo')\nconst ora = require('ora') // show download spinner\n\nmodule.exports = function (url, target) {\n  return new Promise(function(resolve, reject){\n    const spinner = ora(`it is downloading template, source address: https://github.com/${url}`)\n    spinner.start()\n    download('direct:https://github.com/' + url, target, { clone: true }, (err) => {\n      if (err) {\n        spinner.fail()\n        reject(err)\n      } else {\n        spinner.succeed()\n        resolve(target)\n      }\n    })\n  })\n}\n```\n`download-git-repo` 的作用就是从GitHub等托管代码的地方将模板代码下载下来。\n\n## 对模板进行自定义处理\n通常我们可能会希望项目模板中有些文件或者代码可以动态处理。比如：\n新项目的名称、版本号、描述等信息等，可以通过脚手架的交互进行输入，然后将输入插入到模板中\n对于这类情况，我们还需要借助其他工具包来完成。\n### 使用inquirer.js处理命令行交互\n对于命令行交互的功能，可以用[inquirer.js](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FSBoudrias%2FInquirer.js)来处理。用法其实很简单：\n\n```js\nconst inquirer = require('inquirer')  // npm i inquirer -D\n\ninquirer.prompt([\n  {\n    name: 'projectName',\n    message: '请输入项目名称'\n  }\n]).then(answers => {\n  console.log(`你输入的项目名称是：${answers.projectName}`)\n})\n```\n`prompt()`接受一个问题对象的数据，在用户与终端交互过程中，将用户的输入存放在一个答案对象中，然后返回一个Promise，通过`then()`获取到这个答案对象。so easy！\n\n在`lib`目录下创建`changeProject.js`, 通过命令行交互获取项目名称、版本号、描述等信息，并替换到`package.json`中。\n\n```js\nconst inquirer = require('inquirer')\nconst fs = require('fs')\nmodule.exports = async function (projectName){\n  const fileName = `./${projectName}/package.json`\n  const package = await fs.readFileSync(fileName)\n  const packageJson = JSON.parse(package.toString());\n  const answers = await getProjectMessage(projectName);\n  packageJson.name = answers.projectName\n  packageJson.version = answers.projectVersion\n  packageJson.description = answers.projectDescription\n  await fs.writeFileSync(fileName, JSON.stringify(packageJson, null, 4))\n}\n\nasync function getProjectMessage(projectName){\n  return inquirer.prompt([\n    {\n      name: 'projectName',\n      message: 'name',\n      default: projectName\n    },\n    {\n      name: 'projectVersion',\n      message: 'version',\n      default: '1.0.0'\n    },\n    {\n      name: 'projectDescription',\n      message: 'description',\n      default: `A project named ${projectName}`\n    }\n  ])\n}\n```\n就这样，一个基本的脚手架工具就已经完成了。\n## 上传到npm\nNPM是随同NodeJS一起安装的javascript包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\n\n1. 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n1. 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n1. 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n\n\n#### 1. 注册一个npm账号\n前往[NPM](https://www.npmjs.com/)官网进行注册\n\n#### 2. 登录npm\n使用终端命令行，如果是第一次发布包，执行以下命令，然后输入前面注册好的NPM账号，密码和邮箱，将提示创建成功。\n\n```\nnpm adduser\n```\n如果不是第一次发布包，执行以下命令进行登录，同样输入NPM账号，密码和邮箱\n\n```\nnpm login\n```\n**注意：npm adduser成功的时候默认你已经登陆了，所以不需要再进行npm login了**\n\n接着先进入项目文件夹下，然后输入以下命令进行发布\n\n```\nnpm publish\n```\n本教程已发布到[npm](https://www.npmjs.com/package/finui-cli)上，可以直接安装体验：\n\n```\nnpm i -g finui-cli\n```","source":"_posts/一步一步打造 finui 脚手架工具.md","raw":"---\ntitle: 一步一步打造 finui 脚手架工具\ntags: 前端\ncategories: 前端\nabbrlink: 15520\ndate: 2019-06-17 18:48:23\n---\n## 工程结构\n工程基于nodejs 8.4以及ES6进行开发，目录结构如下\n\n```\n/bin  # ------ 命令执行文件\n/lib  # ------ 工具模块\npackage.json\n```\n<!-- more -->\n\n## 使用commander.js开发命令行工具\nnodejs内置了对命令行操作的支持，node工程下`package.json`中的`bin`字段可以定义命令名和关联的执行文件。\n\n``` json\n{\n  \"name\": \"finui-cli\",\n  \"version\": \"1.0.0\",\n  \"description\": \"finui脚手架工具\",\n  \"bin\": {\n    \"bi\": \"./bin/command.js\"\n  },\n}\n```\n\n经过这样配置的nodejs项目，在使用`-g`选项进行全局安装的时候，会自动在系统的`[prefix]/bin`目录下创建相应的符号链接（symlink）关联到执行文件。如果是本地安装，这个符号链接会生成在`./node_modules/.bin`目录下。这样做的好处是可以直接在终端中像执行命令一样执行nodejs文件。关于`prefix`，可以通过`npm config get prefix`获取。\n\n### hello,commander.js\n在bin目录下创建一个`command.js`文件，用于处理命令行的逻辑。\n\n```\ntouch ./bin/command.js\n```\n[commander.js](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcommander.js)可以自动的解析命令和参数，合并多选项，处理短参，等等，功能强大，上手简单。具体的使用方法可以参见官方文档。\n在`command.js`编写命令行的入口逻辑\n\n``` js\nconst program = require('commander')  // npm i commander -D\n\nprogram.version('1.0.0')\n\t.usage('<command> [项目名称]')\n\t.command('hello', 'hello')\n\t.parse(process.argv)\n```\n然后继续在`bin`目录下新建文件`command-hello.js`，并写一个打印语句：\n\n```\nconsole.log('hello, commander')\n```\n这样，通过node命令测试一下\n\n```\nnode ./bin/command hello\n```\n不出意外，可以在终端上看到一句话：`hello, commander`。\n\n## 创建项目\n### 新建项目目录\n在正式下载项目模板之前，还需要判断当前目录是否有相同名称的项目，如果没有则开始创建项目。\n在`lib`目录下创建`createProject.js`\n\n```js\nconst path = require('path')\nconst fs = require('fs')\nconst glob = require('glob')\nmodule.exports = function (projectName){\n  return new Promise(function(resolve, reject){\n    const list = glob.sync('*')\n    let rootName = path.basename(process.cwd())\n    if (list.length){\n      if (list.filter(name => {\n        const fileName = path.resolve(process.cwd(), path.join('.', name))\n        const isDir = fs.statSync(fileName).isDirectory()\n        return name.indexOf(projectName) !== -1 && isDir\n      }).length !== 0) {\n        reject(`${projectName} directory is exist`)\n      }else{\n        resolve(Promise.resolve(projectName))\n      }\n    } else if (rootName === projectName){\n      inquirer.prompt([\n        {\n          name: 'buildInCurrent',\n          message: 'The current directory is empty and the directory name is the same as the project name. Do you want to create a new project directly in the current directory?',\n          type: 'confirm',\n          default: true\n        }\n      ]).then(answer => {\n        resolve(Promise.resolve(answer.buildInCurrent ? projectName : '.'))\n      })\n\n    }else {\n      resolve(Promise.resolve(projectName))\n    }\n  })\n}\n```\n\n### 使用download-git-repo下载项目模板\n在`lib`目录下创建`download.js`\n\n```js\n/**\n * A library of download-git-repo to download according the git address\n * Alan<alan@fanruan.com>\n */\nconst download = require('download-git-repo')\nconst ora = require('ora') // show download spinner\n\nmodule.exports = function (url, target) {\n  return new Promise(function(resolve, reject){\n    const spinner = ora(`it is downloading template, source address: https://github.com/${url}`)\n    spinner.start()\n    download('direct:https://github.com/' + url, target, { clone: true }, (err) => {\n      if (err) {\n        spinner.fail()\n        reject(err)\n      } else {\n        spinner.succeed()\n        resolve(target)\n      }\n    })\n  })\n}\n```\n`download-git-repo` 的作用就是从GitHub等托管代码的地方将模板代码下载下来。\n\n## 对模板进行自定义处理\n通常我们可能会希望项目模板中有些文件或者代码可以动态处理。比如：\n新项目的名称、版本号、描述等信息等，可以通过脚手架的交互进行输入，然后将输入插入到模板中\n对于这类情况，我们还需要借助其他工具包来完成。\n### 使用inquirer.js处理命令行交互\n对于命令行交互的功能，可以用[inquirer.js](https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FSBoudrias%2FInquirer.js)来处理。用法其实很简单：\n\n```js\nconst inquirer = require('inquirer')  // npm i inquirer -D\n\ninquirer.prompt([\n  {\n    name: 'projectName',\n    message: '请输入项目名称'\n  }\n]).then(answers => {\n  console.log(`你输入的项目名称是：${answers.projectName}`)\n})\n```\n`prompt()`接受一个问题对象的数据，在用户与终端交互过程中，将用户的输入存放在一个答案对象中，然后返回一个Promise，通过`then()`获取到这个答案对象。so easy！\n\n在`lib`目录下创建`changeProject.js`, 通过命令行交互获取项目名称、版本号、描述等信息，并替换到`package.json`中。\n\n```js\nconst inquirer = require('inquirer')\nconst fs = require('fs')\nmodule.exports = async function (projectName){\n  const fileName = `./${projectName}/package.json`\n  const package = await fs.readFileSync(fileName)\n  const packageJson = JSON.parse(package.toString());\n  const answers = await getProjectMessage(projectName);\n  packageJson.name = answers.projectName\n  packageJson.version = answers.projectVersion\n  packageJson.description = answers.projectDescription\n  await fs.writeFileSync(fileName, JSON.stringify(packageJson, null, 4))\n}\n\nasync function getProjectMessage(projectName){\n  return inquirer.prompt([\n    {\n      name: 'projectName',\n      message: 'name',\n      default: projectName\n    },\n    {\n      name: 'projectVersion',\n      message: 'version',\n      default: '1.0.0'\n    },\n    {\n      name: 'projectDescription',\n      message: 'description',\n      default: `A project named ${projectName}`\n    }\n  ])\n}\n```\n就这样，一个基本的脚手架工具就已经完成了。\n## 上传到npm\nNPM是随同NodeJS一起安装的javascript包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：\n\n1. 允许用户从NPM服务器下载别人编写的第三方包到本地使用。\n1. 允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。\n1. 允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。\n\n\n#### 1. 注册一个npm账号\n前往[NPM](https://www.npmjs.com/)官网进行注册\n\n#### 2. 登录npm\n使用终端命令行，如果是第一次发布包，执行以下命令，然后输入前面注册好的NPM账号，密码和邮箱，将提示创建成功。\n\n```\nnpm adduser\n```\n如果不是第一次发布包，执行以下命令进行登录，同样输入NPM账号，密码和邮箱\n\n```\nnpm login\n```\n**注意：npm adduser成功的时候默认你已经登陆了，所以不需要再进行npm login了**\n\n接着先进入项目文件夹下，然后输入以下命令进行发布\n\n```\nnpm publish\n```\n本教程已发布到[npm](https://www.npmjs.com/package/finui-cli)上，可以直接安装体验：\n\n```\nnpm i -g finui-cli\n```","slug":"一步一步打造 finui 脚手架工具","published":1,"updated":"2020-03-09T03:01:45.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nj002y1q2dglnwsol4","content":"<h2 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h2><p>工程基于nodejs 8.4以及ES6进行开发，目录结构如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin  # ------ 命令执行文件</span><br><span class=\"line\">/lib  # ------ 工具模块</span><br><span class=\"line\">package.json</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"使用commander-js开发命令行工具\"><a href=\"#使用commander-js开发命令行工具\" class=\"headerlink\" title=\"使用commander.js开发命令行工具\"></a>使用commander.js开发命令行工具</h2><p>nodejs内置了对命令行操作的支持，node工程下<code>package.json</code>中的<code>bin</code>字段可以定义命令名和关联的执行文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"finui-cli\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"finui脚手架工具\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"bin\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"bi\"</span>: <span class=\"string\">\"./bin/command.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过这样配置的nodejs项目，在使用<code>-g</code>选项进行全局安装的时候，会自动在系统的<code>[prefix]/bin</code>目录下创建相应的符号链接（symlink）关联到执行文件。如果是本地安装，这个符号链接会生成在<code>./node_modules/.bin</code>目录下。这样做的好处是可以直接在终端中像执行命令一样执行nodejs文件。关于<code>prefix</code>，可以通过<code>npm config get prefix</code>获取。</p>\n<h3 id=\"hello-commander-js\"><a href=\"#hello-commander-js\" class=\"headerlink\" title=\"hello,commander.js\"></a>hello,commander.js</h3><p>在bin目录下创建一个<code>command.js</code>文件，用于处理命令行的逻辑。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ./bin/command.js</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcommander.js\" target=\"_blank\" rel=\"noopener\">commander.js</a>可以自动的解析命令和参数，合并多选项，处理短参，等等，功能强大，上手简单。具体的使用方法可以参见官方文档。<br>在<code>command.js</code>编写命令行的入口逻辑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>)  <span class=\"comment\">// npm i commander -D</span></span><br><span class=\"line\"></span><br><span class=\"line\">program.version(<span class=\"string\">'1.0.0'</span>)</span><br><span class=\"line\">\t.usage(<span class=\"string\">'&lt;command&gt; [项目名称]'</span>)</span><br><span class=\"line\">\t.command(<span class=\"string\">'hello'</span>, <span class=\"string\">'hello'</span>)</span><br><span class=\"line\">\t.parse(process.argv)</span><br></pre></td></tr></table></figure>\n<p>然后继续在<code>bin</code>目录下新建文件<code>command-hello.js</code>，并写一个打印语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;hello, commander&apos;)</span><br></pre></td></tr></table></figure>\n<p>这样，通过node命令测试一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node ./bin/command hello</span><br></pre></td></tr></table></figure>\n<p>不出意外，可以在终端上看到一句话：<code>hello, commander</code>。</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><h3 id=\"新建项目目录\"><a href=\"#新建项目目录\" class=\"headerlink\" title=\"新建项目目录\"></a>新建项目目录</h3><p>在正式下载项目模板之前，还需要判断当前目录是否有相同名称的项目，如果没有则开始创建项目。<br>在<code>lib</code>目录下创建<code>createProject.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">projectName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = glob.sync(<span class=\"string\">'*'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rootName = path.basename(process.cwd())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.length)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (list.filter(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fileName = path.resolve(process.cwd(), path.join(<span class=\"string\">'.'</span>, name))</span><br><span class=\"line\">        <span class=\"keyword\">const</span> isDir = fs.statSync(fileName).isDirectory()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.indexOf(projectName) !== <span class=\"number\">-1</span> &amp;&amp; isDir</span><br><span class=\"line\">      &#125;).length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">`<span class=\"subst\">$&#123;projectName&#125;</span> directory is exist`</span>)</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        resolve(<span class=\"built_in\">Promise</span>.resolve(projectName))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rootName === projectName)&#123;</span><br><span class=\"line\">      inquirer.prompt([</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'buildInCurrent'</span>,</span><br><span class=\"line\">          message: <span class=\"string\">'The current directory is empty and the directory name is the same as the project name. Do you want to create a new project directly in the current directory?'</span>,</span><br><span class=\"line\">          type: <span class=\"string\">'confirm'</span>,</span><br><span class=\"line\">          <span class=\"keyword\">default</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]).then(<span class=\"function\"><span class=\"params\">answer</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"built_in\">Promise</span>.resolve(answer.buildInCurrent ? projectName : <span class=\"string\">'.'</span>))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"built_in\">Promise</span>.resolve(projectName))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用download-git-repo下载项目模板\"><a href=\"#使用download-git-repo下载项目模板\" class=\"headerlink\" title=\"使用download-git-repo下载项目模板\"></a>使用download-git-repo下载项目模板</h3><p>在<code>lib</code>目录下创建<code>download.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A library of download-git-repo to download according the git address</span></span><br><span class=\"line\"><span class=\"comment\"> * Alan&lt;alan<span class=\"doctag\">@fanruan</span>.com&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"built_in\">require</span>(<span class=\"string\">'download-git-repo'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">'ora'</span>) <span class=\"comment\">// show download spinner</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">`it is downloading template, source address: https://github.com/<span class=\"subst\">$&#123;url&#125;</span>`</span>)</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    download(<span class=\"string\">'direct:https://github.com/'</span> + url, target, &#123; <span class=\"attr\">clone</span>: <span class=\"literal\">true</span> &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        spinner.fail()</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        spinner.succeed()</span><br><span class=\"line\">        resolve(target)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>download-git-repo</code> 的作用就是从GitHub等托管代码的地方将模板代码下载下来。</p>\n<h2 id=\"对模板进行自定义处理\"><a href=\"#对模板进行自定义处理\" class=\"headerlink\" title=\"对模板进行自定义处理\"></a>对模板进行自定义处理</h2><p>通常我们可能会希望项目模板中有些文件或者代码可以动态处理。比如：<br>新项目的名称、版本号、描述等信息等，可以通过脚手架的交互进行输入，然后将输入插入到模板中<br>对于这类情况，我们还需要借助其他工具包来完成。</p>\n<h3 id=\"使用inquirer-js处理命令行交互\"><a href=\"#使用inquirer-js处理命令行交互\" class=\"headerlink\" title=\"使用inquirer.js处理命令行交互\"></a>使用inquirer.js处理命令行交互</h3><p>对于命令行交互的功能，可以用<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FSBoudrias%2FInquirer.js\" target=\"_blank\" rel=\"noopener\">inquirer.js</a>来处理。用法其实很简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">'inquirer'</span>)  <span class=\"comment\">// npm i inquirer -D</span></span><br><span class=\"line\"></span><br><span class=\"line\">inquirer.prompt([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'projectName'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'请输入项目名称'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`你输入的项目名称是：<span class=\"subst\">$&#123;answers.projectName&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>prompt()</code>接受一个问题对象的数据，在用户与终端交互过程中，将用户的输入存放在一个答案对象中，然后返回一个Promise，通过<code>then()</code>获取到这个答案对象。so easy！</p>\n<p>在<code>lib</code>目录下创建<code>changeProject.js</code>, 通过命令行交互获取项目名称、版本号、描述等信息，并替换到<code>package.json</code>中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">'inquirer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">projectName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fileName = <span class=\"string\">`./<span class=\"subst\">$&#123;projectName&#125;</span>/package.json`</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> package = <span class=\"keyword\">await</span> fs.readFileSync(fileName)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> packageJson = <span class=\"built_in\">JSON</span>.parse(package.toString());</span><br><span class=\"line\">  <span class=\"keyword\">const</span> answers = <span class=\"keyword\">await</span> getProjectMessage(projectName);</span><br><span class=\"line\">  packageJson.name = answers.projectName</span><br><span class=\"line\">  packageJson.version = answers.projectVersion</span><br><span class=\"line\">  packageJson.description = answers.projectDescription</span><br><span class=\"line\">  <span class=\"keyword\">await</span> fs.writeFileSync(fileName, <span class=\"built_in\">JSON</span>.stringify(packageJson, <span class=\"literal\">null</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProjectMessage</span>(<span class=\"params\">projectName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inquirer.prompt([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'projectName'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: projectName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'projectVersion'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'version'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'1.0.0'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'projectDescription'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'description'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">`A project named <span class=\"subst\">$&#123;projectName&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就这样，一个基本的脚手架工具就已经完成了。</p>\n<h2 id=\"上传到npm\"><a href=\"#上传到npm\" class=\"headerlink\" title=\"上传到npm\"></a>上传到npm</h2><p>NPM是随同NodeJS一起安装的javascript包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>\n<ol>\n<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>\n</ol>\n<h4 id=\"1-注册一个npm账号\"><a href=\"#1-注册一个npm账号\" class=\"headerlink\" title=\"1. 注册一个npm账号\"></a>1. 注册一个npm账号</h4><p>前往<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">NPM</a>官网进行注册</p>\n<h4 id=\"2-登录npm\"><a href=\"#2-登录npm\" class=\"headerlink\" title=\"2. 登录npm\"></a>2. 登录npm</h4><p>使用终端命令行，如果是第一次发布包，执行以下命令，然后输入前面注册好的NPM账号，密码和邮箱，将提示创建成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser</span><br></pre></td></tr></table></figure>\n<p>如果不是第一次发布包，执行以下命令进行登录，同样输入NPM账号，密码和邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n<p><strong>注意：npm adduser成功的时候默认你已经登陆了，所以不需要再进行npm login了</strong></p>\n<p>接着先进入项目文件夹下，然后输入以下命令进行发布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n<p>本教程已发布到<a href=\"https://www.npmjs.com/package/finui-cli\" target=\"_blank\" rel=\"noopener\">npm</a>上，可以直接安装体验：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g finui-cli</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"工程结构\"><a href=\"#工程结构\" class=\"headerlink\" title=\"工程结构\"></a>工程结构</h2><p>工程基于nodejs 8.4以及ES6进行开发，目录结构如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin  # ------ 命令执行文件</span><br><span class=\"line\">/lib  # ------ 工具模块</span><br><span class=\"line\">package.json</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"使用commander-js开发命令行工具\"><a href=\"#使用commander-js开发命令行工具\" class=\"headerlink\" title=\"使用commander.js开发命令行工具\"></a>使用commander.js开发命令行工具</h2><p>nodejs内置了对命令行操作的支持，node工程下<code>package.json</code>中的<code>bin</code>字段可以定义命令名和关联的执行文件。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"finui-cli\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"description\"</span>: <span class=\"string\">\"finui脚手架工具\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"bin\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"bi\"</span>: <span class=\"string\">\"./bin/command.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>经过这样配置的nodejs项目，在使用<code>-g</code>选项进行全局安装的时候，会自动在系统的<code>[prefix]/bin</code>目录下创建相应的符号链接（symlink）关联到执行文件。如果是本地安装，这个符号链接会生成在<code>./node_modules/.bin</code>目录下。这样做的好处是可以直接在终端中像执行命令一样执行nodejs文件。关于<code>prefix</code>，可以通过<code>npm config get prefix</code>获取。</p>\n<h3 id=\"hello-commander-js\"><a href=\"#hello-commander-js\" class=\"headerlink\" title=\"hello,commander.js\"></a>hello,commander.js</h3><p>在bin目录下创建一个<code>command.js</code>文件，用于处理命令行的逻辑。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch ./bin/command.js</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2Fcommander.js\" target=\"_blank\" rel=\"noopener\">commander.js</a>可以自动的解析命令和参数，合并多选项，处理短参，等等，功能强大，上手简单。具体的使用方法可以参见官方文档。<br>在<code>command.js</code>编写命令行的入口逻辑</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> program = <span class=\"built_in\">require</span>(<span class=\"string\">'commander'</span>)  <span class=\"comment\">// npm i commander -D</span></span><br><span class=\"line\"></span><br><span class=\"line\">program.version(<span class=\"string\">'1.0.0'</span>)</span><br><span class=\"line\">\t.usage(<span class=\"string\">'&lt;command&gt; [项目名称]'</span>)</span><br><span class=\"line\">\t.command(<span class=\"string\">'hello'</span>, <span class=\"string\">'hello'</span>)</span><br><span class=\"line\">\t.parse(process.argv)</span><br></pre></td></tr></table></figure>\n<p>然后继续在<code>bin</code>目录下新建文件<code>command-hello.js</code>，并写一个打印语句：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&apos;hello, commander&apos;)</span><br></pre></td></tr></table></figure>\n<p>这样，通过node命令测试一下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node ./bin/command hello</span><br></pre></td></tr></table></figure>\n<p>不出意外，可以在终端上看到一句话：<code>hello, commander</code>。</p>\n<h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><h3 id=\"新建项目目录\"><a href=\"#新建项目目录\" class=\"headerlink\" title=\"新建项目目录\"></a>新建项目目录</h3><p>在正式下载项目模板之前，还需要判断当前目录是否有相同名称的项目，如果没有则开始创建项目。<br>在<code>lib</code>目录下创建<code>createProject.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> glob = <span class=\"built_in\">require</span>(<span class=\"string\">'glob'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">projectName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> list = glob.sync(<span class=\"string\">'*'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">let</span> rootName = path.basename(process.cwd())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (list.length)&#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (list.filter(<span class=\"function\"><span class=\"params\">name</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> fileName = path.resolve(process.cwd(), path.join(<span class=\"string\">'.'</span>, name))</span><br><span class=\"line\">        <span class=\"keyword\">const</span> isDir = fs.statSync(fileName).isDirectory()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name.indexOf(projectName) !== <span class=\"number\">-1</span> &amp;&amp; isDir</span><br><span class=\"line\">      &#125;).length !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        reject(<span class=\"string\">`<span class=\"subst\">$&#123;projectName&#125;</span> directory is exist`</span>)</span><br><span class=\"line\">      &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        resolve(<span class=\"built_in\">Promise</span>.resolve(projectName))</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rootName === projectName)&#123;</span><br><span class=\"line\">      inquirer.prompt([</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          name: <span class=\"string\">'buildInCurrent'</span>,</span><br><span class=\"line\">          message: <span class=\"string\">'The current directory is empty and the directory name is the same as the project name. Do you want to create a new project directly in the current directory?'</span>,</span><br><span class=\"line\">          type: <span class=\"string\">'confirm'</span>,</span><br><span class=\"line\">          <span class=\"keyword\">default</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]).then(<span class=\"function\"><span class=\"params\">answer</span> =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"built_in\">Promise</span>.resolve(answer.buildInCurrent ? projectName : <span class=\"string\">'.'</span>))</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      resolve(<span class=\"built_in\">Promise</span>.resolve(projectName))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用download-git-repo下载项目模板\"><a href=\"#使用download-git-repo下载项目模板\" class=\"headerlink\" title=\"使用download-git-repo下载项目模板\"></a>使用download-git-repo下载项目模板</h3><p>在<code>lib</code>目录下创建<code>download.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * A library of download-git-repo to download according the git address</span></span><br><span class=\"line\"><span class=\"comment\"> * Alan&lt;alan<span class=\"doctag\">@fanruan</span>.com&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> download = <span class=\"built_in\">require</span>(<span class=\"string\">'download-git-repo'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> ora = <span class=\"built_in\">require</span>(<span class=\"string\">'ora'</span>) <span class=\"comment\">// show download spinner</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">url, target</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> spinner = ora(<span class=\"string\">`it is downloading template, source address: https://github.com/<span class=\"subst\">$&#123;url&#125;</span>`</span>)</span><br><span class=\"line\">    spinner.start()</span><br><span class=\"line\">    download(<span class=\"string\">'direct:https://github.com/'</span> + url, target, &#123; <span class=\"attr\">clone</span>: <span class=\"literal\">true</span> &#125;, (err) =&gt; &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">        spinner.fail()</span><br><span class=\"line\">        reject(err)</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        spinner.succeed()</span><br><span class=\"line\">        resolve(target)</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>download-git-repo</code> 的作用就是从GitHub等托管代码的地方将模板代码下载下来。</p>\n<h2 id=\"对模板进行自定义处理\"><a href=\"#对模板进行自定义处理\" class=\"headerlink\" title=\"对模板进行自定义处理\"></a>对模板进行自定义处理</h2><p>通常我们可能会希望项目模板中有些文件或者代码可以动态处理。比如：<br>新项目的名称、版本号、描述等信息等，可以通过脚手架的交互进行输入，然后将输入插入到模板中<br>对于这类情况，我们还需要借助其他工具包来完成。</p>\n<h3 id=\"使用inquirer-js处理命令行交互\"><a href=\"#使用inquirer-js处理命令行交互\" class=\"headerlink\" title=\"使用inquirer.js处理命令行交互\"></a>使用inquirer.js处理命令行交互</h3><p>对于命令行交互的功能，可以用<a href=\"https://link.juejin.im/?target=https%3A%2F%2Fgithub.com%2FSBoudrias%2FInquirer.js\" target=\"_blank\" rel=\"noopener\">inquirer.js</a>来处理。用法其实很简单：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">'inquirer'</span>)  <span class=\"comment\">// npm i inquirer -D</span></span><br><span class=\"line\"></span><br><span class=\"line\">inquirer.prompt([</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'projectName'</span>,</span><br><span class=\"line\">    message: <span class=\"string\">'请输入项目名称'</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]).then(<span class=\"function\"><span class=\"params\">answers</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`你输入的项目名称是：<span class=\"subst\">$&#123;answers.projectName&#125;</span>`</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><code>prompt()</code>接受一个问题对象的数据，在用户与终端交互过程中，将用户的输入存放在一个答案对象中，然后返回一个Promise，通过<code>then()</code>获取到这个答案对象。so easy！</p>\n<p>在<code>lib</code>目录下创建<code>changeProject.js</code>, 通过命令行交互获取项目名称、版本号、描述等信息，并替换到<code>package.json</code>中。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> inquirer = <span class=\"built_in\">require</span>(<span class=\"string\">'inquirer'</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>)</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">projectName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> fileName = <span class=\"string\">`./<span class=\"subst\">$&#123;projectName&#125;</span>/package.json`</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> package = <span class=\"keyword\">await</span> fs.readFileSync(fileName)</span><br><span class=\"line\">  <span class=\"keyword\">const</span> packageJson = <span class=\"built_in\">JSON</span>.parse(package.toString());</span><br><span class=\"line\">  <span class=\"keyword\">const</span> answers = <span class=\"keyword\">await</span> getProjectMessage(projectName);</span><br><span class=\"line\">  packageJson.name = answers.projectName</span><br><span class=\"line\">  packageJson.version = answers.projectVersion</span><br><span class=\"line\">  packageJson.description = answers.projectDescription</span><br><span class=\"line\">  <span class=\"keyword\">await</span> fs.writeFileSync(fileName, <span class=\"built_in\">JSON</span>.stringify(packageJson, <span class=\"literal\">null</span>, <span class=\"number\">4</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getProjectMessage</span>(<span class=\"params\">projectName</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> inquirer.prompt([</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'projectName'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'name'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: projectName</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'projectVersion'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'version'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">'1.0.0'</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      name: <span class=\"string\">'projectDescription'</span>,</span><br><span class=\"line\">      message: <span class=\"string\">'description'</span>,</span><br><span class=\"line\">      <span class=\"keyword\">default</span>: <span class=\"string\">`A project named <span class=\"subst\">$&#123;projectName&#125;</span>`</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>就这样，一个基本的脚手架工具就已经完成了。</p>\n<h2 id=\"上传到npm\"><a href=\"#上传到npm\" class=\"headerlink\" title=\"上传到npm\"></a>上传到npm</h2><p>NPM是随同NodeJS一起安装的javascript包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p>\n<ol>\n<li>允许用户从NPM服务器下载别人编写的第三方包到本地使用。</li>\n<li>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。</li>\n<li>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。</li>\n</ol>\n<h4 id=\"1-注册一个npm账号\"><a href=\"#1-注册一个npm账号\" class=\"headerlink\" title=\"1. 注册一个npm账号\"></a>1. 注册一个npm账号</h4><p>前往<a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener\">NPM</a>官网进行注册</p>\n<h4 id=\"2-登录npm\"><a href=\"#2-登录npm\" class=\"headerlink\" title=\"2. 登录npm\"></a>2. 登录npm</h4><p>使用终端命令行，如果是第一次发布包，执行以下命令，然后输入前面注册好的NPM账号，密码和邮箱，将提示创建成功。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm adduser</span><br></pre></td></tr></table></figure>\n<p>如果不是第一次发布包，执行以下命令进行登录，同样输入NPM账号，密码和邮箱</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm login</span><br></pre></td></tr></table></figure>\n<p><strong>注意：npm adduser成功的时候默认你已经登陆了，所以不需要再进行npm login了</strong></p>\n<p>接着先进入项目文件夹下，然后输入以下命令进行发布</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm publish</span><br></pre></td></tr></table></figure>\n<p>本教程已发布到<a href=\"https://www.npmjs.com/package/finui-cli\" target=\"_blank\" rel=\"noopener\">npm</a>上，可以直接安装体验：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i -g finui-cli</span><br></pre></td></tr></table></figure>"},{"title":"使用React一年以来给我带来的最大收获[英文翻译]","date":"2018-12-22T07:07:00.000Z","abbrlink":60376,"_content":"## 使用React一年以来给我带来的最大收获\n原文链接：[The most important lessons I’ve learned after a year of working with React](https://medium.freecodecamp.org/mindset-lessons-from-a-year-with-react-1de862421981)\n原文作者：[Tomas Eglinskas](https://medium.freecodecamp.org/@tomas.eglinskas?source=post_header_lockup)\n\n---\n![这并不是我写的, 但是我知道它肯定引起了你的注意 🔪](https://cdn-images-1.medium.com/max/1250/1*TheYckj9udF4qLjoJW8sjg.png)\n\n涉猎一项新技术是一件十分麻烦的事情，你会时常发现你陷入了教程和文章的海洋中，伴随着数以百万计的个人观点，而且每个人都自诩找到了\"**正确而又完美的道路**\"。这会让我们迷惑的担心我们所选择的教程是否会浪费时间。所以在\"陷入海洋\"之前，我们必须要了解技术的基本概念，然后我们需要去建立以技术为基础的思维方式。如果我们开始去学习`React`,我们首先要做的就是用`React`的思想去思考，只有这样我们以后才能将各种心态融为一体。\n在本文中，我将介绍给大家我从我个人使用`React`的经历中总经的经验教训，其中包括白天的工作、晚上的个人项目甚至还有在本地`js`活动中发表的演讲。\n所以，让我们开始吧。\n<!-- more -->\n### React正在迅速发展，所以你也要跟上时代的脚步\n如果你还记得`16.3.0`版本的最初公告，那你一定还记得当时人们是多么兴奋。\n下面是我们得到的一些变化和改进：\n* 官方的`context api`\n* `createRef Api`\n* `forwardRef Api`\n* 严格模式\n* 组件生命周期变化\n\n`React`小组和所有贡献者都在为了改进我们钟爱的技术而努力着，在`16.4.0`的版本中，我们获得了[Pointer Events](https://reactjs.org/blog/2018/05/23/react-v-16-4.html).异步渲染、缓存、版本`17.0.0`以及好多尚未知晓的内容接下来肯定也会有进一步的更新，只不过是时间的问题。所以如果你想技术领先，就必须第一时间了解社区中发生的事情。了解事物是如何运作的以及它们为何被开发出来。 了解正在解决的问题以及如何使开发更容易。 这些会对你帮助很大。\n\n### 不要害怕将你的代码分割成小的片段\n`React`是基于组件的，所以你需要利用这个概念而不是害怕把大的部分分割成小的部分。有时候一个简单的组件只有4-5行代码组成，并且在某种情况下，这完全没问题。这样做的好处就是如果有新人进来，不需要多久他就可以对整个系统了然于胸。\n``` javascript\n// 这是多么容易令人理解\nreturn (\n  [\n   <ChangeButton\n    onClick={this.changeUserApprovalStatus}\n    text=\"Let’s switch it!\"\n   />,\n   <UserInformation status={status}/> \n  ]\n);\n```\n你不必开发含有复杂逻辑的组件，他们可以只是视图组件，如果这样可以提高代码的可读性和可测试性，并且进一步减少代码异味，那么对团队的每个人来说这都是一场巨大的胜利。\n``` javascript\nimport ErrorMessage from './ErrorMessage';\nconst NotFound = () => (\n  <ErrorMessage\n    title=\"Oops! Page not found.\"\n    message=\"The page you are looking for does not exist!\"\n    className=\"test_404-page\"\n  />\n);\n```\n正如上面这个例子，属性是不变的，所以我们可以把这个只用来显示错误信息`Not Found`的页面做成一个纯组件，仅此而已。\n另外，如果您不喜欢在任何地方都使用CSS类作为类名，我建议使用样式化组件。 这可以提高可读性。\n```\nconst Number = styled.h1`\n  font-size: 36px;\n  line-height: 40px;\n  margin-right: 5px;\n  padding: 0px;\n`;\n//..\n<Container>\n  <Number>{skipRatePre}</Number>\n  <InfoName>Skip Rate</InfoName>\n</Container>\n```\n如果你是因为担心污染文件夹而害怕创建更多的组件，请重新考虑如何构建代码。 我一直在使用[分形结构](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af)，它很棒。\n\n### 不要因循守旧-要变得先进\n有时候你可能会认为你所了解的东西太欠缺还不足以让你去了解更高级的东西，但是通常你不应该担心太多，请接收挑战并证明之前自己是错的。通过掌握高级技巧并推动自己，你将会了解更多基础知识以及如果讲他们用于更大的事情。下面是你可以去探索的一些模式：\n* 复合组件\n* 高阶组件\n* `Render Props`\n* `Smart`和`Dumb1`组件\n* 还有许多其他的(尝试分析)\n弄懂了这些，你就会知道他们在何处使用以及使用他们的原因，你会对`React`用起来感觉更舒服。\n```\n// 像是魔法？\n// 如果你真的尝试了就会发现其实没有你想象中那么复杂\nrender() {\n  const children = React.Children.map(this.props.children,\n   (child, index) => {\n      return React.cloneElement(child, {\n        onSelect: () => this.props.onTabSelect(index)\n    });    \n });  \n return children;\n}\n```\n另外，不要害怕在工作中尝试新的事物，当然是在某些范围内，不要只是在个人项目中实验。人们会问问题，这是十分正常的事情，你的责任就是用强有力的争吵来捍卫你的工作和决定。你的目标应该是解决现有问题，进一步开发或者只是清理代码，你是你被拒绝了，相对于沉默而言你也会收获更多。\n\n### 不要让事情变得过度复杂\n这个听起来像和之前的观点矛盾了，但是并不是这样，在生活中，或者在任何地方，我们必须保持中庸，不要过度炫耀工作，我们必须务实，让代码变得更加容易理解才是我们的目的。如果你并不需要`Redux`，你使用它的原因只是因为每个人都在使用它而并不知道它的真正作用，请不要这样，请保持主见并且不要被别人影响到。有些时候你可能认为利用最新技术并编写复杂的代码这样你就可以对全世界说:\"看，我不是初级工程师，我正在成为高级工程师，看看我能做些什么！\"。实话实说，这是我刚开始编程时的心态，但是随着时间的推移你将会理解编写的代码相对于炫耀来说，真正起作用的才更容易被人接受。\n1. 同事可以处理你的项目，并且你不是唯一负责开发/修复/测试<等等>的人。\n2. 团队之间不需要长时间的会议就能理解别人做的事情，几分钟的讨论就够了。\n3. 当你的同事出去度假两周时，你来接手他的任务，而且你并不需要因此工作8个小时，因为一个小时就够了。\n人们会尊重那些让别人生活更轻松的人。 因此，如果你的目标是获得尊重，提升排名并进行改进，则需要为团队而不是自己编写代码。\n你将成为每个人最喜欢的团队成员。\n\n### 重构，重构然后重构---这是再正常不过的\n你会十几次得改变你的想法，尽管你的项目经理修改需求会更加频繁，其他人会批评你的工作，你也会批评你自己，结果是你需要一遍一遍得修改代码。但是不要担心，这是一个自然的学习过程，没有错误和异常，我们就无法提升。我们跌倒的次数越多，恢复起来就越容易。但是这里有一个提示，确保你测试的是当前的代码，烟雾，单位，整合，快照 - 不要对他们感到害怕。当测试可以解决很多宝贵时间时每个人都会遇到或者都将会遇到一个问题，如果你像其他人一样认为这会浪费很多时间，请试着思考一下：\n1. 不必和你的同事一起解释事情是如何运作的。\n2. 你不必和你的同事一起解释为什么事情会崩溃。\n3. 您不必为您的同事修复错误。\n4. 您将不必修复3周后发现的错误。\n5. 你将有时间做你想要的东西。\n这些都是有非常大的好处。\n\n### 如果你喜欢它，你将会茁壮成长\n在过去的一年里，我的目标是在React上做得更好。所以我想谈谈它。我希望别人和我一起享受。我可以不停地坐着整夜编码，看着各种各样的谈话，享受它的每一分钟。事实就是，如果你想要什么，不知为何，每个人都开始帮助你。上个月，我向一群200人发表了我的第一次React演讲。在这一年期间，我通过各种模式，范例和内部运作和`React`相处起来变得更强大，更舒服。我可以进行高级讨论并向其他人讲授我不敢触及的话题。而今天我仍然感受到一年前我所感受到的同样的兴奋和享受。所以我建议每个人都问自己：\"你喜欢你现在做的事情吗？\"如果没有，继续寻找你可以谈论几个小时的特殊事情，每晚了解，并为之开心。因为我们必须找到最接近我们心灵的东西。成功不可强求，但是可以实现。如果我可以回到一年前的时间，这些正是我要对即将踏上学习的旅程的我所说的话。\n谢谢你的阅读！\n如果你发现这篇文章很有帮助，👏👏👏.","source":"_posts/使用React一年以来给我带来的最大收获.md","raw":"---\ntitle: '使用React一年以来给我带来的最大收获[英文翻译]'\ntags: 英文翻译\ncategories: 英文翻译\ndate: '2018-12-22 15:07'\nabbrlink: 60376\n---\n## 使用React一年以来给我带来的最大收获\n原文链接：[The most important lessons I’ve learned after a year of working with React](https://medium.freecodecamp.org/mindset-lessons-from-a-year-with-react-1de862421981)\n原文作者：[Tomas Eglinskas](https://medium.freecodecamp.org/@tomas.eglinskas?source=post_header_lockup)\n\n---\n![这并不是我写的, 但是我知道它肯定引起了你的注意 🔪](https://cdn-images-1.medium.com/max/1250/1*TheYckj9udF4qLjoJW8sjg.png)\n\n涉猎一项新技术是一件十分麻烦的事情，你会时常发现你陷入了教程和文章的海洋中，伴随着数以百万计的个人观点，而且每个人都自诩找到了\"**正确而又完美的道路**\"。这会让我们迷惑的担心我们所选择的教程是否会浪费时间。所以在\"陷入海洋\"之前，我们必须要了解技术的基本概念，然后我们需要去建立以技术为基础的思维方式。如果我们开始去学习`React`,我们首先要做的就是用`React`的思想去思考，只有这样我们以后才能将各种心态融为一体。\n在本文中，我将介绍给大家我从我个人使用`React`的经历中总经的经验教训，其中包括白天的工作、晚上的个人项目甚至还有在本地`js`活动中发表的演讲。\n所以，让我们开始吧。\n<!-- more -->\n### React正在迅速发展，所以你也要跟上时代的脚步\n如果你还记得`16.3.0`版本的最初公告，那你一定还记得当时人们是多么兴奋。\n下面是我们得到的一些变化和改进：\n* 官方的`context api`\n* `createRef Api`\n* `forwardRef Api`\n* 严格模式\n* 组件生命周期变化\n\n`React`小组和所有贡献者都在为了改进我们钟爱的技术而努力着，在`16.4.0`的版本中，我们获得了[Pointer Events](https://reactjs.org/blog/2018/05/23/react-v-16-4.html).异步渲染、缓存、版本`17.0.0`以及好多尚未知晓的内容接下来肯定也会有进一步的更新，只不过是时间的问题。所以如果你想技术领先，就必须第一时间了解社区中发生的事情。了解事物是如何运作的以及它们为何被开发出来。 了解正在解决的问题以及如何使开发更容易。 这些会对你帮助很大。\n\n### 不要害怕将你的代码分割成小的片段\n`React`是基于组件的，所以你需要利用这个概念而不是害怕把大的部分分割成小的部分。有时候一个简单的组件只有4-5行代码组成，并且在某种情况下，这完全没问题。这样做的好处就是如果有新人进来，不需要多久他就可以对整个系统了然于胸。\n``` javascript\n// 这是多么容易令人理解\nreturn (\n  [\n   <ChangeButton\n    onClick={this.changeUserApprovalStatus}\n    text=\"Let’s switch it!\"\n   />,\n   <UserInformation status={status}/> \n  ]\n);\n```\n你不必开发含有复杂逻辑的组件，他们可以只是视图组件，如果这样可以提高代码的可读性和可测试性，并且进一步减少代码异味，那么对团队的每个人来说这都是一场巨大的胜利。\n``` javascript\nimport ErrorMessage from './ErrorMessage';\nconst NotFound = () => (\n  <ErrorMessage\n    title=\"Oops! Page not found.\"\n    message=\"The page you are looking for does not exist!\"\n    className=\"test_404-page\"\n  />\n);\n```\n正如上面这个例子，属性是不变的，所以我们可以把这个只用来显示错误信息`Not Found`的页面做成一个纯组件，仅此而已。\n另外，如果您不喜欢在任何地方都使用CSS类作为类名，我建议使用样式化组件。 这可以提高可读性。\n```\nconst Number = styled.h1`\n  font-size: 36px;\n  line-height: 40px;\n  margin-right: 5px;\n  padding: 0px;\n`;\n//..\n<Container>\n  <Number>{skipRatePre}</Number>\n  <InfoName>Skip Rate</InfoName>\n</Container>\n```\n如果你是因为担心污染文件夹而害怕创建更多的组件，请重新考虑如何构建代码。 我一直在使用[分形结构](https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af)，它很棒。\n\n### 不要因循守旧-要变得先进\n有时候你可能会认为你所了解的东西太欠缺还不足以让你去了解更高级的东西，但是通常你不应该担心太多，请接收挑战并证明之前自己是错的。通过掌握高级技巧并推动自己，你将会了解更多基础知识以及如果讲他们用于更大的事情。下面是你可以去探索的一些模式：\n* 复合组件\n* 高阶组件\n* `Render Props`\n* `Smart`和`Dumb1`组件\n* 还有许多其他的(尝试分析)\n弄懂了这些，你就会知道他们在何处使用以及使用他们的原因，你会对`React`用起来感觉更舒服。\n```\n// 像是魔法？\n// 如果你真的尝试了就会发现其实没有你想象中那么复杂\nrender() {\n  const children = React.Children.map(this.props.children,\n   (child, index) => {\n      return React.cloneElement(child, {\n        onSelect: () => this.props.onTabSelect(index)\n    });    \n });  \n return children;\n}\n```\n另外，不要害怕在工作中尝试新的事物，当然是在某些范围内，不要只是在个人项目中实验。人们会问问题，这是十分正常的事情，你的责任就是用强有力的争吵来捍卫你的工作和决定。你的目标应该是解决现有问题，进一步开发或者只是清理代码，你是你被拒绝了，相对于沉默而言你也会收获更多。\n\n### 不要让事情变得过度复杂\n这个听起来像和之前的观点矛盾了，但是并不是这样，在生活中，或者在任何地方，我们必须保持中庸，不要过度炫耀工作，我们必须务实，让代码变得更加容易理解才是我们的目的。如果你并不需要`Redux`，你使用它的原因只是因为每个人都在使用它而并不知道它的真正作用，请不要这样，请保持主见并且不要被别人影响到。有些时候你可能认为利用最新技术并编写复杂的代码这样你就可以对全世界说:\"看，我不是初级工程师，我正在成为高级工程师，看看我能做些什么！\"。实话实说，这是我刚开始编程时的心态，但是随着时间的推移你将会理解编写的代码相对于炫耀来说，真正起作用的才更容易被人接受。\n1. 同事可以处理你的项目，并且你不是唯一负责开发/修复/测试<等等>的人。\n2. 团队之间不需要长时间的会议就能理解别人做的事情，几分钟的讨论就够了。\n3. 当你的同事出去度假两周时，你来接手他的任务，而且你并不需要因此工作8个小时，因为一个小时就够了。\n人们会尊重那些让别人生活更轻松的人。 因此，如果你的目标是获得尊重，提升排名并进行改进，则需要为团队而不是自己编写代码。\n你将成为每个人最喜欢的团队成员。\n\n### 重构，重构然后重构---这是再正常不过的\n你会十几次得改变你的想法，尽管你的项目经理修改需求会更加频繁，其他人会批评你的工作，你也会批评你自己，结果是你需要一遍一遍得修改代码。但是不要担心，这是一个自然的学习过程，没有错误和异常，我们就无法提升。我们跌倒的次数越多，恢复起来就越容易。但是这里有一个提示，确保你测试的是当前的代码，烟雾，单位，整合，快照 - 不要对他们感到害怕。当测试可以解决很多宝贵时间时每个人都会遇到或者都将会遇到一个问题，如果你像其他人一样认为这会浪费很多时间，请试着思考一下：\n1. 不必和你的同事一起解释事情是如何运作的。\n2. 你不必和你的同事一起解释为什么事情会崩溃。\n3. 您不必为您的同事修复错误。\n4. 您将不必修复3周后发现的错误。\n5. 你将有时间做你想要的东西。\n这些都是有非常大的好处。\n\n### 如果你喜欢它，你将会茁壮成长\n在过去的一年里，我的目标是在React上做得更好。所以我想谈谈它。我希望别人和我一起享受。我可以不停地坐着整夜编码，看着各种各样的谈话，享受它的每一分钟。事实就是，如果你想要什么，不知为何，每个人都开始帮助你。上个月，我向一群200人发表了我的第一次React演讲。在这一年期间，我通过各种模式，范例和内部运作和`React`相处起来变得更强大，更舒服。我可以进行高级讨论并向其他人讲授我不敢触及的话题。而今天我仍然感受到一年前我所感受到的同样的兴奋和享受。所以我建议每个人都问自己：\"你喜欢你现在做的事情吗？\"如果没有，继续寻找你可以谈论几个小时的特殊事情，每晚了解，并为之开心。因为我们必须找到最接近我们心灵的东西。成功不可强求，但是可以实现。如果我可以回到一年前的时间，这些正是我要对即将踏上学习的旅程的我所说的话。\n谢谢你的阅读！\n如果你发现这篇文章很有帮助，👏👏👏.","slug":"使用React一年以来给我带来的最大收获","published":1,"updated":"2020-03-09T03:01:45.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nl00321q2dipomeue7","content":"<h2 id=\"使用React一年以来给我带来的最大收获\"><a href=\"#使用React一年以来给我带来的最大收获\" class=\"headerlink\" title=\"使用React一年以来给我带来的最大收获\"></a>使用React一年以来给我带来的最大收获</h2><p>原文链接：<a href=\"https://medium.freecodecamp.org/mindset-lessons-from-a-year-with-react-1de862421981\" target=\"_blank\" rel=\"noopener\">The most important lessons I’ve learned after a year of working with React</a><br>原文作者：<a href=\"https://medium.freecodecamp.org/@tomas.eglinskas?source=post_header_lockup\" target=\"_blank\" rel=\"noopener\">Tomas Eglinskas</a></p>\n<hr>\n<p><img src=\"https://cdn-images-1.medium.com/max/1250/1*TheYckj9udF4qLjoJW8sjg.png\" alt=\"这并不是我写的, 但是我知道它肯定引起了你的注意 🔪\"></p>\n<p>涉猎一项新技术是一件十分麻烦的事情，你会时常发现你陷入了教程和文章的海洋中，伴随着数以百万计的个人观点，而且每个人都自诩找到了”<strong>正确而又完美的道路</strong>“。这会让我们迷惑的担心我们所选择的教程是否会浪费时间。所以在”陷入海洋”之前，我们必须要了解技术的基本概念，然后我们需要去建立以技术为基础的思维方式。如果我们开始去学习<code>React</code>,我们首先要做的就是用<code>React</code>的思想去思考，只有这样我们以后才能将各种心态融为一体。<br>在本文中，我将介绍给大家我从我个人使用<code>React</code>的经历中总经的经验教训，其中包括白天的工作、晚上的个人项目甚至还有在本地<code>js</code>活动中发表的演讲。<br>所以，让我们开始吧。<br><a id=\"more\"></a></p>\n<h3 id=\"React正在迅速发展，所以你也要跟上时代的脚步\"><a href=\"#React正在迅速发展，所以你也要跟上时代的脚步\" class=\"headerlink\" title=\"React正在迅速发展，所以你也要跟上时代的脚步\"></a>React正在迅速发展，所以你也要跟上时代的脚步</h3><p>如果你还记得<code>16.3.0</code>版本的最初公告，那你一定还记得当时人们是多么兴奋。<br>下面是我们得到的一些变化和改进：</p>\n<ul>\n<li>官方的<code>context api</code></li>\n<li><code>createRef Api</code></li>\n<li><code>forwardRef Api</code></li>\n<li>严格模式</li>\n<li>组件生命周期变化</li>\n</ul>\n<p><code>React</code>小组和所有贡献者都在为了改进我们钟爱的技术而努力着，在<code>16.4.0</code>的版本中，我们获得了<a href=\"https://reactjs.org/blog/2018/05/23/react-v-16-4.html\" target=\"_blank\" rel=\"noopener\">Pointer Events</a>.异步渲染、缓存、版本<code>17.0.0</code>以及好多尚未知晓的内容接下来肯定也会有进一步的更新，只不过是时间的问题。所以如果你想技术领先，就必须第一时间了解社区中发生的事情。了解事物是如何运作的以及它们为何被开发出来。 了解正在解决的问题以及如何使开发更容易。 这些会对你帮助很大。</p>\n<h3 id=\"不要害怕将你的代码分割成小的片段\"><a href=\"#不要害怕将你的代码分割成小的片段\" class=\"headerlink\" title=\"不要害怕将你的代码分割成小的片段\"></a>不要害怕将你的代码分割成小的片段</h3><p><code>React</code>是基于组件的，所以你需要利用这个概念而不是害怕把大的部分分割成小的部分。有时候一个简单的组件只有4-5行代码组成，并且在某种情况下，这完全没问题。这样做的好处就是如果有新人进来，不需要多久他就可以对整个系统了然于胸。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是多么容易令人理解</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">  [</span><br><span class=\"line\">   &lt;ChangeButton</span><br><span class=\"line\">    onClick=&#123;<span class=\"keyword\">this</span>.changeUserApprovalStatus&#125;</span><br><span class=\"line\">    text=<span class=\"string\">\"Let’s switch it!\"</span></span><br><span class=\"line\">   /&gt;,</span><br><span class=\"line\">   &lt;UserInformation status=&#123;status&#125;/&gt; </span><br><span class=\"line\">  ]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>你不必开发含有复杂逻辑的组件，他们可以只是视图组件，如果这样可以提高代码的可读性和可测试性，并且进一步减少代码异味，那么对团队的每个人来说这都是一场巨大的胜利。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ErrorMessage <span class=\"keyword\">from</span> <span class=\"string\">'./ErrorMessage'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> NotFound = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;ErrorMessage</span><br><span class=\"line\">    title=<span class=\"string\">\"Oops! Page not found.\"</span></span><br><span class=\"line\">    message=<span class=\"string\">\"The page you are looking for does not exist!\"</span></span><br><span class=\"line\">    className=<span class=\"string\">\"test_404-page\"</span></span><br><span class=\"line\">  /&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>正如上面这个例子，属性是不变的，所以我们可以把这个只用来显示错误信息<code>Not Found</code>的页面做成一个纯组件，仅此而已。<br>另外，如果您不喜欢在任何地方都使用CSS类作为类名，我建议使用样式化组件。 这可以提高可读性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Number = styled.h1`</span><br><span class=\"line\">  font-size: 36px;</span><br><span class=\"line\">  line-height: 40px;</span><br><span class=\"line\">  margin-right: 5px;</span><br><span class=\"line\">  padding: 0px;</span><br><span class=\"line\">`;</span><br><span class=\"line\">//..</span><br><span class=\"line\">&lt;Container&gt;</span><br><span class=\"line\">  &lt;Number&gt;&#123;skipRatePre&#125;&lt;/Number&gt;</span><br><span class=\"line\">  &lt;InfoName&gt;Skip Rate&lt;/InfoName&gt;</span><br><span class=\"line\">&lt;/Container&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果你是因为担心污染文件夹而害怕创建更多的组件，请重新考虑如何构建代码。 我一直在使用<a href=\"https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af\" target=\"_blank\" rel=\"noopener\">分形结构</a>，它很棒。</p>\n<h3 id=\"不要因循守旧-要变得先进\"><a href=\"#不要因循守旧-要变得先进\" class=\"headerlink\" title=\"不要因循守旧-要变得先进\"></a>不要因循守旧-要变得先进</h3><p>有时候你可能会认为你所了解的东西太欠缺还不足以让你去了解更高级的东西，但是通常你不应该担心太多，请接收挑战并证明之前自己是错的。通过掌握高级技巧并推动自己，你将会了解更多基础知识以及如果讲他们用于更大的事情。下面是你可以去探索的一些模式：</p>\n<ul>\n<li>复合组件</li>\n<li>高阶组件</li>\n<li><code>Render Props</code></li>\n<li><code>Smart</code>和<code>Dumb1</code>组件</li>\n<li>还有许多其他的(尝试分析)<br>弄懂了这些，你就会知道他们在何处使用以及使用他们的原因，你会对<code>React</code>用起来感觉更舒服。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 像是魔法？</span><br><span class=\"line\">// 如果你真的尝试了就会发现其实没有你想象中那么复杂</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  const children = React.Children.map(this.props.children,</span><br><span class=\"line\">   (child, index) =&gt; &#123;</span><br><span class=\"line\">      return React.cloneElement(child, &#123;</span><br><span class=\"line\">        onSelect: () =&gt; this.props.onTabSelect(index)</span><br><span class=\"line\">    &#125;);    </span><br><span class=\"line\"> &#125;);  </span><br><span class=\"line\"> return children;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外，不要害怕在工作中尝试新的事物，当然是在某些范围内，不要只是在个人项目中实验。人们会问问题，这是十分正常的事情，你的责任就是用强有力的争吵来捍卫你的工作和决定。你的目标应该是解决现有问题，进一步开发或者只是清理代码，你是你被拒绝了，相对于沉默而言你也会收获更多。</p>\n<h3 id=\"不要让事情变得过度复杂\"><a href=\"#不要让事情变得过度复杂\" class=\"headerlink\" title=\"不要让事情变得过度复杂\"></a>不要让事情变得过度复杂</h3><p>这个听起来像和之前的观点矛盾了，但是并不是这样，在生活中，或者在任何地方，我们必须保持中庸，不要过度炫耀工作，我们必须务实，让代码变得更加容易理解才是我们的目的。如果你并不需要<code>Redux</code>，你使用它的原因只是因为每个人都在使用它而并不知道它的真正作用，请不要这样，请保持主见并且不要被别人影响到。有些时候你可能认为利用最新技术并编写复杂的代码这样你就可以对全世界说:”看，我不是初级工程师，我正在成为高级工程师，看看我能做些什么！”。实话实说，这是我刚开始编程时的心态，但是随着时间的推移你将会理解编写的代码相对于炫耀来说，真正起作用的才更容易被人接受。</p>\n<ol>\n<li>同事可以处理你的项目，并且你不是唯一负责开发/修复/测试&lt;等等&gt;的人。</li>\n<li>团队之间不需要长时间的会议就能理解别人做的事情，几分钟的讨论就够了。</li>\n<li>当你的同事出去度假两周时，你来接手他的任务，而且你并不需要因此工作8个小时，因为一个小时就够了。<br>人们会尊重那些让别人生活更轻松的人。 因此，如果你的目标是获得尊重，提升排名并进行改进，则需要为团队而不是自己编写代码。<br>你将成为每个人最喜欢的团队成员。</li>\n</ol>\n<h3 id=\"重构，重构然后重构—这是再正常不过的\"><a href=\"#重构，重构然后重构—这是再正常不过的\" class=\"headerlink\" title=\"重构，重构然后重构—这是再正常不过的\"></a>重构，重构然后重构—这是再正常不过的</h3><p>你会十几次得改变你的想法，尽管你的项目经理修改需求会更加频繁，其他人会批评你的工作，你也会批评你自己，结果是你需要一遍一遍得修改代码。但是不要担心，这是一个自然的学习过程，没有错误和异常，我们就无法提升。我们跌倒的次数越多，恢复起来就越容易。但是这里有一个提示，确保你测试的是当前的代码，烟雾，单位，整合，快照 - 不要对他们感到害怕。当测试可以解决很多宝贵时间时每个人都会遇到或者都将会遇到一个问题，如果你像其他人一样认为这会浪费很多时间，请试着思考一下：</p>\n<ol>\n<li>不必和你的同事一起解释事情是如何运作的。</li>\n<li>你不必和你的同事一起解释为什么事情会崩溃。</li>\n<li>您不必为您的同事修复错误。</li>\n<li>您将不必修复3周后发现的错误。</li>\n<li>你将有时间做你想要的东西。<br>这些都是有非常大的好处。</li>\n</ol>\n<h3 id=\"如果你喜欢它，你将会茁壮成长\"><a href=\"#如果你喜欢它，你将会茁壮成长\" class=\"headerlink\" title=\"如果你喜欢它，你将会茁壮成长\"></a>如果你喜欢它，你将会茁壮成长</h3><p>在过去的一年里，我的目标是在React上做得更好。所以我想谈谈它。我希望别人和我一起享受。我可以不停地坐着整夜编码，看着各种各样的谈话，享受它的每一分钟。事实就是，如果你想要什么，不知为何，每个人都开始帮助你。上个月，我向一群200人发表了我的第一次React演讲。在这一年期间，我通过各种模式，范例和内部运作和<code>React</code>相处起来变得更强大，更舒服。我可以进行高级讨论并向其他人讲授我不敢触及的话题。而今天我仍然感受到一年前我所感受到的同样的兴奋和享受。所以我建议每个人都问自己：”你喜欢你现在做的事情吗？”如果没有，继续寻找你可以谈论几个小时的特殊事情，每晚了解，并为之开心。因为我们必须找到最接近我们心灵的东西。成功不可强求，但是可以实现。如果我可以回到一年前的时间，这些正是我要对即将踏上学习的旅程的我所说的话。<br>谢谢你的阅读！<br>如果你发现这篇文章很有帮助，👏👏👏.</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用React一年以来给我带来的最大收获\"><a href=\"#使用React一年以来给我带来的最大收获\" class=\"headerlink\" title=\"使用React一年以来给我带来的最大收获\"></a>使用React一年以来给我带来的最大收获</h2><p>原文链接：<a href=\"https://medium.freecodecamp.org/mindset-lessons-from-a-year-with-react-1de862421981\" target=\"_blank\" rel=\"noopener\">The most important lessons I’ve learned after a year of working with React</a><br>原文作者：<a href=\"https://medium.freecodecamp.org/@tomas.eglinskas?source=post_header_lockup\" target=\"_blank\" rel=\"noopener\">Tomas Eglinskas</a></p>\n<hr>\n<p><img src=\"https://cdn-images-1.medium.com/max/1250/1*TheYckj9udF4qLjoJW8sjg.png\" alt=\"这并不是我写的, 但是我知道它肯定引起了你的注意 🔪\"></p>\n<p>涉猎一项新技术是一件十分麻烦的事情，你会时常发现你陷入了教程和文章的海洋中，伴随着数以百万计的个人观点，而且每个人都自诩找到了”<strong>正确而又完美的道路</strong>“。这会让我们迷惑的担心我们所选择的教程是否会浪费时间。所以在”陷入海洋”之前，我们必须要了解技术的基本概念，然后我们需要去建立以技术为基础的思维方式。如果我们开始去学习<code>React</code>,我们首先要做的就是用<code>React</code>的思想去思考，只有这样我们以后才能将各种心态融为一体。<br>在本文中，我将介绍给大家我从我个人使用<code>React</code>的经历中总经的经验教训，其中包括白天的工作、晚上的个人项目甚至还有在本地<code>js</code>活动中发表的演讲。<br>所以，让我们开始吧。<br>","more":"</p>\n<h3 id=\"React正在迅速发展，所以你也要跟上时代的脚步\"><a href=\"#React正在迅速发展，所以你也要跟上时代的脚步\" class=\"headerlink\" title=\"React正在迅速发展，所以你也要跟上时代的脚步\"></a>React正在迅速发展，所以你也要跟上时代的脚步</h3><p>如果你还记得<code>16.3.0</code>版本的最初公告，那你一定还记得当时人们是多么兴奋。<br>下面是我们得到的一些变化和改进：</p>\n<ul>\n<li>官方的<code>context api</code></li>\n<li><code>createRef Api</code></li>\n<li><code>forwardRef Api</code></li>\n<li>严格模式</li>\n<li>组件生命周期变化</li>\n</ul>\n<p><code>React</code>小组和所有贡献者都在为了改进我们钟爱的技术而努力着，在<code>16.4.0</code>的版本中，我们获得了<a href=\"https://reactjs.org/blog/2018/05/23/react-v-16-4.html\" target=\"_blank\" rel=\"noopener\">Pointer Events</a>.异步渲染、缓存、版本<code>17.0.0</code>以及好多尚未知晓的内容接下来肯定也会有进一步的更新，只不过是时间的问题。所以如果你想技术领先，就必须第一时间了解社区中发生的事情。了解事物是如何运作的以及它们为何被开发出来。 了解正在解决的问题以及如何使开发更容易。 这些会对你帮助很大。</p>\n<h3 id=\"不要害怕将你的代码分割成小的片段\"><a href=\"#不要害怕将你的代码分割成小的片段\" class=\"headerlink\" title=\"不要害怕将你的代码分割成小的片段\"></a>不要害怕将你的代码分割成小的片段</h3><p><code>React</code>是基于组件的，所以你需要利用这个概念而不是害怕把大的部分分割成小的部分。有时候一个简单的组件只有4-5行代码组成，并且在某种情况下，这完全没问题。这样做的好处就是如果有新人进来，不需要多久他就可以对整个系统了然于胸。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这是多么容易令人理解</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">  [</span><br><span class=\"line\">   &lt;ChangeButton</span><br><span class=\"line\">    onClick=&#123;<span class=\"keyword\">this</span>.changeUserApprovalStatus&#125;</span><br><span class=\"line\">    text=<span class=\"string\">\"Let’s switch it!\"</span></span><br><span class=\"line\">   /&gt;,</span><br><span class=\"line\">   &lt;UserInformation status=&#123;status&#125;/&gt; </span><br><span class=\"line\">  ]</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>你不必开发含有复杂逻辑的组件，他们可以只是视图组件，如果这样可以提高代码的可读性和可测试性，并且进一步减少代码异味，那么对团队的每个人来说这都是一场巨大的胜利。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ErrorMessage <span class=\"keyword\">from</span> <span class=\"string\">'./ErrorMessage'</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> NotFound = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">  &lt;ErrorMessage</span><br><span class=\"line\">    title=<span class=\"string\">\"Oops! Page not found.\"</span></span><br><span class=\"line\">    message=<span class=\"string\">\"The page you are looking for does not exist!\"</span></span><br><span class=\"line\">    className=<span class=\"string\">\"test_404-page\"</span></span><br><span class=\"line\">  /&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure></p>\n<p>正如上面这个例子，属性是不变的，所以我们可以把这个只用来显示错误信息<code>Not Found</code>的页面做成一个纯组件，仅此而已。<br>另外，如果您不喜欢在任何地方都使用CSS类作为类名，我建议使用样式化组件。 这可以提高可读性。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Number = styled.h1`</span><br><span class=\"line\">  font-size: 36px;</span><br><span class=\"line\">  line-height: 40px;</span><br><span class=\"line\">  margin-right: 5px;</span><br><span class=\"line\">  padding: 0px;</span><br><span class=\"line\">`;</span><br><span class=\"line\">//..</span><br><span class=\"line\">&lt;Container&gt;</span><br><span class=\"line\">  &lt;Number&gt;&#123;skipRatePre&#125;&lt;/Number&gt;</span><br><span class=\"line\">  &lt;InfoName&gt;Skip Rate&lt;/InfoName&gt;</span><br><span class=\"line\">&lt;/Container&gt;</span><br></pre></td></tr></table></figure></p>\n<p>如果你是因为担心污染文件夹而害怕创建更多的组件，请重新考虑如何构建代码。 我一直在使用<a href=\"https://hackernoon.com/fractal-a-react-app-structure-for-infinite-scale-4dab943092af\" target=\"_blank\" rel=\"noopener\">分形结构</a>，它很棒。</p>\n<h3 id=\"不要因循守旧-要变得先进\"><a href=\"#不要因循守旧-要变得先进\" class=\"headerlink\" title=\"不要因循守旧-要变得先进\"></a>不要因循守旧-要变得先进</h3><p>有时候你可能会认为你所了解的东西太欠缺还不足以让你去了解更高级的东西，但是通常你不应该担心太多，请接收挑战并证明之前自己是错的。通过掌握高级技巧并推动自己，你将会了解更多基础知识以及如果讲他们用于更大的事情。下面是你可以去探索的一些模式：</p>\n<ul>\n<li>复合组件</li>\n<li>高阶组件</li>\n<li><code>Render Props</code></li>\n<li><code>Smart</code>和<code>Dumb1</code>组件</li>\n<li>还有许多其他的(尝试分析)<br>弄懂了这些，你就会知道他们在何处使用以及使用他们的原因，你会对<code>React</code>用起来感觉更舒服。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 像是魔法？</span><br><span class=\"line\">// 如果你真的尝试了就会发现其实没有你想象中那么复杂</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  const children = React.Children.map(this.props.children,</span><br><span class=\"line\">   (child, index) =&gt; &#123;</span><br><span class=\"line\">      return React.cloneElement(child, &#123;</span><br><span class=\"line\">        onSelect: () =&gt; this.props.onTabSelect(index)</span><br><span class=\"line\">    &#125;);    </span><br><span class=\"line\"> &#125;);  </span><br><span class=\"line\"> return children;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>另外，不要害怕在工作中尝试新的事物，当然是在某些范围内，不要只是在个人项目中实验。人们会问问题，这是十分正常的事情，你的责任就是用强有力的争吵来捍卫你的工作和决定。你的目标应该是解决现有问题，进一步开发或者只是清理代码，你是你被拒绝了，相对于沉默而言你也会收获更多。</p>\n<h3 id=\"不要让事情变得过度复杂\"><a href=\"#不要让事情变得过度复杂\" class=\"headerlink\" title=\"不要让事情变得过度复杂\"></a>不要让事情变得过度复杂</h3><p>这个听起来像和之前的观点矛盾了，但是并不是这样，在生活中，或者在任何地方，我们必须保持中庸，不要过度炫耀工作，我们必须务实，让代码变得更加容易理解才是我们的目的。如果你并不需要<code>Redux</code>，你使用它的原因只是因为每个人都在使用它而并不知道它的真正作用，请不要这样，请保持主见并且不要被别人影响到。有些时候你可能认为利用最新技术并编写复杂的代码这样你就可以对全世界说:”看，我不是初级工程师，我正在成为高级工程师，看看我能做些什么！”。实话实说，这是我刚开始编程时的心态，但是随着时间的推移你将会理解编写的代码相对于炫耀来说，真正起作用的才更容易被人接受。</p>\n<ol>\n<li>同事可以处理你的项目，并且你不是唯一负责开发/修复/测试&lt;等等&gt;的人。</li>\n<li>团队之间不需要长时间的会议就能理解别人做的事情，几分钟的讨论就够了。</li>\n<li>当你的同事出去度假两周时，你来接手他的任务，而且你并不需要因此工作8个小时，因为一个小时就够了。<br>人们会尊重那些让别人生活更轻松的人。 因此，如果你的目标是获得尊重，提升排名并进行改进，则需要为团队而不是自己编写代码。<br>你将成为每个人最喜欢的团队成员。</li>\n</ol>\n<h3 id=\"重构，重构然后重构—这是再正常不过的\"><a href=\"#重构，重构然后重构—这是再正常不过的\" class=\"headerlink\" title=\"重构，重构然后重构—这是再正常不过的\"></a>重构，重构然后重构—这是再正常不过的</h3><p>你会十几次得改变你的想法，尽管你的项目经理修改需求会更加频繁，其他人会批评你的工作，你也会批评你自己，结果是你需要一遍一遍得修改代码。但是不要担心，这是一个自然的学习过程，没有错误和异常，我们就无法提升。我们跌倒的次数越多，恢复起来就越容易。但是这里有一个提示，确保你测试的是当前的代码，烟雾，单位，整合，快照 - 不要对他们感到害怕。当测试可以解决很多宝贵时间时每个人都会遇到或者都将会遇到一个问题，如果你像其他人一样认为这会浪费很多时间，请试着思考一下：</p>\n<ol>\n<li>不必和你的同事一起解释事情是如何运作的。</li>\n<li>你不必和你的同事一起解释为什么事情会崩溃。</li>\n<li>您不必为您的同事修复错误。</li>\n<li>您将不必修复3周后发现的错误。</li>\n<li>你将有时间做你想要的东西。<br>这些都是有非常大的好处。</li>\n</ol>\n<h3 id=\"如果你喜欢它，你将会茁壮成长\"><a href=\"#如果你喜欢它，你将会茁壮成长\" class=\"headerlink\" title=\"如果你喜欢它，你将会茁壮成长\"></a>如果你喜欢它，你将会茁壮成长</h3><p>在过去的一年里，我的目标是在React上做得更好。所以我想谈谈它。我希望别人和我一起享受。我可以不停地坐着整夜编码，看着各种各样的谈话，享受它的每一分钟。事实就是，如果你想要什么，不知为何，每个人都开始帮助你。上个月，我向一群200人发表了我的第一次React演讲。在这一年期间，我通过各种模式，范例和内部运作和<code>React</code>相处起来变得更强大，更舒服。我可以进行高级讨论并向其他人讲授我不敢触及的话题。而今天我仍然感受到一年前我所感受到的同样的兴奋和享受。所以我建议每个人都问自己：”你喜欢你现在做的事情吗？”如果没有，继续寻找你可以谈论几个小时的特殊事情，每晚了解，并为之开心。因为我们必须找到最接近我们心灵的东西。成功不可强求，但是可以实现。如果我可以回到一年前的时间，这些正是我要对即将踏上学习的旅程的我所说的话。<br>谢谢你的阅读！<br>如果你发现这篇文章很有帮助，👏👏👏.</p>"},{"title":"vscode插件机制","abbrlink":20807,"date":"2019-11-28T00:48:23.000Z","_content":"## 前言\n\nVisual Studio Code（VS Code）近年来获得了爆炸式增长，成为广大开发者工具库中的必备神器。它作为一个开源项目，也吸引了无数第三方开发者和终端用户，成为顶尖开源项目之一。它在功能上做到了够用，体验上做到了好用，更在拥有海量插件的情况下做到了简洁流畅，实属难能可贵。通过插件来扩展功能的做法已经是司空见惯了，**但如何保证插件和原生功能一样优秀呢？历史告诉我们：不能保证。**\n\n大家可以参考Eclipse，插件模型可以说是做得非常彻底了，功能层面也是无所不能，但存在几个烦人的问题：不稳定、难用、慢，所以不少用户转投IntelliJ的怀抱。可谓成也插件，败也插件。\n\n**问题的本质在于信息不对称，它导致不同团队写出来的代码，无论是思路还是质量，都不一致**。最终，用户得到了一个又乱又卡的产品。所以要让插件在稳定性、速度和体验的层面都做到和原生功能统一，只能是一个美好的愿望。\n\n来看看其他IDE是怎么做的，**Visual Studio自己搞定所有功能，并且做到优秀，让别人无事可做**，这也成就了其“宇宙第一IDE”的美名；IntelliJ与之相仿，开箱即用，插件可有可无。这么看起来，自己搞定所有的事情是个好办法，但大家是否知道，Visual Studio背后有上千人的工程团队，显然，这不是VS Code这二十几号人能搞定的。他们选择了让大家来做插件，那怎么解决Eclipse所遇到的问题呢？\n\n这里分享一个小知识——Eclipse核心部分的开发者就是早期的VS Code团队。嗯，所以他们没有两次踏入同一条河流。**与Eclipse不同，VS Code选择了把插件关进盒子里**。这样做首先解决的问题就是**稳定性**，这个问题对于VS Code来说尤为重要。都知道VS Code基于Electron，实质上是个Node.js环境，单线程，任何代码崩了都是灾难性后果。所以VS Code干脆不信任任何人，把插件们放到单独的进程里，任你折腾，主程序妥妥的。\n<!-- more -->\n## 进程模型\n\nVSCode中包含主进程，渲染进程，同时因为VSCode提供了插件的扩展能力，又出于安全稳定性的考虑，图中又多了一个Extension Host，其实这个Extension Host也是一个独立的进程，用于运行我们的插件代码。并且同渲染进程一样，彼此都是独立互不影响的。Extension Host Process暴露了一些VSCode的API供插件开发者去使用。\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1574653513904)\n\n\n\n至此，我们了解到VS Code里至少有3个进程：\n\n- Electron Main Process：App主进程\n- Electron Renderer Process：UI进程\n- Extension Host Process：插件宿主进程，给插件提供执行环境\n\n其中Extension Host Process（每个VS Code窗体）只存在一个，所有插件都在该进程执行，*而不是每个插件一个独立进程*\n\n注意，插件宿主进程是个*普通的Node进程*（`childProcess.fork()`出来的），并不是Electron进程，而且*被限制了不能使用electron。*\n\n### 进程间通信方式\n\nExtension Host与Main之间的通信是通过`fork()`内置的IPC来完成的，具体如下：\n\n```javascript\n// Support logging from extension host\nthis._extensionHostProcess.on('message', msg => {\n if (msg && (<IRemoteConsoleLog>msg).type === '__$console') {\n   this._logExtensionHostMessage(<IRemoteConsoleLog>msg);\n }\n});\n```\n\n这里只是单向通信（`插件 -> Main`），实际上可以通过`this._extensionHostProcess.send({msg})`完成另一半（`Main -> 插件`）。\n\nP.S.关于进程间通信的更多信息，请查看Nodejs进程间通信。\n\n## 扩展能力\n\nVS Code插件**不适合做UI定制**，vscode为插件提供了丰富的扩展能力，但*不允许插件直接访问底层UI DOM*（也就是说插件难以改变IDE外观，UI定制受限），UI DOM这一层可能会随着优化频繁变动，VS Code不希望这些优化项受限于插件依赖，所以干脆把UI定制能力限制起来，除UI定制之外的，IDE相关的功能型特性都是支持扩展的，如基础的语法高亮/API提示、引用跳转（转到定义）/文件搜索、主题定制，高级的debug协议等等。\n\nP.S.实际上，非要扩展UI，也是有办法的（逃出插件运行环境，但要费不少力气），具体见[access electron API from vscode extension](https://github.com/Microsoft/vscode/issues/3011)。\n\n## 运行环境\n\n为了性能与兼容性，*插件在独立的进程（称为extension host process）中运行*，并且不允许直接访问DOM，所以提供了一套内置的UI组件，比如智能提示（IntelliSense）\n\n所以插件崩溃或无响应不影响IDE正常运行，例如：\n\n```javascript\nexport function activate(context: vscode.ExtensionContext) {\n  // hang up\n  while (true);\n}\n```\n\n一个插件的死循环并不影响IDE的正常使用和其它插件的加载/激活，但在进程列表能够看到Code Helper的CPU占用接近100%，*进程级沙箱*保证了插件机制的稳定性。\n\n## 核心理念\n\n### 稳定性：插件隔离\n\n插件可能会影响启动性能和IDE自身的稳定性，所以通过进程隔离来解决这个问题，插件运行在独立的进程中，不影响IDE及其启动时间。这样做是从用户角度考虑的，希望*用户对IDE拥有完全的控制力*，无论插件在做什么，都不影响IDE基本功能的正常使用。\n\nP.S.extension host process是个特殊的Node进程，能够访问VS Code扩展API，VS Code也对这种进程提供了debug支持。\n\n### 性能：插件激活\n\n**插件都是懒加载的**（as late as possible），只在特定场景才加载/激活，所有在此之前也不耗费内存等资源。实现上是插件注册特定激活事件（activation events），由IDE来触发执行，比如markdown插件只在用户代开md文件时才需要激活。\n\n#### 激活事件(Activation Events)\n\nvscode插件拥有6种激活方式：\n\n* onLanguage:${language} 打开特定语言的文档\n* onCommand:${command} 通过Command Palette执行特定命令\n* onDebug 进入调试模式\n* workspaceContains:${toplevelfilename} 打开的文件夹里含有特定文件\n* onView:${viewId} 展开指定view\n* \\* 打开IDE就激活\n\n除`\"activationEvents\": [\"*\"]`外都是条件激活，只在特定场景或满足特定条件时才加载/激活插件。\n\n##### activationEvents.onLanguage\n\n- 当某种语言的文件被打开时，该扩展就会被激活。\n- 该扩展使用语言标记符（a language identifier value）。\n- 可以在`activationEvents`数组中声明多种语言。\n\n```\n\"activationEvents\": [\n    \"onLanguage:json\",\n    \"onLanguage:markdown\",\n    \"onLanguage:typescript\"\n]\n```\n\n##### activationEvents.onCommand\n\n调用命令就会激活该扩展。\n\n```\n\"activationEvents\": [\n    \"onCommand:extension.sayHello\"\n]\n```\n\n##### activationEvents.onDebug\n\n启动调试之前会激活该事件。\n\n还有两个更细粒度的激活事件：\n- onDebugInitialConfigurations:在调用DebugConfigurationProvider的provideDebugConfigurations方法之前会被调用。\n- onDebugResolve:type:在调用DebugConfigurationProvider的resolveDebugConfiguration方法之前会被调用。\n\n经验法则：如果该调试扩展是轻量级的，就使用onDebug。 如果是重量级的，就使用onDebugInitialConfigurations或者onDebugResolve，使用哪一个取决于DebugConfigurationProvider是否实现了provideDebugConfigurations或者resolveDebugConfiguration方法。\n\n##### activationEvents.workspaceContains\n\n每当打开文件夹，并且该文件夹至少匹配一个与glob pattern有关的文件。\n\n```\n\"activationEvents\": [\n    \"workspaceContains:**/.editorconfig\"\n]\n```\n\n##### activationEvents.onFileSystem\n\n读取到特定格式(specific scheme)的文件或者文件夹，就会激活该扩展，特定格式通常是指文件格式(file-scheme)。\n\n```\n\"activationEvents\": [\n    \"onFileSystem:sftp\"\n]\n```\n\n##### activationEvents.onView\n\n打开指定ID的视图，该扩展就会被激活。\n\n```\n\"activationEvents\": [\n    \"onView:nodeDependencies\"\n]\n```\n\n##### activationEvents.*\n\n- 只要vscode启动，该扩展就会被激活。\n- 为了更好地用户体验，仅当使用其他激活方式组合无法实现功能时使用该激活事件。\n- 扩展可以监听多个激活事件，这比使用`*`要好。\n\n#### 插件清单文件(Extension Manifest File)\n\n清单文件用来描述插件的meta信息，直接把`package.json`作为清单文件，并增加了一些特有字段，比如触发插件加载的激活事件（`activation events`）、插件想要增强的扩展点（`contribution points`）。\n\nIDE在启动过程中扫一遍插件清单文件，UI相关的就扩展UI，UI无关的就把扩展点与插件功能关联起来。\n\n另外，由于插件的执行环境是Node进程，所以npm package都是可用的，依赖模块同样声明在`package.json`里。*注意*，用户安装插件时*不会*自动`npm install`，所以需要在发布插件前把依赖模块打包进去，具体见[Installation and Packaging](https://code.visualstudio.com/docs/extensionAPI/patterns-and-principles#_installation-and-packaging)。\n\n| 名称                  | 必须 | 类型                                 | 描述                                                         |\n| --------------------- | ---- | ------------------------------------ | ------------------------------------------------------------ |\n| name                  | Y    | string                               | 扩展的名称，全小写，没有空格                                 |\n| version               | Y    | string                               | 兼容版本                                                     |\n| publisher             | Y    | string                               | 发布名称                                                     |\n| engines               | Y    | object                               | 扩展能够兼容的最小的VS Code代码版本，不能为`*`。例如^0.10.5表示扩展能够运行的最小的VS Code版本为0.10.5 |\n| license               | N    | string                               | 许可                                                         |\n| displayName           | N    | string                               | 市场中显示的扩展的名称                                       |\n| description           | N    | string                               | 简短描述您的扩展是什么和做了什么                             |\n| categories            | N    | string[]                             | 扩展所属的类别: [Programming Languages, Snippets, Linters, Themes, Debuggers, Formatters, Keymaps, SCM Providers, Other, Extension Packs, Language Packs] |\n| keywords              | N    | array                                | 关键词，使扩展更容易被发现                                   |\n| main                  | N    | string                               | 扩展入口                                                     |\n| contributes           | N    | object                               | 扩展描述对象                                                 |\n| activationEvents      | N    | array                                | 激活事件数组                                                 |\n| badges                | N    | array                                | 显示在市场侧栏的徽标，分别表示url、href、description         |\n| markdown              | N    | string                               | 控制扩展市场上使用的markdown渲染引擎，要么是`github`(default)要么是`standard` |\n| qna                   | N    | marketplace (default), string, false | 控制市场上`Q & A`链接                                        |\n| dependencies          | N    | object                               | 运行时需要的NodeJS依赖。                                     |\n| devDependencies       | N    | object                               | 开发时需要的NodeJS依赖。                                     |\n| extensionDependencies | N    | array                                | 此扩展所依赖的扩展的id集合。当该扩展被安装时，所依赖的扩展会一并被安装。扩展的id总是`${publisher}.${name}` |\n| scripts               | N    | object                               | 与npm的脚本完全相同，但是带有额外的VS代码特定字段。          |\n| icon                  | N    | string                               | 至少128x128像素的图标路径(视网膜屏幕256 x256)                |\n\n#### 扩展点（Contribution Points）\n\n即支持的扩展类型，都声明在`package.json/contributes`下，包括：\n\n```\nconfiguration 插件配置项，用户可以通过Settings设置\nconfigurationDefaults 插件配置项默认值\ncommands  添加命令，用户可以通过Command Palette输入特定命令激活插件功能\nmenus     添加与命令关联的菜单项，用户点击菜单项时执行对应命令\nkeybindings 添加与命令关联的快捷键，用户按下特定快捷键时执行对应命令\nlanguages 与文件类型建立关联或扩展新语言，用户打开（满足某些要求的）特定文件类型时执行对应命令\ndebuggers 添加debugger，通过VS Code debug协议与IDE通信\nbreakpoints 配合debuggers，声明对debugger支持的（编程）语言类型\ngrammars 新增TextMate语法描述，语法高亮\nthemes 添加定制主题\nsnippets 添加代码片段\njsonValidation 添加json格式校验\nviews 新增左侧文件查看器视图和调试视图分栏\nproblemMatchers 添加错误匹配，从lint结果解析出error，warning等\nproblemPatterns 配合problemMatchers，定义匹配模式\n```\n\n`menus`是*唯一的UI扩展官方途径*，支持扩展的菜单具体如下：\n\n```\nCommand Palette搜索框下方菜单 commandPalette\n文件查看器右键菜单 explorer/context\n编辑器\n  右键菜单 editor/context\n  标题栏菜单 editor/title\n  标题栏右键菜单 editor/title/context\n调试视图\n  调用栈右键菜单 debug/callstack/context\nSCM（源码管理）视图\n  标题栏菜单 scm/title\n  文件分组菜单 scm/resourceGroup/context\n  文件状态菜单 scm/resource/context\n  文件变动菜单 scm/change/title\n左侧视图\n  文件查看器分栏 view/title\n  调试视图分栏 view/item/context\n```\n\n#### 扩展API\n\n##### 设计原则\n\n- 基于Promise：异步操作都用Promise来描述\n- 取消token：传入`CancellationToken`作为额外参数来检查取消状态，以及接收取消通知\n- 可释放式资源管理：持有的资源都需要手动释放，例如事件监听，命令，UI交互等\n- 事件API：调用订阅方法（`on[Will|Did]VerbNoun`）传入listener（接收`event`参数）返回Disposable\n- 严格空检查：通过TypeScript严格区分`undefined`和`null`\n\n##### api概览\n\nAPI按命名空间组织，全局命名空间如下：\n\n```\ncommands 执行/注册命令，IDE自身的和其它插件注册的命令都可以，如executeCommand\ndebug 调试相关API，比如startDebugging\nenv IDE相关的环境信息，比如machineId, sessionId\nextensions 跨插件API调用，extensionDependency声明插件依赖\nlanguages 编程语言相关API，如createDiagnosticCollection, registerDocumentFormattingEditProvider\nscm 源码版本控制API，如createSourceControl\nwindow 编辑器窗体相关API，如onDidChangeTextEditorSelection, createTerminal, showTextDocument\nworkspace 工作空间级API（打开了文件夹才有工作空间），如findFiles, openTextDocument, saveAll\n```\n\n比如可以通过`workspace.findFiles + languages.registerDefinitionProvider`实现Haste的*全局模块引用跳转支持*\n\n另外，一些API以命令形式提供（即上面提到的“IDE自身的”命令），例如`vscode.previewHtml`、`vscode.openFolder`、`editorScroll`等等。\n\n## 注入机制\n\n在使用vscode提供的api时，需要引入`vscode`模块访问插件可用的API：\n\n```\nimport * as vscode from 'vscode'\n```\n\n但是我们发现在`node_modules`下并没有`vscode`模块，而且`vscode`模块也名没被`define()`过，看起来我们`require`了一个不存在的模块，那么，这个东西是哪里来的？\n\n对`require('vscode')`的过程进行debug，很容易发现做过手脚的地方：\n\n```\n// ref: src/vs/workbench/api/node/extHost.api.impl.ts\nfunction defineAPI(factory: IExtensionApiFactory, extensionPaths: TernarySearchTree<IExtensionDescription>): void { // each extension is meant to get its own api implementation\n const extApiImpl = new Map<string, typeof vscode>();\n let defaultApiImpl: typeof vscode; const node_module = <any>require.__$__nodeRequire('module');\n const original = node_module._load;\n node_module._load = function load(request, parent, isMain) {\n   if (request !== 'vscode') {\n     return original.apply(this, arguments);\n   }   // get extension id from filename and api for extension\n   const ext = extensionPaths.findSubstr(parent.filename);\n   if (ext) {\n     let apiImpl = extApiImpl.get(ext.id);\n     if (!apiImpl) {\n       apiImpl = factory(ext);\n       extApiImpl.set(ext.id, apiImpl);\n     }\n     return apiImpl;\n   }   // fall back to a default implementation\n   if (!defaultApiImpl) {\n     defaultApiImpl = factory(nullExtensionDescription);\n   }\n   return defaultApiImpl;\n };\n}\n```\n\n`Module._load()`方法被劫持了，遇到`vscode`返回一个虚拟模块，叫做`apiImpl`。*注意*，每个插件拿到的API都是独立的（可能是出于插件安全隔离考虑，避免劫持API影响其它插件）。\n\n## 插件运行\n\n以vscode.window.setStatusBarMessage('Hello World')为例：\n\n前文我们提到所有的 API 被定义在 extHost.api.impl.ts 文件的 createApiFactory 里，例如 vscode.window.setStatusBarMessage 的实现：\n\n```tsx\nconst window: typeof vscode.window = {\n  /* 省略部分代码 */\n  setStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable<any>): vscode.Disposable \t\t{\n\t\t\treturn extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);\n   },\n  /* 省略部分代码 */\n}\n```\n\n实际调用的是 extHostStatusBar.setStatusBarMessage 函数，而 extHostStatusBar 则是 ExtHostStatusBar 的实例:\n\n```tsx\nconst extHostStatusBar = new ExtHostStatusBar(rpcProtocol);\n```\n\nExtHostStatusBar 包含了两个方法 createStatusBarEntry 和 setStatusBarMessage，createStatusBarEntry 返回了一个 ExtHostStatusBarEntry ，它被包装了一层代理，在 ExtHostStatusBar 被实例化化的同时也会产生一个 ExtHostStatusBarEntry 实例\n\n```tsx\nexport class ExtHostStatusBar {\n\n  private _proxy: MainThreadStatusBarShape;\n  private _statusMessage: StatusBarMessage;\n\n  constructor(mainContext: IMainContext) {\n    // 获取代理\n    this._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);\n    // 传入 this, StatusBarMessage 中也随即实例化了一个 ExtHostStatusBarEntry\n    this._statusMessage = new StatusBarMessage(this);\n  }\n  /* 省略部分代码 */\n}\n\nclass StatusBarMessage {\n\n  private _item: StatusBarItem;\n  private _messages: { message: string }[] = [];\n\n  constructor(statusBar: ExtHostStatusBar) {\n    // 调用 createStatusBarEntry \n    this._item = statusBar.createStatusBarEntry(void 0, ExtHostStatusBarAlignment.Left, Number.MIN_VALUE);\n  }\n  /* 省略部分代码 */\n}\n```\n\n\n\n而在setStatusBarMessage方法中，主要是调用的this._statusMessage.setMessage(text);\n\n```tsx\nsetStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable<any>): Disposable {\n\n\t\tconst d = this._statusMessage.setMessage(text);// 这一句\n\t\tlet handle: any;\n\n\t\tif (typeof timeoutOrThenable === 'number') {\n\t\t\thandle = setTimeout(() => d.dispose(), timeoutOrThenable);\n\t\t} else if (typeof timeoutOrThenable !== 'undefined') {\n\t\t\ttimeoutOrThenable.then(() => d.dispose(), () => d.dispose());\n\t\t}\n\n\t\treturn new Disposable(() => {\n\t\t\td.dispose();\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n```\n\n而 this._statusMessage.setMessage 方法经过层层调用，最终调用了 ExtHostStatusBarEntry 实例的 update 方法，也就是前面的 StatusBarMessage 构造函数中的 this._item.update，而这里就到了重头戏，update 方法中包含了一个 延时为 0 的 setTimeout ：\n\n```tsx\nprivate update(): void {\n\t\tif (this._disposed || !this._visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(this._timeoutHandle);\n\n\t\t// Defer the update so that multiple changes to setters dont cause a redraw each\n\t\tthis._timeoutHandle = setTimeout(() => {\n\t\t\tthis._timeoutHandle = undefined;\n\n\t\t\t// Set to status bar\n\t\t\tthis._proxy.$setEntry(this.id, this._statusId, this._statusName, this.text, this.tooltip, this.command, this.color,\n\t\t\t\tthis._alignment === ExtHostStatusBarAlignment.Left ? MainThreadStatusBarAlignment.LEFT : MainThreadStatusBarAlignment.RIGHT,\n\t\t\t\tthis._priority);\n\t\t}, 0);\n}\n```\n\n这里的_proxy是通过依赖注入引入的mainThreadStatusBat, 具体则来自：\n\n```tsx\nconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);\n\t\tthis._statusMessage = new StatusBarMessage(this);\n}\n```\n\n这里的 IMainContext 其实就是继承了 IRPCProtocol 的一个别名而已，new ExtHostStatusBar 的参数是一个 rpcProtocol 实例，它被定义在 src/vs/workbench/services/extensions/node/rpcProtocol.ts 中，我们重点看一下 getProxy 的实现\n\n```tsx\npublic getProxy<T>(identifier: ProxyIdentifier<T>): T {\n  // 这里只是根据对应的 identifier 生成对应的 scope 而已，插件调用和 API 的调用一模一样比较方便一些\n  const rpcId = identifier.nid;\n  // 例如 StatusBar 的 identifier.nid 就是 'MainThreadStatusBar'\n  if (!this._proxies[rpcId]) {\n    // 缓存中没有代理则生成新的代理\n    this._proxies[rpcId] = this._createProxy(rpcId);\n  }\n  // 返回代理后的对象\n  return this._proxies[rpcId];\n}\n\n\n// 创建代理\nprivate _createProxy<T>(rpcId: number): T {\n  let handler = {\n    get: (target: any, name: string) => {\n      // target 即表示 scope，name 即为被调用方法名\n      if (!target[name] && name.charCodeAt(0) === CharCode.DollarSign) {\n        target[name] = (...myArgs: any[]) => {\n          // 插件中的 API 实际被代理到 remoteCall，因为这是一个 RPC 协议\n\t  \t\treturn this._remoteCall(rpcId, name, myArgs);\n\t};\n      }\n      return target[name];\n    }\n  };\n  // 返回 API 代理\n  return new Proxy(Object.create(null), handler);\n}\n```\n\n_createProxy 返回的是一个代理对象，即它代理了主线程中真正实现这些 API 的对象，例如 'MainThreadStatusBar' 返回的是一个 MainThreadStatusBarShape 类型的代理。\n\n```tsx\nexport interface MainThreadStatusBarShape extends IDisposable {\n  $setEntry(id: number, extensionId: string, text: string, tooltip: string, command: string, color: string | ThemeColor, alignment: MainThreadStatusBarAlignment, priority: number): void;\n  $dispose(id: number): void;\n}\n```\n\n插件 API 定义中并没有实现这个接口，它只需要被主线程中对应的模块实现即可，前面我们说到 setStatusMessage 最终调用了 this._proxy.$setEntry。\n\n_remoteCall 里会调用 RPCProcotol 的静态方法 serializeRequest 将 rpcId 方法名以及参数序列化成一个 Buffer 并发送给主线程。\n\n```\nconst msg = MessageIO.serializeRequest(req, rpcId, methodName, args, !!cancellationToken, this._uriReplacer);\n// 省略部分代码\nthis._protocol.send(msg);\n```\n\n关于主线程中接收到消息如何处理其实已经不用多说了，根据 rpcId 找到对应的 Services 以及方法，传入参数即可。\n\n## 最后\n\nVS Code像一颗耀眼的星星，吸引着成千上万开发者为其添砖加瓦。从VS Code的成功中，我们看到了好的设计和工程实践能创造多少奇迹。放眼软件产业，各个层面的模式不断被刷新，让人激动之余，也要求从业者不断提高技能水平。从个人学习的角度来看，了解这些模式诞生的前因后果，理解工程实践中的决策过程是非常有利于提高工程能力的。","source":"_posts/vscode插件机制.md","raw":"---\ntitle: vscode插件机制\ntags: 前端\ncategories: 前端\nabbrlink: 20807\ndate: 2019-11-28 08:48:23\n---\n## 前言\n\nVisual Studio Code（VS Code）近年来获得了爆炸式增长，成为广大开发者工具库中的必备神器。它作为一个开源项目，也吸引了无数第三方开发者和终端用户，成为顶尖开源项目之一。它在功能上做到了够用，体验上做到了好用，更在拥有海量插件的情况下做到了简洁流畅，实属难能可贵。通过插件来扩展功能的做法已经是司空见惯了，**但如何保证插件和原生功能一样优秀呢？历史告诉我们：不能保证。**\n\n大家可以参考Eclipse，插件模型可以说是做得非常彻底了，功能层面也是无所不能，但存在几个烦人的问题：不稳定、难用、慢，所以不少用户转投IntelliJ的怀抱。可谓成也插件，败也插件。\n\n**问题的本质在于信息不对称，它导致不同团队写出来的代码，无论是思路还是质量，都不一致**。最终，用户得到了一个又乱又卡的产品。所以要让插件在稳定性、速度和体验的层面都做到和原生功能统一，只能是一个美好的愿望。\n\n来看看其他IDE是怎么做的，**Visual Studio自己搞定所有功能，并且做到优秀，让别人无事可做**，这也成就了其“宇宙第一IDE”的美名；IntelliJ与之相仿，开箱即用，插件可有可无。这么看起来，自己搞定所有的事情是个好办法，但大家是否知道，Visual Studio背后有上千人的工程团队，显然，这不是VS Code这二十几号人能搞定的。他们选择了让大家来做插件，那怎么解决Eclipse所遇到的问题呢？\n\n这里分享一个小知识——Eclipse核心部分的开发者就是早期的VS Code团队。嗯，所以他们没有两次踏入同一条河流。**与Eclipse不同，VS Code选择了把插件关进盒子里**。这样做首先解决的问题就是**稳定性**，这个问题对于VS Code来说尤为重要。都知道VS Code基于Electron，实质上是个Node.js环境，单线程，任何代码崩了都是灾难性后果。所以VS Code干脆不信任任何人，把插件们放到单独的进程里，任你折腾，主程序妥妥的。\n<!-- more -->\n## 进程模型\n\nVSCode中包含主进程，渲染进程，同时因为VSCode提供了插件的扩展能力，又出于安全稳定性的考虑，图中又多了一个Extension Host，其实这个Extension Host也是一个独立的进程，用于运行我们的插件代码。并且同渲染进程一样，彼此都是独立互不影响的。Extension Host Process暴露了一些VSCode的API供插件开发者去使用。\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1574653513904)\n\n\n\n至此，我们了解到VS Code里至少有3个进程：\n\n- Electron Main Process：App主进程\n- Electron Renderer Process：UI进程\n- Extension Host Process：插件宿主进程，给插件提供执行环境\n\n其中Extension Host Process（每个VS Code窗体）只存在一个，所有插件都在该进程执行，*而不是每个插件一个独立进程*\n\n注意，插件宿主进程是个*普通的Node进程*（`childProcess.fork()`出来的），并不是Electron进程，而且*被限制了不能使用electron。*\n\n### 进程间通信方式\n\nExtension Host与Main之间的通信是通过`fork()`内置的IPC来完成的，具体如下：\n\n```javascript\n// Support logging from extension host\nthis._extensionHostProcess.on('message', msg => {\n if (msg && (<IRemoteConsoleLog>msg).type === '__$console') {\n   this._logExtensionHostMessage(<IRemoteConsoleLog>msg);\n }\n});\n```\n\n这里只是单向通信（`插件 -> Main`），实际上可以通过`this._extensionHostProcess.send({msg})`完成另一半（`Main -> 插件`）。\n\nP.S.关于进程间通信的更多信息，请查看Nodejs进程间通信。\n\n## 扩展能力\n\nVS Code插件**不适合做UI定制**，vscode为插件提供了丰富的扩展能力，但*不允许插件直接访问底层UI DOM*（也就是说插件难以改变IDE外观，UI定制受限），UI DOM这一层可能会随着优化频繁变动，VS Code不希望这些优化项受限于插件依赖，所以干脆把UI定制能力限制起来，除UI定制之外的，IDE相关的功能型特性都是支持扩展的，如基础的语法高亮/API提示、引用跳转（转到定义）/文件搜索、主题定制，高级的debug协议等等。\n\nP.S.实际上，非要扩展UI，也是有办法的（逃出插件运行环境，但要费不少力气），具体见[access electron API from vscode extension](https://github.com/Microsoft/vscode/issues/3011)。\n\n## 运行环境\n\n为了性能与兼容性，*插件在独立的进程（称为extension host process）中运行*，并且不允许直接访问DOM，所以提供了一套内置的UI组件，比如智能提示（IntelliSense）\n\n所以插件崩溃或无响应不影响IDE正常运行，例如：\n\n```javascript\nexport function activate(context: vscode.ExtensionContext) {\n  // hang up\n  while (true);\n}\n```\n\n一个插件的死循环并不影响IDE的正常使用和其它插件的加载/激活，但在进程列表能够看到Code Helper的CPU占用接近100%，*进程级沙箱*保证了插件机制的稳定性。\n\n## 核心理念\n\n### 稳定性：插件隔离\n\n插件可能会影响启动性能和IDE自身的稳定性，所以通过进程隔离来解决这个问题，插件运行在独立的进程中，不影响IDE及其启动时间。这样做是从用户角度考虑的，希望*用户对IDE拥有完全的控制力*，无论插件在做什么，都不影响IDE基本功能的正常使用。\n\nP.S.extension host process是个特殊的Node进程，能够访问VS Code扩展API，VS Code也对这种进程提供了debug支持。\n\n### 性能：插件激活\n\n**插件都是懒加载的**（as late as possible），只在特定场景才加载/激活，所有在此之前也不耗费内存等资源。实现上是插件注册特定激活事件（activation events），由IDE来触发执行，比如markdown插件只在用户代开md文件时才需要激活。\n\n#### 激活事件(Activation Events)\n\nvscode插件拥有6种激活方式：\n\n* onLanguage:${language} 打开特定语言的文档\n* onCommand:${command} 通过Command Palette执行特定命令\n* onDebug 进入调试模式\n* workspaceContains:${toplevelfilename} 打开的文件夹里含有特定文件\n* onView:${viewId} 展开指定view\n* \\* 打开IDE就激活\n\n除`\"activationEvents\": [\"*\"]`外都是条件激活，只在特定场景或满足特定条件时才加载/激活插件。\n\n##### activationEvents.onLanguage\n\n- 当某种语言的文件被打开时，该扩展就会被激活。\n- 该扩展使用语言标记符（a language identifier value）。\n- 可以在`activationEvents`数组中声明多种语言。\n\n```\n\"activationEvents\": [\n    \"onLanguage:json\",\n    \"onLanguage:markdown\",\n    \"onLanguage:typescript\"\n]\n```\n\n##### activationEvents.onCommand\n\n调用命令就会激活该扩展。\n\n```\n\"activationEvents\": [\n    \"onCommand:extension.sayHello\"\n]\n```\n\n##### activationEvents.onDebug\n\n启动调试之前会激活该事件。\n\n还有两个更细粒度的激活事件：\n- onDebugInitialConfigurations:在调用DebugConfigurationProvider的provideDebugConfigurations方法之前会被调用。\n- onDebugResolve:type:在调用DebugConfigurationProvider的resolveDebugConfiguration方法之前会被调用。\n\n经验法则：如果该调试扩展是轻量级的，就使用onDebug。 如果是重量级的，就使用onDebugInitialConfigurations或者onDebugResolve，使用哪一个取决于DebugConfigurationProvider是否实现了provideDebugConfigurations或者resolveDebugConfiguration方法。\n\n##### activationEvents.workspaceContains\n\n每当打开文件夹，并且该文件夹至少匹配一个与glob pattern有关的文件。\n\n```\n\"activationEvents\": [\n    \"workspaceContains:**/.editorconfig\"\n]\n```\n\n##### activationEvents.onFileSystem\n\n读取到特定格式(specific scheme)的文件或者文件夹，就会激活该扩展，特定格式通常是指文件格式(file-scheme)。\n\n```\n\"activationEvents\": [\n    \"onFileSystem:sftp\"\n]\n```\n\n##### activationEvents.onView\n\n打开指定ID的视图，该扩展就会被激活。\n\n```\n\"activationEvents\": [\n    \"onView:nodeDependencies\"\n]\n```\n\n##### activationEvents.*\n\n- 只要vscode启动，该扩展就会被激活。\n- 为了更好地用户体验，仅当使用其他激活方式组合无法实现功能时使用该激活事件。\n- 扩展可以监听多个激活事件，这比使用`*`要好。\n\n#### 插件清单文件(Extension Manifest File)\n\n清单文件用来描述插件的meta信息，直接把`package.json`作为清单文件，并增加了一些特有字段，比如触发插件加载的激活事件（`activation events`）、插件想要增强的扩展点（`contribution points`）。\n\nIDE在启动过程中扫一遍插件清单文件，UI相关的就扩展UI，UI无关的就把扩展点与插件功能关联起来。\n\n另外，由于插件的执行环境是Node进程，所以npm package都是可用的，依赖模块同样声明在`package.json`里。*注意*，用户安装插件时*不会*自动`npm install`，所以需要在发布插件前把依赖模块打包进去，具体见[Installation and Packaging](https://code.visualstudio.com/docs/extensionAPI/patterns-and-principles#_installation-and-packaging)。\n\n| 名称                  | 必须 | 类型                                 | 描述                                                         |\n| --------------------- | ---- | ------------------------------------ | ------------------------------------------------------------ |\n| name                  | Y    | string                               | 扩展的名称，全小写，没有空格                                 |\n| version               | Y    | string                               | 兼容版本                                                     |\n| publisher             | Y    | string                               | 发布名称                                                     |\n| engines               | Y    | object                               | 扩展能够兼容的最小的VS Code代码版本，不能为`*`。例如^0.10.5表示扩展能够运行的最小的VS Code版本为0.10.5 |\n| license               | N    | string                               | 许可                                                         |\n| displayName           | N    | string                               | 市场中显示的扩展的名称                                       |\n| description           | N    | string                               | 简短描述您的扩展是什么和做了什么                             |\n| categories            | N    | string[]                             | 扩展所属的类别: [Programming Languages, Snippets, Linters, Themes, Debuggers, Formatters, Keymaps, SCM Providers, Other, Extension Packs, Language Packs] |\n| keywords              | N    | array                                | 关键词，使扩展更容易被发现                                   |\n| main                  | N    | string                               | 扩展入口                                                     |\n| contributes           | N    | object                               | 扩展描述对象                                                 |\n| activationEvents      | N    | array                                | 激活事件数组                                                 |\n| badges                | N    | array                                | 显示在市场侧栏的徽标，分别表示url、href、description         |\n| markdown              | N    | string                               | 控制扩展市场上使用的markdown渲染引擎，要么是`github`(default)要么是`standard` |\n| qna                   | N    | marketplace (default), string, false | 控制市场上`Q & A`链接                                        |\n| dependencies          | N    | object                               | 运行时需要的NodeJS依赖。                                     |\n| devDependencies       | N    | object                               | 开发时需要的NodeJS依赖。                                     |\n| extensionDependencies | N    | array                                | 此扩展所依赖的扩展的id集合。当该扩展被安装时，所依赖的扩展会一并被安装。扩展的id总是`${publisher}.${name}` |\n| scripts               | N    | object                               | 与npm的脚本完全相同，但是带有额外的VS代码特定字段。          |\n| icon                  | N    | string                               | 至少128x128像素的图标路径(视网膜屏幕256 x256)                |\n\n#### 扩展点（Contribution Points）\n\n即支持的扩展类型，都声明在`package.json/contributes`下，包括：\n\n```\nconfiguration 插件配置项，用户可以通过Settings设置\nconfigurationDefaults 插件配置项默认值\ncommands  添加命令，用户可以通过Command Palette输入特定命令激活插件功能\nmenus     添加与命令关联的菜单项，用户点击菜单项时执行对应命令\nkeybindings 添加与命令关联的快捷键，用户按下特定快捷键时执行对应命令\nlanguages 与文件类型建立关联或扩展新语言，用户打开（满足某些要求的）特定文件类型时执行对应命令\ndebuggers 添加debugger，通过VS Code debug协议与IDE通信\nbreakpoints 配合debuggers，声明对debugger支持的（编程）语言类型\ngrammars 新增TextMate语法描述，语法高亮\nthemes 添加定制主题\nsnippets 添加代码片段\njsonValidation 添加json格式校验\nviews 新增左侧文件查看器视图和调试视图分栏\nproblemMatchers 添加错误匹配，从lint结果解析出error，warning等\nproblemPatterns 配合problemMatchers，定义匹配模式\n```\n\n`menus`是*唯一的UI扩展官方途径*，支持扩展的菜单具体如下：\n\n```\nCommand Palette搜索框下方菜单 commandPalette\n文件查看器右键菜单 explorer/context\n编辑器\n  右键菜单 editor/context\n  标题栏菜单 editor/title\n  标题栏右键菜单 editor/title/context\n调试视图\n  调用栈右键菜单 debug/callstack/context\nSCM（源码管理）视图\n  标题栏菜单 scm/title\n  文件分组菜单 scm/resourceGroup/context\n  文件状态菜单 scm/resource/context\n  文件变动菜单 scm/change/title\n左侧视图\n  文件查看器分栏 view/title\n  调试视图分栏 view/item/context\n```\n\n#### 扩展API\n\n##### 设计原则\n\n- 基于Promise：异步操作都用Promise来描述\n- 取消token：传入`CancellationToken`作为额外参数来检查取消状态，以及接收取消通知\n- 可释放式资源管理：持有的资源都需要手动释放，例如事件监听，命令，UI交互等\n- 事件API：调用订阅方法（`on[Will|Did]VerbNoun`）传入listener（接收`event`参数）返回Disposable\n- 严格空检查：通过TypeScript严格区分`undefined`和`null`\n\n##### api概览\n\nAPI按命名空间组织，全局命名空间如下：\n\n```\ncommands 执行/注册命令，IDE自身的和其它插件注册的命令都可以，如executeCommand\ndebug 调试相关API，比如startDebugging\nenv IDE相关的环境信息，比如machineId, sessionId\nextensions 跨插件API调用，extensionDependency声明插件依赖\nlanguages 编程语言相关API，如createDiagnosticCollection, registerDocumentFormattingEditProvider\nscm 源码版本控制API，如createSourceControl\nwindow 编辑器窗体相关API，如onDidChangeTextEditorSelection, createTerminal, showTextDocument\nworkspace 工作空间级API（打开了文件夹才有工作空间），如findFiles, openTextDocument, saveAll\n```\n\n比如可以通过`workspace.findFiles + languages.registerDefinitionProvider`实现Haste的*全局模块引用跳转支持*\n\n另外，一些API以命令形式提供（即上面提到的“IDE自身的”命令），例如`vscode.previewHtml`、`vscode.openFolder`、`editorScroll`等等。\n\n## 注入机制\n\n在使用vscode提供的api时，需要引入`vscode`模块访问插件可用的API：\n\n```\nimport * as vscode from 'vscode'\n```\n\n但是我们发现在`node_modules`下并没有`vscode`模块，而且`vscode`模块也名没被`define()`过，看起来我们`require`了一个不存在的模块，那么，这个东西是哪里来的？\n\n对`require('vscode')`的过程进行debug，很容易发现做过手脚的地方：\n\n```\n// ref: src/vs/workbench/api/node/extHost.api.impl.ts\nfunction defineAPI(factory: IExtensionApiFactory, extensionPaths: TernarySearchTree<IExtensionDescription>): void { // each extension is meant to get its own api implementation\n const extApiImpl = new Map<string, typeof vscode>();\n let defaultApiImpl: typeof vscode; const node_module = <any>require.__$__nodeRequire('module');\n const original = node_module._load;\n node_module._load = function load(request, parent, isMain) {\n   if (request !== 'vscode') {\n     return original.apply(this, arguments);\n   }   // get extension id from filename and api for extension\n   const ext = extensionPaths.findSubstr(parent.filename);\n   if (ext) {\n     let apiImpl = extApiImpl.get(ext.id);\n     if (!apiImpl) {\n       apiImpl = factory(ext);\n       extApiImpl.set(ext.id, apiImpl);\n     }\n     return apiImpl;\n   }   // fall back to a default implementation\n   if (!defaultApiImpl) {\n     defaultApiImpl = factory(nullExtensionDescription);\n   }\n   return defaultApiImpl;\n };\n}\n```\n\n`Module._load()`方法被劫持了，遇到`vscode`返回一个虚拟模块，叫做`apiImpl`。*注意*，每个插件拿到的API都是独立的（可能是出于插件安全隔离考虑，避免劫持API影响其它插件）。\n\n## 插件运行\n\n以vscode.window.setStatusBarMessage('Hello World')为例：\n\n前文我们提到所有的 API 被定义在 extHost.api.impl.ts 文件的 createApiFactory 里，例如 vscode.window.setStatusBarMessage 的实现：\n\n```tsx\nconst window: typeof vscode.window = {\n  /* 省略部分代码 */\n  setStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable<any>): vscode.Disposable \t\t{\n\t\t\treturn extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);\n   },\n  /* 省略部分代码 */\n}\n```\n\n实际调用的是 extHostStatusBar.setStatusBarMessage 函数，而 extHostStatusBar 则是 ExtHostStatusBar 的实例:\n\n```tsx\nconst extHostStatusBar = new ExtHostStatusBar(rpcProtocol);\n```\n\nExtHostStatusBar 包含了两个方法 createStatusBarEntry 和 setStatusBarMessage，createStatusBarEntry 返回了一个 ExtHostStatusBarEntry ，它被包装了一层代理，在 ExtHostStatusBar 被实例化化的同时也会产生一个 ExtHostStatusBarEntry 实例\n\n```tsx\nexport class ExtHostStatusBar {\n\n  private _proxy: MainThreadStatusBarShape;\n  private _statusMessage: StatusBarMessage;\n\n  constructor(mainContext: IMainContext) {\n    // 获取代理\n    this._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);\n    // 传入 this, StatusBarMessage 中也随即实例化了一个 ExtHostStatusBarEntry\n    this._statusMessage = new StatusBarMessage(this);\n  }\n  /* 省略部分代码 */\n}\n\nclass StatusBarMessage {\n\n  private _item: StatusBarItem;\n  private _messages: { message: string }[] = [];\n\n  constructor(statusBar: ExtHostStatusBar) {\n    // 调用 createStatusBarEntry \n    this._item = statusBar.createStatusBarEntry(void 0, ExtHostStatusBarAlignment.Left, Number.MIN_VALUE);\n  }\n  /* 省略部分代码 */\n}\n```\n\n\n\n而在setStatusBarMessage方法中，主要是调用的this._statusMessage.setMessage(text);\n\n```tsx\nsetStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable<any>): Disposable {\n\n\t\tconst d = this._statusMessage.setMessage(text);// 这一句\n\t\tlet handle: any;\n\n\t\tif (typeof timeoutOrThenable === 'number') {\n\t\t\thandle = setTimeout(() => d.dispose(), timeoutOrThenable);\n\t\t} else if (typeof timeoutOrThenable !== 'undefined') {\n\t\t\ttimeoutOrThenable.then(() => d.dispose(), () => d.dispose());\n\t\t}\n\n\t\treturn new Disposable(() => {\n\t\t\td.dispose();\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n```\n\n而 this._statusMessage.setMessage 方法经过层层调用，最终调用了 ExtHostStatusBarEntry 实例的 update 方法，也就是前面的 StatusBarMessage 构造函数中的 this._item.update，而这里就到了重头戏，update 方法中包含了一个 延时为 0 的 setTimeout ：\n\n```tsx\nprivate update(): void {\n\t\tif (this._disposed || !this._visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(this._timeoutHandle);\n\n\t\t// Defer the update so that multiple changes to setters dont cause a redraw each\n\t\tthis._timeoutHandle = setTimeout(() => {\n\t\t\tthis._timeoutHandle = undefined;\n\n\t\t\t// Set to status bar\n\t\t\tthis._proxy.$setEntry(this.id, this._statusId, this._statusName, this.text, this.tooltip, this.command, this.color,\n\t\t\t\tthis._alignment === ExtHostStatusBarAlignment.Left ? MainThreadStatusBarAlignment.LEFT : MainThreadStatusBarAlignment.RIGHT,\n\t\t\t\tthis._priority);\n\t\t}, 0);\n}\n```\n\n这里的_proxy是通过依赖注入引入的mainThreadStatusBat, 具体则来自：\n\n```tsx\nconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);\n\t\tthis._statusMessage = new StatusBarMessage(this);\n}\n```\n\n这里的 IMainContext 其实就是继承了 IRPCProtocol 的一个别名而已，new ExtHostStatusBar 的参数是一个 rpcProtocol 实例，它被定义在 src/vs/workbench/services/extensions/node/rpcProtocol.ts 中，我们重点看一下 getProxy 的实现\n\n```tsx\npublic getProxy<T>(identifier: ProxyIdentifier<T>): T {\n  // 这里只是根据对应的 identifier 生成对应的 scope 而已，插件调用和 API 的调用一模一样比较方便一些\n  const rpcId = identifier.nid;\n  // 例如 StatusBar 的 identifier.nid 就是 'MainThreadStatusBar'\n  if (!this._proxies[rpcId]) {\n    // 缓存中没有代理则生成新的代理\n    this._proxies[rpcId] = this._createProxy(rpcId);\n  }\n  // 返回代理后的对象\n  return this._proxies[rpcId];\n}\n\n\n// 创建代理\nprivate _createProxy<T>(rpcId: number): T {\n  let handler = {\n    get: (target: any, name: string) => {\n      // target 即表示 scope，name 即为被调用方法名\n      if (!target[name] && name.charCodeAt(0) === CharCode.DollarSign) {\n        target[name] = (...myArgs: any[]) => {\n          // 插件中的 API 实际被代理到 remoteCall，因为这是一个 RPC 协议\n\t  \t\treturn this._remoteCall(rpcId, name, myArgs);\n\t};\n      }\n      return target[name];\n    }\n  };\n  // 返回 API 代理\n  return new Proxy(Object.create(null), handler);\n}\n```\n\n_createProxy 返回的是一个代理对象，即它代理了主线程中真正实现这些 API 的对象，例如 'MainThreadStatusBar' 返回的是一个 MainThreadStatusBarShape 类型的代理。\n\n```tsx\nexport interface MainThreadStatusBarShape extends IDisposable {\n  $setEntry(id: number, extensionId: string, text: string, tooltip: string, command: string, color: string | ThemeColor, alignment: MainThreadStatusBarAlignment, priority: number): void;\n  $dispose(id: number): void;\n}\n```\n\n插件 API 定义中并没有实现这个接口，它只需要被主线程中对应的模块实现即可，前面我们说到 setStatusMessage 最终调用了 this._proxy.$setEntry。\n\n_remoteCall 里会调用 RPCProcotol 的静态方法 serializeRequest 将 rpcId 方法名以及参数序列化成一个 Buffer 并发送给主线程。\n\n```\nconst msg = MessageIO.serializeRequest(req, rpcId, methodName, args, !!cancellationToken, this._uriReplacer);\n// 省略部分代码\nthis._protocol.send(msg);\n```\n\n关于主线程中接收到消息如何处理其实已经不用多说了，根据 rpcId 找到对应的 Services 以及方法，传入参数即可。\n\n## 最后\n\nVS Code像一颗耀眼的星星，吸引着成千上万开发者为其添砖加瓦。从VS Code的成功中，我们看到了好的设计和工程实践能创造多少奇迹。放眼软件产业，各个层面的模式不断被刷新，让人激动之余，也要求从业者不断提高技能水平。从个人学习的角度来看，了解这些模式诞生的前因后果，理解工程实践中的决策过程是非常有利于提高工程能力的。","slug":"vscode插件机制","published":1,"updated":"2020-03-09T03:01:45.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nn00361q2darcp3t56","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Visual Studio Code（VS Code）近年来获得了爆炸式增长，成为广大开发者工具库中的必备神器。它作为一个开源项目，也吸引了无数第三方开发者和终端用户，成为顶尖开源项目之一。它在功能上做到了够用，体验上做到了好用，更在拥有海量插件的情况下做到了简洁流畅，实属难能可贵。通过插件来扩展功能的做法已经是司空见惯了，<strong>但如何保证插件和原生功能一样优秀呢？历史告诉我们：不能保证。</strong></p>\n<p>大家可以参考Eclipse，插件模型可以说是做得非常彻底了，功能层面也是无所不能，但存在几个烦人的问题：不稳定、难用、慢，所以不少用户转投IntelliJ的怀抱。可谓成也插件，败也插件。</p>\n<p><strong>问题的本质在于信息不对称，它导致不同团队写出来的代码，无论是思路还是质量，都不一致</strong>。最终，用户得到了一个又乱又卡的产品。所以要让插件在稳定性、速度和体验的层面都做到和原生功能统一，只能是一个美好的愿望。</p>\n<p>来看看其他IDE是怎么做的，<strong>Visual Studio自己搞定所有功能，并且做到优秀，让别人无事可做</strong>，这也成就了其“宇宙第一IDE”的美名；IntelliJ与之相仿，开箱即用，插件可有可无。这么看起来，自己搞定所有的事情是个好办法，但大家是否知道，Visual Studio背后有上千人的工程团队，显然，这不是VS Code这二十几号人能搞定的。他们选择了让大家来做插件，那怎么解决Eclipse所遇到的问题呢？</p>\n<p>这里分享一个小知识——Eclipse核心部分的开发者就是早期的VS Code团队。嗯，所以他们没有两次踏入同一条河流。<strong>与Eclipse不同，VS Code选择了把插件关进盒子里</strong>。这样做首先解决的问题就是<strong>稳定性</strong>，这个问题对于VS Code来说尤为重要。都知道VS Code基于Electron，实质上是个Node.js环境，单线程，任何代码崩了都是灾难性后果。所以VS Code干脆不信任任何人，把插件们放到单独的进程里，任你折腾，主程序妥妥的。<br><a id=\"more\"></a></p>\n<h2 id=\"进程模型\"><a href=\"#进程模型\" class=\"headerlink\" title=\"进程模型\"></a>进程模型</h2><p>VSCode中包含主进程，渲染进程，同时因为VSCode提供了插件的扩展能力，又出于安全稳定性的考虑，图中又多了一个Extension Host，其实这个Extension Host也是一个独立的进程，用于运行我们的插件代码。并且同渲染进程一样，彼此都是独立互不影响的。Extension Host Process暴露了一些VSCode的API供插件开发者去使用。</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1574653513904\" alt></p>\n<p>至此，我们了解到VS Code里至少有3个进程：</p>\n<ul>\n<li>Electron Main Process：App主进程</li>\n<li>Electron Renderer Process：UI进程</li>\n<li>Extension Host Process：插件宿主进程，给插件提供执行环境</li>\n</ul>\n<p>其中Extension Host Process（每个VS Code窗体）只存在一个，所有插件都在该进程执行，<em>而不是每个插件一个独立进程</em></p>\n<p>注意，插件宿主进程是个<em>普通的Node进程</em>（<code>childProcess.fork()</code>出来的），并不是Electron进程，而且<em>被限制了不能使用electron。</em></p>\n<h3 id=\"进程间通信方式\"><a href=\"#进程间通信方式\" class=\"headerlink\" title=\"进程间通信方式\"></a>进程间通信方式</h3><p>Extension Host与Main之间的通信是通过<code>fork()</code>内置的IPC来完成的，具体如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Support logging from extension host</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._extensionHostProcess.on(<span class=\"string\">'message'</span>, msg =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (msg &amp;&amp; (&lt;IRemoteConsoleLog&gt;msg).type === '__$console') &#123;</span><br><span class=\"line\">   this._logExtensionHostMessage(&lt;IRemoteConsoleLog&gt;msg);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里只是单向通信（<code>插件 -&gt; Main</code>），实际上可以通过<code>this._extensionHostProcess.send({msg})</code>完成另一半（<code>Main -&gt; 插件</code>）。</p>\n<p>P.S.关于进程间通信的更多信息，请查看Nodejs进程间通信。</p>\n<h2 id=\"扩展能力\"><a href=\"#扩展能力\" class=\"headerlink\" title=\"扩展能力\"></a>扩展能力</h2><p>VS Code插件<strong>不适合做UI定制</strong>，vscode为插件提供了丰富的扩展能力，但<em>不允许插件直接访问底层UI DOM</em>（也就是说插件难以改变IDE外观，UI定制受限），UI DOM这一层可能会随着优化频繁变动，VS Code不希望这些优化项受限于插件依赖，所以干脆把UI定制能力限制起来，除UI定制之外的，IDE相关的功能型特性都是支持扩展的，如基础的语法高亮/API提示、引用跳转（转到定义）/文件搜索、主题定制，高级的debug协议等等。</p>\n<p>P.S.实际上，非要扩展UI，也是有办法的（逃出插件运行环境，但要费不少力气），具体见<a href=\"https://github.com/Microsoft/vscode/issues/3011\" target=\"_blank\" rel=\"noopener\">access electron API from vscode extension</a>。</p>\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><p>为了性能与兼容性，<em>插件在独立的进程（称为extension host process）中运行</em>，并且不允许直接访问DOM，所以提供了一套内置的UI组件，比如智能提示（IntelliSense）</p>\n<p>所以插件崩溃或无响应不影响IDE正常运行，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activate</span>(<span class=\"params\">context: vscode.ExtensionContext</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// hang up</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个插件的死循环并不影响IDE的正常使用和其它插件的加载/激活，但在进程列表能够看到Code Helper的CPU占用接近100%，<em>进程级沙箱</em>保证了插件机制的稳定性。</p>\n<h2 id=\"核心理念\"><a href=\"#核心理念\" class=\"headerlink\" title=\"核心理念\"></a>核心理念</h2><h3 id=\"稳定性：插件隔离\"><a href=\"#稳定性：插件隔离\" class=\"headerlink\" title=\"稳定性：插件隔离\"></a>稳定性：插件隔离</h3><p>插件可能会影响启动性能和IDE自身的稳定性，所以通过进程隔离来解决这个问题，插件运行在独立的进程中，不影响IDE及其启动时间。这样做是从用户角度考虑的，希望<em>用户对IDE拥有完全的控制力</em>，无论插件在做什么，都不影响IDE基本功能的正常使用。</p>\n<p>P.S.extension host process是个特殊的Node进程，能够访问VS Code扩展API，VS Code也对这种进程提供了debug支持。</p>\n<h3 id=\"性能：插件激活\"><a href=\"#性能：插件激活\" class=\"headerlink\" title=\"性能：插件激活\"></a>性能：插件激活</h3><p><strong>插件都是懒加载的</strong>（as late as possible），只在特定场景才加载/激活，所有在此之前也不耗费内存等资源。实现上是插件注册特定激活事件（activation events），由IDE来触发执行，比如markdown插件只在用户代开md文件时才需要激活。</p>\n<h4 id=\"激活事件-Activation-Events\"><a href=\"#激活事件-Activation-Events\" class=\"headerlink\" title=\"激活事件(Activation Events)\"></a>激活事件(Activation Events)</h4><p>vscode插件拥有6种激活方式：</p>\n<ul>\n<li>onLanguage:${language} 打开特定语言的文档</li>\n<li>onCommand:${command} 通过Command Palette执行特定命令</li>\n<li>onDebug 进入调试模式</li>\n<li>workspaceContains:${toplevelfilename} 打开的文件夹里含有特定文件</li>\n<li>onView:${viewId} 展开指定view</li>\n<li>* 打开IDE就激活</li>\n</ul>\n<p>除<code>&quot;activationEvents&quot;: [&quot;*&quot;]</code>外都是条件激活，只在特定场景或满足特定条件时才加载/激活插件。</p>\n<h5 id=\"activationEvents-onLanguage\"><a href=\"#activationEvents-onLanguage\" class=\"headerlink\" title=\"activationEvents.onLanguage\"></a>activationEvents.onLanguage</h5><ul>\n<li>当某种语言的文件被打开时，该扩展就会被激活。</li>\n<li>该扩展使用语言标记符（a language identifier value）。</li>\n<li>可以在<code>activationEvents</code>数组中声明多种语言。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;onLanguage:json&quot;,</span><br><span class=\"line\">    &quot;onLanguage:markdown&quot;,</span><br><span class=\"line\">    &quot;onLanguage:typescript&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents-onCommand\"><a href=\"#activationEvents-onCommand\" class=\"headerlink\" title=\"activationEvents.onCommand\"></a>activationEvents.onCommand</h5><p>调用命令就会激活该扩展。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;onCommand:extension.sayHello&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents-onDebug\"><a href=\"#activationEvents-onDebug\" class=\"headerlink\" title=\"activationEvents.onDebug\"></a>activationEvents.onDebug</h5><p>启动调试之前会激活该事件。</p>\n<p>还有两个更细粒度的激活事件：</p>\n<ul>\n<li>onDebugInitialConfigurations:在调用DebugConfigurationProvider的provideDebugConfigurations方法之前会被调用。</li>\n<li>onDebugResolve:type:在调用DebugConfigurationProvider的resolveDebugConfiguration方法之前会被调用。</li>\n</ul>\n<p>经验法则：如果该调试扩展是轻量级的，就使用onDebug。 如果是重量级的，就使用onDebugInitialConfigurations或者onDebugResolve，使用哪一个取决于DebugConfigurationProvider是否实现了provideDebugConfigurations或者resolveDebugConfiguration方法。</p>\n<h5 id=\"activationEvents-workspaceContains\"><a href=\"#activationEvents-workspaceContains\" class=\"headerlink\" title=\"activationEvents.workspaceContains\"></a>activationEvents.workspaceContains</h5><p>每当打开文件夹，并且该文件夹至少匹配一个与glob pattern有关的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;workspaceContains:**/.editorconfig&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents-onFileSystem\"><a href=\"#activationEvents-onFileSystem\" class=\"headerlink\" title=\"activationEvents.onFileSystem\"></a>activationEvents.onFileSystem</h5><p>读取到特定格式(specific scheme)的文件或者文件夹，就会激活该扩展，特定格式通常是指文件格式(file-scheme)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;onFileSystem:sftp&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents-onView\"><a href=\"#activationEvents-onView\" class=\"headerlink\" title=\"activationEvents.onView\"></a>activationEvents.onView</h5><p>打开指定ID的视图，该扩展就会被激活。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;onView:nodeDependencies&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents\"><a href=\"#activationEvents\" class=\"headerlink\" title=\"activationEvents.*\"></a>activationEvents.*</h5><ul>\n<li>只要vscode启动，该扩展就会被激活。</li>\n<li>为了更好地用户体验，仅当使用其他激活方式组合无法实现功能时使用该激活事件。</li>\n<li>扩展可以监听多个激活事件，这比使用<code>*</code>要好。</li>\n</ul>\n<h4 id=\"插件清单文件-Extension-Manifest-File\"><a href=\"#插件清单文件-Extension-Manifest-File\" class=\"headerlink\" title=\"插件清单文件(Extension Manifest File)\"></a>插件清单文件(Extension Manifest File)</h4><p>清单文件用来描述插件的meta信息，直接把<code>package.json</code>作为清单文件，并增加了一些特有字段，比如触发插件加载的激活事件（<code>activation events</code>）、插件想要增强的扩展点（<code>contribution points</code>）。</p>\n<p>IDE在启动过程中扫一遍插件清单文件，UI相关的就扩展UI，UI无关的就把扩展点与插件功能关联起来。</p>\n<p>另外，由于插件的执行环境是Node进程，所以npm package都是可用的，依赖模块同样声明在<code>package.json</code>里。<em>注意</em>，用户安装插件时<em>不会</em>自动<code>npm install</code>，所以需要在发布插件前把依赖模块打包进去，具体见<a href=\"https://code.visualstudio.com/docs/extensionAPI/patterns-and-principles#_installation-and-packaging\" target=\"_blank\" rel=\"noopener\">Installation and Packaging</a>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>必须</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>Y</td>\n<td>string</td>\n<td>扩展的名称，全小写，没有空格</td>\n</tr>\n<tr>\n<td>version</td>\n<td>Y</td>\n<td>string</td>\n<td>兼容版本</td>\n</tr>\n<tr>\n<td>publisher</td>\n<td>Y</td>\n<td>string</td>\n<td>发布名称</td>\n</tr>\n<tr>\n<td>engines</td>\n<td>Y</td>\n<td>object</td>\n<td>扩展能够兼容的最小的VS Code代码版本，不能为<code>*</code>。例如^0.10.5表示扩展能够运行的最小的VS Code版本为0.10.5</td>\n</tr>\n<tr>\n<td>license</td>\n<td>N</td>\n<td>string</td>\n<td>许可</td>\n</tr>\n<tr>\n<td>displayName</td>\n<td>N</td>\n<td>string</td>\n<td>市场中显示的扩展的名称</td>\n</tr>\n<tr>\n<td>description</td>\n<td>N</td>\n<td>string</td>\n<td>简短描述您的扩展是什么和做了什么</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>N</td>\n<td>string[]</td>\n<td>扩展所属的类别: [Programming Languages, Snippets, Linters, Themes, Debuggers, Formatters, Keymaps, SCM Providers, Other, Extension Packs, Language Packs]</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>N</td>\n<td>array</td>\n<td>关键词，使扩展更容易被发现</td>\n</tr>\n<tr>\n<td>main</td>\n<td>N</td>\n<td>string</td>\n<td>扩展入口</td>\n</tr>\n<tr>\n<td>contributes</td>\n<td>N</td>\n<td>object</td>\n<td>扩展描述对象</td>\n</tr>\n<tr>\n<td>activationEvents</td>\n<td>N</td>\n<td>array</td>\n<td>激活事件数组</td>\n</tr>\n<tr>\n<td>badges</td>\n<td>N</td>\n<td>array</td>\n<td>显示在市场侧栏的徽标，分别表示url、href、description</td>\n</tr>\n<tr>\n<td>markdown</td>\n<td>N</td>\n<td>string</td>\n<td>控制扩展市场上使用的markdown渲染引擎，要么是<code>github</code>(default)要么是<code>standard</code></td>\n</tr>\n<tr>\n<td>qna</td>\n<td>N</td>\n<td>marketplace (default), string, false</td>\n<td>控制市场上<code>Q &amp; A</code>链接</td>\n</tr>\n<tr>\n<td>dependencies</td>\n<td>N</td>\n<td>object</td>\n<td>运行时需要的NodeJS依赖。</td>\n</tr>\n<tr>\n<td>devDependencies</td>\n<td>N</td>\n<td>object</td>\n<td>开发时需要的NodeJS依赖。</td>\n</tr>\n<tr>\n<td>extensionDependencies</td>\n<td>N</td>\n<td>array</td>\n<td>此扩展所依赖的扩展的id集合。当该扩展被安装时，所依赖的扩展会一并被安装。扩展的id总是<code>${publisher}.${name}</code></td>\n</tr>\n<tr>\n<td>scripts</td>\n<td>N</td>\n<td>object</td>\n<td>与npm的脚本完全相同，但是带有额外的VS代码特定字段。</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>N</td>\n<td>string</td>\n<td>至少128x128像素的图标路径(视网膜屏幕256 x256)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"扩展点（Contribution-Points）\"><a href=\"#扩展点（Contribution-Points）\" class=\"headerlink\" title=\"扩展点（Contribution Points）\"></a>扩展点（Contribution Points）</h4><p>即支持的扩展类型，都声明在<code>package.json/contributes</code>下，包括：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configuration 插件配置项，用户可以通过Settings设置</span><br><span class=\"line\">configurationDefaults 插件配置项默认值</span><br><span class=\"line\">commands  添加命令，用户可以通过Command Palette输入特定命令激活插件功能</span><br><span class=\"line\">menus     添加与命令关联的菜单项，用户点击菜单项时执行对应命令</span><br><span class=\"line\">keybindings 添加与命令关联的快捷键，用户按下特定快捷键时执行对应命令</span><br><span class=\"line\">languages 与文件类型建立关联或扩展新语言，用户打开（满足某些要求的）特定文件类型时执行对应命令</span><br><span class=\"line\">debuggers 添加debugger，通过VS Code debug协议与IDE通信</span><br><span class=\"line\">breakpoints 配合debuggers，声明对debugger支持的（编程）语言类型</span><br><span class=\"line\">grammars 新增TextMate语法描述，语法高亮</span><br><span class=\"line\">themes 添加定制主题</span><br><span class=\"line\">snippets 添加代码片段</span><br><span class=\"line\">jsonValidation 添加json格式校验</span><br><span class=\"line\">views 新增左侧文件查看器视图和调试视图分栏</span><br><span class=\"line\">problemMatchers 添加错误匹配，从lint结果解析出error，warning等</span><br><span class=\"line\">problemPatterns 配合problemMatchers，定义匹配模式</span><br></pre></td></tr></table></figure>\n<p><code>menus</code>是<em>唯一的UI扩展官方途径</em>，支持扩展的菜单具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Command Palette搜索框下方菜单 commandPalette</span><br><span class=\"line\">文件查看器右键菜单 explorer/context</span><br><span class=\"line\">编辑器</span><br><span class=\"line\">  右键菜单 editor/context</span><br><span class=\"line\">  标题栏菜单 editor/title</span><br><span class=\"line\">  标题栏右键菜单 editor/title/context</span><br><span class=\"line\">调试视图</span><br><span class=\"line\">  调用栈右键菜单 debug/callstack/context</span><br><span class=\"line\">SCM（源码管理）视图</span><br><span class=\"line\">  标题栏菜单 scm/title</span><br><span class=\"line\">  文件分组菜单 scm/resourceGroup/context</span><br><span class=\"line\">  文件状态菜单 scm/resource/context</span><br><span class=\"line\">  文件变动菜单 scm/change/title</span><br><span class=\"line\">左侧视图</span><br><span class=\"line\">  文件查看器分栏 view/title</span><br><span class=\"line\">  调试视图分栏 view/item/context</span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展API\"><a href=\"#扩展API\" class=\"headerlink\" title=\"扩展API\"></a>扩展API</h4><h5 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h5><ul>\n<li>基于Promise：异步操作都用Promise来描述</li>\n<li>取消token：传入<code>CancellationToken</code>作为额外参数来检查取消状态，以及接收取消通知</li>\n<li>可释放式资源管理：持有的资源都需要手动释放，例如事件监听，命令，UI交互等</li>\n<li>事件API：调用订阅方法（<code>on[Will|Did]VerbNoun</code>）传入listener（接收<code>event</code>参数）返回Disposable</li>\n<li>严格空检查：通过TypeScript严格区分<code>undefined</code>和<code>null</code></li>\n</ul>\n<h5 id=\"api概览\"><a href=\"#api概览\" class=\"headerlink\" title=\"api概览\"></a>api概览</h5><p>API按命名空间组织，全局命名空间如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commands 执行/注册命令，IDE自身的和其它插件注册的命令都可以，如executeCommand</span><br><span class=\"line\">debug 调试相关API，比如startDebugging</span><br><span class=\"line\">env IDE相关的环境信息，比如machineId, sessionId</span><br><span class=\"line\">extensions 跨插件API调用，extensionDependency声明插件依赖</span><br><span class=\"line\">languages 编程语言相关API，如createDiagnosticCollection, registerDocumentFormattingEditProvider</span><br><span class=\"line\">scm 源码版本控制API，如createSourceControl</span><br><span class=\"line\">window 编辑器窗体相关API，如onDidChangeTextEditorSelection, createTerminal, showTextDocument</span><br><span class=\"line\">workspace 工作空间级API（打开了文件夹才有工作空间），如findFiles, openTextDocument, saveAll</span><br></pre></td></tr></table></figure>\n<p>比如可以通过<code>workspace.findFiles + languages.registerDefinitionProvider</code>实现Haste的<em>全局模块引用跳转支持</em></p>\n<p>另外，一些API以命令形式提供（即上面提到的“IDE自身的”命令），例如<code>vscode.previewHtml</code>、<code>vscode.openFolder</code>、<code>editorScroll</code>等等。</p>\n<h2 id=\"注入机制\"><a href=\"#注入机制\" class=\"headerlink\" title=\"注入机制\"></a>注入机制</h2><p>在使用vscode提供的api时，需要引入<code>vscode</code>模块访问插件可用的API：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as vscode from &apos;vscode&apos;</span><br></pre></td></tr></table></figure>\n<p>但是我们发现在<code>node_modules</code>下并没有<code>vscode</code>模块，而且<code>vscode</code>模块也名没被<code>define()</code>过，看起来我们<code>require</code>了一个不存在的模块，那么，这个东西是哪里来的？</p>\n<p>对<code>require(&#39;vscode&#39;)</code>的过程进行debug，很容易发现做过手脚的地方：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ref: src/vs/workbench/api/node/extHost.api.impl.ts</span><br><span class=\"line\">function defineAPI(factory: IExtensionApiFactory, extensionPaths: TernarySearchTree&lt;IExtensionDescription&gt;): void &#123; // each extension is meant to get its own api implementation</span><br><span class=\"line\"> const extApiImpl = new Map&lt;string, typeof vscode&gt;();</span><br><span class=\"line\"> let defaultApiImpl: typeof vscode; const node_module = &lt;any&gt;require.__$__nodeRequire(&apos;module&apos;);</span><br><span class=\"line\"> const original = node_module._load;</span><br><span class=\"line\"> node_module._load = function load(request, parent, isMain) &#123;</span><br><span class=\"line\">   if (request !== &apos;vscode&apos;) &#123;</span><br><span class=\"line\">     return original.apply(this, arguments);</span><br><span class=\"line\">   &#125;   // get extension id from filename and api for extension</span><br><span class=\"line\">   const ext = extensionPaths.findSubstr(parent.filename);</span><br><span class=\"line\">   if (ext) &#123;</span><br><span class=\"line\">     let apiImpl = extApiImpl.get(ext.id);</span><br><span class=\"line\">     if (!apiImpl) &#123;</span><br><span class=\"line\">       apiImpl = factory(ext);</span><br><span class=\"line\">       extApiImpl.set(ext.id, apiImpl);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return apiImpl;</span><br><span class=\"line\">   &#125;   // fall back to a default implementation</span><br><span class=\"line\">   if (!defaultApiImpl) &#123;</span><br><span class=\"line\">     defaultApiImpl = factory(nullExtensionDescription);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return defaultApiImpl;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Module._load()</code>方法被劫持了，遇到<code>vscode</code>返回一个虚拟模块，叫做<code>apiImpl</code>。<em>注意</em>，每个插件拿到的API都是独立的（可能是出于插件安全隔离考虑，避免劫持API影响其它插件）。</p>\n<h2 id=\"插件运行\"><a href=\"#插件运行\" class=\"headerlink\" title=\"插件运行\"></a>插件运行</h2><p>以vscode.window.setStatusBarMessage(‘Hello World’)为例：</p>\n<p>前文我们提到所有的 API 被定义在 extHost.api.impl.ts 文件的 createApiFactory 里，例如 vscode.window.setStatusBarMessage 的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const window: typeof vscode.window = &#123;</span><br><span class=\"line\">  /* 省略部分代码 */</span><br><span class=\"line\">  setStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable&lt;any&gt;): vscode.Disposable \t\t&#123;</span><br><span class=\"line\">\t\t\treturn extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  /* 省略部分代码 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际调用的是 extHostStatusBar.setStatusBarMessage 函数，而 extHostStatusBar 则是 ExtHostStatusBar 的实例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const extHostStatusBar = new ExtHostStatusBar(rpcProtocol);</span><br></pre></td></tr></table></figure>\n<p>ExtHostStatusBar 包含了两个方法 createStatusBarEntry 和 setStatusBarMessage，createStatusBarEntry 返回了一个 ExtHostStatusBarEntry ，它被包装了一层代理，在 ExtHostStatusBar 被实例化化的同时也会产生一个 ExtHostStatusBarEntry 实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class ExtHostStatusBar &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private _proxy: MainThreadStatusBarShape;</span><br><span class=\"line\">  private _statusMessage: StatusBarMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(mainContext: IMainContext) &#123;</span><br><span class=\"line\">    // 获取代理</span><br><span class=\"line\">    this._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);</span><br><span class=\"line\">    // 传入 this, StatusBarMessage 中也随即实例化了一个 ExtHostStatusBarEntry</span><br><span class=\"line\">    this._statusMessage = new StatusBarMessage(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* 省略部分代码 */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class StatusBarMessage &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private _item: StatusBarItem;</span><br><span class=\"line\">  private _messages: &#123; message: string &#125;[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(statusBar: ExtHostStatusBar) &#123;</span><br><span class=\"line\">    // 调用 createStatusBarEntry </span><br><span class=\"line\">    this._item = statusBar.createStatusBarEntry(void 0, ExtHostStatusBarAlignment.Left, Number.MIN_VALUE);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* 省略部分代码 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在setStatusBarMessage方法中，主要是调用的this._statusMessage.setMessage(text);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable&lt;any&gt;): Disposable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tconst d = this._statusMessage.setMessage(text);// 这一句</span><br><span class=\"line\">\t\tlet handle: any;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (typeof timeoutOrThenable === &apos;number&apos;) &#123;</span><br><span class=\"line\">\t\t\thandle = setTimeout(() =&gt; d.dispose(), timeoutOrThenable);</span><br><span class=\"line\">\t\t&#125; else if (typeof timeoutOrThenable !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">\t\t\ttimeoutOrThenable.then(() =&gt; d.dispose(), () =&gt; d.dispose());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn new Disposable(() =&gt; &#123;</span><br><span class=\"line\">\t\t\td.dispose();</span><br><span class=\"line\">\t\t\tclearTimeout(handle);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>而 this._statusMessage.setMessage 方法经过层层调用，最终调用了 ExtHostStatusBarEntry 实例的 update 方法，也就是前面的 StatusBarMessage 构造函数中的 this._item.update，而这里就到了重头戏，update 方法中包含了一个 延时为 0 的 setTimeout ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private update(): void &#123;</span><br><span class=\"line\">\t\tif (this._disposed || !this._visible) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclearTimeout(this._timeoutHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Defer the update so that multiple changes to setters dont cause a redraw each</span><br><span class=\"line\">\t\tthis._timeoutHandle = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\tthis._timeoutHandle = undefined;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// Set to status bar</span><br><span class=\"line\">\t\t\tthis._proxy.$setEntry(this.id, this._statusId, this._statusName, this.text, this.tooltip, this.command, this.color,</span><br><span class=\"line\">\t\t\t\tthis._alignment === ExtHostStatusBarAlignment.Left ? MainThreadStatusBarAlignment.LEFT : MainThreadStatusBarAlignment.RIGHT,</span><br><span class=\"line\">\t\t\t\tthis._priority);</span><br><span class=\"line\">\t\t&#125;, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的_proxy是通过依赖注入引入的mainThreadStatusBat, 具体则来自：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(mainContext: IMainContext) &#123;</span><br><span class=\"line\">\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);</span><br><span class=\"line\">\t\tthis._statusMessage = new StatusBarMessage(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 IMainContext 其实就是继承了 IRPCProtocol 的一个别名而已，new ExtHostStatusBar 的参数是一个 rpcProtocol 实例，它被定义在 src/vs/workbench/services/extensions/node/rpcProtocol.ts 中，我们重点看一下 getProxy 的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public getProxy&lt;T&gt;(identifier: ProxyIdentifier&lt;T&gt;): T &#123;</span><br><span class=\"line\">  // 这里只是根据对应的 identifier 生成对应的 scope 而已，插件调用和 API 的调用一模一样比较方便一些</span><br><span class=\"line\">  const rpcId = identifier.nid;</span><br><span class=\"line\">  // 例如 StatusBar 的 identifier.nid 就是 &apos;MainThreadStatusBar&apos;</span><br><span class=\"line\">  if (!this._proxies[rpcId]) &#123;</span><br><span class=\"line\">    // 缓存中没有代理则生成新的代理</span><br><span class=\"line\">    this._proxies[rpcId] = this._createProxy(rpcId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 返回代理后的对象</span><br><span class=\"line\">  return this._proxies[rpcId];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 创建代理</span><br><span class=\"line\">private _createProxy&lt;T&gt;(rpcId: number): T &#123;</span><br><span class=\"line\">  let handler = &#123;</span><br><span class=\"line\">    get: (target: any, name: string) =&gt; &#123;</span><br><span class=\"line\">      // target 即表示 scope，name 即为被调用方法名</span><br><span class=\"line\">      if (!target[name] &amp;&amp; name.charCodeAt(0) === CharCode.DollarSign) &#123;</span><br><span class=\"line\">        target[name] = (...myArgs: any[]) =&gt; &#123;</span><br><span class=\"line\">          // 插件中的 API 实际被代理到 remoteCall，因为这是一个 RPC 协议</span><br><span class=\"line\">\t  \t\treturn this._remoteCall(rpcId, name, myArgs);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return target[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  // 返回 API 代理</span><br><span class=\"line\">  return new Proxy(Object.create(null), handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>_createProxy 返回的是一个代理对象，即它代理了主线程中真正实现这些 API 的对象，例如 ‘MainThreadStatusBar’ 返回的是一个 MainThreadStatusBarShape 类型的代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export interface MainThreadStatusBarShape extends IDisposable &#123;</span><br><span class=\"line\">  $setEntry(id: number, extensionId: string, text: string, tooltip: string, command: string, color: string | ThemeColor, alignment: MainThreadStatusBarAlignment, priority: number): void;</span><br><span class=\"line\">  $dispose(id: number): void;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>插件 API 定义中并没有实现这个接口，它只需要被主线程中对应的模块实现即可，前面我们说到 setStatusMessage 最终调用了 this._proxy.$setEntry。</p>\n<p>_remoteCall 里会调用 RPCProcotol 的静态方法 serializeRequest 将 rpcId 方法名以及参数序列化成一个 Buffer 并发送给主线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const msg = MessageIO.serializeRequest(req, rpcId, methodName, args, !!cancellationToken, this._uriReplacer);</span><br><span class=\"line\">// 省略部分代码</span><br><span class=\"line\">this._protocol.send(msg);</span><br></pre></td></tr></table></figure>\n<p>关于主线程中接收到消息如何处理其实已经不用多说了，根据 rpcId 找到对应的 Services 以及方法，传入参数即可。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>VS Code像一颗耀眼的星星，吸引着成千上万开发者为其添砖加瓦。从VS Code的成功中，我们看到了好的设计和工程实践能创造多少奇迹。放眼软件产业，各个层面的模式不断被刷新，让人激动之余，也要求从业者不断提高技能水平。从个人学习的角度来看，了解这些模式诞生的前因后果，理解工程实践中的决策过程是非常有利于提高工程能力的。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>Visual Studio Code（VS Code）近年来获得了爆炸式增长，成为广大开发者工具库中的必备神器。它作为一个开源项目，也吸引了无数第三方开发者和终端用户，成为顶尖开源项目之一。它在功能上做到了够用，体验上做到了好用，更在拥有海量插件的情况下做到了简洁流畅，实属难能可贵。通过插件来扩展功能的做法已经是司空见惯了，<strong>但如何保证插件和原生功能一样优秀呢？历史告诉我们：不能保证。</strong></p>\n<p>大家可以参考Eclipse，插件模型可以说是做得非常彻底了，功能层面也是无所不能，但存在几个烦人的问题：不稳定、难用、慢，所以不少用户转投IntelliJ的怀抱。可谓成也插件，败也插件。</p>\n<p><strong>问题的本质在于信息不对称，它导致不同团队写出来的代码，无论是思路还是质量，都不一致</strong>。最终，用户得到了一个又乱又卡的产品。所以要让插件在稳定性、速度和体验的层面都做到和原生功能统一，只能是一个美好的愿望。</p>\n<p>来看看其他IDE是怎么做的，<strong>Visual Studio自己搞定所有功能，并且做到优秀，让别人无事可做</strong>，这也成就了其“宇宙第一IDE”的美名；IntelliJ与之相仿，开箱即用，插件可有可无。这么看起来，自己搞定所有的事情是个好办法，但大家是否知道，Visual Studio背后有上千人的工程团队，显然，这不是VS Code这二十几号人能搞定的。他们选择了让大家来做插件，那怎么解决Eclipse所遇到的问题呢？</p>\n<p>这里分享一个小知识——Eclipse核心部分的开发者就是早期的VS Code团队。嗯，所以他们没有两次踏入同一条河流。<strong>与Eclipse不同，VS Code选择了把插件关进盒子里</strong>。这样做首先解决的问题就是<strong>稳定性</strong>，这个问题对于VS Code来说尤为重要。都知道VS Code基于Electron，实质上是个Node.js环境，单线程，任何代码崩了都是灾难性后果。所以VS Code干脆不信任任何人，把插件们放到单独的进程里，任你折腾，主程序妥妥的。<br>","more":"</p>\n<h2 id=\"进程模型\"><a href=\"#进程模型\" class=\"headerlink\" title=\"进程模型\"></a>进程模型</h2><p>VSCode中包含主进程，渲染进程，同时因为VSCode提供了插件的扩展能力，又出于安全稳定性的考虑，图中又多了一个Extension Host，其实这个Extension Host也是一个独立的进程，用于运行我们的插件代码。并且同渲染进程一样，彼此都是独立互不影响的。Extension Host Process暴露了一些VSCode的API供插件开发者去使用。</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1574653513904\" alt></p>\n<p>至此，我们了解到VS Code里至少有3个进程：</p>\n<ul>\n<li>Electron Main Process：App主进程</li>\n<li>Electron Renderer Process：UI进程</li>\n<li>Extension Host Process：插件宿主进程，给插件提供执行环境</li>\n</ul>\n<p>其中Extension Host Process（每个VS Code窗体）只存在一个，所有插件都在该进程执行，<em>而不是每个插件一个独立进程</em></p>\n<p>注意，插件宿主进程是个<em>普通的Node进程</em>（<code>childProcess.fork()</code>出来的），并不是Electron进程，而且<em>被限制了不能使用electron。</em></p>\n<h3 id=\"进程间通信方式\"><a href=\"#进程间通信方式\" class=\"headerlink\" title=\"进程间通信方式\"></a>进程间通信方式</h3><p>Extension Host与Main之间的通信是通过<code>fork()</code>内置的IPC来完成的，具体如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Support logging from extension host</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>._extensionHostProcess.on(<span class=\"string\">'message'</span>, msg =&gt; &#123;</span><br><span class=\"line\"> <span class=\"keyword\">if</span> (msg &amp;&amp; (&lt;IRemoteConsoleLog&gt;msg).type === '__$console') &#123;</span><br><span class=\"line\">   this._logExtensionHostMessage(&lt;IRemoteConsoleLog&gt;msg);</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这里只是单向通信（<code>插件 -&gt; Main</code>），实际上可以通过<code>this._extensionHostProcess.send({msg})</code>完成另一半（<code>Main -&gt; 插件</code>）。</p>\n<p>P.S.关于进程间通信的更多信息，请查看Nodejs进程间通信。</p>\n<h2 id=\"扩展能力\"><a href=\"#扩展能力\" class=\"headerlink\" title=\"扩展能力\"></a>扩展能力</h2><p>VS Code插件<strong>不适合做UI定制</strong>，vscode为插件提供了丰富的扩展能力，但<em>不允许插件直接访问底层UI DOM</em>（也就是说插件难以改变IDE外观，UI定制受限），UI DOM这一层可能会随着优化频繁变动，VS Code不希望这些优化项受限于插件依赖，所以干脆把UI定制能力限制起来，除UI定制之外的，IDE相关的功能型特性都是支持扩展的，如基础的语法高亮/API提示、引用跳转（转到定义）/文件搜索、主题定制，高级的debug协议等等。</p>\n<p>P.S.实际上，非要扩展UI，也是有办法的（逃出插件运行环境，但要费不少力气），具体见<a href=\"https://github.com/Microsoft/vscode/issues/3011\" target=\"_blank\" rel=\"noopener\">access electron API from vscode extension</a>。</p>\n<h2 id=\"运行环境\"><a href=\"#运行环境\" class=\"headerlink\" title=\"运行环境\"></a>运行环境</h2><p>为了性能与兼容性，<em>插件在独立的进程（称为extension host process）中运行</em>，并且不允许直接访问DOM，所以提供了一套内置的UI组件，比如智能提示（IntelliSense）</p>\n<p>所以插件崩溃或无响应不影响IDE正常运行，例如：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">activate</span>(<span class=\"params\">context: vscode.ExtensionContext</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// hang up</span></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个插件的死循环并不影响IDE的正常使用和其它插件的加载/激活，但在进程列表能够看到Code Helper的CPU占用接近100%，<em>进程级沙箱</em>保证了插件机制的稳定性。</p>\n<h2 id=\"核心理念\"><a href=\"#核心理念\" class=\"headerlink\" title=\"核心理念\"></a>核心理念</h2><h3 id=\"稳定性：插件隔离\"><a href=\"#稳定性：插件隔离\" class=\"headerlink\" title=\"稳定性：插件隔离\"></a>稳定性：插件隔离</h3><p>插件可能会影响启动性能和IDE自身的稳定性，所以通过进程隔离来解决这个问题，插件运行在独立的进程中，不影响IDE及其启动时间。这样做是从用户角度考虑的，希望<em>用户对IDE拥有完全的控制力</em>，无论插件在做什么，都不影响IDE基本功能的正常使用。</p>\n<p>P.S.extension host process是个特殊的Node进程，能够访问VS Code扩展API，VS Code也对这种进程提供了debug支持。</p>\n<h3 id=\"性能：插件激活\"><a href=\"#性能：插件激活\" class=\"headerlink\" title=\"性能：插件激活\"></a>性能：插件激活</h3><p><strong>插件都是懒加载的</strong>（as late as possible），只在特定场景才加载/激活，所有在此之前也不耗费内存等资源。实现上是插件注册特定激活事件（activation events），由IDE来触发执行，比如markdown插件只在用户代开md文件时才需要激活。</p>\n<h4 id=\"激活事件-Activation-Events\"><a href=\"#激活事件-Activation-Events\" class=\"headerlink\" title=\"激活事件(Activation Events)\"></a>激活事件(Activation Events)</h4><p>vscode插件拥有6种激活方式：</p>\n<ul>\n<li>onLanguage:${language} 打开特定语言的文档</li>\n<li>onCommand:${command} 通过Command Palette执行特定命令</li>\n<li>onDebug 进入调试模式</li>\n<li>workspaceContains:${toplevelfilename} 打开的文件夹里含有特定文件</li>\n<li>onView:${viewId} 展开指定view</li>\n<li>* 打开IDE就激活</li>\n</ul>\n<p>除<code>&quot;activationEvents&quot;: [&quot;*&quot;]</code>外都是条件激活，只在特定场景或满足特定条件时才加载/激活插件。</p>\n<h5 id=\"activationEvents-onLanguage\"><a href=\"#activationEvents-onLanguage\" class=\"headerlink\" title=\"activationEvents.onLanguage\"></a>activationEvents.onLanguage</h5><ul>\n<li>当某种语言的文件被打开时，该扩展就会被激活。</li>\n<li>该扩展使用语言标记符（a language identifier value）。</li>\n<li>可以在<code>activationEvents</code>数组中声明多种语言。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;onLanguage:json&quot;,</span><br><span class=\"line\">    &quot;onLanguage:markdown&quot;,</span><br><span class=\"line\">    &quot;onLanguage:typescript&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents-onCommand\"><a href=\"#activationEvents-onCommand\" class=\"headerlink\" title=\"activationEvents.onCommand\"></a>activationEvents.onCommand</h5><p>调用命令就会激活该扩展。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;onCommand:extension.sayHello&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents-onDebug\"><a href=\"#activationEvents-onDebug\" class=\"headerlink\" title=\"activationEvents.onDebug\"></a>activationEvents.onDebug</h5><p>启动调试之前会激活该事件。</p>\n<p>还有两个更细粒度的激活事件：</p>\n<ul>\n<li>onDebugInitialConfigurations:在调用DebugConfigurationProvider的provideDebugConfigurations方法之前会被调用。</li>\n<li>onDebugResolve:type:在调用DebugConfigurationProvider的resolveDebugConfiguration方法之前会被调用。</li>\n</ul>\n<p>经验法则：如果该调试扩展是轻量级的，就使用onDebug。 如果是重量级的，就使用onDebugInitialConfigurations或者onDebugResolve，使用哪一个取决于DebugConfigurationProvider是否实现了provideDebugConfigurations或者resolveDebugConfiguration方法。</p>\n<h5 id=\"activationEvents-workspaceContains\"><a href=\"#activationEvents-workspaceContains\" class=\"headerlink\" title=\"activationEvents.workspaceContains\"></a>activationEvents.workspaceContains</h5><p>每当打开文件夹，并且该文件夹至少匹配一个与glob pattern有关的文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;workspaceContains:**/.editorconfig&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents-onFileSystem\"><a href=\"#activationEvents-onFileSystem\" class=\"headerlink\" title=\"activationEvents.onFileSystem\"></a>activationEvents.onFileSystem</h5><p>读取到特定格式(specific scheme)的文件或者文件夹，就会激活该扩展，特定格式通常是指文件格式(file-scheme)。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;onFileSystem:sftp&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents-onView\"><a href=\"#activationEvents-onView\" class=\"headerlink\" title=\"activationEvents.onView\"></a>activationEvents.onView</h5><p>打开指定ID的视图，该扩展就会被激活。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;activationEvents&quot;: [</span><br><span class=\"line\">    &quot;onView:nodeDependencies&quot;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h5 id=\"activationEvents\"><a href=\"#activationEvents\" class=\"headerlink\" title=\"activationEvents.*\"></a>activationEvents.*</h5><ul>\n<li>只要vscode启动，该扩展就会被激活。</li>\n<li>为了更好地用户体验，仅当使用其他激活方式组合无法实现功能时使用该激活事件。</li>\n<li>扩展可以监听多个激活事件，这比使用<code>*</code>要好。</li>\n</ul>\n<h4 id=\"插件清单文件-Extension-Manifest-File\"><a href=\"#插件清单文件-Extension-Manifest-File\" class=\"headerlink\" title=\"插件清单文件(Extension Manifest File)\"></a>插件清单文件(Extension Manifest File)</h4><p>清单文件用来描述插件的meta信息，直接把<code>package.json</code>作为清单文件，并增加了一些特有字段，比如触发插件加载的激活事件（<code>activation events</code>）、插件想要增强的扩展点（<code>contribution points</code>）。</p>\n<p>IDE在启动过程中扫一遍插件清单文件，UI相关的就扩展UI，UI无关的就把扩展点与插件功能关联起来。</p>\n<p>另外，由于插件的执行环境是Node进程，所以npm package都是可用的，依赖模块同样声明在<code>package.json</code>里。<em>注意</em>，用户安装插件时<em>不会</em>自动<code>npm install</code>，所以需要在发布插件前把依赖模块打包进去，具体见<a href=\"https://code.visualstudio.com/docs/extensionAPI/patterns-and-principles#_installation-and-packaging\" target=\"_blank\" rel=\"noopener\">Installation and Packaging</a>。</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>必须</th>\n<th>类型</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>name</td>\n<td>Y</td>\n<td>string</td>\n<td>扩展的名称，全小写，没有空格</td>\n</tr>\n<tr>\n<td>version</td>\n<td>Y</td>\n<td>string</td>\n<td>兼容版本</td>\n</tr>\n<tr>\n<td>publisher</td>\n<td>Y</td>\n<td>string</td>\n<td>发布名称</td>\n</tr>\n<tr>\n<td>engines</td>\n<td>Y</td>\n<td>object</td>\n<td>扩展能够兼容的最小的VS Code代码版本，不能为<code>*</code>。例如^0.10.5表示扩展能够运行的最小的VS Code版本为0.10.5</td>\n</tr>\n<tr>\n<td>license</td>\n<td>N</td>\n<td>string</td>\n<td>许可</td>\n</tr>\n<tr>\n<td>displayName</td>\n<td>N</td>\n<td>string</td>\n<td>市场中显示的扩展的名称</td>\n</tr>\n<tr>\n<td>description</td>\n<td>N</td>\n<td>string</td>\n<td>简短描述您的扩展是什么和做了什么</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>N</td>\n<td>string[]</td>\n<td>扩展所属的类别: [Programming Languages, Snippets, Linters, Themes, Debuggers, Formatters, Keymaps, SCM Providers, Other, Extension Packs, Language Packs]</td>\n</tr>\n<tr>\n<td>keywords</td>\n<td>N</td>\n<td>array</td>\n<td>关键词，使扩展更容易被发现</td>\n</tr>\n<tr>\n<td>main</td>\n<td>N</td>\n<td>string</td>\n<td>扩展入口</td>\n</tr>\n<tr>\n<td>contributes</td>\n<td>N</td>\n<td>object</td>\n<td>扩展描述对象</td>\n</tr>\n<tr>\n<td>activationEvents</td>\n<td>N</td>\n<td>array</td>\n<td>激活事件数组</td>\n</tr>\n<tr>\n<td>badges</td>\n<td>N</td>\n<td>array</td>\n<td>显示在市场侧栏的徽标，分别表示url、href、description</td>\n</tr>\n<tr>\n<td>markdown</td>\n<td>N</td>\n<td>string</td>\n<td>控制扩展市场上使用的markdown渲染引擎，要么是<code>github</code>(default)要么是<code>standard</code></td>\n</tr>\n<tr>\n<td>qna</td>\n<td>N</td>\n<td>marketplace (default), string, false</td>\n<td>控制市场上<code>Q &amp; A</code>链接</td>\n</tr>\n<tr>\n<td>dependencies</td>\n<td>N</td>\n<td>object</td>\n<td>运行时需要的NodeJS依赖。</td>\n</tr>\n<tr>\n<td>devDependencies</td>\n<td>N</td>\n<td>object</td>\n<td>开发时需要的NodeJS依赖。</td>\n</tr>\n<tr>\n<td>extensionDependencies</td>\n<td>N</td>\n<td>array</td>\n<td>此扩展所依赖的扩展的id集合。当该扩展被安装时，所依赖的扩展会一并被安装。扩展的id总是<code>${publisher}.${name}</code></td>\n</tr>\n<tr>\n<td>scripts</td>\n<td>N</td>\n<td>object</td>\n<td>与npm的脚本完全相同，但是带有额外的VS代码特定字段。</td>\n</tr>\n<tr>\n<td>icon</td>\n<td>N</td>\n<td>string</td>\n<td>至少128x128像素的图标路径(视网膜屏幕256 x256)</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"扩展点（Contribution-Points）\"><a href=\"#扩展点（Contribution-Points）\" class=\"headerlink\" title=\"扩展点（Contribution Points）\"></a>扩展点（Contribution Points）</h4><p>即支持的扩展类型，都声明在<code>package.json/contributes</code>下，包括：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configuration 插件配置项，用户可以通过Settings设置</span><br><span class=\"line\">configurationDefaults 插件配置项默认值</span><br><span class=\"line\">commands  添加命令，用户可以通过Command Palette输入特定命令激活插件功能</span><br><span class=\"line\">menus     添加与命令关联的菜单项，用户点击菜单项时执行对应命令</span><br><span class=\"line\">keybindings 添加与命令关联的快捷键，用户按下特定快捷键时执行对应命令</span><br><span class=\"line\">languages 与文件类型建立关联或扩展新语言，用户打开（满足某些要求的）特定文件类型时执行对应命令</span><br><span class=\"line\">debuggers 添加debugger，通过VS Code debug协议与IDE通信</span><br><span class=\"line\">breakpoints 配合debuggers，声明对debugger支持的（编程）语言类型</span><br><span class=\"line\">grammars 新增TextMate语法描述，语法高亮</span><br><span class=\"line\">themes 添加定制主题</span><br><span class=\"line\">snippets 添加代码片段</span><br><span class=\"line\">jsonValidation 添加json格式校验</span><br><span class=\"line\">views 新增左侧文件查看器视图和调试视图分栏</span><br><span class=\"line\">problemMatchers 添加错误匹配，从lint结果解析出error，warning等</span><br><span class=\"line\">problemPatterns 配合problemMatchers，定义匹配模式</span><br></pre></td></tr></table></figure>\n<p><code>menus</code>是<em>唯一的UI扩展官方途径</em>，支持扩展的菜单具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Command Palette搜索框下方菜单 commandPalette</span><br><span class=\"line\">文件查看器右键菜单 explorer/context</span><br><span class=\"line\">编辑器</span><br><span class=\"line\">  右键菜单 editor/context</span><br><span class=\"line\">  标题栏菜单 editor/title</span><br><span class=\"line\">  标题栏右键菜单 editor/title/context</span><br><span class=\"line\">调试视图</span><br><span class=\"line\">  调用栈右键菜单 debug/callstack/context</span><br><span class=\"line\">SCM（源码管理）视图</span><br><span class=\"line\">  标题栏菜单 scm/title</span><br><span class=\"line\">  文件分组菜单 scm/resourceGroup/context</span><br><span class=\"line\">  文件状态菜单 scm/resource/context</span><br><span class=\"line\">  文件变动菜单 scm/change/title</span><br><span class=\"line\">左侧视图</span><br><span class=\"line\">  文件查看器分栏 view/title</span><br><span class=\"line\">  调试视图分栏 view/item/context</span><br></pre></td></tr></table></figure>\n<h4 id=\"扩展API\"><a href=\"#扩展API\" class=\"headerlink\" title=\"扩展API\"></a>扩展API</h4><h5 id=\"设计原则\"><a href=\"#设计原则\" class=\"headerlink\" title=\"设计原则\"></a>设计原则</h5><ul>\n<li>基于Promise：异步操作都用Promise来描述</li>\n<li>取消token：传入<code>CancellationToken</code>作为额外参数来检查取消状态，以及接收取消通知</li>\n<li>可释放式资源管理：持有的资源都需要手动释放，例如事件监听，命令，UI交互等</li>\n<li>事件API：调用订阅方法（<code>on[Will|Did]VerbNoun</code>）传入listener（接收<code>event</code>参数）返回Disposable</li>\n<li>严格空检查：通过TypeScript严格区分<code>undefined</code>和<code>null</code></li>\n</ul>\n<h5 id=\"api概览\"><a href=\"#api概览\" class=\"headerlink\" title=\"api概览\"></a>api概览</h5><p>API按命名空间组织，全局命名空间如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commands 执行/注册命令，IDE自身的和其它插件注册的命令都可以，如executeCommand</span><br><span class=\"line\">debug 调试相关API，比如startDebugging</span><br><span class=\"line\">env IDE相关的环境信息，比如machineId, sessionId</span><br><span class=\"line\">extensions 跨插件API调用，extensionDependency声明插件依赖</span><br><span class=\"line\">languages 编程语言相关API，如createDiagnosticCollection, registerDocumentFormattingEditProvider</span><br><span class=\"line\">scm 源码版本控制API，如createSourceControl</span><br><span class=\"line\">window 编辑器窗体相关API，如onDidChangeTextEditorSelection, createTerminal, showTextDocument</span><br><span class=\"line\">workspace 工作空间级API（打开了文件夹才有工作空间），如findFiles, openTextDocument, saveAll</span><br></pre></td></tr></table></figure>\n<p>比如可以通过<code>workspace.findFiles + languages.registerDefinitionProvider</code>实现Haste的<em>全局模块引用跳转支持</em></p>\n<p>另外，一些API以命令形式提供（即上面提到的“IDE自身的”命令），例如<code>vscode.previewHtml</code>、<code>vscode.openFolder</code>、<code>editorScroll</code>等等。</p>\n<h2 id=\"注入机制\"><a href=\"#注入机制\" class=\"headerlink\" title=\"注入机制\"></a>注入机制</h2><p>在使用vscode提供的api时，需要引入<code>vscode</code>模块访问插件可用的API：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import * as vscode from &apos;vscode&apos;</span><br></pre></td></tr></table></figure>\n<p>但是我们发现在<code>node_modules</code>下并没有<code>vscode</code>模块，而且<code>vscode</code>模块也名没被<code>define()</code>过，看起来我们<code>require</code>了一个不存在的模块，那么，这个东西是哪里来的？</p>\n<p>对<code>require(&#39;vscode&#39;)</code>的过程进行debug，很容易发现做过手脚的地方：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// ref: src/vs/workbench/api/node/extHost.api.impl.ts</span><br><span class=\"line\">function defineAPI(factory: IExtensionApiFactory, extensionPaths: TernarySearchTree&lt;IExtensionDescription&gt;): void &#123; // each extension is meant to get its own api implementation</span><br><span class=\"line\"> const extApiImpl = new Map&lt;string, typeof vscode&gt;();</span><br><span class=\"line\"> let defaultApiImpl: typeof vscode; const node_module = &lt;any&gt;require.__$__nodeRequire(&apos;module&apos;);</span><br><span class=\"line\"> const original = node_module._load;</span><br><span class=\"line\"> node_module._load = function load(request, parent, isMain) &#123;</span><br><span class=\"line\">   if (request !== &apos;vscode&apos;) &#123;</span><br><span class=\"line\">     return original.apply(this, arguments);</span><br><span class=\"line\">   &#125;   // get extension id from filename and api for extension</span><br><span class=\"line\">   const ext = extensionPaths.findSubstr(parent.filename);</span><br><span class=\"line\">   if (ext) &#123;</span><br><span class=\"line\">     let apiImpl = extApiImpl.get(ext.id);</span><br><span class=\"line\">     if (!apiImpl) &#123;</span><br><span class=\"line\">       apiImpl = factory(ext);</span><br><span class=\"line\">       extApiImpl.set(ext.id, apiImpl);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">     return apiImpl;</span><br><span class=\"line\">   &#125;   // fall back to a default implementation</span><br><span class=\"line\">   if (!defaultApiImpl) &#123;</span><br><span class=\"line\">     defaultApiImpl = factory(nullExtensionDescription);</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   return defaultApiImpl;</span><br><span class=\"line\"> &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>Module._load()</code>方法被劫持了，遇到<code>vscode</code>返回一个虚拟模块，叫做<code>apiImpl</code>。<em>注意</em>，每个插件拿到的API都是独立的（可能是出于插件安全隔离考虑，避免劫持API影响其它插件）。</p>\n<h2 id=\"插件运行\"><a href=\"#插件运行\" class=\"headerlink\" title=\"插件运行\"></a>插件运行</h2><p>以vscode.window.setStatusBarMessage(‘Hello World’)为例：</p>\n<p>前文我们提到所有的 API 被定义在 extHost.api.impl.ts 文件的 createApiFactory 里，例如 vscode.window.setStatusBarMessage 的实现：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const window: typeof vscode.window = &#123;</span><br><span class=\"line\">  /* 省略部分代码 */</span><br><span class=\"line\">  setStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable&lt;any&gt;): vscode.Disposable \t\t&#123;</span><br><span class=\"line\">\t\t\treturn extHostStatusBar.setStatusBarMessage(text, timeoutOrThenable);</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">  /* 省略部分代码 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>实际调用的是 extHostStatusBar.setStatusBarMessage 函数，而 extHostStatusBar 则是 ExtHostStatusBar 的实例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const extHostStatusBar = new ExtHostStatusBar(rpcProtocol);</span><br></pre></td></tr></table></figure>\n<p>ExtHostStatusBar 包含了两个方法 createStatusBarEntry 和 setStatusBarMessage，createStatusBarEntry 返回了一个 ExtHostStatusBarEntry ，它被包装了一层代理，在 ExtHostStatusBar 被实例化化的同时也会产生一个 ExtHostStatusBarEntry 实例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export class ExtHostStatusBar &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private _proxy: MainThreadStatusBarShape;</span><br><span class=\"line\">  private _statusMessage: StatusBarMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(mainContext: IMainContext) &#123;</span><br><span class=\"line\">    // 获取代理</span><br><span class=\"line\">    this._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);</span><br><span class=\"line\">    // 传入 this, StatusBarMessage 中也随即实例化了一个 ExtHostStatusBarEntry</span><br><span class=\"line\">    this._statusMessage = new StatusBarMessage(this);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* 省略部分代码 */</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class StatusBarMessage &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  private _item: StatusBarItem;</span><br><span class=\"line\">  private _messages: &#123; message: string &#125;[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(statusBar: ExtHostStatusBar) &#123;</span><br><span class=\"line\">    // 调用 createStatusBarEntry </span><br><span class=\"line\">    this._item = statusBar.createStatusBarEntry(void 0, ExtHostStatusBarAlignment.Left, Number.MIN_VALUE);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  /* 省略部分代码 */</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>而在setStatusBarMessage方法中，主要是调用的this._statusMessage.setMessage(text);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable&lt;any&gt;): Disposable &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tconst d = this._statusMessage.setMessage(text);// 这一句</span><br><span class=\"line\">\t\tlet handle: any;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tif (typeof timeoutOrThenable === &apos;number&apos;) &#123;</span><br><span class=\"line\">\t\t\thandle = setTimeout(() =&gt; d.dispose(), timeoutOrThenable);</span><br><span class=\"line\">\t\t&#125; else if (typeof timeoutOrThenable !== &apos;undefined&apos;) &#123;</span><br><span class=\"line\">\t\t\ttimeoutOrThenable.then(() =&gt; d.dispose(), () =&gt; d.dispose());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\treturn new Disposable(() =&gt; &#123;</span><br><span class=\"line\">\t\t\td.dispose();</span><br><span class=\"line\">\t\t\tclearTimeout(handle);</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<p>而 this._statusMessage.setMessage 方法经过层层调用，最终调用了 ExtHostStatusBarEntry 实例的 update 方法，也就是前面的 StatusBarMessage 构造函数中的 this._item.update，而这里就到了重头戏，update 方法中包含了一个 延时为 0 的 setTimeout ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private update(): void &#123;</span><br><span class=\"line\">\t\tif (this._disposed || !this._visible) &#123;</span><br><span class=\"line\">\t\t\treturn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tclearTimeout(this._timeoutHandle);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t// Defer the update so that multiple changes to setters dont cause a redraw each</span><br><span class=\"line\">\t\tthis._timeoutHandle = setTimeout(() =&gt; &#123;</span><br><span class=\"line\">\t\t\tthis._timeoutHandle = undefined;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// Set to status bar</span><br><span class=\"line\">\t\t\tthis._proxy.$setEntry(this.id, this._statusId, this._statusName, this.text, this.tooltip, this.command, this.color,</span><br><span class=\"line\">\t\t\t\tthis._alignment === ExtHostStatusBarAlignment.Left ? MainThreadStatusBarAlignment.LEFT : MainThreadStatusBarAlignment.RIGHT,</span><br><span class=\"line\">\t\t\t\tthis._priority);</span><br><span class=\"line\">\t\t&#125;, 0);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的_proxy是通过依赖注入引入的mainThreadStatusBat, 具体则来自：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">constructor(mainContext: IMainContext) &#123;</span><br><span class=\"line\">\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);</span><br><span class=\"line\">\t\tthis._statusMessage = new StatusBarMessage(this);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的 IMainContext 其实就是继承了 IRPCProtocol 的一个别名而已，new ExtHostStatusBar 的参数是一个 rpcProtocol 实例，它被定义在 src/vs/workbench/services/extensions/node/rpcProtocol.ts 中，我们重点看一下 getProxy 的实现</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public getProxy&lt;T&gt;(identifier: ProxyIdentifier&lt;T&gt;): T &#123;</span><br><span class=\"line\">  // 这里只是根据对应的 identifier 生成对应的 scope 而已，插件调用和 API 的调用一模一样比较方便一些</span><br><span class=\"line\">  const rpcId = identifier.nid;</span><br><span class=\"line\">  // 例如 StatusBar 的 identifier.nid 就是 &apos;MainThreadStatusBar&apos;</span><br><span class=\"line\">  if (!this._proxies[rpcId]) &#123;</span><br><span class=\"line\">    // 缓存中没有代理则生成新的代理</span><br><span class=\"line\">    this._proxies[rpcId] = this._createProxy(rpcId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  // 返回代理后的对象</span><br><span class=\"line\">  return this._proxies[rpcId];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// 创建代理</span><br><span class=\"line\">private _createProxy&lt;T&gt;(rpcId: number): T &#123;</span><br><span class=\"line\">  let handler = &#123;</span><br><span class=\"line\">    get: (target: any, name: string) =&gt; &#123;</span><br><span class=\"line\">      // target 即表示 scope，name 即为被调用方法名</span><br><span class=\"line\">      if (!target[name] &amp;&amp; name.charCodeAt(0) === CharCode.DollarSign) &#123;</span><br><span class=\"line\">        target[name] = (...myArgs: any[]) =&gt; &#123;</span><br><span class=\"line\">          // 插件中的 API 实际被代理到 remoteCall，因为这是一个 RPC 协议</span><br><span class=\"line\">\t  \t\treturn this._remoteCall(rpcId, name, myArgs);</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      return target[name];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  // 返回 API 代理</span><br><span class=\"line\">  return new Proxy(Object.create(null), handler);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>_createProxy 返回的是一个代理对象，即它代理了主线程中真正实现这些 API 的对象，例如 ‘MainThreadStatusBar’ 返回的是一个 MainThreadStatusBarShape 类型的代理。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export interface MainThreadStatusBarShape extends IDisposable &#123;</span><br><span class=\"line\">  $setEntry(id: number, extensionId: string, text: string, tooltip: string, command: string, color: string | ThemeColor, alignment: MainThreadStatusBarAlignment, priority: number): void;</span><br><span class=\"line\">  $dispose(id: number): void;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>插件 API 定义中并没有实现这个接口，它只需要被主线程中对应的模块实现即可，前面我们说到 setStatusMessage 最终调用了 this._proxy.$setEntry。</p>\n<p>_remoteCall 里会调用 RPCProcotol 的静态方法 serializeRequest 将 rpcId 方法名以及参数序列化成一个 Buffer 并发送给主线程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const msg = MessageIO.serializeRequest(req, rpcId, methodName, args, !!cancellationToken, this._uriReplacer);</span><br><span class=\"line\">// 省略部分代码</span><br><span class=\"line\">this._protocol.send(msg);</span><br></pre></td></tr></table></figure>\n<p>关于主线程中接收到消息如何处理其实已经不用多说了，根据 rpcId 找到对应的 Services 以及方法，传入参数即可。</p>\n<h2 id=\"最后\"><a href=\"#最后\" class=\"headerlink\" title=\"最后\"></a>最后</h2><p>VS Code像一颗耀眼的星星，吸引着成千上万开发者为其添砖加瓦。从VS Code的成功中，我们看到了好的设计和工程实践能创造多少奇迹。放眼软件产业，各个层面的模式不断被刷新，让人激动之余，也要求从业者不断提高技能水平。从个人学习的角度来看，了解这些模式诞生的前因后果，理解工程实践中的决策过程是非常有利于提高工程能力的。</p>"},{"title":"使用jenkins进行前端项目自动部署(ubuntu)","abbrlink":27150,"date":"2018-12-24T01:49:23.000Z","_content":"Jenkins 是一款业界流行的开源持续集成工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。\n<!-- more -->\n\n## 安装\n由于 jenkins是基于`java`环境运行的，所以首先需要安装`java`环境。\n### 1.安装依赖包，使得add-apt-repository命令可以进行\n```\napt-get install software-properties-common\n```\n### 2.通过add-apt-repository加载第三方的开源软件源\n```\nsudo add-apt-repository ppa:webupd8team/java\n```\n### 3.更新软件包列表，并安装jdk\n```\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n```\n也可以安装 `openjdk `\n\n```\nsudo apt-get install openjdk-8-jdk\n```\n安装器会提示同意`oracle`的服务条款，选择`ok`,然后选择`yes` 即可。\n### 4.通过查看java版本，来测试java环境是否安装成功\n```\njava -version\njava version \"1.8.0_171\"\nJava(TM) SE Runtime Environment (build 1.8.0_171-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)\n```\n### 5.安装jenkins\n将存储库密钥添加到系统。\n```\nwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\n```\n我们将Debian包存储库地址附加到服务器的`sources.list`\n```\necho deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list\n```\n更新存储库\n```\nsudo apt-get update\n```\n安装`Jenkins`\n```\nsudo apt-get install jenkins\n```\n安装完成后，jenkins的文件目录如下所示\n```\n安装目录：/var/lib/jenkins  \n日志目录：/var/log/jenkins/jenkins.log  \n```\n### 6.修改端口号\n```\nvi /etc/default/jenkins\n```\n### 7.启动\n```\nservice jenkins start \n```\n打开 `localhost:端口号`即可。\n![](https://pic.xiaohuochai.site/blog/jenkins1.png)\n然后在服务器的指定目录找到密码登录\n\n## 安装配置`Apache2`\n### 安装\n```\nsudo apt-get install apache2\n```\n### 配置多端口\n以8080为例\n```\nvi /etc/apache2/ports.conf\n```\n添加监听`Listen 8080`\n```\nvi /etc/apache2/sites-available/000-default.conf\n```\n添加 `<VirtualHost *:8080>` 内容\n例如:\n\n```\n<VirtualHost *:8080>\n  ServerAdmin masterlink\n  DocumentRoot /var/www/masterlink\n  ErrorLog ${APACHE_LOG_DIR}/error_masterlink.log\n  CustomLog ${APACHE_LOG_DIR}/access_masterlink.log combined\n</VirtualHost>\n```\n### 启动\n```\nservice apache2 start\n```\n\n### 问题解决\n如果打开页面提示无权限，则将该页面的路径加入配置：\n```\nvi /etc/apache2/apache2.conf\n```\n加入以下内容\n\n```\n<Directory /home/alan/app>\n  Options Indexes FollowSymLinks\n  AllowOverride None\n  Require all granted\n</Directory>\n\n```\n\n## 设置GitHub Hook\n### 配置GitHub\n在工程主页面点击右上角的”Settings”，再点击左侧”Webhooks”，然后点击“Add webhook”，如下图： \n![](https://img-blog.csdn.net/20180120180649159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如下图，在”Payload URL”位置填入webhook地址，再点击底部的”Add webhook按钮”，这样就完成webhook配置了，今后当前工程有代码提交，GitHub就会向此webhook地址发请求，通知Jenkins构建：\n![](https://img-blog.csdn.net/20180120181141062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 生成Personal access tokens\nJenkins访问GitHub工程的时候，有的操作是需要授权的，所以我们要在GitHub上生成授权的token给Jenkins使用，这就是Personal access tokens，生成步骤如下： \n\n登录GitHub，进入”Settings”页面，点击左下角的”Developer settings”，如下图： \n![](https://img-blog.csdn.net/20180101100023785?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n跳转到”Developer settings”页面后，点击左下角的“Personal access tokens”，如下图\n![](https://img-blog.csdn.net/20180101100149058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可能会提示输入GitHub密码，输入后跳转到创建token的页面，如下图所示，输入title，再勾选”repo”和”admin:repo_hook”，再点击底部的”Generate token”按钮，就能产生一个新的access token，将此字符串复制下来，后面jenkins任务中会用到： \n![](https://img-blog.csdn.net/20180101100900159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### Jenkins配置\nGitHub Plugin插件，在”系统管理->管理插件”位置检查此插件是否已经安装，没有的话请先安装；\n配置GitHub，点击“系统管理->系统设置”，如下图： \n![](https://img-blog.csdn.net/20180121093316581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在系统设置页面找到”GitHub”，配置一个”GitHub Server”，如下图，”API URL”填写”https://api.github.com“，”Credentials”位置如下图红框所示，选择”Add->Jenkins”： \n![](https://img-blog.csdn.net/20180121094004625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n弹出的页面中，”Kind”选择”Secret text”，”Secret”填入前面在GitHub上生成的Personal access tokens，Description随便写一些描述信息，如下图： \n![](https://img-blog.csdn.net/20180121094137737?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n填写完毕后，点击右侧的”Test connection”按钮，如果信息没有填错，显示的内容如下图所示： \n![](https://img-blog.csdn.net/20180121094800433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点击页面最底部的”保存”按钮；\n\n### 新建项目时\n#### 构建触发器\n![](https://img-blog.csdn.net/20180121105320208?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n#### 构建环境\n![](https://img-blog.csdn.net/20180121105737723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 其他指令\n### 免密码使用`sudo`直接使用`root`权限执行命令\nvi /etc/sudoers\n\n```\nalan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic\n```","source":"_posts/使用jenkins进行前端项目自动部署.md","raw":"---\ntitle: 使用jenkins进行前端项目自动部署(ubuntu)\ntags: 自动化\ncategories: 自动化\nabbrlink: 27150\ndate: 2018-12-24 09:49:23\n---\nJenkins 是一款业界流行的开源持续集成工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。\n<!-- more -->\n\n## 安装\n由于 jenkins是基于`java`环境运行的，所以首先需要安装`java`环境。\n### 1.安装依赖包，使得add-apt-repository命令可以进行\n```\napt-get install software-properties-common\n```\n### 2.通过add-apt-repository加载第三方的开源软件源\n```\nsudo add-apt-repository ppa:webupd8team/java\n```\n### 3.更新软件包列表，并安装jdk\n```\nsudo apt-get update\nsudo apt-get install oracle-java8-installer\n```\n也可以安装 `openjdk `\n\n```\nsudo apt-get install openjdk-8-jdk\n```\n安装器会提示同意`oracle`的服务条款，选择`ok`,然后选择`yes` 即可。\n### 4.通过查看java版本，来测试java环境是否安装成功\n```\njava -version\njava version \"1.8.0_171\"\nJava(TM) SE Runtime Environment (build 1.8.0_171-b11)\nJava HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)\n```\n### 5.安装jenkins\n将存储库密钥添加到系统。\n```\nwget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -\n```\n我们将Debian包存储库地址附加到服务器的`sources.list`\n```\necho deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list\n```\n更新存储库\n```\nsudo apt-get update\n```\n安装`Jenkins`\n```\nsudo apt-get install jenkins\n```\n安装完成后，jenkins的文件目录如下所示\n```\n安装目录：/var/lib/jenkins  \n日志目录：/var/log/jenkins/jenkins.log  \n```\n### 6.修改端口号\n```\nvi /etc/default/jenkins\n```\n### 7.启动\n```\nservice jenkins start \n```\n打开 `localhost:端口号`即可。\n![](https://pic.xiaohuochai.site/blog/jenkins1.png)\n然后在服务器的指定目录找到密码登录\n\n## 安装配置`Apache2`\n### 安装\n```\nsudo apt-get install apache2\n```\n### 配置多端口\n以8080为例\n```\nvi /etc/apache2/ports.conf\n```\n添加监听`Listen 8080`\n```\nvi /etc/apache2/sites-available/000-default.conf\n```\n添加 `<VirtualHost *:8080>` 内容\n例如:\n\n```\n<VirtualHost *:8080>\n  ServerAdmin masterlink\n  DocumentRoot /var/www/masterlink\n  ErrorLog ${APACHE_LOG_DIR}/error_masterlink.log\n  CustomLog ${APACHE_LOG_DIR}/access_masterlink.log combined\n</VirtualHost>\n```\n### 启动\n```\nservice apache2 start\n```\n\n### 问题解决\n如果打开页面提示无权限，则将该页面的路径加入配置：\n```\nvi /etc/apache2/apache2.conf\n```\n加入以下内容\n\n```\n<Directory /home/alan/app>\n  Options Indexes FollowSymLinks\n  AllowOverride None\n  Require all granted\n</Directory>\n\n```\n\n## 设置GitHub Hook\n### 配置GitHub\n在工程主页面点击右上角的”Settings”，再点击左侧”Webhooks”，然后点击“Add webhook”，如下图： \n![](https://img-blog.csdn.net/20180120180649159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n如下图，在”Payload URL”位置填入webhook地址，再点击底部的”Add webhook按钮”，这样就完成webhook配置了，今后当前工程有代码提交，GitHub就会向此webhook地址发请求，通知Jenkins构建：\n![](https://img-blog.csdn.net/20180120181141062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n### 生成Personal access tokens\nJenkins访问GitHub工程的时候，有的操作是需要授权的，所以我们要在GitHub上生成授权的token给Jenkins使用，这就是Personal access tokens，生成步骤如下： \n\n登录GitHub，进入”Settings”页面，点击左下角的”Developer settings”，如下图： \n![](https://img-blog.csdn.net/20180101100023785?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n跳转到”Developer settings”页面后，点击左下角的“Personal access tokens”，如下图\n![](https://img-blog.csdn.net/20180101100149058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n可能会提示输入GitHub密码，输入后跳转到创建token的页面，如下图所示，输入title，再勾选”repo”和”admin:repo_hook”，再点击底部的”Generate token”按钮，就能产生一个新的access token，将此字符串复制下来，后面jenkins任务中会用到： \n![](https://img-blog.csdn.net/20180101100900159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n### Jenkins配置\nGitHub Plugin插件，在”系统管理->管理插件”位置检查此插件是否已经安装，没有的话请先安装；\n配置GitHub，点击“系统管理->系统设置”，如下图： \n![](https://img-blog.csdn.net/20180121093316581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n在系统设置页面找到”GitHub”，配置一个”GitHub Server”，如下图，”API URL”填写”https://api.github.com“，”Credentials”位置如下图红框所示，选择”Add->Jenkins”： \n![](https://img-blog.csdn.net/20180121094004625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n弹出的页面中，”Kind”选择”Secret text”，”Secret”填入前面在GitHub上生成的Personal access tokens，Description随便写一些描述信息，如下图： \n![](https://img-blog.csdn.net/20180121094137737?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n填写完毕后，点击右侧的”Test connection”按钮，如果信息没有填错，显示的内容如下图所示： \n![](https://img-blog.csdn.net/20180121094800433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n点击页面最底部的”保存”按钮；\n\n### 新建项目时\n#### 构建触发器\n![](https://img-blog.csdn.net/20180121105320208?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n#### 构建环境\n![](https://img-blog.csdn.net/20180121105737723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n## 其他指令\n### 免密码使用`sudo`直接使用`root`权限执行命令\nvi /etc/sudoers\n\n```\nalan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic\n```","slug":"使用jenkins进行前端项目自动部署","published":1,"updated":"2020-03-09T03:01:45.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7np003a1q2dyst1f584","content":"<p>Jenkins 是一款业界流行的开源持续集成工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>由于 jenkins是基于<code>java</code>环境运行的，所以首先需要安装<code>java</code>环境。</p>\n<h3 id=\"1-安装依赖包，使得add-apt-repository命令可以进行\"><a href=\"#1-安装依赖包，使得add-apt-repository命令可以进行\" class=\"headerlink\" title=\"1.安装依赖包，使得add-apt-repository命令可以进行\"></a>1.安装依赖包，使得add-apt-repository命令可以进行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install software-properties-common</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-通过add-apt-repository加载第三方的开源软件源\"><a href=\"#2-通过add-apt-repository加载第三方的开源软件源\" class=\"headerlink\" title=\"2.通过add-apt-repository加载第三方的开源软件源\"></a>2.通过add-apt-repository加载第三方的开源软件源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:webupd8team/java</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-更新软件包列表，并安装jdk\"><a href=\"#3-更新软件包列表，并安装jdk\" class=\"headerlink\" title=\"3.更新软件包列表，并安装jdk\"></a>3.更新软件包列表，并安装jdk</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>\n<p>也可以安装 <code>openjdk</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n<p>安装器会提示同意<code>oracle</code>的服务条款，选择<code>ok</code>,然后选择<code>yes</code> 即可。</p>\n<h3 id=\"4-通过查看java版本，来测试java环境是否安装成功\"><a href=\"#4-通过查看java版本，来测试java环境是否安装成功\" class=\"headerlink\" title=\"4.通过查看java版本，来测试java环境是否安装成功\"></a>4.通过查看java版本，来测试java环境是否安装成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">java version &quot;1.8.0_171&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_171-b11)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-安装jenkins\"><a href=\"#5-安装jenkins\" class=\"headerlink\" title=\"5.安装jenkins\"></a>5.安装jenkins</h3><p>将存储库密钥添加到系统。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>\n<p>我们将Debian包存储库地址附加到服务器的<code>sources.list</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list</span><br></pre></td></tr></table></figure></p>\n<p>更新存储库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>安装<code>Jenkins</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，jenkins的文件目录如下所示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装目录：/var/lib/jenkins  </span><br><span class=\"line\">日志目录：/var/log/jenkins/jenkins.log</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-修改端口号\"><a href=\"#6-修改端口号\" class=\"headerlink\" title=\"6.修改端口号\"></a>6.修改端口号</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/default/jenkins</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-启动\"><a href=\"#7-启动\" class=\"headerlink\" title=\"7.启动\"></a>7.启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure>\n<p>打开 <code>localhost:端口号</code>即可。<br><img src=\"https://pic.xiaohuochai.site/blog/jenkins1.png\" alt><br>然后在服务器的指定目录找到密码登录</p>\n<h2 id=\"安装配置Apache2\"><a href=\"#安装配置Apache2\" class=\"headerlink\" title=\"安装配置Apache2\"></a>安装配置<code>Apache2</code></h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置多端口\"><a href=\"#配置多端口\" class=\"headerlink\" title=\"配置多端口\"></a>配置多端口</h3><p>以8080为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/apache2/ports.conf</span><br></pre></td></tr></table></figure></p>\n<p>添加监听<code>Listen 8080</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/apache2/sites-available/000-default.conf</span><br></pre></td></tr></table></figure></p>\n<p>添加 <code>&lt;VirtualHost *:8080&gt;</code> 内容<br>例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8080&gt;</span><br><span class=\"line\">  ServerAdmin masterlink</span><br><span class=\"line\">  DocumentRoot /var/www/masterlink</span><br><span class=\"line\">  ErrorLog $&#123;APACHE_LOG_DIR&#125;/error_masterlink.log</span><br><span class=\"line\">  CustomLog $&#123;APACHE_LOG_DIR&#125;/access_masterlink.log combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service apache2 start</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><p>如果打开页面提示无权限，则将该页面的路径加入配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure></p>\n<p>加入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory /home/alan/app&gt;</span><br><span class=\"line\">  Options Indexes FollowSymLinks</span><br><span class=\"line\">  AllowOverride None</span><br><span class=\"line\">  Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置GitHub-Hook\"><a href=\"#设置GitHub-Hook\" class=\"headerlink\" title=\"设置GitHub Hook\"></a>设置GitHub Hook</h2><h3 id=\"配置GitHub\"><a href=\"#配置GitHub\" class=\"headerlink\" title=\"配置GitHub\"></a>配置GitHub</h3><p>在工程主页面点击右上角的”Settings”，再点击左侧”Webhooks”，然后点击“Add webhook”，如下图：<br><img src=\"https://img-blog.csdn.net/20180120180649159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>如下图，在”Payload URL”位置填入webhook地址，再点击底部的”Add webhook按钮”，这样就完成webhook配置了，今后当前工程有代码提交，GitHub就会向此webhook地址发请求，通知Jenkins构建：<br><img src=\"https://img-blog.csdn.net/20180120181141062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt></p>\n<h3 id=\"生成Personal-access-tokens\"><a href=\"#生成Personal-access-tokens\" class=\"headerlink\" title=\"生成Personal access tokens\"></a>生成Personal access tokens</h3><p>Jenkins访问GitHub工程的时候，有的操作是需要授权的，所以我们要在GitHub上生成授权的token给Jenkins使用，这就是Personal access tokens，生成步骤如下： </p>\n<p>登录GitHub，进入”Settings”页面，点击左下角的”Developer settings”，如下图：<br><img src=\"https://img-blog.csdn.net/20180101100023785?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>跳转到”Developer settings”页面后，点击左下角的“Personal access tokens”，如下图<br><img src=\"https://img-blog.csdn.net/20180101100149058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>可能会提示输入GitHub密码，输入后跳转到创建token的页面，如下图所示，输入title，再勾选”repo”和”admin:repo_hook”，再点击底部的”Generate token”按钮，就能产生一个新的access token，将此字符串复制下来，后面jenkins任务中会用到：<br><img src=\"https://img-blog.csdn.net/20180101100900159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt></p>\n<h3 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h3><p>GitHub Plugin插件，在”系统管理-&gt;管理插件”位置检查此插件是否已经安装，没有的话请先安装；<br>配置GitHub，点击“系统管理-&gt;系统设置”，如下图：<br><img src=\"https://img-blog.csdn.net/20180121093316581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>在系统设置页面找到”GitHub”，配置一个”GitHub Server”，如下图，”API URL”填写”<a href=\"https://api.github.com“，”Credentials”位置如下图红框所示，选择”Add-&gt;Jenkins”：\" target=\"_blank\" rel=\"noopener\">https://api.github.com“，”Credentials”位置如下图红框所示，选择”Add-&gt;Jenkins”：</a><br><img src=\"https://img-blog.csdn.net/20180121094004625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>弹出的页面中，”Kind”选择”Secret text”，”Secret”填入前面在GitHub上生成的Personal access tokens，Description随便写一些描述信息，如下图：<br><img src=\"https://img-blog.csdn.net/20180121094137737?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>填写完毕后，点击右侧的”Test connection”按钮，如果信息没有填错，显示的内容如下图所示：<br><img src=\"https://img-blog.csdn.net/20180121094800433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>点击页面最底部的”保存”按钮；</p>\n<h3 id=\"新建项目时\"><a href=\"#新建项目时\" class=\"headerlink\" title=\"新建项目时\"></a>新建项目时</h3><h4 id=\"构建触发器\"><a href=\"#构建触发器\" class=\"headerlink\" title=\"构建触发器\"></a>构建触发器</h4><p><img src=\"https://img-blog.csdn.net/20180121105320208?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt></p>\n<h4 id=\"构建环境\"><a href=\"#构建环境\" class=\"headerlink\" title=\"构建环境\"></a>构建环境</h4><p><img src=\"https://img-blog.csdn.net/20180121105737723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt></p>\n<h2 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h2><h3 id=\"免密码使用sudo直接使用root权限执行命令\"><a href=\"#免密码使用sudo直接使用root权限执行命令\" class=\"headerlink\" title=\"免密码使用sudo直接使用root权限执行命令\"></a>免密码使用<code>sudo</code>直接使用<code>root</code>权限执行命令</h3><p>vi /etc/sudoers</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Jenkins 是一款业界流行的开源持续集成工具，广泛用于项目开发，具有自动化构建、测试和部署等功能。<br>","more":"</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>由于 jenkins是基于<code>java</code>环境运行的，所以首先需要安装<code>java</code>环境。</p>\n<h3 id=\"1-安装依赖包，使得add-apt-repository命令可以进行\"><a href=\"#1-安装依赖包，使得add-apt-repository命令可以进行\" class=\"headerlink\" title=\"1.安装依赖包，使得add-apt-repository命令可以进行\"></a>1.安装依赖包，使得add-apt-repository命令可以进行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install software-properties-common</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-通过add-apt-repository加载第三方的开源软件源\"><a href=\"#2-通过add-apt-repository加载第三方的开源软件源\" class=\"headerlink\" title=\"2.通过add-apt-repository加载第三方的开源软件源\"></a>2.通过add-apt-repository加载第三方的开源软件源</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo add-apt-repository ppa:webupd8team/java</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-更新软件包列表，并安装jdk\"><a href=\"#3-更新软件包列表，并安装jdk\" class=\"headerlink\" title=\"3.更新软件包列表，并安装jdk\"></a>3.更新软件包列表，并安装jdk</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install oracle-java8-installer</span><br></pre></td></tr></table></figure>\n<p>也可以安装 <code>openjdk</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure>\n<p>安装器会提示同意<code>oracle</code>的服务条款，选择<code>ok</code>,然后选择<code>yes</code> 即可。</p>\n<h3 id=\"4-通过查看java版本，来测试java环境是否安装成功\"><a href=\"#4-通过查看java版本，来测试java环境是否安装成功\" class=\"headerlink\" title=\"4.通过查看java版本，来测试java环境是否安装成功\"></a>4.通过查看java版本，来测试java环境是否安装成功</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -version</span><br><span class=\"line\">java version &quot;1.8.0_171&quot;</span><br><span class=\"line\">Java(TM) SE Runtime Environment (build 1.8.0_171-b11)</span><br><span class=\"line\">Java HotSpot(TM) 64-Bit Server VM (build 25.171-b11, mixed mode)</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-安装jenkins\"><a href=\"#5-安装jenkins\" class=\"headerlink\" title=\"5.安装jenkins\"></a>5.安装jenkins</h3><p>将存储库密钥添加到系统。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -q -O - https://pkg.jenkins.io/debian/jenkins-ci.org.key | sudo apt-key add -</span><br></pre></td></tr></table></figure></p>\n<p>我们将Debian包存储库地址附加到服务器的<code>sources.list</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo deb http://pkg.jenkins.io/debian-stable binary/ | sudo tee /etc/apt/sources.list.d/jenkins.list</span><br></pre></td></tr></table></figure></p>\n<p>更新存储库<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure></p>\n<p>安装<code>Jenkins</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install jenkins</span><br></pre></td></tr></table></figure></p>\n<p>安装完成后，jenkins的文件目录如下所示<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装目录：/var/lib/jenkins  </span><br><span class=\"line\">日志目录：/var/log/jenkins/jenkins.log</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"6-修改端口号\"><a href=\"#6-修改端口号\" class=\"headerlink\" title=\"6.修改端口号\"></a>6.修改端口号</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/default/jenkins</span><br></pre></td></tr></table></figure>\n<h3 id=\"7-启动\"><a href=\"#7-启动\" class=\"headerlink\" title=\"7.启动\"></a>7.启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service jenkins start</span><br></pre></td></tr></table></figure>\n<p>打开 <code>localhost:端口号</code>即可。<br><img src=\"https://pic.xiaohuochai.site/blog/jenkins1.png\" alt><br>然后在服务器的指定目录找到密码登录</p>\n<h2 id=\"安装配置Apache2\"><a href=\"#安装配置Apache2\" class=\"headerlink\" title=\"安装配置Apache2\"></a>安装配置<code>Apache2</code></h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install apache2</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置多端口\"><a href=\"#配置多端口\" class=\"headerlink\" title=\"配置多端口\"></a>配置多端口</h3><p>以8080为例<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/apache2/ports.conf</span><br></pre></td></tr></table></figure></p>\n<p>添加监听<code>Listen 8080</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/apache2/sites-available/000-default.conf</span><br></pre></td></tr></table></figure></p>\n<p>添加 <code>&lt;VirtualHost *:8080&gt;</code> 内容<br>例如:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;VirtualHost *:8080&gt;</span><br><span class=\"line\">  ServerAdmin masterlink</span><br><span class=\"line\">  DocumentRoot /var/www/masterlink</span><br><span class=\"line\">  ErrorLog $&#123;APACHE_LOG_DIR&#125;/error_masterlink.log</span><br><span class=\"line\">  CustomLog $&#123;APACHE_LOG_DIR&#125;/access_masterlink.log combined</span><br><span class=\"line\">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service apache2 start</span><br></pre></td></tr></table></figure>\n<h3 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h3><p>如果打开页面提示无权限，则将该页面的路径加入配置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/apache2/apache2.conf</span><br></pre></td></tr></table></figure></p>\n<p>加入以下内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Directory /home/alan/app&gt;</span><br><span class=\"line\">  Options Indexes FollowSymLinks</span><br><span class=\"line\">  AllowOverride None</span><br><span class=\"line\">  Require all granted</span><br><span class=\"line\">&lt;/Directory&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置GitHub-Hook\"><a href=\"#设置GitHub-Hook\" class=\"headerlink\" title=\"设置GitHub Hook\"></a>设置GitHub Hook</h2><h3 id=\"配置GitHub\"><a href=\"#配置GitHub\" class=\"headerlink\" title=\"配置GitHub\"></a>配置GitHub</h3><p>在工程主页面点击右上角的”Settings”，再点击左侧”Webhooks”，然后点击“Add webhook”，如下图：<br><img src=\"https://img-blog.csdn.net/20180120180649159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>如下图，在”Payload URL”位置填入webhook地址，再点击底部的”Add webhook按钮”，这样就完成webhook配置了，今后当前工程有代码提交，GitHub就会向此webhook地址发请求，通知Jenkins构建：<br><img src=\"https://img-blog.csdn.net/20180120181141062?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt></p>\n<h3 id=\"生成Personal-access-tokens\"><a href=\"#生成Personal-access-tokens\" class=\"headerlink\" title=\"生成Personal access tokens\"></a>生成Personal access tokens</h3><p>Jenkins访问GitHub工程的时候，有的操作是需要授权的，所以我们要在GitHub上生成授权的token给Jenkins使用，这就是Personal access tokens，生成步骤如下： </p>\n<p>登录GitHub，进入”Settings”页面，点击左下角的”Developer settings”，如下图：<br><img src=\"https://img-blog.csdn.net/20180101100023785?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>跳转到”Developer settings”页面后，点击左下角的“Personal access tokens”，如下图<br><img src=\"https://img-blog.csdn.net/20180101100149058?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>可能会提示输入GitHub密码，输入后跳转到创建token的页面，如下图所示，输入title，再勾选”repo”和”admin:repo_hook”，再点击底部的”Generate token”按钮，就能产生一个新的access token，将此字符串复制下来，后面jenkins任务中会用到：<br><img src=\"https://img-blog.csdn.net/20180101100900159?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt></p>\n<h3 id=\"Jenkins配置\"><a href=\"#Jenkins配置\" class=\"headerlink\" title=\"Jenkins配置\"></a>Jenkins配置</h3><p>GitHub Plugin插件，在”系统管理-&gt;管理插件”位置检查此插件是否已经安装，没有的话请先安装；<br>配置GitHub，点击“系统管理-&gt;系统设置”，如下图：<br><img src=\"https://img-blog.csdn.net/20180121093316581?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>在系统设置页面找到”GitHub”，配置一个”GitHub Server”，如下图，”API URL”填写”<a href=\"https://api.github.com“，”Credentials”位置如下图红框所示，选择”Add-&gt;Jenkins”：\" target=\"_blank\" rel=\"noopener\">https://api.github.com“，”Credentials”位置如下图红框所示，选择”Add-&gt;Jenkins”：</a><br><img src=\"https://img-blog.csdn.net/20180121094004625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>弹出的页面中，”Kind”选择”Secret text”，”Secret”填入前面在GitHub上生成的Personal access tokens，Description随便写一些描述信息，如下图：<br><img src=\"https://img-blog.csdn.net/20180121094137737?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>填写完毕后，点击右侧的”Test connection”按钮，如果信息没有填错，显示的内容如下图所示：<br><img src=\"https://img-blog.csdn.net/20180121094800433?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt><br>点击页面最底部的”保存”按钮；</p>\n<h3 id=\"新建项目时\"><a href=\"#新建项目时\" class=\"headerlink\" title=\"新建项目时\"></a>新建项目时</h3><h4 id=\"构建触发器\"><a href=\"#构建触发器\" class=\"headerlink\" title=\"构建触发器\"></a>构建触发器</h4><p><img src=\"https://img-blog.csdn.net/20180121105320208?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt></p>\n<h4 id=\"构建环境\"><a href=\"#构建环境\" class=\"headerlink\" title=\"构建环境\"></a>构建环境</h4><p><img src=\"https://img-blog.csdn.net/20180121105737723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvYm9saW5nX2NhdmFscnk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt></p>\n<h2 id=\"其他指令\"><a href=\"#其他指令\" class=\"headerlink\" title=\"其他指令\"></a>其他指令</h2><h3 id=\"免密码使用sudo直接使用root权限执行命令\"><a href=\"#免密码使用sudo直接使用root权限执行命令\" class=\"headerlink\" title=\"免密码使用sudo直接使用root权限执行命令\"></a>免密码使用<code>sudo</code>直接使用<code>root</code>权限执行命令</h3><p>vi /etc/sudoers</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alan_ubuntu ALL=(ALL) NOPASSWD: /usr/sbin/servic</span><br></pre></td></tr></table></figure>"},{"title":"再见了，面向对象编程[英文翻译]","abbrlink":29251,"date":"2019-02-20T10:48:23.000Z","_content":"## 再见了，面向对象编程\n一堂教你解决问题的课程\n原文链接：[Goodbye, Object Oriented Programming](https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53)\n原文作者：[Charles Scalfani](https://medium.com/@cscalfani)\n![](https://cdn-images-1.medium.com/max/1600/1*cBFSQ9Ytv_D0jwGtpuL5WA.png)\n我使用面向对象的语言编程已经几十年了，我最先使用的面向对象编程的语言是`C++`，然后是`.NET`和`Java`。\n我不遗余力得去发扬着面向对象的三大特征：继承封装和多态。\n未完待续。。。","source":"_posts/再见了，面向对象编程.md","raw":"---\ntitle: '再见了，面向对象编程[英文翻译]'\ntags: 英文翻译\ncategories: 英文翻译\nabbrlink: 29251\ndate: 2019-02-20 18:48:23\n---\n## 再见了，面向对象编程\n一堂教你解决问题的课程\n原文链接：[Goodbye, Object Oriented Programming](https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53)\n原文作者：[Charles Scalfani](https://medium.com/@cscalfani)\n![](https://cdn-images-1.medium.com/max/1600/1*cBFSQ9Ytv_D0jwGtpuL5WA.png)\n我使用面向对象的语言编程已经几十年了，我最先使用的面向对象编程的语言是`C++`，然后是`.NET`和`Java`。\n我不遗余力得去发扬着面向对象的三大特征：继承封装和多态。\n未完待续。。。","slug":"再见了，面向对象编程","published":1,"updated":"2020-03-09T03:01:45.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nr003e1q2dj7qc244k","content":"<h2 id=\"再见了，面向对象编程\"><a href=\"#再见了，面向对象编程\" class=\"headerlink\" title=\"再见了，面向对象编程\"></a>再见了，面向对象编程</h2><p>一堂教你解决问题的课程<br>原文链接：<a href=\"https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53\" target=\"_blank\" rel=\"noopener\">Goodbye, Object Oriented Programming</a><br>原文作者：<a href=\"https://medium.com/@cscalfani\" target=\"_blank\" rel=\"noopener\">Charles Scalfani</a><br><img src=\"https://cdn-images-1.medium.com/max/1600/1*cBFSQ9Ytv_D0jwGtpuL5WA.png\" alt><br>我使用面向对象的语言编程已经几十年了，我最先使用的面向对象编程的语言是<code>C++</code>，然后是<code>.NET</code>和<code>Java</code>。<br>我不遗余力得去发扬着面向对象的三大特征：继承封装和多态。<br>未完待续。。。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"再见了，面向对象编程\"><a href=\"#再见了，面向对象编程\" class=\"headerlink\" title=\"再见了，面向对象编程\"></a>再见了，面向对象编程</h2><p>一堂教你解决问题的课程<br>原文链接：<a href=\"https://medium.com/@cscalfani/goodbye-object-oriented-programming-a59cda4c0e53\" target=\"_blank\" rel=\"noopener\">Goodbye, Object Oriented Programming</a><br>原文作者：<a href=\"https://medium.com/@cscalfani\" target=\"_blank\" rel=\"noopener\">Charles Scalfani</a><br><img src=\"https://cdn-images-1.medium.com/max/1600/1*cBFSQ9Ytv_D0jwGtpuL5WA.png\" alt><br>我使用面向对象的语言编程已经几十年了，我最先使用的面向对象编程的语言是<code>C++</code>，然后是<code>.NET</code>和<code>Java</code>。<br>我不遗余力得去发扬着面向对象的三大特征：继承封装和多态。<br>未完待续。。。</p>\n"},{"title":"代码整洁之道在typescript中的实现","abbrlink":52300,"date":"2019-07-19T00:48:23.000Z","_content":"\n代码整洁之道在typescript中的实现\n灵感来源于 [clean-code-javascript](https://github.com/ryanmcdermott/clean-code-javascript)。\n\n<!-- more -->\n\n## 目录\n\n  1. [简介](#简介)\n  2. [变量](#变量)\n  3. [方法](#方法)\n  4. [对象和数据结构](#对象和数据结构)\n  5. [类](#类)\n  6. [SOLID原则](#SOLID原则)\n  7. [测试](#测试)\n  8. [并发](#并发)\n  9. [异常处理](#异常处理)\n  10. [格式化](#格式化)\n  11. [注释](#注释)\n\n## 简介\n\n![软件质量取决于阅读代码时骂人的次数](https://www.osnews.com/images/comics/wtfm.jpg)\n\n本文是 Robert C 所书写的关于软件工程原理的书籍《代码整洁之道》的 TypeScript版，这不是一篇风格指南，而是为了使用 TypeScript 生成可读、可复用和可重构的软件指南。\n本文中并非所有的原则都必须严格遵守，其中仅有一部分原则会被普遍认同，这些仅仅是一些原则，只是致力于整洁代码的作者们多年的经验。\n我们的软件工程技术只有50多年的历史，我们仍旧在学很多东西，当软件架构和架构本身一样古老时，我们更难去遵守规则，现在，就让这些指南最为评估您和您团队的 TypeScript 代码质量的炼金石吧。\n此外，了解这些知识并不会让您马上成为一名优秀的软件开发人员，与代码合作多年并不意味着您不会犯错误，每一段代码都是从初稿开始，向黏土一样慢慢被塑造成最终的形状。然后，在我们与同行一起审查时，我们会慢慢去修复不完美的地方，所以不要因为改进初稿而感到挫败，让我们去打败代码吧。\n\n**[⬆ 回到顶部](#目录)**\n\n## 变量\n### 使用有意义的变量名称\n给变量取一个有意义的名称以便于帮助读者去区分变量之前的区别\n\n**不推荐:**\n\n```ts\nfunction between<T>(a1: T, a2: T, a3: T): boolean {\n  return a2 <= a1 && a1 <= a3;\n}\n\n```\n\n**推荐:**\n\n```ts\nfunction between<T>(value: T, left: T, right: T): boolean {\n  return left <= value && value <= right;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用容易拼读的变量名称\n如果你无法拼读它，你会像一个白痴一样无法解释它\n\n**不推荐:**\n\n```ts\ntype DtaRcrd102 = {\n  genymdhms: Date;\n  modymdhms: Date;\n  pszqint: number;\n}\n```\n\n**推荐:**\n\n```ts\ntype Customer = {\n  generationTimestamp: Date;\n  modificationTimestamp: Date;\n  recordId: number;\n}\n```\n**[⬆ 回到顶部](#目录)**\n\n### 为同样类型的变量使用同样的词汇\n\n**不推荐:**\n\n```ts\nfunction getUserInfo(): User;\nfunction getUserDetails(): User;\nfunction getUserData(): User;\n```\n\n**推荐:**\n\n```ts\nfunction getUser(): User;\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用有意义的名称\n相比于写代码而言，我们更多的是去阅读代码，所以你写的代码是否可读和可检索至关重要，未命名的变量会影响对我们代码里理解，并伤害读者，所以让你的变量名可检索。可以使用[TSLint](https://palantir.github.io/tslint/rules/no-magic-numbers/) 来帮助识别未命名的常量。\n\n**不推荐:**\n\n```ts\n// 86400000 是什么鬼?\nsetTimeout(restart, 86400000);\n```\n\n**推荐:**\n\n```ts\n// 将它们声明为大写的命名常量.\nconst MILLISECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;\n\nsetTimeout(restart, MILLISECONDS_IN_A_DAY);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用可解释的变量\n\n**不推荐:**\n\n```ts\ndeclare const users: Map<string, User>;\n\nfor (const keyValue of users) {\n}\n```\n\n**推荐:**\n\n```ts\ndeclare const users: Map<string, User>;\n\nfor (const [id, user] of users) {\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用有意义的变量来避免心里映射\n\n显示由于隐式\n\n**不推荐:**\n\n```ts\nconst u = getUser();\nconst s = getSubscription();\nconst t = charge(u, s);\n```\n\n**推荐:**\n\n```ts\nconst user = getUser();\nconst subscription = getSubscription();\nconst transaction = charge(user, subscription);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要添加不必要的上下文\n\n如果你的 class/type/object 的名称已经告诉了你，就不要要在属性里在重复写一遍。\n\n**不推荐:**\n\n```ts\ntype Car = {\n  carMake: string;\n  carModel: string;\n  carColor: string;\n}\n\nfunction print(car: Car): void {\n  console.log(`${car.carMake} ${car.carModel} (${car.carColor})`);\n}\n```\n\n**推荐:**\n\n```ts\ntype Car = {\n  make: string;\n  model: string;\n  color: string;\n}\n\nfunction print(car: Car): void {\n  console.log(`${car.make} ${car.model} (${car.color})`);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 尽量使用默认参数，而不是再进行判断\n\n默认参数通常比再行判断更清晰。\n\n**不推荐:**\n\n```ts\nfunction loadPages(count?: number) {\n  const loadCount = count !== undefined ? count : 10;\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nfunction loadPages(count: number = 10) {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 方法\n### 参数 (最多两个)\n限制方法参数的数量至关重要，因为它会使得您方法的测试变得更容易，参数数量超过三个就会造成过多的组合，你必须用每个单独的参数去测试大量的情况。\n一个或两个参数是最理想的情况，如果可能的话应该尽量避免三个，应该去整合除此之外的任何东西。\n\n通常如果你有两个以上的参数，说明你的方法做了太多的事情，如果不是，则用更高级的对象来作为参数。\n\n如果你发现自己需要大量参数，则考虑使用对象。\n\n可以使用[结构赋值](https://basarat.gitbooks.io/typescript/docs/destructuring.html)来明确方法所期望的参数属性。\n这样有一些优点：\n1. 当有人查看功能签名时，会立即清楚正在使用的属性。\n2. 解构还克隆传递给函数的参数对象的指定原始值。 这有助于预防副作用。 注意：不会克隆从参数对象中解构的对象和数组。\n3. TypeScript会警告您未使用的属性，如果没有解构，这将是不可能的。\n\n**不推荐:**\n\n```ts\nfunction createMenu(title: string, body: string, buttonText: string, cancellable: boolean) {\n  // ...\n}\n\ncreateMenu('Foo', 'Bar', 'Baz', true);\n```\n\n**推荐:**\n\n```ts\nfunction createMenu(options: { title: string, body: string, buttonText: string, cancellable: boolean }) {\n  // ...\n}\n\ncreateMenu({\n  title: 'Foo',\n  body: 'Bar',\n  buttonText: 'Baz',\n  cancellable: true\n});\n```\n\n你可以使用[类型别名](https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases)来进一步提高可读性:\n\n```ts\n\ntype MenuOptions = { title: string, body: string, buttonText: string, cancellable: boolean };\n\nfunction createMenu(options: MenuOptions) {\n  // ...\n}\n\ncreateMenu({\n  title: 'Foo',\n  body: 'Bar',\n  buttonText: 'Baz',\n  cancellable: true\n});\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 每个方法只做一件事情\n这是迄今为止软件工程中最重要的规则。 当一个方法执行多个操作时，它们会更加难以编写，测试和推理。 当您可以将一个函数隔离到一个动作时，它们可以轻松地重构，并且您的代码将更加清晰。 如果你除了这个之外没有别的东西，那么你将领先于许多开发者。\n\n**不推荐:**\n\n```ts\nfunction emailClients(clients: Client[]) {\n  clients.forEach((client) => {\n    const clientRecord = database.lookup(client);\n    if (clientRecord.isActive()) {\n      email(client);\n    }\n  });\n}\n```\n\n**推荐:**\n\n```ts\nfunction emailClients(clients: Client[]) {\n  clients.filter(isActiveClient).forEach(email);\n}\n\nfunction isActiveClient(client: Client) {\n  const clientRecord = database.lookup(client);\n  return clientRecord.isActive();\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 在方法名上体现要做的事情\n**不推荐:**\n\n```ts\nfunction addToDate(date: Date, month: number): Date {\n  // ...\n}\n\nconst date = new Date();\n\n// 很难从方法名中看出增加的是什么\naddToDate(date, 1);\n```\n\n**推荐:**\n\n```ts\nfunction addMonthToDate(date: Date, month: number): Date {\n  // ...\n}\n\nconst date = new Date();\naddMonthToDate(date, 1);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 方法应该只是一个级别的抽象\n如果你的一个方法有多个级别的抽象，这说明这个方法做的事情太多了。必要的拆分可以使得方法更容易被重用和更容易测试。\n\n**不推荐:**\n\n```ts\nfunction parseCode(code: string) {\n  const REGEXES = [ /* ... */ ];\n  const statements = code.split(' ');\n  const tokens = [];\n\n  REGEXES.forEach((regex) => {\n    statements.forEach((statement) => {\n      // ...\n    });\n  });\n\n  const ast = [];\n  tokens.forEach((token) => {\n    // lex...\n  });\n\n  ast.forEach((node) => {\n    // parse...\n  });\n}\n```\n\n**推荐:**\n\n```ts\nconst REGEXES = [ /* ... */ ];\n\nfunction parseCode(code: string) {\n  const tokens = tokenize(code);\n  const syntaxTree = parse(tokens);\n\n  syntaxTree.forEach((node) => {\n    // parse...\n  });\n}\n\nfunction tokenize(code: string): Token[] {\n  const statements = code.split(' ');\n  const tokens: Token[] = [];\n\n  REGEXES.forEach((regex) => {\n    statements.forEach((statement) => {\n      tokens.push( /* ... */ );\n    });\n  });\n\n  return tokens;\n}\n\nfunction parse(tokens: Token[]): SyntaxTree {\n  const syntaxTree: SyntaxTree[] = [];\n  tokens.forEach((token) => {\n    syntaxTree.push( /* ... */ );\n  });\n\n  return syntaxTree;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 移除重复代码\n\n尽量避免重复代码\n重复代码是很糟糕的，因为这意味着如果你需要改某些逻辑，则必须去同时修改改多个地方。\n\n想象一下，如果你经营者一家餐馆并需要追踪你的库存，比如你的西红柿、洋葱、大蒜、香料等，如果你有多个地方记录他们，每当他们变化了你就需要更新多个列表，如果你只有一个列表，那么你只用更新一个地方！\n\n通常重复代码的出现是因为你有两个或者两个以上略有不同的东西，他们有很多共同之处，但是他们之间的差异迫使你需要有两个或者多个独立的方法来执行大部分相同的事情，删除重复代码意味着创建一个抽象，只需要一个方法/模块/类就可以处理这组不同的东西。\n\n获得正确的抽象是至关重要的，这就是为什么你需要遵循[单一责任原则](#单一责任原则)，但是糟糕的抽象可能比重复代码更加糟糕，所以一定要小心，如果你能实现好的抽象，尽量去实现它，不要去做重复的事情。\n\n**不推荐:**\n\n```ts\nfunction showDeveloperList(developers: Developer[]) {\n  developers.forEach((developer) => {\n    const expectedSalary = developer.calculateExpectedSalary();\n    const experience = developer.getExperience();\n    const githubLink = developer.getGithubLink();\n\n    const data = {\n      expectedSalary,\n      experience,\n      githubLink\n    };\n\n    render(data);\n  });\n}\n\nfunction showManagerList(managers: Manager[]) {\n  managers.forEach((manager) => {\n    const expectedSalary = manager.calculateExpectedSalary();\n    const experience = manager.getExperience();\n    const portfolio = manager.getMBAProjects();\n\n    const data = {\n      expectedSalary,\n      experience,\n      portfolio\n    };\n\n    render(data);\n  });\n}\n```\n\n**推荐:**\n\n```ts\nclass Developer {\n  // ...\n  getExtraDetails() {\n    return {\n      githubLink: this.githubLink,\n    }\n  }\n}\n\nclass Manager {\n  // ...\n  getExtraDetails() {\n    return {\n      portfolio: this.portfolio,\n    }\n  }\n}\n\nfunction showEmployeeList(employee: Developer | Manager) {\n  employee.forEach((employee) => {\n    const expectedSalary = employee.calculateExpectedSalary();\n    const experience = employee.getExperience();\n    const extra = employee.getExtraDetails();\n\n    const data = {\n      expectedSalary,\n      experience,\n      extra,\n    };\n\n    render(data);\n  });\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用`Object.assign`或者解析构值来定义默认的对象\n\n**不推荐:**\n\n```ts\ntype MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };\n\nfunction createMenu(config: MenuConfig) {\n  config.title = config.title || 'Foo';\n  config.body = config.body || 'Bar';\n  config.buttonText = config.buttonText || 'Baz';\n  config.cancellable = config.cancellable !== undefined ? config.cancellable : true;\n\n  // ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\n**推荐:**\n\n```ts\ntype MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };\n\nfunction createMenu(config: MenuConfig) {\n  const menuConfig = Object.assign({\n    title: 'Foo',\n    body: 'Bar',\n    buttonText: 'Baz',\n    cancellable: true\n  }, config);\n\n  // ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\n或者，你也可以使用解析构值来实现。\n\n```ts\ntype MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };\n\nfunction createMenu({ title = 'Foo', body = 'Bar', buttonText = 'Baz', cancellable = true }: MenuConfig) {\n  // ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\n通过显示传入`undefined`或者`null`值来避免任何副作用，也可以告诉`TypeScript`编译器不允许他们。请参阅[`--strictNullChecks`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks)\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要将布尔值作为方法的参数\n\n布尔值表示了你的方法不止做了一件事情，请根据布尔值拆分你的方法。\n\n**不推荐:**\n\n```ts\nfunction createFile(name: string, temp: boolean) {\n  if (temp) {\n    fs.create(`./temp/${name}`);\n  } else {\n    fs.create(name);\n  }\n}\n```\n\n**推荐:**\n\n```ts\nfunction createTempFile(name: string) {\n  createFile(`./temp/${name}`);\n}\n\nfunction createFile(name: string) {\n  fs.create(name);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 避免副作用（第一部分）\n\n如果一个方法除了返回值以外还进行了其他操作并影响了一个或者多个值，这个函数就会产生副作用。副作用可能是写入文件，修改某个全局变量，或意外地将所有资源连接给陌生人。\n如果你确实需要一个方法产生副作用，例如刚才所说的写入文件之类的，那么不要使用多个方法或者类去写入特定的文件，而是只使用一个服务来实现它。\n重点是避免常见的陷阱，比如在没有任何结构的对象之间共享状态，使用可以由任何东西写入的可变数据类型，而不是集中在副作用发生的位置。 如果你能做到这一点，你会比绝大多数其他程序员更快乐。\n\n**不推荐:**\n\n```ts\nlet name = 'Robert C. Martin';\n\nfunction toBase64() {\n  name = btoa(name);\n}\n\ntoBase64();\n\nconsole.log(name); // 打印的已经不是 'Robert C. Martin' 而是 'Um9iZXJ0IEMuIE1hcnRpbg=='\n```\n\n**推荐:**\n\n```ts\nconst name = 'Robert C. Martin';\n\nfunction toBase64(text: string): string {\n  return btoa(text);\n}\n\nconst encodedName = toBase64(name);\nconsole.log(name);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 避免副作用（第二部分）\n\n在JavaScript中，值类型通过值来传递，对象/数组通过引用传递，对于对象和数组，如果你在方法中进行了修改，那么该对象或数组在其他方法中都将受到影响，这有时候会很棒，但有时候也会很糟糕，让我们来思考一个糟糕的场景：\n用户点击`购买`按钮，然后调用网络请求`购买`功能的接口，并将购物车的内容以数组的形式发送给后台，由于网络连接不畅，用户可能会继续重试请求。那如果在此期间用户在网络请求之前不小心点击了他们实际上不想购买的物品上的`添加到购物车`按钮，该怎么办？如果发生了这种情况并网络请求开始，那么该物品也意外得被购买了，因为它具有多购物车的引用。\n一个很好的解决方案是`addItemToCart`始终克隆`cart`，编辑它，然后返回克隆。 这样可以确保任何保留在购物车参考上的其他功能都不会受到任何更改的影响。\n提到这种方法的两点需要注意：\n1.在某些情况下，您可能确实想要修改输入对象，但是当您采用这种编程习惯时，您会发现这些情况非常罕见。 大多数东西都可以重构，没有副作用！ （见[纯函数]（https://en.wikipedia.org/wiki/Pure_function））\n克隆大对象在性能方面可能非常昂贵。 幸运的是，这在实践中不是一个大问题，因为有很好的库快速实现而不是像手动克隆对象和数组那样占用大量内存。\n\n**不推荐:**\n\n```ts\nfunction addItemToCart(cart: CartItem[], item: Item): void {\n  cart.push({ item, date: Date.now() });\n};\n```\n\n**推荐:**\n\n```ts\nfunction addItemToCart(cart: CartItem[], item: Item): CartItem[] {\n  return [...cart, { item, date: Date.now() }];\n};\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要书写全局方法\n污点全局变量在JavaScript中是一种不好的做法，因为你可能会与另一个库发生冲突。 让我们考虑一个例子：如果你想扩展JavaScript的原生Array方法以获得一个可以显示两个数组之间差异的`diff`方法，该怎么办？ 您可以将新函数写入`Array.prototype`，但它可能会与另一个尝试执行相同操作的库发生冲突。 如果那个其他库只是使用`diff`找到数组的第一个和最后一个元素之间的区别怎么办？ 这就是为什么只使用类并简单地扩展`Array`全局变得更好的原因。\n\n**不推荐:**\n\n```ts\ndeclare global {\n  interface Array<T> {\n    diff(other: T[]): Array<T>;\n  }\n}\n\nif (!Array.prototype.diff) {\n  Array.prototype.diff = function <T>(other: T[]): T[] {\n    const hash = new Set(other);\n    return this.filter(elem => !hash.has(elem));\n  };\n}\n```\n\n**推荐:**\n\n```ts\nclass MyArray<T> extends Array<T> {\n  diff(other: T[]): T[] {\n    const hash = new Set(other);\n    return this.filter(elem => !hash.has(elem));\n  };\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用函数式编程而不是命令式编程\n\n**不推荐:**\n\n```ts\nconst contributions = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n\nlet totalOutput = 0;\n\nfor (let i = 0; i < contributions.length; i++) {\n  totalOutput += contributions[i].linesOfCode;\n}\n```\n\n**推荐:**\n\n```ts\nconst contributions = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n\nconst totalOutput = contributions\n  .reduce((totalLines, output) => totalLines + output.linesOfCode, 0);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 封装条件\n\n**不推荐:**\n\n```ts\nif (subscription.isTrial || account.balance > 0) {\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nfunction canActivateService(subscription: Subscription, account: Account) {\n  return subscription.isTrial || account.balance > 0\n}\n\nif (canActivateService(subscription, account)) {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 避免负向判断\n\n**不推荐:**\n\n```ts\nfunction isEmailNotUsed(email: string): boolean {\n  // ...\n}\n\nif (isEmailNotUsed(email)) {\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nfunction isEmailUsed(email): boolean {\n  // ...\n}\n\nif (!isEmailUsed(node)) {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 减少判断\n\n这似乎是一项不可能的任务。 在第一次听到这个观点时，大多数人都会说，“如果没有`if`陈述，我该怎么做？” 答案是，在许多情况下，都可以使用多态来实现相同的任务。 第二个问题通常是，“那很好，但我为什么要那样做呢？” 答案是我们之前学到的一个简洁的代码概念：一个函数应该只做一件事。 当你有具有`if`语句的类和函数时，你告诉你的用户你的函数不止一件事。 记住，只做一件事。\n\n**不推荐:**\n\n```ts\nclass Airplane {\n  private type: string;\n  // ...\n\n  getCruisingAltitude() {\n    switch (this.type) {\n      case '777':\n        return this.getMaxAltitude() - this.getPassengerCount();\n      case 'Air Force One':\n        return this.getMaxAltitude();\n      case 'Cessna':\n        return this.getMaxAltitude() - this.getFuelExpenditure();\n      default:\n        throw new Error('Unknown airplane type.');\n    }\n  }\n\n  private getMaxAltitude(): number {\n    // ...\n  }\n}\n```\n\n**推荐:**\n\n```ts\nabstract class Airplane {\n  protected getMaxAltitude(): number {\n    // shared logic with subclasses ...\n  }\n\n  // ...\n}\n\nclass Boeing777 extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getPassengerCount();\n  }\n}\n\nclass AirForceOne extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude();\n  }\n}\n\nclass Cessna extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getFuelExpenditure();\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要过度优化\n\n现代浏览器在运行时进行了大量的优化。 很多时候，如果你正在优化那么你只是在浪费你的时间。 你可以在[这里]（https://github.com/petkaantonov/bluebird/wiki/Optimization-killers）看到缺少优化的地方。 同时针对那些，直到它们被修复为止。\n\n**不推荐:**\n\n```ts\n// 在旧浏览器上，每次使用未缓存的`list.length`迭代都会很昂贵\n// 因为`list.length`会重新计算。 但是在现代浏览器中，这已经被优化了。\nfor (let i = 0, len = list.length; i < len; i++) {\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nfor (let i = 0; i < list.length; i++) {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 移除无用的代码\n\n无用的代码和重复代码一样糟糕。 没有理由将它保留在您的代码库中。\n如果它没有被调用，请删掉它！ 如果后面需要，可以在版本管理的历史中找到它。\n\n**不推荐:**\n\n```ts\nfunction oldRequestModule(url: string) {\n  // ...\n}\n\nfunction requestModule(url: string) {\n  // ...\n}\n\nconst req = requestModule;\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\n```\n\n**推荐:**\n\n```ts\nfunction requestModule(url: string) {\n  // ...\n}\n\nconst req = requestModule;\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用迭代器和生成器\n\n**不推荐:**\n\n```ts\nfunction fibonacci(n: number): number[] {\n  if (n === 1) return [0];\n  if (n === 2) return [0, 1];\n\n  const items: number[] = [0, 1];\n  while (items.length < n) {\n    items.push(items[items.length - 2] + items[items.length - 1]);\n  }\n\n  return items;\n}\n\nfunction print(n: number) {\n  fibonacci(n).forEach(fib => console.log(fib));\n}\n\nprint(10);\n```\n\n**推荐:**\n\n```ts\nfunction* fibonacci(): IterableIterator<number> {\n  let [a, b] = [0, 1];\n\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nfunction print(n: number) {\n  let i = 0;\n  for (const fib of fibonacci()) {\n    if (i++ === n) break;  \n    console.log(fib);\n  }  \n}\n\nprint(10);\n```\n有些库允许我们用之前熟悉的方法来处理例如 `map`, `slice`, `forEach` 等等. 参考这里 [itiriri](https://www.npmjs.com/package/itiriri) (或者 [itiriri-async](https://www.npmjs.com/package/itiriri-async) 用于异步处理).\n\n```ts\nimport itiriri from 'itiriri';\n\nfunction* fibonacci(): IterableIterator<number> {\n  let [a, b] = [0, 1];\n \n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nitiriri(fibonacci())\n  .take(10)\n  .forEach(fib => console.log(fib));\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 对象和数据结构\n\n### 使用 getters 和 setters\n\nTypeScript支持getter/setter语法。\n使用getter和setter访问来自封装行为的对象的数据可能比简单地查找对象上的属性更好。\n你可能会问为什么，下面是一些原因：\n\n - 当您想要获取对象属性之外的其他操作时，您不必查找并更改代码库中的每个访问者。\n - 在执行`set`时使添加验证变得简单。\n - 封装内部表示。\n - 获取和设置时，可以轻松添加日志记录和错误处理。\n - 您可以延迟加载对象的属性，假设从服务器获取它。\n\n**不推荐:**\n\n```ts\ntype BankAccount = {\n  balance: number;\n  // ...\n}\n\nconst value = 100;\nconst account: BankAccount = {\n  balance: 0,\n  // ...\n};\n\nif (value < 0) {\n  throw new Error('Cannot set negative balance.');\n}\n\naccount.balance = value;\n```\n\n**推荐:**\n\n```ts\nclass BankAccount {\n  private accountBalance: number = 0;\n\n  get balance(): number {\n    return this.accountBalance;\n  }\n\n  set balance(value: number) {\n    if (value < 0) {\n      throw new Error('Cannot set negative balance.');\n    }\n\n    this.accountBalance = value;\n  }\n\n  // ...\n}\n\n// 现在 `BankAccount` 封装了验证逻辑\n// 如果有一个我们想增加额外的验证规则,\n// 我们只需要去改变 `setter` 的实现,\n// 而不影响其他代码.\nconst account = new BankAccount();\naccount.balance = 100;\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 设置 private/protected\n\nTypeScript 支持 `public` *(默认)*, `protected` 还有 `private`.  \n\n**不推荐:**\n\n```ts\nclass Circle {\n  radius: number;\n  \n  constructor(radius: number) {\n    this.radius = radius;\n  }\n\n  perimeter() {\n    return 2 * Math.PI * this.radius;\n  }\n\n  surface() {\n    return Math.PI * this.radius * this.radius;\n  }\n}\n```\n\n**推荐:**\n\n```ts\nclass Circle {\n  constructor(private readonly radius: number) {\n  }\n\n  perimeter() {\n    return 2 * Math.PI * this.radius;\n  }\n\n  surface() {\n    return Math.PI * this.radius * this.radius;\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 更倾向于不可变\nTypeScript 的类型系统允许在接口/类的各个属性上标记`readonly`，对于更高级的场景，有一个内置里类型`Readonly`，它接受一个泛型`<T>`并使用映射类型将其所有属性标记为只读，请见[这里](https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)。\n\n**不推荐:**\n\n```ts\ninterface Config {\n  host: string;\n  port: string;\n  db: string;\n}\n```\n\n**推荐:**\n\n```ts\ninterface Config {\n  readonly host: string;\n  readonly port: string;\n  readonly db: string;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### `type` 对比 `interface`\n\n当您使用联合或者交叉时使用`type`，当想要继承或者实现时使用`interface`，但是没有严格的规则，请使用适合自己的规则。\n有关更详细的说明，请参阅[这里](https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543)了解ts中`type`和`interface`之间的区别。\n\n**不推荐:**\n\n```ts\ninterface EmailConfig {\n  // ...\n}\n\ninterface DbConfig {\n  // ...\n}\n\ninterface Config {\n  // ...\n}\n\n//...\n\ntype Shape = {\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\n\ntype EmailConfig = {\n  // ...\n}\n\ntype DbConfig = {\n  // ...\n}\n\ntype Config  = EmailConfig | DbConfig;\n\n// ...\n\ninterface Shape {\n  // ...\n}\n\nclass Circle implements Shape {\n  // ...\n}\n\nclass Square implements Shape {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 类\n\n### 类应该是精简的\n类的规模是由其责任来衡量的。 遵循*单一责任原则*一个类应该很小。\n\n**不推荐:**\n\n```ts\nclass Dashboard {\n  getLanguage(): string { /* ... */ }\n  setLanguage(language: string): void { /* ... */ }\n  showProgress(): void { /* ... */ }\n  hideProgress(): void { /* ... */ }\n  isDirty(): boolean { /* ... */ }\n  disable(): void { /* ... */ }\n  enable(): void { /* ... */ }\n  addSubscription(subscription: Subscription): void { /* ... */ }\n  removeSubscription(subscription: Subscription): void { /* ... */ }\n  addUser(user: User): void { /* ... */ }\n  removeUser(user: User): void { /* ... */ }\n  goToHomePage(): void { /* ... */ }\n  updateProfile(details: UserDetails): void { /* ... */ }\n  getVersion(): string { /* ... */ }\n  // ...\n}\n\n```\n\n**推荐:**\n\n```ts\nclass Dashboard {\n  disable(): void { /* ... */ }\n  enable(): void { /* ... */ }\n  getVersion(): string { /* ... */ }\n}\n\n// 通过将其他方法移动到其他类中来分担责任。\n// ...\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 高内聚和低耦合\n聚合程度决定了类成员的彼此相关程度。在理想情况下，每个方法都应该使用类中的所有字段，然后我们称之为*最大内聚类*，但这是不容易实现的，甚至是不可取的，但是我们都更喜欢凝聚力。\n耦合是指两个类相互依赖的程度，如果其中一个类的修改不会影响另一个类，则称这两个类是低耦合的。\n良好的软件设计应该是**高内聚**和**低耦合**。\n\n**不推荐:**\n\n```ts\nclass UserManager {\n  // 不推荐理由: 每一个私有变量都有特定的一组方法使用.\n  // 这明确的表名这个类不止做了一件事情.\n  constructor(\n    private readonly db: Database,\n    private readonly emailSender: EmailSender) {\n  }\n\n  async getUser(id: number): Promise<User> {\n    return await db.users.findOne({ id });\n  }\n\n  async getTransactions(userId: number): Promise<Transaction[]> {\n    return await db.transactions.find({ userId });\n  }\n\n  async sendGreeting(): Promise<void> {\n    await emailSender.send('Welcome!');\n  }\n\n  async sendNotification(text: string): Promise<void> {\n    await emailSender.send(text);\n  }\n\n  async sendNewsletter(): Promise<void> {\n    // ...\n  }\n}\n```\n\n**推荐:**\n\n```ts\nclass UserService {\n  constructor(private readonly db: Database) {\n  }\n\n  async getUser(id: number): Promise<User> {\n    return await this.db.users.findOne({ id });\n  }\n\n  async getTransactions(userId: number): Promise<Transaction[]> {\n    return await this.db.transactions.find({ userId });\n  }\n}\n\nclass UserNotifier {\n  constructor(private readonly emailSender: EmailSender) {\n  }\n\n  async sendGreeting(): Promise<void> {\n    await this.emailSender.send('Welcome!');\n  }\n\n  async sendNotification(text: string): Promise<void> {\n    await this.emailSender.send(text);\n  }\n\n  async sendNewsletter(): Promise<void> {\n    // ...\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 比起继承来更喜欢使用组合\n正如[设计模式](https://en.wikipedia.org/wiki/Design_Patterns)中所说的那样，你应该**尽可能得优先组合而不是继承**，有很多很好的理由去使用继承，同时也有很多很好的理由去使用组合，这就意味着如果你的思想本能的是使用继承，那就试着想一想，使用组合是不是能更好的解决你的问题，一般在某些情况下它是可以的。\n你可能想知道我什么时候该使用组合，这取决于你手头的问题，不过下面的列表列出了使用继承更好的一些情况：\n1. 你的继承表示的是\"is-a\"关系而不是\"has-a\"关系（Human-> Animal vs. User-> UserDetails）。\n\n2. 您可以重用基类中的代码（人类可以像所有动物一样移动）。\n\n3. 您希望通过更改基类对派生类进行全局更改。 （改变所有动物移动时的热量消耗）。\n\n**不推荐:**\n\n```ts\nclass Employee {\n  constructor(\n    private readonly name: string,\n    private readonly email: string) {\n  }\n\n  // ...\n}\n\nclass EmployeeTaxData extends Employee {\n  constructor(\n    name: string,\n    email: string,\n    private readonly ssn: string,\n    private readonly salary: number) {\n    super(name, email);\n  }\n\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nclass Employee {\n  private taxData: EmployeeTaxData;\n\n  constructor(\n    private readonly name: string,\n    private readonly email: string) {\n  }\n\n  setTaxData(ssn: string, salary: number): Employee {\n    this.taxData = new EmployeeTaxData(ssn, salary);\n    return this;\n  }\n\n  // ...\n}\n\nclass EmployeeTaxData {\n  constructor(\n    public readonly ssn: string,\n    public readonly salary: number) {\n  }\n\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用链式编程\n\n这种模式非常有用，并且常用于许多库中。 它允许您的代码更直观，而不是冗长。 因此，请使用链式编程并检查代码的清洁程度。\n\n**不推荐:**\n\n```ts\nclass QueryBuilder {\n  private collection: string;\n  private pageNumber: number = 1;\n  private itemsPerPage: number = 100;\n  private orderByFields: string[] = [];\n\n  from(collection: string): void {\n    this.collection = collection;\n  }\n\n  page(number: number, itemsPerPage: number = 100): void {\n    this.pageNumber = number;\n    this.itemsPerPage = itemsPerPage;\n  }\n\n  orderBy(...fields: string[]): void {\n    this.orderByFields = fields;\n  }\n\n  build(): Query {\n    // ...\n  }\n}\n\n// ...\n\nconst queryBuilder = new QueryBuilder();\nqueryBuilder.from('users');\nqueryBuilder.page(1, 100);\nqueryBuilder.orderBy('firstName', 'lastName');\n\nconst query = queryBuilder.build();\n```\n\n**推荐:**\n\n```ts\nclass QueryBuilder {\n  private collection: string;\n  private pageNumber: number = 1;\n  private itemsPerPage: number = 100;\n  private orderByFields: string[] = [];\n\n  from(collection: string): this {\n    this.collection = collection;\n    return this;\n  }\n\n  page(number: number, itemsPerPage: number = 100): this {\n    this.pageNumber = number;\n    this.itemsPerPage = itemsPerPage;\n    return this;\n  }\n\n  orderBy(...fields: string[]): this {\n    this.orderByFields = fields;\n    return this;\n  }\n\n  build(): Query {\n    // ...\n  }\n}\n\n// ...\n\nconst query = new QueryBuilder()\n  .from('users')\n  .page(1, 100)\n  .orderBy('firstName', 'lastName')\n  .build();\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## SOLID原则\n\n### 单一责任原则 (SRP)\n正如代码整洁之道上所说，“应该有且仅有一个原因引起类的变更”，要最大幅度的减少类的变更，如果一个类的功能太负责而你修改的它的一部分，那么很难保证是否会影响到其他地方。\n\n**不推荐:**\n\n```ts\nclass UserSettings {\n  constructor(private readonly user: User) {\n  }\n\n  changeSettings(settings: UserSettings) {\n    if (this.verifyCredentials()) {\n      // ...\n    }\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n```\n\n**推荐:**\n\n```ts\nclass UserAuth {\n  constructor(private readonly user: User) {\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n\n\nclass UserSettings {\n  private readonly auth: UserAuth;\n\n  constructor(private readonly user: User) {\n    this.auth = new UserAuth(user);\n  }\n\n  changeSettings(settings: UserSettings) {\n    if (this.auth.verifyCredentials()) {\n      // ...\n    }\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 开放封闭原则 (OCP)\n\n一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。但并不意味着不做任何修改，低层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段。\n\n**不推荐:**\n\n```ts\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n  }\n\n  // ...\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n  }\n\n  // ...\n}\n\nclass HttpRequester {\n  constructor(private readonly adapter: Adapter) {\n  }\n\n  async fetch<T>(url: string): Promise<T> {\n    if (this.adapter instanceof AjaxAdapter) {\n      const response = await makeAjaxCall<T>(url);\n      // 转换response并返回\n    } else if (this.adapter instanceof NodeAdapter) {\n      const response = await makeHttpCall<T>(url);\n      // 转换response并返回\n    }\n  }\n}\n\nfunction makeAjaxCall<T>(url: string): Promise<T> {\n  // 转换response并返回\n}\n\nfunction makeHttpCall<T>(url: string): Promise<T> {\n  // 转换response并返回\n}\n```\n\n**推荐:**\n\n```ts\nabstract class Adapter {\n  abstract async request<T>(url: string): Promise<T>;\n\n}\n\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n  }\n\n  async request<T>(url: string): Promise<T>{\n    // 转换response并返回\n  }\n\n  // ...\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n  }\n\n  async request<T>(url: string): Promise<T>{\n    // 转换response并返回\n  }\n\n  // ...\n}\n\nclass HttpRequester {\n  constructor(private readonly adapter: Adapter) {\n  }\n\n  async fetch<T>(url: string): Promise<T> {\n    const response = await this.adapter.request<T>(url);\n    // 转换response并返回\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 里氏替换原则 (LSP)\n\n只要父类能出现的地方子类都可以出现，而且替换为子类也不会产生任何错误或异常，使用者可有根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必能适应。\n\n**不推荐:**\n\n```ts\nclass Rectangle {\n  constructor(\n    protected width: number = 0,\n    protected height: number = 0) {\n\n  }\n\n  setColor(color: string): this {\n    // ...\n  }\n\n  render(area: number) {\n    // ...\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  setHeight(height: number): this {\n    this.height = height;\n    return this;\n  }\n\n  getArea(): number {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Rectangle {\n  setWidth(width: number): this {\n    this.width = width;\n    this.height = width;\n    return this;\n  }\n\n  setHeight(height: number): this {\n    this.width = height;\n    this.height = height;\n    return this;\n  }\n}\n\nfunction renderLargeRectangles(rectangles: Rectangle[]) {\n  rectangles.forEach((rectangle) => {\n    const area = rectangle\n      .setWidth(4)\n      .setHeight(5)\n      .getArea();\n    rectangle.render(area);\n  });\n}\n\nconst rectangles = [new Rectangle(), new Rectangle(), new Square()];\nrenderLargeRectangles(rectangles);\n```\n\n**推荐:**\n\n```ts\nabstract class Shape {\n  setColor(color: string): this {\n    // ...\n  }\n\n  render(area: number) {\n    // ...\n  }\n\n  abstract getArea(): number;\n}\n\nclass Rectangle extends Shape {\n  constructor(\n    private readonly width = 0,\n    private readonly height = 0) {\n    super();\n  }\n\n  getArea(): number {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Shape {\n  constructor(private readonly length: number) {\n    super();\n  }\n\n  getArea(): number {\n    return this.length * this.length;\n  }\n}\n\nfunction renderLargeShapes(shapes: Shape[]) {\n  shapes.forEach((shape) => {\n    const area = shape.getArea();\n    shape.render(area);\n  });\n}\n\nconst shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];\nrenderLargeShapes(shapes);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 接口隔离原则 (ISP)\n\n建立单一接口，不要建立臃肿庞大的接口。接口隔离原则与单一职责的审视角度是不相同的，单一职责要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，而接口隔离原则要求接口的方法尽量少。\n\n**不推荐:**\n\n```ts\ninterface SmartPrinter {\n  print();\n  fax();\n  scan();\n}\n\nclass AllInOnePrinter implements SmartPrinter {\n  print() {\n    // ...\n  }  \n  \n  fax() {\n    // ...\n  }\n\n  scan() {\n    // ...\n  }\n}\n\nclass EconomicPrinter implements SmartPrinter {\n  print() {\n    // ...\n  }  \n  \n  fax() {\n    throw new Error('Fax not supported.');\n  }\n\n  scan() {\n    throw new Error('Scan not supported.');\n  }\n}\n```\n\n**推荐:**\n\n```ts\ninterface Printer {\n  print();\n}\n\ninterface Fax {\n  fax();\n}\n\ninterface Scanner {\n  scan();\n}\n\nclass AllInOnePrinter implements Printer, Fax, Scanner {\n  print() {\n    // ...\n  }  \n  \n  fax() {\n    // ...\n  }\n\n  scan() {\n    // ...\n  }\n}\n\nclass EconomicPrinter implements Printer {\n  print() {\n    // ...\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 依赖倒置原则 (DIP)\n\n含义：\n1.高层模块不应该依赖低层模块，两者都应该依赖其抽象。\n2.抽象不应该依赖细节。\n3.细节应该依赖抽象。\n  \nDIP 通常通过使用控制反转 (IoC) 来实现. 这里有一个例子 [InversifyJs](https://www.npmjs.com/package/inversify)\n\n**不推荐:**\n\n```ts\nimport { readFile as readFileCb } from 'fs';\nimport { promisify } from 'util';\n\nconst readFile = promisify(readFileCb);\n\ntype ReportData = {\n  // ..\n}\n\nclass XmlFormatter {\n  parse<T>(content: string): T {\n    // 将XML字符串序列化为对象.\n  }\n}\n\nclass ReportReader {\n\n  // 不推荐: 我们已经创建了对特定请求实现的依赖。\n  // 我们应该让ReportReader依赖于一个解析方法：`parse`\n  private readonly formatter = new XmlFormatter();\n\n  async read(path: string): Promise<ReportData> {\n    const text = await readFile(path, 'UTF8');\n    return this.formatter.parse<ReportData>(text);\n  }\n}\n\n// ...\nconst reader = new ReportReader();\nawait report = await reader.read('report.xml');\n```\n\n**推荐:**\n\n```ts\nimport { readFile as readFileCb } from 'fs';\nimport { promisify } from 'util';\n\nconst readFile = promisify(readFileCb);\n\ntype ReportData = {\n  // ..\n}\n\ninterface Formatter {\n  parse<T>(content: string): T;\n}\n\nclass XmlFormatter implements Formatter {\n  parse<T>(content: string): T {\n    // 将XML字符串序列化为对象.\n  }\n}\n\n\nclass JsonFormatter implements Formatter {\n  parse<T>(content: string): T {\n    // 将JSON字符串序列化为对象.\n  }\n}\n\nclass ReportReader {\n  constructor(private readonly formatter: Formatter) {\n  }\n\n  async read(path: string): Promise<ReportData> {\n    const text = await readFile(path, 'UTF8');\n    return this.formatter.parse<ReportData>(text);\n  }\n}\n\n// ...\nconst reader = new ReportReader(new XmlFormatter());\nawait report = await reader.read('report.xml');\n\n// 如果我们需要解析json\nconst reader = new ReportReader(new JsonFormatter());\nawait report = await reader.read('report.json');\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 测试\n测试比编码更重要，如果你的测试数量很少或者根本没有，那么每次修改代码时，你都不会确定有没有破坏其他地方，决定要到什么样的测试程度取决于你的团队，但是100%的覆盖率会让你开发的时候更有信心。这意味你需要一个好的框架之外还需要一个好的[覆盖统计工具](https://github.com/gotwarlost/istanbul)\n没有理由不写测试，有好多很好的js测试框架对typescript都有很好的支持，当您找到适合您团队的时，请始终为您引入的每个新功能/模块编写测试。 如果您首选的方法是测试驱动开发（TDD），那很好，但重点是确保在启动任何功能或重构现有功能之前达到覆盖目标。\n\n### 测试驱动开发的三条原则\n\n1. 除非这能让失败的单元测试通过，否则不允许去编写任何的产品代码。\n2. 只允许编写刚好能够导致失败的单元测试。 （编译失败也属于一种失败）\n3. 只允许编写刚好能够导致一个单元测试失败的产品代码。\n\n**[⬆ 回到顶部](#目录)**\n\n### F.I.R.S.T. 原则\n\n整洁的测试需要遵循以下原则:\n\n- **快速** 测试运行起来应该是快速的因为我们会经常运行他们。\n\n- **独立** 每天测试不允许互相依赖，无论是独立运行还是顺序运行他们的返回应该是相同的。\n\n- **可复现** 测试应该是在任意环境下都是可复现的。\n\n- **自我确认** 测试需要自己体现**通过**或是**不通过**，而不是靠开发者自己比对日志来判断是否通过。\n\n- **及时** 单元测试应该在生产代码之前编写。 如果您在生产代码之后编写测试，您可能会发现编写测试太辛苦了。\n\n**[⬆ 回到顶部](#目录)**\n\n### 测试单一责任\n\n测试也需要遵循**单一责任原则**。\n\n**不推荐:**\n\n```ts\nimport { assert } from 'chai';\n\ndescribe('AwesomeDate', () => {\n  it('handles date boundaries', () => {\n    let date: AwesomeDate;\n\n    date = new AwesomeDate('1/1/2015');\n    assert.equal('1/31/2015', date.addDays(30));\n\n    date = new AwesomeDate('2/1/2016');\n    assert.equal('2/29/2016', date.addDays(28));\n\n    date = new AwesomeDate('2/1/2015');\n    assert.equal('3/1/2015', date.addDays(28));\n  });\n});\n```\n\n**推荐:**\n\n```ts\nimport { assert } from 'chai';\n\ndescribe('AwesomeDate', () => {\n  it('handles 30-day months', () => {\n    const date = new AwesomeDate('1/1/2015');\n    assert.equal('1/31/2015', date.addDays(30));\n  });\n\n  it('handles leap year', () => {\n    const date = new AwesomeDate('2/1/2016');\n    assert.equal('2/29/2016', date.addDays(28));\n  });\n\n  it('handles non-leap year', () => {\n    const date = new AwesomeDate('2/1/2015');\n    assert.equal('3/1/2015', date.addDays(28));\n  });\n});\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 测试的名字应该表示了测试的意图\n\n**不推荐:**\n\n```ts\ndescribe('Calendar', () => {\n  it('2/29/2020', () => {\n    // ...\n  });\n\n  it('throws', () => {\n    // ...\n  });\n});\n```\n\n**推荐:**\n\n```ts\ndescribe('Calendar', () => {\n  it('should handle leap year', () => {\n    // ...\n  });\n\n  it('should throw when format is invalid', () => {\n    // ...\n  });\n});\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 并发\n\n### promises 对比 callbacks\n回调嵌套过多会产生**回调地狱**，使用promises可以有效解决这个问题。\n\n**不推荐:**\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\n\nfunction downloadPage(url: string, saveTo: string, callback: (error: Error, content?: string) => void) {\n  get(url, (error, response) => {\n    if (error) {\n      callback(error);\n    } else {\n      writeFile(saveTo, response.body, (error) => {\n        if (error) {\n          callback(error);\n        } else {\n          callback(null, response.body);\n        }\n      });\n    }\n  });\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html', (error, content) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log(content);\n  }\n});\n```\n\n**推荐:**\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = promisify(writeFile);\n\nfunction downloadPage(url: string, saveTo: string): Promise<string> {\n  return get(url)\n    .then(response => write(saveTo, response));\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html')\n  .then(content => console.log(content))\n  .catch(error => console.error(error));  \n```\n\n**[⬆ 回到顶部](#目录)**\n\n### Async/Await 比 Promises 更加简洁\n\n使用`async` /`await`语法，您可以编写比链式调用更清晰，更易理解的代码。 在一个以`async`关键字为前缀的方法中，您可以告诉JavaScript运行时暂停执行`await`关键字上的代码（当在promise上使用时）。\n\n**不推荐:**\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = util.promisify(writeFile);\n\nfunction downloadPage(url: string, saveTo: string): Promise<string> {\n  return get(url).then(response => write(saveTo, response));\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html')\n  .then(content => console.log(content))\n  .catch(error => console.error(error));  \n```\n\n**推荐:**\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = promisify(writeFile);\n\nasync function downloadPage(url: string, saveTo: string): Promise<string> {\n  const response = await get(url);\n  await write(saveTo, response);\n  return response;\n}\n\ntry {\n  const content = await downloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html');\n  console.log(content);\n} catch (error) {\n  console.error(error);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 异常处理\n\n抛出异常是件好事！ 它们意味着运行时已经成功识别出程序中的某些内容出错并及时通知您。\n\n### 始终使用`Error`对象来抛出错误。\n\n**不推荐:**\n\n```ts\nfunction calculateTotal(items: Item[]): number {\n  throw 'Not implemented.';\n}\n\nfunction get(): Promise<Item[]> {\n  return Promise.reject('Not implemented.');\n}\n```\n\n**推荐:**\n\n```ts\nfunction calculateTotal(items: Item[]): number {\n  throw new Error('Not implemented.');\n}\n\nfunction get(): Promise<Item[]> {\n  return Promise.reject(new Error('Not implemented.'));\n}\n\nasync function get(): Promise<Item[]> {\n  throw new Error('Not implemented.');\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要忽略掉捕捉后的错误\n\n对捕获的错误不执行任何操作并不能使您能够修复或对所述错误做出反应。 将错误记录到控制台（`console.log`）也不是很好，因为它常常会被其他东西所淹没。 所以你应该有一个统一的地方集中处理这些错误。\n\n**不推荐:**\n\n```ts\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  console.log(error);\n}\n\n// 或者更严重\n\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  // 直接忽略掉\n}\n```\n\n**推荐:**\n\n```ts\nimport { logger } from './logging'\n\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  logger.log(error);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要忽略promises 的 rejected\n\n就像不能忽略`try/catch`到的异常一样\n\n**不推荐:**\n\n```ts\ngetUser()\n  .then((user: User) => {\n    return sendEmail(user.email, 'Welcome!');\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n```\n\n**推荐:**\n\n```ts\nimport { logger } from './logging'\n\ngetUser()\n  .then((user: User) => {\n    return sendEmail(user.email, 'Welcome!');\n  })\n  .catch((error) => {\n    logger.log(error);\n  });\n\n// 或者\n\ntry {\n  const user = await getUser();\n  await sendEmail(user.email, 'Welcome!');\n} catch (error) {\n  logger.log(error);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 格式化\n\n格式化是主观的。 像这里的许多规则一样，没有必须遵循特定硬性规则。 重点是*不要过于格式化*格式化。 有很多工具可以实现自动化。 用一个就好！ 工程师争论格式化是浪费时间和金钱的。 遵循的一般规则是*保持一致的格式规则*就可以了。\n\nTypeScript 有一个很强大的工具叫做 [TSLint](https://palantir.github.io/tslint/). 它是一个静态分析工具，可以帮助您显着提高代码的可读性和可维护性。 下面是您可以在项目中引用的TSLint配置：\n\n- [TSLint Config Standard](https://www.npmjs.com/package/tslint-config-standard) - 标准风格规则\n\n- [TSLint Config Airbnb](https://www.npmjs.com/package/tslint-config-airbnb) - Airbnb风格\n\n- [TSLint Clean Code](https://www.npmjs.com/package/tslint-clean-code) - 代码整洁之道的规则\n\n- [TSLint react](https://www.npmjs.com/package/tslint-react) - React 和 JSX 的规则\n\n- [TSLint + Prettier](https://www.npmjs.com/package/tslint-config-prettier) -  [Prettier](https://github.com/prettier/prettier) 代码风格\n\n- [ESLint rules for TSLint](https://www.npmjs.com/package/tslint-eslint-rules) - ESLint 规则\n\n### 使用一致的写法\n\n这些规则是主观的，所以你的团队可以选择按自己的风格制定。 关键是，无论你选择什么，只要*保持一致*。\n\n**不推荐:**\n\n```ts\nconst DAYS_IN_WEEK = 7;\nconst daysInMonth = 30;\n\nconst songs = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\nconst Artists = ['ACDC', 'Led Zeppelin', 'The Beatles'];\n\nfunction eraseDatabase() {}\nfunction restore_database() {}\n\ntype animal = { /* ... */ }\ntype Container = { /* ... */ }\n```\n\n**推荐:**\n\n```ts\nconst DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = 30;\n\nconst SONGS = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\nconst ARTISTS = ['ACDC', 'Led Zeppelin', 'The Beatles'];\n\nfunction eraseDatabase() {}\nfunction restoreDatabase() {}\n\ntype Animal = { /* ... */ }\ntype Container = { /* ... */ }\n```\n\n\n**[⬆ 回到顶部](#目录)**\n\n### 调用者和被调用者的方法应该是相邻的\n\n如果函数调用另一个函数，请在源文件中设置这两个函数相邻。 理想情况下，将呼叫者保持在被叫者正上方。\n我们倾向于从头到尾阅读代码，就像报纸一样。 因此，请以这种方式阅读您的代码。\n\n**不推荐:**\n\n```ts\nclass PerformanceReview {\n  constructor(private readonly employee: Employee) {\n  }\n\n  private lookupPeers() {\n    return db.lookup(this.employee.id, 'peers');\n  }\n\n  private lookupManager() {\n    return db.lookup(this.employee, 'manager');\n  }\n\n  private getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  review() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n\n    // ...\n  }\n\n  private getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  private getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.review();\n```\n\n**推荐:**\n\n```ts\nclass PerformanceReview {\n  constructor(private readonly employee: Employee) {\n  }\n\n  review() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n\n    // ...\n  }\n\n  private getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  private lookupPeers() {\n    return db.lookup(this.employee.id, 'peers');\n  }\n\n  private getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  private lookupManager() {\n    return db.lookup(this.employee, 'manager');\n  }\n\n  private getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.review();\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 组织 imports\n\n使用简洁易读的import语句，您可以快速查看当前代码的依赖关系。 确保对`import`语句应用以下良好实践：\n\n- 导入语句应按字母顺序排列并分组。\n- 不需要的引用应该被移除。\n- 命名导入必须按字母顺序排列 例如: `import {A, B, C} from 'foo';`\n- 导入源必须在组内按字母顺序排列, 例如: `import * as foo from 'a'; import * as bar from 'b';`\n- 每一组引用之间用空行分隔。\n- 分组之间需要遵循以下顺序:\n  - Polyfills (例如. `import 'reflect-metadata';`)\n  - Node 内置模块 (例如. `import fs from 'fs';`)\n  - 外部模块 (例如. `import { query } from 'itiriri';`)\n  - 内部模块 (例如. `import { UserService } from 'src/services/userService';`)\n  - 来自父目录的模块 (例如. `import foo from '../foo'; import qux from '../../foo/qux';`)\n  - 来自兄弟目录或同目录的模块 (例如. `import bar from './bar'; import baz from './bar/baz';`)\n\n**不推荐:**\n\n```ts\nimport { TypeDefinition } from '../types/typeDefinition';\nimport { AttributeTypes } from '../model/attribute';\nimport { ApiCredentials, Adapters } from './common/api/authorization';\nimport fs from 'fs';\nimport { ConfigPlugin } from './plugins/config/configPlugin';\nimport { BindingScopeEnum, Container } from 'inversify';\nimport 'reflect-metadata';\n```\n\n**推荐:**\n\n```ts\nimport 'reflect-metadata';\n\nimport fs from 'fs';\nimport { BindingScopeEnum, Container } from 'inversify';\n\nimport { AttributeTypes } from '../model/attribute';\nimport { TypeDefinition } from '../types/typeDefinition';\n\nimport { ApiCredentials, Adapters } from './common/api/authorization';\nimport { ConfigPlugin } from './plugins/config/configPlugin';\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用别名\n\n通过在`tsconfig.json`的compilerOptions部分中定义路径和baseUrl属性来创建更漂亮的导入。\n这样可以在进行导入时避免长的相对路径。\n\n**不推荐:**\n\n```ts\nimport { UserService } from '../../../services/UserService';\n```\n\n**推荐:**\n\n```ts\nimport { UserService } from '@services/UserService';\n```\n\n```js\n// tsconfig.json\n...\n  \"compilerOptions\": {\n    ...\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"@services\": [\"services/*\"]\n    }\n    ...\n  }\n...\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 注释\n\n当没有注释无法表达的时候，才使用注释\n\n### 更倾向于自解释代码而不是注释\n\n**不推荐:**\n\n```ts\n// 检查订阅是否到期\nif (subscription.endDate > Date.now) {  }\n```\n\n**推荐:**\n\n```ts\nconst isSubscriptionActive = subscription.endDate > Date.now;\nif (isSubscriptionActive) { /* ... */ }\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要在代码库中留下注释的代码\n\n版本控制的存在是有原因的。 在您的历史记录中保留旧代码。\n\n**不推荐:**\n\n```ts\ntype User = {\n  name: string;\n  email: string;\n  // age: number;\n  // jobPosition: string;\n}\n```\n\n**推荐:**\n\n```ts\ntype User = {\n  name: string;\n  email: string;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要使用日记评论\n\n请记住，使用版本控制！ 不需要无用代码，注释代码，尤其是日记评论。 使用`git log`获取历史记录！\n\n**不推荐:**\n\n```ts\n/**\n * 2016-12-20: Removed monads, didn't understand them (RM)\n * 2016-10-01: Improved using special monads (JP)\n * 2016-02-03: Added type-checking (LI)\n * 2015-03-14: Implemented combine (JR)\n */\nfunction combine(a: number, b: number): number {\n  return a + b;\n}\n```\n\n**推荐:**\n\n```ts\nfunction combine(a: number, b: number): number {\n  return a + b;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 禁止位置分隔\n这会增加代码噪声，大多数IDE是支持代码折叠的，请使用。\n\n**不推荐:**\n\n```ts\n////////////////////////////////////////////////////////////////////////////////\n// Client class\n////////////////////////////////////////////////////////////////////////////////\nclass Client {\n  id: number;\n  name: string;\n  address: Address;\n  contact: Contact;\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // public methods\n  ////////////////////////////////////////////////////////////////////////////////\n  public describe(): string {\n    // ...\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // private methods\n  ////////////////////////////////////////////////////////////////////////////////\n  private describeAddress(): string {\n    // ...\n  }\n\n  private describeContact(): string {\n    // ...\n  }\n};\n```\n\n**推荐:**\n\n```ts\nclass Client {\n  id: number;\n  name: string;\n  address: Address;\n  contact: Contact;\n\n  public describe(): string {\n    // ...\n  }\n\n  private describeAddress(): string {\n    // ...\n  }\n\n  private describeContact(): string {\n    // ...\n  }\n};\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### TODO 标记\n\n当您发现自己需要在代码中留下注释以进行后续改进时，使用`// TODO`注释来实现。 大多数IDE都支持这种注释，方便你可以快速浏览整个待办事项列表。\n\n**不推荐:**\n\n```ts\nfunction getActiveSubscriptions(): Promise<Subscription[]> {\n  // ensure `dueDate` is indexed.\n  return db.subscriptions.find({ dueDate: { $lte: new Date() } });\n}\n```\n\n**推荐:**\n\n```ts\nfunction getActiveSubscriptions(): Promise<Subscription[]> {\n  // TODO: ensure `dueDate` is indexed.\n  return db.subscriptions.find({ dueDate: { $lte: new Date() } });\n}\n```\n\n**[⬆ 回到顶部](#目录)**","source":"_posts/代码整洁之道在typescript中的实现.md","raw":"---\ntitle: 代码整洁之道在typescript中的实现\ntags: 前端\ncategories: 前端\nabbrlink: 52300\ndate: 2019-07-19 08:48:23\n---\n\n代码整洁之道在typescript中的实现\n灵感来源于 [clean-code-javascript](https://github.com/ryanmcdermott/clean-code-javascript)。\n\n<!-- more -->\n\n## 目录\n\n  1. [简介](#简介)\n  2. [变量](#变量)\n  3. [方法](#方法)\n  4. [对象和数据结构](#对象和数据结构)\n  5. [类](#类)\n  6. [SOLID原则](#SOLID原则)\n  7. [测试](#测试)\n  8. [并发](#并发)\n  9. [异常处理](#异常处理)\n  10. [格式化](#格式化)\n  11. [注释](#注释)\n\n## 简介\n\n![软件质量取决于阅读代码时骂人的次数](https://www.osnews.com/images/comics/wtfm.jpg)\n\n本文是 Robert C 所书写的关于软件工程原理的书籍《代码整洁之道》的 TypeScript版，这不是一篇风格指南，而是为了使用 TypeScript 生成可读、可复用和可重构的软件指南。\n本文中并非所有的原则都必须严格遵守，其中仅有一部分原则会被普遍认同，这些仅仅是一些原则，只是致力于整洁代码的作者们多年的经验。\n我们的软件工程技术只有50多年的历史，我们仍旧在学很多东西，当软件架构和架构本身一样古老时，我们更难去遵守规则，现在，就让这些指南最为评估您和您团队的 TypeScript 代码质量的炼金石吧。\n此外，了解这些知识并不会让您马上成为一名优秀的软件开发人员，与代码合作多年并不意味着您不会犯错误，每一段代码都是从初稿开始，向黏土一样慢慢被塑造成最终的形状。然后，在我们与同行一起审查时，我们会慢慢去修复不完美的地方，所以不要因为改进初稿而感到挫败，让我们去打败代码吧。\n\n**[⬆ 回到顶部](#目录)**\n\n## 变量\n### 使用有意义的变量名称\n给变量取一个有意义的名称以便于帮助读者去区分变量之前的区别\n\n**不推荐:**\n\n```ts\nfunction between<T>(a1: T, a2: T, a3: T): boolean {\n  return a2 <= a1 && a1 <= a3;\n}\n\n```\n\n**推荐:**\n\n```ts\nfunction between<T>(value: T, left: T, right: T): boolean {\n  return left <= value && value <= right;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用容易拼读的变量名称\n如果你无法拼读它，你会像一个白痴一样无法解释它\n\n**不推荐:**\n\n```ts\ntype DtaRcrd102 = {\n  genymdhms: Date;\n  modymdhms: Date;\n  pszqint: number;\n}\n```\n\n**推荐:**\n\n```ts\ntype Customer = {\n  generationTimestamp: Date;\n  modificationTimestamp: Date;\n  recordId: number;\n}\n```\n**[⬆ 回到顶部](#目录)**\n\n### 为同样类型的变量使用同样的词汇\n\n**不推荐:**\n\n```ts\nfunction getUserInfo(): User;\nfunction getUserDetails(): User;\nfunction getUserData(): User;\n```\n\n**推荐:**\n\n```ts\nfunction getUser(): User;\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用有意义的名称\n相比于写代码而言，我们更多的是去阅读代码，所以你写的代码是否可读和可检索至关重要，未命名的变量会影响对我们代码里理解，并伤害读者，所以让你的变量名可检索。可以使用[TSLint](https://palantir.github.io/tslint/rules/no-magic-numbers/) 来帮助识别未命名的常量。\n\n**不推荐:**\n\n```ts\n// 86400000 是什么鬼?\nsetTimeout(restart, 86400000);\n```\n\n**推荐:**\n\n```ts\n// 将它们声明为大写的命名常量.\nconst MILLISECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;\n\nsetTimeout(restart, MILLISECONDS_IN_A_DAY);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用可解释的变量\n\n**不推荐:**\n\n```ts\ndeclare const users: Map<string, User>;\n\nfor (const keyValue of users) {\n}\n```\n\n**推荐:**\n\n```ts\ndeclare const users: Map<string, User>;\n\nfor (const [id, user] of users) {\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用有意义的变量来避免心里映射\n\n显示由于隐式\n\n**不推荐:**\n\n```ts\nconst u = getUser();\nconst s = getSubscription();\nconst t = charge(u, s);\n```\n\n**推荐:**\n\n```ts\nconst user = getUser();\nconst subscription = getSubscription();\nconst transaction = charge(user, subscription);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要添加不必要的上下文\n\n如果你的 class/type/object 的名称已经告诉了你，就不要要在属性里在重复写一遍。\n\n**不推荐:**\n\n```ts\ntype Car = {\n  carMake: string;\n  carModel: string;\n  carColor: string;\n}\n\nfunction print(car: Car): void {\n  console.log(`${car.carMake} ${car.carModel} (${car.carColor})`);\n}\n```\n\n**推荐:**\n\n```ts\ntype Car = {\n  make: string;\n  model: string;\n  color: string;\n}\n\nfunction print(car: Car): void {\n  console.log(`${car.make} ${car.model} (${car.color})`);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 尽量使用默认参数，而不是再进行判断\n\n默认参数通常比再行判断更清晰。\n\n**不推荐:**\n\n```ts\nfunction loadPages(count?: number) {\n  const loadCount = count !== undefined ? count : 10;\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nfunction loadPages(count: number = 10) {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 方法\n### 参数 (最多两个)\n限制方法参数的数量至关重要，因为它会使得您方法的测试变得更容易，参数数量超过三个就会造成过多的组合，你必须用每个单独的参数去测试大量的情况。\n一个或两个参数是最理想的情况，如果可能的话应该尽量避免三个，应该去整合除此之外的任何东西。\n\n通常如果你有两个以上的参数，说明你的方法做了太多的事情，如果不是，则用更高级的对象来作为参数。\n\n如果你发现自己需要大量参数，则考虑使用对象。\n\n可以使用[结构赋值](https://basarat.gitbooks.io/typescript/docs/destructuring.html)来明确方法所期望的参数属性。\n这样有一些优点：\n1. 当有人查看功能签名时，会立即清楚正在使用的属性。\n2. 解构还克隆传递给函数的参数对象的指定原始值。 这有助于预防副作用。 注意：不会克隆从参数对象中解构的对象和数组。\n3. TypeScript会警告您未使用的属性，如果没有解构，这将是不可能的。\n\n**不推荐:**\n\n```ts\nfunction createMenu(title: string, body: string, buttonText: string, cancellable: boolean) {\n  // ...\n}\n\ncreateMenu('Foo', 'Bar', 'Baz', true);\n```\n\n**推荐:**\n\n```ts\nfunction createMenu(options: { title: string, body: string, buttonText: string, cancellable: boolean }) {\n  // ...\n}\n\ncreateMenu({\n  title: 'Foo',\n  body: 'Bar',\n  buttonText: 'Baz',\n  cancellable: true\n});\n```\n\n你可以使用[类型别名](https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases)来进一步提高可读性:\n\n```ts\n\ntype MenuOptions = { title: string, body: string, buttonText: string, cancellable: boolean };\n\nfunction createMenu(options: MenuOptions) {\n  // ...\n}\n\ncreateMenu({\n  title: 'Foo',\n  body: 'Bar',\n  buttonText: 'Baz',\n  cancellable: true\n});\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 每个方法只做一件事情\n这是迄今为止软件工程中最重要的规则。 当一个方法执行多个操作时，它们会更加难以编写，测试和推理。 当您可以将一个函数隔离到一个动作时，它们可以轻松地重构，并且您的代码将更加清晰。 如果你除了这个之外没有别的东西，那么你将领先于许多开发者。\n\n**不推荐:**\n\n```ts\nfunction emailClients(clients: Client[]) {\n  clients.forEach((client) => {\n    const clientRecord = database.lookup(client);\n    if (clientRecord.isActive()) {\n      email(client);\n    }\n  });\n}\n```\n\n**推荐:**\n\n```ts\nfunction emailClients(clients: Client[]) {\n  clients.filter(isActiveClient).forEach(email);\n}\n\nfunction isActiveClient(client: Client) {\n  const clientRecord = database.lookup(client);\n  return clientRecord.isActive();\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 在方法名上体现要做的事情\n**不推荐:**\n\n```ts\nfunction addToDate(date: Date, month: number): Date {\n  // ...\n}\n\nconst date = new Date();\n\n// 很难从方法名中看出增加的是什么\naddToDate(date, 1);\n```\n\n**推荐:**\n\n```ts\nfunction addMonthToDate(date: Date, month: number): Date {\n  // ...\n}\n\nconst date = new Date();\naddMonthToDate(date, 1);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 方法应该只是一个级别的抽象\n如果你的一个方法有多个级别的抽象，这说明这个方法做的事情太多了。必要的拆分可以使得方法更容易被重用和更容易测试。\n\n**不推荐:**\n\n```ts\nfunction parseCode(code: string) {\n  const REGEXES = [ /* ... */ ];\n  const statements = code.split(' ');\n  const tokens = [];\n\n  REGEXES.forEach((regex) => {\n    statements.forEach((statement) => {\n      // ...\n    });\n  });\n\n  const ast = [];\n  tokens.forEach((token) => {\n    // lex...\n  });\n\n  ast.forEach((node) => {\n    // parse...\n  });\n}\n```\n\n**推荐:**\n\n```ts\nconst REGEXES = [ /* ... */ ];\n\nfunction parseCode(code: string) {\n  const tokens = tokenize(code);\n  const syntaxTree = parse(tokens);\n\n  syntaxTree.forEach((node) => {\n    // parse...\n  });\n}\n\nfunction tokenize(code: string): Token[] {\n  const statements = code.split(' ');\n  const tokens: Token[] = [];\n\n  REGEXES.forEach((regex) => {\n    statements.forEach((statement) => {\n      tokens.push( /* ... */ );\n    });\n  });\n\n  return tokens;\n}\n\nfunction parse(tokens: Token[]): SyntaxTree {\n  const syntaxTree: SyntaxTree[] = [];\n  tokens.forEach((token) => {\n    syntaxTree.push( /* ... */ );\n  });\n\n  return syntaxTree;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 移除重复代码\n\n尽量避免重复代码\n重复代码是很糟糕的，因为这意味着如果你需要改某些逻辑，则必须去同时修改改多个地方。\n\n想象一下，如果你经营者一家餐馆并需要追踪你的库存，比如你的西红柿、洋葱、大蒜、香料等，如果你有多个地方记录他们，每当他们变化了你就需要更新多个列表，如果你只有一个列表，那么你只用更新一个地方！\n\n通常重复代码的出现是因为你有两个或者两个以上略有不同的东西，他们有很多共同之处，但是他们之间的差异迫使你需要有两个或者多个独立的方法来执行大部分相同的事情，删除重复代码意味着创建一个抽象，只需要一个方法/模块/类就可以处理这组不同的东西。\n\n获得正确的抽象是至关重要的，这就是为什么你需要遵循[单一责任原则](#单一责任原则)，但是糟糕的抽象可能比重复代码更加糟糕，所以一定要小心，如果你能实现好的抽象，尽量去实现它，不要去做重复的事情。\n\n**不推荐:**\n\n```ts\nfunction showDeveloperList(developers: Developer[]) {\n  developers.forEach((developer) => {\n    const expectedSalary = developer.calculateExpectedSalary();\n    const experience = developer.getExperience();\n    const githubLink = developer.getGithubLink();\n\n    const data = {\n      expectedSalary,\n      experience,\n      githubLink\n    };\n\n    render(data);\n  });\n}\n\nfunction showManagerList(managers: Manager[]) {\n  managers.forEach((manager) => {\n    const expectedSalary = manager.calculateExpectedSalary();\n    const experience = manager.getExperience();\n    const portfolio = manager.getMBAProjects();\n\n    const data = {\n      expectedSalary,\n      experience,\n      portfolio\n    };\n\n    render(data);\n  });\n}\n```\n\n**推荐:**\n\n```ts\nclass Developer {\n  // ...\n  getExtraDetails() {\n    return {\n      githubLink: this.githubLink,\n    }\n  }\n}\n\nclass Manager {\n  // ...\n  getExtraDetails() {\n    return {\n      portfolio: this.portfolio,\n    }\n  }\n}\n\nfunction showEmployeeList(employee: Developer | Manager) {\n  employee.forEach((employee) => {\n    const expectedSalary = employee.calculateExpectedSalary();\n    const experience = employee.getExperience();\n    const extra = employee.getExtraDetails();\n\n    const data = {\n      expectedSalary,\n      experience,\n      extra,\n    };\n\n    render(data);\n  });\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用`Object.assign`或者解析构值来定义默认的对象\n\n**不推荐:**\n\n```ts\ntype MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };\n\nfunction createMenu(config: MenuConfig) {\n  config.title = config.title || 'Foo';\n  config.body = config.body || 'Bar';\n  config.buttonText = config.buttonText || 'Baz';\n  config.cancellable = config.cancellable !== undefined ? config.cancellable : true;\n\n  // ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\n**推荐:**\n\n```ts\ntype MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };\n\nfunction createMenu(config: MenuConfig) {\n  const menuConfig = Object.assign({\n    title: 'Foo',\n    body: 'Bar',\n    buttonText: 'Baz',\n    cancellable: true\n  }, config);\n\n  // ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\n或者，你也可以使用解析构值来实现。\n\n```ts\ntype MenuConfig = { title?: string, body?: string, buttonText?: string, cancellable?: boolean };\n\nfunction createMenu({ title = 'Foo', body = 'Bar', buttonText = 'Baz', cancellable = true }: MenuConfig) {\n  // ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\n通过显示传入`undefined`或者`null`值来避免任何副作用，也可以告诉`TypeScript`编译器不允许他们。请参阅[`--strictNullChecks`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks)\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要将布尔值作为方法的参数\n\n布尔值表示了你的方法不止做了一件事情，请根据布尔值拆分你的方法。\n\n**不推荐:**\n\n```ts\nfunction createFile(name: string, temp: boolean) {\n  if (temp) {\n    fs.create(`./temp/${name}`);\n  } else {\n    fs.create(name);\n  }\n}\n```\n\n**推荐:**\n\n```ts\nfunction createTempFile(name: string) {\n  createFile(`./temp/${name}`);\n}\n\nfunction createFile(name: string) {\n  fs.create(name);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 避免副作用（第一部分）\n\n如果一个方法除了返回值以外还进行了其他操作并影响了一个或者多个值，这个函数就会产生副作用。副作用可能是写入文件，修改某个全局变量，或意外地将所有资源连接给陌生人。\n如果你确实需要一个方法产生副作用，例如刚才所说的写入文件之类的，那么不要使用多个方法或者类去写入特定的文件，而是只使用一个服务来实现它。\n重点是避免常见的陷阱，比如在没有任何结构的对象之间共享状态，使用可以由任何东西写入的可变数据类型，而不是集中在副作用发生的位置。 如果你能做到这一点，你会比绝大多数其他程序员更快乐。\n\n**不推荐:**\n\n```ts\nlet name = 'Robert C. Martin';\n\nfunction toBase64() {\n  name = btoa(name);\n}\n\ntoBase64();\n\nconsole.log(name); // 打印的已经不是 'Robert C. Martin' 而是 'Um9iZXJ0IEMuIE1hcnRpbg=='\n```\n\n**推荐:**\n\n```ts\nconst name = 'Robert C. Martin';\n\nfunction toBase64(text: string): string {\n  return btoa(text);\n}\n\nconst encodedName = toBase64(name);\nconsole.log(name);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 避免副作用（第二部分）\n\n在JavaScript中，值类型通过值来传递，对象/数组通过引用传递，对于对象和数组，如果你在方法中进行了修改，那么该对象或数组在其他方法中都将受到影响，这有时候会很棒，但有时候也会很糟糕，让我们来思考一个糟糕的场景：\n用户点击`购买`按钮，然后调用网络请求`购买`功能的接口，并将购物车的内容以数组的形式发送给后台，由于网络连接不畅，用户可能会继续重试请求。那如果在此期间用户在网络请求之前不小心点击了他们实际上不想购买的物品上的`添加到购物车`按钮，该怎么办？如果发生了这种情况并网络请求开始，那么该物品也意外得被购买了，因为它具有多购物车的引用。\n一个很好的解决方案是`addItemToCart`始终克隆`cart`，编辑它，然后返回克隆。 这样可以确保任何保留在购物车参考上的其他功能都不会受到任何更改的影响。\n提到这种方法的两点需要注意：\n1.在某些情况下，您可能确实想要修改输入对象，但是当您采用这种编程习惯时，您会发现这些情况非常罕见。 大多数东西都可以重构，没有副作用！ （见[纯函数]（https://en.wikipedia.org/wiki/Pure_function））\n克隆大对象在性能方面可能非常昂贵。 幸运的是，这在实践中不是一个大问题，因为有很好的库快速实现而不是像手动克隆对象和数组那样占用大量内存。\n\n**不推荐:**\n\n```ts\nfunction addItemToCart(cart: CartItem[], item: Item): void {\n  cart.push({ item, date: Date.now() });\n};\n```\n\n**推荐:**\n\n```ts\nfunction addItemToCart(cart: CartItem[], item: Item): CartItem[] {\n  return [...cart, { item, date: Date.now() }];\n};\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要书写全局方法\n污点全局变量在JavaScript中是一种不好的做法，因为你可能会与另一个库发生冲突。 让我们考虑一个例子：如果你想扩展JavaScript的原生Array方法以获得一个可以显示两个数组之间差异的`diff`方法，该怎么办？ 您可以将新函数写入`Array.prototype`，但它可能会与另一个尝试执行相同操作的库发生冲突。 如果那个其他库只是使用`diff`找到数组的第一个和最后一个元素之间的区别怎么办？ 这就是为什么只使用类并简单地扩展`Array`全局变得更好的原因。\n\n**不推荐:**\n\n```ts\ndeclare global {\n  interface Array<T> {\n    diff(other: T[]): Array<T>;\n  }\n}\n\nif (!Array.prototype.diff) {\n  Array.prototype.diff = function <T>(other: T[]): T[] {\n    const hash = new Set(other);\n    return this.filter(elem => !hash.has(elem));\n  };\n}\n```\n\n**推荐:**\n\n```ts\nclass MyArray<T> extends Array<T> {\n  diff(other: T[]): T[] {\n    const hash = new Set(other);\n    return this.filter(elem => !hash.has(elem));\n  };\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用函数式编程而不是命令式编程\n\n**不推荐:**\n\n```ts\nconst contributions = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n\nlet totalOutput = 0;\n\nfor (let i = 0; i < contributions.length; i++) {\n  totalOutput += contributions[i].linesOfCode;\n}\n```\n\n**推荐:**\n\n```ts\nconst contributions = [\n  {\n    name: 'Uncle Bobby',\n    linesOfCode: 500\n  }, {\n    name: 'Suzie Q',\n    linesOfCode: 1500\n  }, {\n    name: 'Jimmy Gosling',\n    linesOfCode: 150\n  }, {\n    name: 'Gracie Hopper',\n    linesOfCode: 1000\n  }\n];\n\nconst totalOutput = contributions\n  .reduce((totalLines, output) => totalLines + output.linesOfCode, 0);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 封装条件\n\n**不推荐:**\n\n```ts\nif (subscription.isTrial || account.balance > 0) {\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nfunction canActivateService(subscription: Subscription, account: Account) {\n  return subscription.isTrial || account.balance > 0\n}\n\nif (canActivateService(subscription, account)) {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 避免负向判断\n\n**不推荐:**\n\n```ts\nfunction isEmailNotUsed(email: string): boolean {\n  // ...\n}\n\nif (isEmailNotUsed(email)) {\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nfunction isEmailUsed(email): boolean {\n  // ...\n}\n\nif (!isEmailUsed(node)) {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 减少判断\n\n这似乎是一项不可能的任务。 在第一次听到这个观点时，大多数人都会说，“如果没有`if`陈述，我该怎么做？” 答案是，在许多情况下，都可以使用多态来实现相同的任务。 第二个问题通常是，“那很好，但我为什么要那样做呢？” 答案是我们之前学到的一个简洁的代码概念：一个函数应该只做一件事。 当你有具有`if`语句的类和函数时，你告诉你的用户你的函数不止一件事。 记住，只做一件事。\n\n**不推荐:**\n\n```ts\nclass Airplane {\n  private type: string;\n  // ...\n\n  getCruisingAltitude() {\n    switch (this.type) {\n      case '777':\n        return this.getMaxAltitude() - this.getPassengerCount();\n      case 'Air Force One':\n        return this.getMaxAltitude();\n      case 'Cessna':\n        return this.getMaxAltitude() - this.getFuelExpenditure();\n      default:\n        throw new Error('Unknown airplane type.');\n    }\n  }\n\n  private getMaxAltitude(): number {\n    // ...\n  }\n}\n```\n\n**推荐:**\n\n```ts\nabstract class Airplane {\n  protected getMaxAltitude(): number {\n    // shared logic with subclasses ...\n  }\n\n  // ...\n}\n\nclass Boeing777 extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getPassengerCount();\n  }\n}\n\nclass AirForceOne extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude();\n  }\n}\n\nclass Cessna extends Airplane {\n  // ...\n  getCruisingAltitude() {\n    return this.getMaxAltitude() - this.getFuelExpenditure();\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要过度优化\n\n现代浏览器在运行时进行了大量的优化。 很多时候，如果你正在优化那么你只是在浪费你的时间。 你可以在[这里]（https://github.com/petkaantonov/bluebird/wiki/Optimization-killers）看到缺少优化的地方。 同时针对那些，直到它们被修复为止。\n\n**不推荐:**\n\n```ts\n// 在旧浏览器上，每次使用未缓存的`list.length`迭代都会很昂贵\n// 因为`list.length`会重新计算。 但是在现代浏览器中，这已经被优化了。\nfor (let i = 0, len = list.length; i < len; i++) {\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nfor (let i = 0; i < list.length; i++) {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 移除无用的代码\n\n无用的代码和重复代码一样糟糕。 没有理由将它保留在您的代码库中。\n如果它没有被调用，请删掉它！ 如果后面需要，可以在版本管理的历史中找到它。\n\n**不推荐:**\n\n```ts\nfunction oldRequestModule(url: string) {\n  // ...\n}\n\nfunction requestModule(url: string) {\n  // ...\n}\n\nconst req = requestModule;\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\n```\n\n**推荐:**\n\n```ts\nfunction requestModule(url: string) {\n  // ...\n}\n\nconst req = requestModule;\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用迭代器和生成器\n\n**不推荐:**\n\n```ts\nfunction fibonacci(n: number): number[] {\n  if (n === 1) return [0];\n  if (n === 2) return [0, 1];\n\n  const items: number[] = [0, 1];\n  while (items.length < n) {\n    items.push(items[items.length - 2] + items[items.length - 1]);\n  }\n\n  return items;\n}\n\nfunction print(n: number) {\n  fibonacci(n).forEach(fib => console.log(fib));\n}\n\nprint(10);\n```\n\n**推荐:**\n\n```ts\nfunction* fibonacci(): IterableIterator<number> {\n  let [a, b] = [0, 1];\n\n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nfunction print(n: number) {\n  let i = 0;\n  for (const fib of fibonacci()) {\n    if (i++ === n) break;  \n    console.log(fib);\n  }  \n}\n\nprint(10);\n```\n有些库允许我们用之前熟悉的方法来处理例如 `map`, `slice`, `forEach` 等等. 参考这里 [itiriri](https://www.npmjs.com/package/itiriri) (或者 [itiriri-async](https://www.npmjs.com/package/itiriri-async) 用于异步处理).\n\n```ts\nimport itiriri from 'itiriri';\n\nfunction* fibonacci(): IterableIterator<number> {\n  let [a, b] = [0, 1];\n \n  while (true) {\n    yield a;\n    [a, b] = [b, a + b];\n  }\n}\n\nitiriri(fibonacci())\n  .take(10)\n  .forEach(fib => console.log(fib));\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 对象和数据结构\n\n### 使用 getters 和 setters\n\nTypeScript支持getter/setter语法。\n使用getter和setter访问来自封装行为的对象的数据可能比简单地查找对象上的属性更好。\n你可能会问为什么，下面是一些原因：\n\n - 当您想要获取对象属性之外的其他操作时，您不必查找并更改代码库中的每个访问者。\n - 在执行`set`时使添加验证变得简单。\n - 封装内部表示。\n - 获取和设置时，可以轻松添加日志记录和错误处理。\n - 您可以延迟加载对象的属性，假设从服务器获取它。\n\n**不推荐:**\n\n```ts\ntype BankAccount = {\n  balance: number;\n  // ...\n}\n\nconst value = 100;\nconst account: BankAccount = {\n  balance: 0,\n  // ...\n};\n\nif (value < 0) {\n  throw new Error('Cannot set negative balance.');\n}\n\naccount.balance = value;\n```\n\n**推荐:**\n\n```ts\nclass BankAccount {\n  private accountBalance: number = 0;\n\n  get balance(): number {\n    return this.accountBalance;\n  }\n\n  set balance(value: number) {\n    if (value < 0) {\n      throw new Error('Cannot set negative balance.');\n    }\n\n    this.accountBalance = value;\n  }\n\n  // ...\n}\n\n// 现在 `BankAccount` 封装了验证逻辑\n// 如果有一个我们想增加额外的验证规则,\n// 我们只需要去改变 `setter` 的实现,\n// 而不影响其他代码.\nconst account = new BankAccount();\naccount.balance = 100;\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 设置 private/protected\n\nTypeScript 支持 `public` *(默认)*, `protected` 还有 `private`.  \n\n**不推荐:**\n\n```ts\nclass Circle {\n  radius: number;\n  \n  constructor(radius: number) {\n    this.radius = radius;\n  }\n\n  perimeter() {\n    return 2 * Math.PI * this.radius;\n  }\n\n  surface() {\n    return Math.PI * this.radius * this.radius;\n  }\n}\n```\n\n**推荐:**\n\n```ts\nclass Circle {\n  constructor(private readonly radius: number) {\n  }\n\n  perimeter() {\n    return 2 * Math.PI * this.radius;\n  }\n\n  surface() {\n    return Math.PI * this.radius * this.radius;\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 更倾向于不可变\nTypeScript 的类型系统允许在接口/类的各个属性上标记`readonly`，对于更高级的场景，有一个内置里类型`Readonly`，它接受一个泛型`<T>`并使用映射类型将其所有属性标记为只读，请见[这里](https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)。\n\n**不推荐:**\n\n```ts\ninterface Config {\n  host: string;\n  port: string;\n  db: string;\n}\n```\n\n**推荐:**\n\n```ts\ninterface Config {\n  readonly host: string;\n  readonly port: string;\n  readonly db: string;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### `type` 对比 `interface`\n\n当您使用联合或者交叉时使用`type`，当想要继承或者实现时使用`interface`，但是没有严格的规则，请使用适合自己的规则。\n有关更详细的说明，请参阅[这里](https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543)了解ts中`type`和`interface`之间的区别。\n\n**不推荐:**\n\n```ts\ninterface EmailConfig {\n  // ...\n}\n\ninterface DbConfig {\n  // ...\n}\n\ninterface Config {\n  // ...\n}\n\n//...\n\ntype Shape = {\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\n\ntype EmailConfig = {\n  // ...\n}\n\ntype DbConfig = {\n  // ...\n}\n\ntype Config  = EmailConfig | DbConfig;\n\n// ...\n\ninterface Shape {\n  // ...\n}\n\nclass Circle implements Shape {\n  // ...\n}\n\nclass Square implements Shape {\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 类\n\n### 类应该是精简的\n类的规模是由其责任来衡量的。 遵循*单一责任原则*一个类应该很小。\n\n**不推荐:**\n\n```ts\nclass Dashboard {\n  getLanguage(): string { /* ... */ }\n  setLanguage(language: string): void { /* ... */ }\n  showProgress(): void { /* ... */ }\n  hideProgress(): void { /* ... */ }\n  isDirty(): boolean { /* ... */ }\n  disable(): void { /* ... */ }\n  enable(): void { /* ... */ }\n  addSubscription(subscription: Subscription): void { /* ... */ }\n  removeSubscription(subscription: Subscription): void { /* ... */ }\n  addUser(user: User): void { /* ... */ }\n  removeUser(user: User): void { /* ... */ }\n  goToHomePage(): void { /* ... */ }\n  updateProfile(details: UserDetails): void { /* ... */ }\n  getVersion(): string { /* ... */ }\n  // ...\n}\n\n```\n\n**推荐:**\n\n```ts\nclass Dashboard {\n  disable(): void { /* ... */ }\n  enable(): void { /* ... */ }\n  getVersion(): string { /* ... */ }\n}\n\n// 通过将其他方法移动到其他类中来分担责任。\n// ...\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 高内聚和低耦合\n聚合程度决定了类成员的彼此相关程度。在理想情况下，每个方法都应该使用类中的所有字段，然后我们称之为*最大内聚类*，但这是不容易实现的，甚至是不可取的，但是我们都更喜欢凝聚力。\n耦合是指两个类相互依赖的程度，如果其中一个类的修改不会影响另一个类，则称这两个类是低耦合的。\n良好的软件设计应该是**高内聚**和**低耦合**。\n\n**不推荐:**\n\n```ts\nclass UserManager {\n  // 不推荐理由: 每一个私有变量都有特定的一组方法使用.\n  // 这明确的表名这个类不止做了一件事情.\n  constructor(\n    private readonly db: Database,\n    private readonly emailSender: EmailSender) {\n  }\n\n  async getUser(id: number): Promise<User> {\n    return await db.users.findOne({ id });\n  }\n\n  async getTransactions(userId: number): Promise<Transaction[]> {\n    return await db.transactions.find({ userId });\n  }\n\n  async sendGreeting(): Promise<void> {\n    await emailSender.send('Welcome!');\n  }\n\n  async sendNotification(text: string): Promise<void> {\n    await emailSender.send(text);\n  }\n\n  async sendNewsletter(): Promise<void> {\n    // ...\n  }\n}\n```\n\n**推荐:**\n\n```ts\nclass UserService {\n  constructor(private readonly db: Database) {\n  }\n\n  async getUser(id: number): Promise<User> {\n    return await this.db.users.findOne({ id });\n  }\n\n  async getTransactions(userId: number): Promise<Transaction[]> {\n    return await this.db.transactions.find({ userId });\n  }\n}\n\nclass UserNotifier {\n  constructor(private readonly emailSender: EmailSender) {\n  }\n\n  async sendGreeting(): Promise<void> {\n    await this.emailSender.send('Welcome!');\n  }\n\n  async sendNotification(text: string): Promise<void> {\n    await this.emailSender.send(text);\n  }\n\n  async sendNewsletter(): Promise<void> {\n    // ...\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 比起继承来更喜欢使用组合\n正如[设计模式](https://en.wikipedia.org/wiki/Design_Patterns)中所说的那样，你应该**尽可能得优先组合而不是继承**，有很多很好的理由去使用继承，同时也有很多很好的理由去使用组合，这就意味着如果你的思想本能的是使用继承，那就试着想一想，使用组合是不是能更好的解决你的问题，一般在某些情况下它是可以的。\n你可能想知道我什么时候该使用组合，这取决于你手头的问题，不过下面的列表列出了使用继承更好的一些情况：\n1. 你的继承表示的是\"is-a\"关系而不是\"has-a\"关系（Human-> Animal vs. User-> UserDetails）。\n\n2. 您可以重用基类中的代码（人类可以像所有动物一样移动）。\n\n3. 您希望通过更改基类对派生类进行全局更改。 （改变所有动物移动时的热量消耗）。\n\n**不推荐:**\n\n```ts\nclass Employee {\n  constructor(\n    private readonly name: string,\n    private readonly email: string) {\n  }\n\n  // ...\n}\n\nclass EmployeeTaxData extends Employee {\n  constructor(\n    name: string,\n    email: string,\n    private readonly ssn: string,\n    private readonly salary: number) {\n    super(name, email);\n  }\n\n  // ...\n}\n```\n\n**推荐:**\n\n```ts\nclass Employee {\n  private taxData: EmployeeTaxData;\n\n  constructor(\n    private readonly name: string,\n    private readonly email: string) {\n  }\n\n  setTaxData(ssn: string, salary: number): Employee {\n    this.taxData = new EmployeeTaxData(ssn, salary);\n    return this;\n  }\n\n  // ...\n}\n\nclass EmployeeTaxData {\n  constructor(\n    public readonly ssn: string,\n    public readonly salary: number) {\n  }\n\n  // ...\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用链式编程\n\n这种模式非常有用，并且常用于许多库中。 它允许您的代码更直观，而不是冗长。 因此，请使用链式编程并检查代码的清洁程度。\n\n**不推荐:**\n\n```ts\nclass QueryBuilder {\n  private collection: string;\n  private pageNumber: number = 1;\n  private itemsPerPage: number = 100;\n  private orderByFields: string[] = [];\n\n  from(collection: string): void {\n    this.collection = collection;\n  }\n\n  page(number: number, itemsPerPage: number = 100): void {\n    this.pageNumber = number;\n    this.itemsPerPage = itemsPerPage;\n  }\n\n  orderBy(...fields: string[]): void {\n    this.orderByFields = fields;\n  }\n\n  build(): Query {\n    // ...\n  }\n}\n\n// ...\n\nconst queryBuilder = new QueryBuilder();\nqueryBuilder.from('users');\nqueryBuilder.page(1, 100);\nqueryBuilder.orderBy('firstName', 'lastName');\n\nconst query = queryBuilder.build();\n```\n\n**推荐:**\n\n```ts\nclass QueryBuilder {\n  private collection: string;\n  private pageNumber: number = 1;\n  private itemsPerPage: number = 100;\n  private orderByFields: string[] = [];\n\n  from(collection: string): this {\n    this.collection = collection;\n    return this;\n  }\n\n  page(number: number, itemsPerPage: number = 100): this {\n    this.pageNumber = number;\n    this.itemsPerPage = itemsPerPage;\n    return this;\n  }\n\n  orderBy(...fields: string[]): this {\n    this.orderByFields = fields;\n    return this;\n  }\n\n  build(): Query {\n    // ...\n  }\n}\n\n// ...\n\nconst query = new QueryBuilder()\n  .from('users')\n  .page(1, 100)\n  .orderBy('firstName', 'lastName')\n  .build();\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## SOLID原则\n\n### 单一责任原则 (SRP)\n正如代码整洁之道上所说，“应该有且仅有一个原因引起类的变更”，要最大幅度的减少类的变更，如果一个类的功能太负责而你修改的它的一部分，那么很难保证是否会影响到其他地方。\n\n**不推荐:**\n\n```ts\nclass UserSettings {\n  constructor(private readonly user: User) {\n  }\n\n  changeSettings(settings: UserSettings) {\n    if (this.verifyCredentials()) {\n      // ...\n    }\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n```\n\n**推荐:**\n\n```ts\nclass UserAuth {\n  constructor(private readonly user: User) {\n  }\n\n  verifyCredentials() {\n    // ...\n  }\n}\n\n\nclass UserSettings {\n  private readonly auth: UserAuth;\n\n  constructor(private readonly user: User) {\n    this.auth = new UserAuth(user);\n  }\n\n  changeSettings(settings: UserSettings) {\n    if (this.auth.verifyCredentials()) {\n      // ...\n    }\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 开放封闭原则 (OCP)\n\n一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。但并不意味着不做任何修改，低层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段。\n\n**不推荐:**\n\n```ts\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n  }\n\n  // ...\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n  }\n\n  // ...\n}\n\nclass HttpRequester {\n  constructor(private readonly adapter: Adapter) {\n  }\n\n  async fetch<T>(url: string): Promise<T> {\n    if (this.adapter instanceof AjaxAdapter) {\n      const response = await makeAjaxCall<T>(url);\n      // 转换response并返回\n    } else if (this.adapter instanceof NodeAdapter) {\n      const response = await makeHttpCall<T>(url);\n      // 转换response并返回\n    }\n  }\n}\n\nfunction makeAjaxCall<T>(url: string): Promise<T> {\n  // 转换response并返回\n}\n\nfunction makeHttpCall<T>(url: string): Promise<T> {\n  // 转换response并返回\n}\n```\n\n**推荐:**\n\n```ts\nabstract class Adapter {\n  abstract async request<T>(url: string): Promise<T>;\n\n}\n\nclass AjaxAdapter extends Adapter {\n  constructor() {\n    super();\n  }\n\n  async request<T>(url: string): Promise<T>{\n    // 转换response并返回\n  }\n\n  // ...\n}\n\nclass NodeAdapter extends Adapter {\n  constructor() {\n    super();\n  }\n\n  async request<T>(url: string): Promise<T>{\n    // 转换response并返回\n  }\n\n  // ...\n}\n\nclass HttpRequester {\n  constructor(private readonly adapter: Adapter) {\n  }\n\n  async fetch<T>(url: string): Promise<T> {\n    const response = await this.adapter.request<T>(url);\n    // 转换response并返回\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 里氏替换原则 (LSP)\n\n只要父类能出现的地方子类都可以出现，而且替换为子类也不会产生任何错误或异常，使用者可有根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必能适应。\n\n**不推荐:**\n\n```ts\nclass Rectangle {\n  constructor(\n    protected width: number = 0,\n    protected height: number = 0) {\n\n  }\n\n  setColor(color: string): this {\n    // ...\n  }\n\n  render(area: number) {\n    // ...\n  }\n\n  setWidth(width: number): this {\n    this.width = width;\n    return this;\n  }\n\n  setHeight(height: number): this {\n    this.height = height;\n    return this;\n  }\n\n  getArea(): number {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Rectangle {\n  setWidth(width: number): this {\n    this.width = width;\n    this.height = width;\n    return this;\n  }\n\n  setHeight(height: number): this {\n    this.width = height;\n    this.height = height;\n    return this;\n  }\n}\n\nfunction renderLargeRectangles(rectangles: Rectangle[]) {\n  rectangles.forEach((rectangle) => {\n    const area = rectangle\n      .setWidth(4)\n      .setHeight(5)\n      .getArea();\n    rectangle.render(area);\n  });\n}\n\nconst rectangles = [new Rectangle(), new Rectangle(), new Square()];\nrenderLargeRectangles(rectangles);\n```\n\n**推荐:**\n\n```ts\nabstract class Shape {\n  setColor(color: string): this {\n    // ...\n  }\n\n  render(area: number) {\n    // ...\n  }\n\n  abstract getArea(): number;\n}\n\nclass Rectangle extends Shape {\n  constructor(\n    private readonly width = 0,\n    private readonly height = 0) {\n    super();\n  }\n\n  getArea(): number {\n    return this.width * this.height;\n  }\n}\n\nclass Square extends Shape {\n  constructor(private readonly length: number) {\n    super();\n  }\n\n  getArea(): number {\n    return this.length * this.length;\n  }\n}\n\nfunction renderLargeShapes(shapes: Shape[]) {\n  shapes.forEach((shape) => {\n    const area = shape.getArea();\n    shape.render(area);\n  });\n}\n\nconst shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];\nrenderLargeShapes(shapes);\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 接口隔离原则 (ISP)\n\n建立单一接口，不要建立臃肿庞大的接口。接口隔离原则与单一职责的审视角度是不相同的，单一职责要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，而接口隔离原则要求接口的方法尽量少。\n\n**不推荐:**\n\n```ts\ninterface SmartPrinter {\n  print();\n  fax();\n  scan();\n}\n\nclass AllInOnePrinter implements SmartPrinter {\n  print() {\n    // ...\n  }  \n  \n  fax() {\n    // ...\n  }\n\n  scan() {\n    // ...\n  }\n}\n\nclass EconomicPrinter implements SmartPrinter {\n  print() {\n    // ...\n  }  \n  \n  fax() {\n    throw new Error('Fax not supported.');\n  }\n\n  scan() {\n    throw new Error('Scan not supported.');\n  }\n}\n```\n\n**推荐:**\n\n```ts\ninterface Printer {\n  print();\n}\n\ninterface Fax {\n  fax();\n}\n\ninterface Scanner {\n  scan();\n}\n\nclass AllInOnePrinter implements Printer, Fax, Scanner {\n  print() {\n    // ...\n  }  \n  \n  fax() {\n    // ...\n  }\n\n  scan() {\n    // ...\n  }\n}\n\nclass EconomicPrinter implements Printer {\n  print() {\n    // ...\n  }\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 依赖倒置原则 (DIP)\n\n含义：\n1.高层模块不应该依赖低层模块，两者都应该依赖其抽象。\n2.抽象不应该依赖细节。\n3.细节应该依赖抽象。\n  \nDIP 通常通过使用控制反转 (IoC) 来实现. 这里有一个例子 [InversifyJs](https://www.npmjs.com/package/inversify)\n\n**不推荐:**\n\n```ts\nimport { readFile as readFileCb } from 'fs';\nimport { promisify } from 'util';\n\nconst readFile = promisify(readFileCb);\n\ntype ReportData = {\n  // ..\n}\n\nclass XmlFormatter {\n  parse<T>(content: string): T {\n    // 将XML字符串序列化为对象.\n  }\n}\n\nclass ReportReader {\n\n  // 不推荐: 我们已经创建了对特定请求实现的依赖。\n  // 我们应该让ReportReader依赖于一个解析方法：`parse`\n  private readonly formatter = new XmlFormatter();\n\n  async read(path: string): Promise<ReportData> {\n    const text = await readFile(path, 'UTF8');\n    return this.formatter.parse<ReportData>(text);\n  }\n}\n\n// ...\nconst reader = new ReportReader();\nawait report = await reader.read('report.xml');\n```\n\n**推荐:**\n\n```ts\nimport { readFile as readFileCb } from 'fs';\nimport { promisify } from 'util';\n\nconst readFile = promisify(readFileCb);\n\ntype ReportData = {\n  // ..\n}\n\ninterface Formatter {\n  parse<T>(content: string): T;\n}\n\nclass XmlFormatter implements Formatter {\n  parse<T>(content: string): T {\n    // 将XML字符串序列化为对象.\n  }\n}\n\n\nclass JsonFormatter implements Formatter {\n  parse<T>(content: string): T {\n    // 将JSON字符串序列化为对象.\n  }\n}\n\nclass ReportReader {\n  constructor(private readonly formatter: Formatter) {\n  }\n\n  async read(path: string): Promise<ReportData> {\n    const text = await readFile(path, 'UTF8');\n    return this.formatter.parse<ReportData>(text);\n  }\n}\n\n// ...\nconst reader = new ReportReader(new XmlFormatter());\nawait report = await reader.read('report.xml');\n\n// 如果我们需要解析json\nconst reader = new ReportReader(new JsonFormatter());\nawait report = await reader.read('report.json');\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 测试\n测试比编码更重要，如果你的测试数量很少或者根本没有，那么每次修改代码时，你都不会确定有没有破坏其他地方，决定要到什么样的测试程度取决于你的团队，但是100%的覆盖率会让你开发的时候更有信心。这意味你需要一个好的框架之外还需要一个好的[覆盖统计工具](https://github.com/gotwarlost/istanbul)\n没有理由不写测试，有好多很好的js测试框架对typescript都有很好的支持，当您找到适合您团队的时，请始终为您引入的每个新功能/模块编写测试。 如果您首选的方法是测试驱动开发（TDD），那很好，但重点是确保在启动任何功能或重构现有功能之前达到覆盖目标。\n\n### 测试驱动开发的三条原则\n\n1. 除非这能让失败的单元测试通过，否则不允许去编写任何的产品代码。\n2. 只允许编写刚好能够导致失败的单元测试。 （编译失败也属于一种失败）\n3. 只允许编写刚好能够导致一个单元测试失败的产品代码。\n\n**[⬆ 回到顶部](#目录)**\n\n### F.I.R.S.T. 原则\n\n整洁的测试需要遵循以下原则:\n\n- **快速** 测试运行起来应该是快速的因为我们会经常运行他们。\n\n- **独立** 每天测试不允许互相依赖，无论是独立运行还是顺序运行他们的返回应该是相同的。\n\n- **可复现** 测试应该是在任意环境下都是可复现的。\n\n- **自我确认** 测试需要自己体现**通过**或是**不通过**，而不是靠开发者自己比对日志来判断是否通过。\n\n- **及时** 单元测试应该在生产代码之前编写。 如果您在生产代码之后编写测试，您可能会发现编写测试太辛苦了。\n\n**[⬆ 回到顶部](#目录)**\n\n### 测试单一责任\n\n测试也需要遵循**单一责任原则**。\n\n**不推荐:**\n\n```ts\nimport { assert } from 'chai';\n\ndescribe('AwesomeDate', () => {\n  it('handles date boundaries', () => {\n    let date: AwesomeDate;\n\n    date = new AwesomeDate('1/1/2015');\n    assert.equal('1/31/2015', date.addDays(30));\n\n    date = new AwesomeDate('2/1/2016');\n    assert.equal('2/29/2016', date.addDays(28));\n\n    date = new AwesomeDate('2/1/2015');\n    assert.equal('3/1/2015', date.addDays(28));\n  });\n});\n```\n\n**推荐:**\n\n```ts\nimport { assert } from 'chai';\n\ndescribe('AwesomeDate', () => {\n  it('handles 30-day months', () => {\n    const date = new AwesomeDate('1/1/2015');\n    assert.equal('1/31/2015', date.addDays(30));\n  });\n\n  it('handles leap year', () => {\n    const date = new AwesomeDate('2/1/2016');\n    assert.equal('2/29/2016', date.addDays(28));\n  });\n\n  it('handles non-leap year', () => {\n    const date = new AwesomeDate('2/1/2015');\n    assert.equal('3/1/2015', date.addDays(28));\n  });\n});\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 测试的名字应该表示了测试的意图\n\n**不推荐:**\n\n```ts\ndescribe('Calendar', () => {\n  it('2/29/2020', () => {\n    // ...\n  });\n\n  it('throws', () => {\n    // ...\n  });\n});\n```\n\n**推荐:**\n\n```ts\ndescribe('Calendar', () => {\n  it('should handle leap year', () => {\n    // ...\n  });\n\n  it('should throw when format is invalid', () => {\n    // ...\n  });\n});\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 并发\n\n### promises 对比 callbacks\n回调嵌套过多会产生**回调地狱**，使用promises可以有效解决这个问题。\n\n**不推荐:**\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\n\nfunction downloadPage(url: string, saveTo: string, callback: (error: Error, content?: string) => void) {\n  get(url, (error, response) => {\n    if (error) {\n      callback(error);\n    } else {\n      writeFile(saveTo, response.body, (error) => {\n        if (error) {\n          callback(error);\n        } else {\n          callback(null, response.body);\n        }\n      });\n    }\n  });\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html', (error, content) => {\n  if (error) {\n    console.error(error);\n  } else {\n    console.log(content);\n  }\n});\n```\n\n**推荐:**\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = promisify(writeFile);\n\nfunction downloadPage(url: string, saveTo: string): Promise<string> {\n  return get(url)\n    .then(response => write(saveTo, response));\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html')\n  .then(content => console.log(content))\n  .catch(error => console.error(error));  \n```\n\n**[⬆ 回到顶部](#目录)**\n\n### Async/Await 比 Promises 更加简洁\n\n使用`async` /`await`语法，您可以编写比链式调用更清晰，更易理解的代码。 在一个以`async`关键字为前缀的方法中，您可以告诉JavaScript运行时暂停执行`await`关键字上的代码（当在promise上使用时）。\n\n**不推荐:**\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = util.promisify(writeFile);\n\nfunction downloadPage(url: string, saveTo: string): Promise<string> {\n  return get(url).then(response => write(saveTo, response));\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html')\n  .then(content => console.log(content))\n  .catch(error => console.error(error));  \n```\n\n**推荐:**\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = promisify(writeFile);\n\nasync function downloadPage(url: string, saveTo: string): Promise<string> {\n  const response = await get(url);\n  await write(saveTo, response);\n  return response;\n}\n\ntry {\n  const content = await downloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html');\n  console.log(content);\n} catch (error) {\n  console.error(error);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 异常处理\n\n抛出异常是件好事！ 它们意味着运行时已经成功识别出程序中的某些内容出错并及时通知您。\n\n### 始终使用`Error`对象来抛出错误。\n\n**不推荐:**\n\n```ts\nfunction calculateTotal(items: Item[]): number {\n  throw 'Not implemented.';\n}\n\nfunction get(): Promise<Item[]> {\n  return Promise.reject('Not implemented.');\n}\n```\n\n**推荐:**\n\n```ts\nfunction calculateTotal(items: Item[]): number {\n  throw new Error('Not implemented.');\n}\n\nfunction get(): Promise<Item[]> {\n  return Promise.reject(new Error('Not implemented.'));\n}\n\nasync function get(): Promise<Item[]> {\n  throw new Error('Not implemented.');\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要忽略掉捕捉后的错误\n\n对捕获的错误不执行任何操作并不能使您能够修复或对所述错误做出反应。 将错误记录到控制台（`console.log`）也不是很好，因为它常常会被其他东西所淹没。 所以你应该有一个统一的地方集中处理这些错误。\n\n**不推荐:**\n\n```ts\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  console.log(error);\n}\n\n// 或者更严重\n\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  // 直接忽略掉\n}\n```\n\n**推荐:**\n\n```ts\nimport { logger } from './logging'\n\ntry {\n  functionThatMightThrow();\n} catch (error) {\n  logger.log(error);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要忽略promises 的 rejected\n\n就像不能忽略`try/catch`到的异常一样\n\n**不推荐:**\n\n```ts\ngetUser()\n  .then((user: User) => {\n    return sendEmail(user.email, 'Welcome!');\n  })\n  .catch((error) => {\n    console.log(error);\n  });\n```\n\n**推荐:**\n\n```ts\nimport { logger } from './logging'\n\ngetUser()\n  .then((user: User) => {\n    return sendEmail(user.email, 'Welcome!');\n  })\n  .catch((error) => {\n    logger.log(error);\n  });\n\n// 或者\n\ntry {\n  const user = await getUser();\n  await sendEmail(user.email, 'Welcome!');\n} catch (error) {\n  logger.log(error);\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 格式化\n\n格式化是主观的。 像这里的许多规则一样，没有必须遵循特定硬性规则。 重点是*不要过于格式化*格式化。 有很多工具可以实现自动化。 用一个就好！ 工程师争论格式化是浪费时间和金钱的。 遵循的一般规则是*保持一致的格式规则*就可以了。\n\nTypeScript 有一个很强大的工具叫做 [TSLint](https://palantir.github.io/tslint/). 它是一个静态分析工具，可以帮助您显着提高代码的可读性和可维护性。 下面是您可以在项目中引用的TSLint配置：\n\n- [TSLint Config Standard](https://www.npmjs.com/package/tslint-config-standard) - 标准风格规则\n\n- [TSLint Config Airbnb](https://www.npmjs.com/package/tslint-config-airbnb) - Airbnb风格\n\n- [TSLint Clean Code](https://www.npmjs.com/package/tslint-clean-code) - 代码整洁之道的规则\n\n- [TSLint react](https://www.npmjs.com/package/tslint-react) - React 和 JSX 的规则\n\n- [TSLint + Prettier](https://www.npmjs.com/package/tslint-config-prettier) -  [Prettier](https://github.com/prettier/prettier) 代码风格\n\n- [ESLint rules for TSLint](https://www.npmjs.com/package/tslint-eslint-rules) - ESLint 规则\n\n### 使用一致的写法\n\n这些规则是主观的，所以你的团队可以选择按自己的风格制定。 关键是，无论你选择什么，只要*保持一致*。\n\n**不推荐:**\n\n```ts\nconst DAYS_IN_WEEK = 7;\nconst daysInMonth = 30;\n\nconst songs = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\nconst Artists = ['ACDC', 'Led Zeppelin', 'The Beatles'];\n\nfunction eraseDatabase() {}\nfunction restore_database() {}\n\ntype animal = { /* ... */ }\ntype Container = { /* ... */ }\n```\n\n**推荐:**\n\n```ts\nconst DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = 30;\n\nconst SONGS = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\nconst ARTISTS = ['ACDC', 'Led Zeppelin', 'The Beatles'];\n\nfunction eraseDatabase() {}\nfunction restoreDatabase() {}\n\ntype Animal = { /* ... */ }\ntype Container = { /* ... */ }\n```\n\n\n**[⬆ 回到顶部](#目录)**\n\n### 调用者和被调用者的方法应该是相邻的\n\n如果函数调用另一个函数，请在源文件中设置这两个函数相邻。 理想情况下，将呼叫者保持在被叫者正上方。\n我们倾向于从头到尾阅读代码，就像报纸一样。 因此，请以这种方式阅读您的代码。\n\n**不推荐:**\n\n```ts\nclass PerformanceReview {\n  constructor(private readonly employee: Employee) {\n  }\n\n  private lookupPeers() {\n    return db.lookup(this.employee.id, 'peers');\n  }\n\n  private lookupManager() {\n    return db.lookup(this.employee, 'manager');\n  }\n\n  private getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  review() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n\n    // ...\n  }\n\n  private getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  private getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.review();\n```\n\n**推荐:**\n\n```ts\nclass PerformanceReview {\n  constructor(private readonly employee: Employee) {\n  }\n\n  review() {\n    this.getPeerReviews();\n    this.getManagerReview();\n    this.getSelfReview();\n\n    // ...\n  }\n\n  private getPeerReviews() {\n    const peers = this.lookupPeers();\n    // ...\n  }\n\n  private lookupPeers() {\n    return db.lookup(this.employee.id, 'peers');\n  }\n\n  private getManagerReview() {\n    const manager = this.lookupManager();\n  }\n\n  private lookupManager() {\n    return db.lookup(this.employee, 'manager');\n  }\n\n  private getSelfReview() {\n    // ...\n  }\n}\n\nconst review = new PerformanceReview(employee);\nreview.review();\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 组织 imports\n\n使用简洁易读的import语句，您可以快速查看当前代码的依赖关系。 确保对`import`语句应用以下良好实践：\n\n- 导入语句应按字母顺序排列并分组。\n- 不需要的引用应该被移除。\n- 命名导入必须按字母顺序排列 例如: `import {A, B, C} from 'foo';`\n- 导入源必须在组内按字母顺序排列, 例如: `import * as foo from 'a'; import * as bar from 'b';`\n- 每一组引用之间用空行分隔。\n- 分组之间需要遵循以下顺序:\n  - Polyfills (例如. `import 'reflect-metadata';`)\n  - Node 内置模块 (例如. `import fs from 'fs';`)\n  - 外部模块 (例如. `import { query } from 'itiriri';`)\n  - 内部模块 (例如. `import { UserService } from 'src/services/userService';`)\n  - 来自父目录的模块 (例如. `import foo from '../foo'; import qux from '../../foo/qux';`)\n  - 来自兄弟目录或同目录的模块 (例如. `import bar from './bar'; import baz from './bar/baz';`)\n\n**不推荐:**\n\n```ts\nimport { TypeDefinition } from '../types/typeDefinition';\nimport { AttributeTypes } from '../model/attribute';\nimport { ApiCredentials, Adapters } from './common/api/authorization';\nimport fs from 'fs';\nimport { ConfigPlugin } from './plugins/config/configPlugin';\nimport { BindingScopeEnum, Container } from 'inversify';\nimport 'reflect-metadata';\n```\n\n**推荐:**\n\n```ts\nimport 'reflect-metadata';\n\nimport fs from 'fs';\nimport { BindingScopeEnum, Container } from 'inversify';\n\nimport { AttributeTypes } from '../model/attribute';\nimport { TypeDefinition } from '../types/typeDefinition';\n\nimport { ApiCredentials, Adapters } from './common/api/authorization';\nimport { ConfigPlugin } from './plugins/config/configPlugin';\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 使用别名\n\n通过在`tsconfig.json`的compilerOptions部分中定义路径和baseUrl属性来创建更漂亮的导入。\n这样可以在进行导入时避免长的相对路径。\n\n**不推荐:**\n\n```ts\nimport { UserService } from '../../../services/UserService';\n```\n\n**推荐:**\n\n```ts\nimport { UserService } from '@services/UserService';\n```\n\n```js\n// tsconfig.json\n...\n  \"compilerOptions\": {\n    ...\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"@services\": [\"services/*\"]\n    }\n    ...\n  }\n...\n```\n\n**[⬆ 回到顶部](#目录)**\n\n## 注释\n\n当没有注释无法表达的时候，才使用注释\n\n### 更倾向于自解释代码而不是注释\n\n**不推荐:**\n\n```ts\n// 检查订阅是否到期\nif (subscription.endDate > Date.now) {  }\n```\n\n**推荐:**\n\n```ts\nconst isSubscriptionActive = subscription.endDate > Date.now;\nif (isSubscriptionActive) { /* ... */ }\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要在代码库中留下注释的代码\n\n版本控制的存在是有原因的。 在您的历史记录中保留旧代码。\n\n**不推荐:**\n\n```ts\ntype User = {\n  name: string;\n  email: string;\n  // age: number;\n  // jobPosition: string;\n}\n```\n\n**推荐:**\n\n```ts\ntype User = {\n  name: string;\n  email: string;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 不要使用日记评论\n\n请记住，使用版本控制！ 不需要无用代码，注释代码，尤其是日记评论。 使用`git log`获取历史记录！\n\n**不推荐:**\n\n```ts\n/**\n * 2016-12-20: Removed monads, didn't understand them (RM)\n * 2016-10-01: Improved using special monads (JP)\n * 2016-02-03: Added type-checking (LI)\n * 2015-03-14: Implemented combine (JR)\n */\nfunction combine(a: number, b: number): number {\n  return a + b;\n}\n```\n\n**推荐:**\n\n```ts\nfunction combine(a: number, b: number): number {\n  return a + b;\n}\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### 禁止位置分隔\n这会增加代码噪声，大多数IDE是支持代码折叠的，请使用。\n\n**不推荐:**\n\n```ts\n////////////////////////////////////////////////////////////////////////////////\n// Client class\n////////////////////////////////////////////////////////////////////////////////\nclass Client {\n  id: number;\n  name: string;\n  address: Address;\n  contact: Contact;\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // public methods\n  ////////////////////////////////////////////////////////////////////////////////\n  public describe(): string {\n    // ...\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////\n  // private methods\n  ////////////////////////////////////////////////////////////////////////////////\n  private describeAddress(): string {\n    // ...\n  }\n\n  private describeContact(): string {\n    // ...\n  }\n};\n```\n\n**推荐:**\n\n```ts\nclass Client {\n  id: number;\n  name: string;\n  address: Address;\n  contact: Contact;\n\n  public describe(): string {\n    // ...\n  }\n\n  private describeAddress(): string {\n    // ...\n  }\n\n  private describeContact(): string {\n    // ...\n  }\n};\n```\n\n**[⬆ 回到顶部](#目录)**\n\n### TODO 标记\n\n当您发现自己需要在代码中留下注释以进行后续改进时，使用`// TODO`注释来实现。 大多数IDE都支持这种注释，方便你可以快速浏览整个待办事项列表。\n\n**不推荐:**\n\n```ts\nfunction getActiveSubscriptions(): Promise<Subscription[]> {\n  // ensure `dueDate` is indexed.\n  return db.subscriptions.find({ dueDate: { $lte: new Date() } });\n}\n```\n\n**推荐:**\n\n```ts\nfunction getActiveSubscriptions(): Promise<Subscription[]> {\n  // TODO: ensure `dueDate` is indexed.\n  return db.subscriptions.find({ dueDate: { $lte: new Date() } });\n}\n```\n\n**[⬆ 回到顶部](#目录)**","slug":"代码整洁之道在typescript中的实现","published":1,"updated":"2020-03-09T03:01:45.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nt003h1q2dp2csqgam","content":"<p>代码整洁之道在typescript中的实现<br>灵感来源于 <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">clean-code-javascript</a>。</p>\n<a id=\"more\"></a>\n<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#简介\">简介</a></li>\n<li><a href=\"#变量\">变量</a></li>\n<li><a href=\"#方法\">方法</a></li>\n<li><a href=\"#对象和数据结构\">对象和数据结构</a></li>\n<li><a href=\"#类\">类</a></li>\n<li><a href=\"#SOLID原则\">SOLID原则</a></li>\n<li><a href=\"#测试\">测试</a></li>\n<li><a href=\"#并发\">并发</a></li>\n<li><a href=\"#异常处理\">异常处理</a></li>\n<li><a href=\"#格式化\">格式化</a></li>\n<li><a href=\"#注释\">注释</a></li>\n</ol>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><img src=\"https://www.osnews.com/images/comics/wtfm.jpg\" alt=\"软件质量取决于阅读代码时骂人的次数\"></p>\n<p>本文是 Robert C 所书写的关于软件工程原理的书籍《代码整洁之道》的 TypeScript版，这不是一篇风格指南，而是为了使用 TypeScript 生成可读、可复用和可重构的软件指南。<br>本文中并非所有的原则都必须严格遵守，其中仅有一部分原则会被普遍认同，这些仅仅是一些原则，只是致力于整洁代码的作者们多年的经验。<br>我们的软件工程技术只有50多年的历史，我们仍旧在学很多东西，当软件架构和架构本身一样古老时，我们更难去遵守规则，现在，就让这些指南最为评估您和您团队的 TypeScript 代码质量的炼金石吧。<br>此外，了解这些知识并不会让您马上成为一名优秀的软件开发人员，与代码合作多年并不意味着您不会犯错误，每一段代码都是从初稿开始，向黏土一样慢慢被塑造成最终的形状。然后，在我们与同行一起审查时，我们会慢慢去修复不完美的地方，所以不要因为改进初稿而感到挫败，让我们去打败代码吧。</p>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"使用有意义的变量名称\"><a href=\"#使用有意义的变量名称\" class=\"headerlink\" title=\"使用有意义的变量名称\"></a>使用有意义的变量名称</h3><p>给变量取一个有意义的名称以便于帮助读者去区分变量之前的区别</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">between</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">a1: T, a2: T, a3: T</span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a2 &lt;= a1 &amp;&amp; a1 &lt;= a3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">between</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value: T, left: T, right: T</span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left &lt;= value &amp;&amp; value &lt;= right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用容易拼读的变量名称\"><a href=\"#使用容易拼读的变量名称\" class=\"headerlink\" title=\"使用容易拼读的变量名称\"></a>使用容易拼读的变量名称</h3><p>如果你无法拼读它，你会像一个白痴一样无法解释它</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> DtaRcrd102 = &#123;</span><br><span class=\"line\">  genymdhms: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">  modymdhms: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">  pszqint: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Customer = &#123;</span><br><span class=\"line\">  generationTimestamp: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">  modificationTimestamp: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">  recordId: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"为同样类型的变量使用同样的词汇\"><a href=\"#为同样类型的变量使用同样的词汇\" class=\"headerlink\" title=\"为同样类型的变量使用同样的词汇\"></a>为同样类型的变量使用同样的词汇</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserInfo</span>(<span class=\"params\"></span>): <span class=\"title\">User</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserDetails</span>(<span class=\"params\"></span>): <span class=\"title\">User</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserData</span>(<span class=\"params\"></span>): <span class=\"title\">User</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUser</span>(<span class=\"params\"></span>): <span class=\"title\">User</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用有意义的名称\"><a href=\"#使用有意义的名称\" class=\"headerlink\" title=\"使用有意义的名称\"></a>使用有意义的名称</h3><p>相比于写代码而言，我们更多的是去阅读代码，所以你写的代码是否可读和可检索至关重要，未命名的变量会影响对我们代码里理解，并伤害读者，所以让你的变量名可检索。可以使用<a href=\"https://palantir.github.io/tslint/rules/no-magic-numbers/\" target=\"_blank\" rel=\"noopener\">TSLint</a> 来帮助识别未命名的常量。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 86400000 是什么鬼?</span></span><br><span class=\"line\">setTimeout(restart, <span class=\"number\">86400000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将它们声明为大写的命名常量.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MILLISECONDS_IN_A_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(restart, MILLISECONDS_IN_A_DAY);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用可解释的变量\"><a href=\"#使用可解释的变量\" class=\"headerlink\" title=\"使用可解释的变量\"></a>使用可解释的变量</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">const</span> users: Map&lt;<span class=\"built_in\">string</span>, User&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> keyValue of users) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">const</span> users: Map&lt;<span class=\"built_in\">string</span>, User&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [id, user] of users) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用有意义的变量来避免心里映射\"><a href=\"#使用有意义的变量来避免心里映射\" class=\"headerlink\" title=\"使用有意义的变量来避免心里映射\"></a>使用有意义的变量来避免心里映射</h3><p>显示由于隐式</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> u = getUser();</span><br><span class=\"line\"><span class=\"keyword\">const</span> s = getSubscription();</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = charge(u, s);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = getUser();</span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = getSubscription();</span><br><span class=\"line\"><span class=\"keyword\">const</span> transaction = charge(user, subscription);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要添加不必要的上下文\"><a href=\"#不要添加不必要的上下文\" class=\"headerlink\" title=\"不要添加不必要的上下文\"></a>不要添加不必要的上下文</h3><p>如果你的 class/type/object 的名称已经告诉了你，就不要要在属性里在重复写一遍。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Car = &#123;</span><br><span class=\"line\">  carMake: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  carModel: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  carColor: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">car: Car</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;car.carMake&#125;</span> <span class=\"subst\">$&#123;car.carModel&#125;</span> (<span class=\"subst\">$&#123;car.carColor&#125;</span>)`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Car = &#123;</span><br><span class=\"line\">  make: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  model: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  color: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">car: Car</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;car.make&#125;</span> <span class=\"subst\">$&#123;car.model&#125;</span> (<span class=\"subst\">$&#123;car.color&#125;</span>)`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"尽量使用默认参数，而不是再进行判断\"><a href=\"#尽量使用默认参数，而不是再进行判断\" class=\"headerlink\" title=\"尽量使用默认参数，而不是再进行判断\"></a>尽量使用默认参数，而不是再进行判断</h3><p>默认参数通常比再行判断更清晰。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadPages</span>(<span class=\"params\">count?: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loadCount = count !== <span class=\"literal\">undefined</span> ? count : <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadPages</span>(<span class=\"params\">count: <span class=\"built_in\">number</span> = 10</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"参数-最多两个\"><a href=\"#参数-最多两个\" class=\"headerlink\" title=\"参数 (最多两个)\"></a>参数 (最多两个)</h3><p>限制方法参数的数量至关重要，因为它会使得您方法的测试变得更容易，参数数量超过三个就会造成过多的组合，你必须用每个单独的参数去测试大量的情况。<br>一个或两个参数是最理想的情况，如果可能的话应该尽量避免三个，应该去整合除此之外的任何东西。</p>\n<p>通常如果你有两个以上的参数，说明你的方法做了太多的事情，如果不是，则用更高级的对象来作为参数。</p>\n<p>如果你发现自己需要大量参数，则考虑使用对象。</p>\n<p>可以使用<a href=\"https://basarat.gitbooks.io/typescript/docs/destructuring.html\" target=\"_blank\" rel=\"noopener\">结构赋值</a>来明确方法所期望的参数属性。<br>这样有一些优点：</p>\n<ol>\n<li>当有人查看功能签名时，会立即清楚正在使用的属性。</li>\n<li>解构还克隆传递给函数的参数对象的指定原始值。 这有助于预防副作用。 注意：不会克隆从参数对象中解构的对象和数组。</li>\n<li>TypeScript会警告您未使用的属性，如果没有解构，这将是不可能的。</li>\n</ol>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">title: <span class=\"built_in\">string</span>, body: <span class=\"built_in\">string</span>, buttonText: <span class=\"built_in\">string</span>, cancellable: <span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(<span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>, <span class=\"string\">'Baz'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">options: &#123; title: <span class=\"built_in\">string</span>, body: <span class=\"built_in\">string</span>, buttonText: <span class=\"built_in\">string</span>, cancellable: <span class=\"built_in\">boolean</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">  body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">  buttonText: <span class=\"string\">'Baz'</span>,</span><br><span class=\"line\">  cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>你可以使用<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases\" target=\"_blank\" rel=\"noopener\">类型别名</a>来进一步提高可读性:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MenuOptions = &#123; title: <span class=\"built_in\">string</span>, body: <span class=\"built_in\">string</span>, buttonText: <span class=\"built_in\">string</span>, cancellable: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">options: MenuOptions</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">  body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">  buttonText: <span class=\"string\">'Baz'</span>,</span><br><span class=\"line\">  cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"每个方法只做一件事情\"><a href=\"#每个方法只做一件事情\" class=\"headerlink\" title=\"每个方法只做一件事情\"></a>每个方法只做一件事情</h3><p>这是迄今为止软件工程中最重要的规则。 当一个方法执行多个操作时，它们会更加难以编写，测试和推理。 当您可以将一个函数隔离到一个动作时，它们可以轻松地重构，并且您的代码将更加清晰。 如果你除了这个之外没有别的东西，那么你将领先于许多开发者。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emailClients</span>(<span class=\"params\">clients: Client[]</span>) </span>&#123;</span><br><span class=\"line\">  clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientRecord = database.lookup(client);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clientRecord.isActive()) &#123;</span><br><span class=\"line\">      email(client);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emailClients</span>(<span class=\"params\">clients: Client[]</span>) </span>&#123;</span><br><span class=\"line\">  clients.filter(isActiveClient).forEach(email);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isActiveClient</span>(<span class=\"params\">client: Client</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> clientRecord = database.lookup(client);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clientRecord.isActive();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"在方法名上体现要做的事情\"><a href=\"#在方法名上体现要做的事情\" class=\"headerlink\" title=\"在方法名上体现要做的事情\"></a>在方法名上体现要做的事情</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addToDate</span>(<span class=\"params\">date: <span class=\"built_in\">Date</span>, month: <span class=\"built_in\">number</span></span>): <span class=\"title\">Date</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 很难从方法名中看出增加的是什么</span></span><br><span class=\"line\">addToDate(date, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addMonthToDate</span>(<span class=\"params\">date: <span class=\"built_in\">Date</span>, month: <span class=\"built_in\">number</span></span>): <span class=\"title\">Date</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">addMonthToDate(date, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"方法应该只是一个级别的抽象\"><a href=\"#方法应该只是一个级别的抽象\" class=\"headerlink\" title=\"方法应该只是一个级别的抽象\"></a>方法应该只是一个级别的抽象</h3><p>如果你的一个方法有多个级别的抽象，这说明这个方法做的事情太多了。必要的拆分可以使得方法更容易被重用和更容易测试。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseCode</span>(<span class=\"params\">code: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> REGEXES = [ <span class=\"comment\">/* ... */</span> ];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> statements = code.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tokens = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  REGEXES.forEach(<span class=\"function\">(<span class=\"params\">regex</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    statements.forEach(<span class=\"function\">(<span class=\"params\">statement</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = [];</span><br><span class=\"line\">  tokens.forEach(<span class=\"function\">(<span class=\"params\">token</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// lex...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  ast.forEach(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// parse...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> REGEXES = [ <span class=\"comment\">/* ... */</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseCode</span>(<span class=\"params\">code: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tokens = tokenize(code);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> syntaxTree = parse(tokens);</span><br><span class=\"line\"></span><br><span class=\"line\">  syntaxTree.forEach(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// parse...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tokenize</span>(<span class=\"params\">code: <span class=\"built_in\">string</span></span>): <span class=\"title\">Token</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> statements = code.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tokens: Token[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  REGEXES.forEach(<span class=\"function\">(<span class=\"params\">regex</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    statements.forEach(<span class=\"function\">(<span class=\"params\">statement</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      tokens.push( <span class=\"comment\">/* ... */</span> );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tokens;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\">tokens: Token[]</span>): <span class=\"title\">SyntaxTree</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> syntaxTree: SyntaxTree[] = [];</span><br><span class=\"line\">  tokens.forEach(<span class=\"function\">(<span class=\"params\">token</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    syntaxTree.push( <span class=\"comment\">/* ... */</span> );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> syntaxTree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"移除重复代码\"><a href=\"#移除重复代码\" class=\"headerlink\" title=\"移除重复代码\"></a>移除重复代码</h3><p>尽量避免重复代码<br>重复代码是很糟糕的，因为这意味着如果你需要改某些逻辑，则必须去同时修改改多个地方。</p>\n<p>想象一下，如果你经营者一家餐馆并需要追踪你的库存，比如你的西红柿、洋葱、大蒜、香料等，如果你有多个地方记录他们，每当他们变化了你就需要更新多个列表，如果你只有一个列表，那么你只用更新一个地方！</p>\n<p>通常重复代码的出现是因为你有两个或者两个以上略有不同的东西，他们有很多共同之处，但是他们之间的差异迫使你需要有两个或者多个独立的方法来执行大部分相同的事情，删除重复代码意味着创建一个抽象，只需要一个方法/模块/类就可以处理这组不同的东西。</p>\n<p>获得正确的抽象是至关重要的，这就是为什么你需要遵循<a href=\"#单一责任原则\">单一责任原则</a>，但是糟糕的抽象可能比重复代码更加糟糕，所以一定要小心，如果你能实现好的抽象，尽量去实现它，不要去做重复的事情。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showDeveloperList</span>(<span class=\"params\">developers: Developer[]</span>) </span>&#123;</span><br><span class=\"line\">  developers.forEach(<span class=\"function\">(<span class=\"params\">developer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> experience = developer.getExperience();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> githubLink = developer.getGithubLink();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">      expectedSalary,</span><br><span class=\"line\">      experience,</span><br><span class=\"line\">      githubLink</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showManagerList</span>(<span class=\"params\">managers: Manager[]</span>) </span>&#123;</span><br><span class=\"line\">  managers.forEach(<span class=\"function\">(<span class=\"params\">manager</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> experience = manager.getExperience();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> portfolio = manager.getMBAProjects();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">      expectedSalary,</span><br><span class=\"line\">      experience,</span><br><span class=\"line\">      portfolio</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Developer &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getExtraDetails() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      githubLink: <span class=\"keyword\">this</span>.githubLink,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Manager &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getExtraDetails() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      portfolio: <span class=\"keyword\">this</span>.portfolio,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showEmployeeList</span>(<span class=\"params\">employee: Developer | Manager</span>) </span>&#123;</span><br><span class=\"line\">  employee.forEach(<span class=\"function\">(<span class=\"params\">employee</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> experience = employee.getExperience();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> extra = employee.getExtraDetails();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">      expectedSalary,</span><br><span class=\"line\">      experience,</span><br><span class=\"line\">      extra,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用Object-assign或者解析构值来定义默认的对象\"><a href=\"#使用Object-assign或者解析构值来定义默认的对象\" class=\"headerlink\" title=\"使用Object.assign或者解析构值来定义默认的对象\"></a>使用<code>Object.assign</code>或者解析构值来定义默认的对象</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MenuConfig = &#123; title?: <span class=\"built_in\">string</span>, body?: <span class=\"built_in\">string</span>, buttonText?: <span class=\"built_in\">string</span>, cancellable?: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">config: MenuConfig</span>) </span>&#123;</span><br><span class=\"line\">  config.title = config.title || <span class=\"string\">'Foo'</span>;</span><br><span class=\"line\">  config.body = config.body || <span class=\"string\">'Bar'</span>;</span><br><span class=\"line\">  config.buttonText = config.buttonText || <span class=\"string\">'Baz'</span>;</span><br><span class=\"line\">  config.cancellable = config.cancellable !== <span class=\"literal\">undefined</span> ? config.cancellable : <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123; body: <span class=\"string\">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MenuConfig = &#123; title?: <span class=\"built_in\">string</span>, body?: <span class=\"built_in\">string</span>, buttonText?: <span class=\"built_in\">string</span>, cancellable?: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">config: MenuConfig</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> menuConfig = <span class=\"built_in\">Object</span>.assign(&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    buttonText: <span class=\"string\">'Baz'</span>,</span><br><span class=\"line\">    cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;, config);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123; body: <span class=\"string\">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>或者，你也可以使用解析构值来实现。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MenuConfig = &#123; title?: <span class=\"built_in\">string</span>, body?: <span class=\"built_in\">string</span>, buttonText?: <span class=\"built_in\">string</span>, cancellable?: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">&#123; title = 'Foo', body = 'Bar', buttonText = 'Baz', cancellable = <span class=\"literal\">true</span> &#125;: MenuConfig</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123; body: <span class=\"string\">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>通过显示传入<code>undefined</code>或者<code>null</code>值来避免任何副作用，也可以告诉<code>TypeScript</code>编译器不允许他们。请参阅<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks\" target=\"_blank\" rel=\"noopener\"><code>--strictNullChecks</code></a></p>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要将布尔值作为方法的参数\"><a href=\"#不要将布尔值作为方法的参数\" class=\"headerlink\" title=\"不要将布尔值作为方法的参数\"></a>不要将布尔值作为方法的参数</h3><p>布尔值表示了你的方法不止做了一件事情，请根据布尔值拆分你的方法。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFile</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, temp: <span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (temp) &#123;</span><br><span class=\"line\">    fs.create(<span class=\"string\">`./temp/<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fs.create(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTempFile</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  createFile(<span class=\"string\">`./temp/<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFile</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  fs.create(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"避免副作用（第一部分）\"><a href=\"#避免副作用（第一部分）\" class=\"headerlink\" title=\"避免副作用（第一部分）\"></a>避免副作用（第一部分）</h3><p>如果一个方法除了返回值以外还进行了其他操作并影响了一个或者多个值，这个函数就会产生副作用。副作用可能是写入文件，修改某个全局变量，或意外地将所有资源连接给陌生人。<br>如果你确实需要一个方法产生副作用，例如刚才所说的写入文件之类的，那么不要使用多个方法或者类去写入特定的文件，而是只使用一个服务来实现它。<br>重点是避免常见的陷阱，比如在没有任何结构的对象之间共享状态，使用可以由任何东西写入的可变数据类型，而不是集中在副作用发生的位置。 如果你能做到这一点，你会比绝大多数其他程序员更快乐。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'Robert C. Martin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toBase64</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  name = btoa(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">toBase64();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 打印的已经不是 'Robert C. Martin' 而是 'Um9iZXJ0IEMuIE1hcnRpbg=='</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Robert C. Martin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toBase64</span>(<span class=\"params\">text: <span class=\"built_in\">string</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> btoa(text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> encodedName = toBase64(name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"避免副作用（第二部分）\"><a href=\"#避免副作用（第二部分）\" class=\"headerlink\" title=\"避免副作用（第二部分）\"></a>避免副作用（第二部分）</h3><p>在JavaScript中，值类型通过值来传递，对象/数组通过引用传递，对于对象和数组，如果你在方法中进行了修改，那么该对象或数组在其他方法中都将受到影响，这有时候会很棒，但有时候也会很糟糕，让我们来思考一个糟糕的场景：<br>用户点击<code>购买</code>按钮，然后调用网络请求<code>购买</code>功能的接口，并将购物车的内容以数组的形式发送给后台，由于网络连接不畅，用户可能会继续重试请求。那如果在此期间用户在网络请求之前不小心点击了他们实际上不想购买的物品上的<code>添加到购物车</code>按钮，该怎么办？如果发生了这种情况并网络请求开始，那么该物品也意外得被购买了，因为它具有多购物车的引用。<br>一个很好的解决方案是<code>addItemToCart</code>始终克隆<code>cart</code>，编辑它，然后返回克隆。 这样可以确保任何保留在购物车参考上的其他功能都不会受到任何更改的影响。<br>提到这种方法的两点需要注意：<br>1.在某些情况下，您可能确实想要修改输入对象，但是当您采用这种编程习惯时，您会发现这些情况非常罕见。 大多数东西都可以重构，没有副作用！ （见[纯函数]（<a href=\"https://en.wikipedia.org/wiki/Pure_function））\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Pure_function））</a><br>克隆大对象在性能方面可能非常昂贵。 幸运的是，这在实践中不是一个大问题，因为有很好的库快速实现而不是像手动克隆对象和数组那样占用大量内存。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addItemToCart</span>(<span class=\"params\">cart: CartItem[], item: Item</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  cart.push(&#123; item, date: <span class=\"built_in\">Date</span>.now() &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addItemToCart</span>(<span class=\"params\">cart: CartItem[], item: Item</span>): <span class=\"title\">CartItem</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...cart, &#123; item, date: <span class=\"built_in\">Date</span>.now() &#125;];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要书写全局方法\"><a href=\"#不要书写全局方法\" class=\"headerlink\" title=\"不要书写全局方法\"></a>不要书写全局方法</h3><p>污点全局变量在JavaScript中是一种不好的做法，因为你可能会与另一个库发生冲突。 让我们考虑一个例子：如果你想扩展JavaScript的原生Array方法以获得一个可以显示两个数组之间差异的<code>diff</code>方法，该怎么办？ 您可以将新函数写入<code>Array.prototype</code>，但它可能会与另一个尝试执行相同操作的库发生冲突。 如果那个其他库只是使用<code>diff</code>找到数组的第一个和最后一个元素之间的区别怎么办？ 这就是为什么只使用类并简单地扩展<code>Array</code>全局变得更好的原因。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> global &#123;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> Array&lt;T&gt; &#123;</span><br><span class=\"line\">    diff(other: T[]): <span class=\"built_in\">Array</span>&lt;T&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.diff) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.diff = <span class=\"function\"><span class=\"keyword\">function</span> &lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">other: T[]</span>): <span class=\"title\">T</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> Set(other);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> MyArray&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"built_in\">Array</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  diff(other: T[]): T[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> Set(other);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用函数式编程而不是命令式编程\"><a href=\"#使用函数式编程而不是命令式编程\" class=\"headerlink\" title=\"使用函数式编程而不是命令式编程\"></a>使用函数式编程而不是命令式编程</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> contributions = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Uncle Bobby'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Suzie Q'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jimmy Gosling'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">150</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Gracie Hopper'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> totalOutput = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; contributions.length; i++) &#123;</span><br><span class=\"line\">  totalOutput += contributions[i].linesOfCode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> contributions = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Uncle Bobby'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Suzie Q'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jimmy Gosling'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">150</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Gracie Hopper'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> totalOutput = contributions</span><br><span class=\"line\">  .reduce(<span class=\"function\">(<span class=\"params\">totalLines, output</span>) =&gt;</span> totalLines + output.linesOfCode, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"封装条件\"><a href=\"#封装条件\" class=\"headerlink\" title=\"封装条件\"></a>封装条件</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (subscription.isTrial || account.balance &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canActivateService</span>(<span class=\"params\">subscription: Subscription, account: Account</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> subscription.isTrial || account.balance &gt; <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (canActivateService(subscription, account)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"避免负向判断\"><a href=\"#避免负向判断\" class=\"headerlink\" title=\"避免负向判断\"></a>避免负向判断</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmailNotUsed</span>(<span class=\"params\">email: <span class=\"built_in\">string</span></span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isEmailNotUsed(email)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmailUsed</span>(<span class=\"params\">email</span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isEmailUsed(node)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"减少判断\"><a href=\"#减少判断\" class=\"headerlink\" title=\"减少判断\"></a>减少判断</h3><p>这似乎是一项不可能的任务。 在第一次听到这个观点时，大多数人都会说，“如果没有<code>if</code>陈述，我该怎么做？” 答案是，在许多情况下，都可以使用多态来实现相同的任务。 第二个问题通常是，“那很好，但我为什么要那样做呢？” 答案是我们之前学到的一个简洁的代码概念：一个函数应该只做一件事。 当你有具有<code>if</code>语句的类和函数时，你告诉你的用户你的函数不止一件事。 记住，只做一件事。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'777'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getPassengerCount();</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'Air Force One'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude();</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'Cessna'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getFuelExpenditure();</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Unknown airplane type.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getMaxAltitude(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> getMaxAltitude(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// shared logic with subclasses ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Boeing777 <span class=\"keyword\">extends</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getPassengerCount();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> AirForceOne <span class=\"keyword\">extends</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Cessna <span class=\"keyword\">extends</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getFuelExpenditure();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要过度优化\"><a href=\"#不要过度优化\" class=\"headerlink\" title=\"不要过度优化\"></a>不要过度优化</h3><p>现代浏览器在运行时进行了大量的优化。 很多时候，如果你正在优化那么你只是在浪费你的时间。 你可以在[这里]（<a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers）看到缺少优化的地方。\" target=\"_blank\" rel=\"noopener\">https://github.com/petkaantonov/bluebird/wiki/Optimization-killers）看到缺少优化的地方。</a> 同时针对那些，直到它们被修复为止。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在旧浏览器上，每次使用未缓存的`list.length`迭代都会很昂贵</span></span><br><span class=\"line\"><span class=\"comment\">// 因为`list.length`会重新计算。 但是在现代浏览器中，这已经被优化了。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"移除无用的代码\"><a href=\"#移除无用的代码\" class=\"headerlink\" title=\"移除无用的代码\"></a>移除无用的代码</h3><p>无用的代码和重复代码一样糟糕。 没有理由将它保留在您的代码库中。<br>如果它没有被调用，请删掉它！ 如果后面需要，可以在版本管理的历史中找到它。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">oldRequestModule</span>(<span class=\"params\">url: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestModule</span>(<span class=\"params\">url: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> req = requestModule;</span><br><span class=\"line\">inventoryTracker(<span class=\"string\">'apples'</span>, req, <span class=\"string\">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestModule</span>(<span class=\"params\">url: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> req = requestModule;</span><br><span class=\"line\">inventoryTracker(<span class=\"string\">'apples'</span>, req, <span class=\"string\">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用迭代器和生成器\"><a href=\"#使用迭代器和生成器\" class=\"headerlink\" title=\"使用迭代器和生成器\"></a>使用迭代器和生成器</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> [<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">2</span>) <span class=\"keyword\">return</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> items: <span class=\"built_in\">number</span>[] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (items.length &lt; n) &#123;</span><br><span class=\"line\">    items.push(items[items.length - <span class=\"number\">2</span>] + items[items.length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">  fibonacci(n).forEach(<span class=\"function\"><span class=\"params\">fib</span> =&gt;</span> <span class=\"built_in\">console</span>.log(fib));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibonacci</span>(<span class=\"params\"></span>): <span class=\"title\">IterableIterator</span>&lt;<span class=\"title\">number</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [a, b] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fib of fibonacci()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i++ === n) <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fib);</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>有些库允许我们用之前熟悉的方法来处理例如 <code>map</code>, <code>slice</code>, <code>forEach</code> 等等. 参考这里 <a href=\"https://www.npmjs.com/package/itiriri\" target=\"_blank\" rel=\"noopener\">itiriri</a> (或者 <a href=\"https://www.npmjs.com/package/itiriri-async\" target=\"_blank\" rel=\"noopener\">itiriri-async</a> 用于异步处理).</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itiriri <span class=\"keyword\">from</span> <span class=\"string\">'itiriri'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibonacci</span>(<span class=\"params\"></span>): <span class=\"title\">IterableIterator</span>&lt;<span class=\"title\">number</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [a, b] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">itiriri(fibonacci())</span><br><span class=\"line\">  .take(<span class=\"number\">10</span>)</span><br><span class=\"line\">  .forEach(<span class=\"function\"><span class=\"params\">fib</span> =&gt;</span> <span class=\"built_in\">console</span>.log(fib));</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"对象和数据结构\"><a href=\"#对象和数据结构\" class=\"headerlink\" title=\"对象和数据结构\"></a>对象和数据结构</h2><h3 id=\"使用-getters-和-setters\"><a href=\"#使用-getters-和-setters\" class=\"headerlink\" title=\"使用 getters 和 setters\"></a>使用 getters 和 setters</h3><p>TypeScript支持getter/setter语法。<br>使用getter和setter访问来自封装行为的对象的数据可能比简单地查找对象上的属性更好。<br>你可能会问为什么，下面是一些原因：</p>\n<ul>\n<li>当您想要获取对象属性之外的其他操作时，您不必查找并更改代码库中的每个访问者。</li>\n<li>在执行<code>set</code>时使添加验证变得简单。</li>\n<li>封装内部表示。</li>\n<li>获取和设置时，可以轻松添加日志记录和错误处理。</li>\n<li>您可以延迟加载对象的属性，假设从服务器获取它。</li>\n</ul>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> BankAccount = &#123;</span><br><span class=\"line\">  balance: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> value = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> account: BankAccount = &#123;</span><br><span class=\"line\">  balance: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Cannot set negative balance.'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">account.balance = value;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> BankAccount &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> accountBalance: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> balance(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.accountBalance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> balance(value: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Cannot set negative balance.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.accountBalance = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在 `BankAccount` 封装了验证逻辑</span></span><br><span class=\"line\"><span class=\"comment\">// 如果有一个我们想增加额外的验证规则,</span></span><br><span class=\"line\"><span class=\"comment\">// 我们只需要去改变 `setter` 的实现,</span></span><br><span class=\"line\"><span class=\"comment\">// 而不影响其他代码.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> account = <span class=\"keyword\">new</span> BankAccount();</span><br><span class=\"line\">account.balance = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"设置-private-protected\"><a href=\"#设置-private-protected\" class=\"headerlink\" title=\"设置 private/protected\"></a>设置 private/protected</h3><p>TypeScript 支持 <code>public</code> <em>(默认)</em>, <code>protected</code> 还有 <code>private</code>.  </p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Circle &#123;</span><br><span class=\"line\">  radius: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">radius: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  perimeter() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  surface() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * <span class=\"keyword\">this</span>.radius * <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Circle &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly radius: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  perimeter() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  surface() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * <span class=\"keyword\">this</span>.radius * <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"更倾向于不可变\"><a href=\"#更倾向于不可变\" class=\"headerlink\" title=\"更倾向于不可变\"></a>更倾向于不可变</h3><p>TypeScript 的类型系统允许在接口/类的各个属性上标记<code>readonly</code>，对于更高级的场景，有一个内置里类型<code>Readonly</code>，它接受一个泛型<code>&lt;T&gt;</code>并使用映射类型将其所有属性标记为只读，请见<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Config &#123;</span><br><span class=\"line\">  host: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  port: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  db: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Config &#123;</span><br><span class=\"line\">  readonly host: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  readonly port: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  readonly db: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"type-对比-interface\"><a href=\"#type-对比-interface\" class=\"headerlink\" title=\"type 对比 interface\"></a><code>type</code> 对比 <code>interface</code></h3><p>当您使用联合或者交叉时使用<code>type</code>，当想要继承或者实现时使用<code>interface</code>，但是没有严格的规则，请使用适合自己的规则。<br>有关更详细的说明，请参阅<a href=\"https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543\" target=\"_blank\" rel=\"noopener\">这里</a>了解ts中<code>type</code>和<code>interface</code>之间的区别。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> EmailConfig &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> DbConfig &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Config &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Shape = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> EmailConfig = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DbConfig = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Config  = EmailConfig | DbConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Circle <span class=\"keyword\">implements</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Square <span class=\"keyword\">implements</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h3 id=\"类应该是精简的\"><a href=\"#类应该是精简的\" class=\"headerlink\" title=\"类应该是精简的\"></a>类应该是精简的</h3><p>类的规模是由其责任来衡量的。 遵循<em>单一责任原则</em>一个类应该很小。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Dashboard &#123;</span><br><span class=\"line\">  getLanguage(): <span class=\"built_in\">string</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  setLanguage(language: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  showProgress(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  hideProgress(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  isDirty(): <span class=\"built_in\">boolean</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  disable(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  enable(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  addSubscription(subscription: Subscription): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  removeSubscription(subscription: Subscription): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  addUser(user: User): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  removeUser(user: User): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  goToHomePage(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  updateProfile(details: UserDetails): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  getVersion(): <span class=\"built_in\">string</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Dashboard &#123;</span><br><span class=\"line\">  disable(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  enable(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  getVersion(): <span class=\"built_in\">string</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过将其他方法移动到其他类中来分担责任。</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"高内聚和低耦合\"><a href=\"#高内聚和低耦合\" class=\"headerlink\" title=\"高内聚和低耦合\"></a>高内聚和低耦合</h3><p>聚合程度决定了类成员的彼此相关程度。在理想情况下，每个方法都应该使用类中的所有字段，然后我们称之为<em>最大内聚类</em>，但这是不容易实现的，甚至是不可取的，但是我们都更喜欢凝聚力。<br>耦合是指两个类相互依赖的程度，如果其中一个类的修改不会影响另一个类，则称这两个类是低耦合的。<br>良好的软件设计应该是<strong>高内聚</strong>和<strong>低耦合</strong>。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> UserManager &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不推荐理由: 每一个私有变量都有特定的一组方法使用.</span></span><br><span class=\"line\">  <span class=\"comment\">// 这明确的表名这个类不止做了一件事情.</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly db: Database,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly emailSender: EmailSender</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> getUser(id: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> db.users.findOne(&#123; id &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> getTransactions(userId: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> db.transactions.find(&#123; userId &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendGreeting(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> emailSender.send(<span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendNotification(text: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> emailSender.send(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendNewsletter(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> UserService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly db: Database</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> getUser(id: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.db.users.findOne(&#123; id &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> getTransactions(userId: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.db.transactions.find(&#123; userId &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> UserNotifier &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly emailSender: EmailSender</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendGreeting(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.emailSender.send(<span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendNotification(text: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.emailSender.send(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendNewsletter(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"比起继承来更喜欢使用组合\"><a href=\"#比起继承来更喜欢使用组合\" class=\"headerlink\" title=\"比起继承来更喜欢使用组合\"></a>比起继承来更喜欢使用组合</h3><p>正如<a href=\"https://en.wikipedia.org/wiki/Design_Patterns\" target=\"_blank\" rel=\"noopener\">设计模式</a>中所说的那样，你应该<strong>尽可能得优先组合而不是继承</strong>，有很多很好的理由去使用继承，同时也有很多很好的理由去使用组合，这就意味着如果你的思想本能的是使用继承，那就试着想一想，使用组合是不是能更好的解决你的问题，一般在某些情况下它是可以的。<br>你可能想知道我什么时候该使用组合，这取决于你手头的问题，不过下面的列表列出了使用继承更好的一些情况：</p>\n<ol>\n<li><p>你的继承表示的是”is-a”关系而不是”has-a”关系（Human-&gt; Animal vs. User-&gt; UserDetails）。</p>\n</li>\n<li><p>您可以重用基类中的代码（人类可以像所有动物一样移动）。</p>\n</li>\n<li><p>您希望通过更改基类对派生类进行全局更改。 （改变所有动物移动时的热量消耗）。</p>\n</li>\n</ol>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Employee &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly name: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly email: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> EmployeeTaxData <span class=\"keyword\">extends</span> Employee &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    name: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    email: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly ssn: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly salary: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name, email);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Employee &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> taxData: EmployeeTaxData;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly name: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly email: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTaxData(ssn: <span class=\"built_in\">string</span>, salary: <span class=\"built_in\">number</span>): Employee &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taxData = <span class=\"keyword\">new</span> EmployeeTaxData(ssn, salary);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> EmployeeTaxData &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> readonly ssn: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> readonly salary: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用链式编程\"><a href=\"#使用链式编程\" class=\"headerlink\" title=\"使用链式编程\"></a>使用链式编程</h3><p>这种模式非常有用，并且常用于许多库中。 它允许您的代码更直观，而不是冗长。 因此，请使用链式编程并检查代码的清洁程度。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> QueryBuilder &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> collection: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> pageNumber: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> itemsPerPage: <span class=\"built_in\">number</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> orderByFields: <span class=\"built_in\">string</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">from</span>(collection: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collection = collection;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  page(<span class=\"built_in\">number</span>: <span class=\"built_in\">number</span>, itemsPerPage: <span class=\"built_in\">number</span> = <span class=\"number\">100</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pageNumber = <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemsPerPage = itemsPerPage;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  orderBy(...fields: <span class=\"built_in\">string</span>[]): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.orderByFields = fields;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  build(): Query &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> queryBuilder = <span class=\"keyword\">new</span> QueryBuilder();</span><br><span class=\"line\">queryBuilder.from(<span class=\"string\">'users'</span>);</span><br><span class=\"line\">queryBuilder.page(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">queryBuilder.orderBy(<span class=\"string\">'firstName'</span>, <span class=\"string\">'lastName'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> query = queryBuilder.build();</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> QueryBuilder &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> collection: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> pageNumber: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> itemsPerPage: <span class=\"built_in\">number</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> orderByFields: <span class=\"built_in\">string</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">from</span>(collection: <span class=\"built_in\">string</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collection = collection;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  page(<span class=\"built_in\">number</span>: <span class=\"built_in\">number</span>, itemsPerPage: <span class=\"built_in\">number</span> = <span class=\"number\">100</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pageNumber = <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemsPerPage = itemsPerPage;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  orderBy(...fields: <span class=\"built_in\">string</span>[]): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.orderByFields = fields;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  build(): Query &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> query = <span class=\"keyword\">new</span> QueryBuilder()</span><br><span class=\"line\">  .from(<span class=\"string\">'users'</span>)</span><br><span class=\"line\">  .page(<span class=\"number\">1</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">  .orderBy(<span class=\"string\">'firstName'</span>, <span class=\"string\">'lastName'</span>)</span><br><span class=\"line\">  .build();</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h2><h3 id=\"单一责任原则-SRP\"><a href=\"#单一责任原则-SRP\" class=\"headerlink\" title=\"单一责任原则 (SRP)\"></a>单一责任原则 (SRP)</h3><p>正如代码整洁之道上所说，“应该有且仅有一个原因引起类的变更”，要最大幅度的减少类的变更，如果一个类的功能太负责而你修改的它的一部分，那么很难保证是否会影响到其他地方。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> UserSettings &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly user: User</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  changeSettings(settings: UserSettings) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.verifyCredentials()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  verifyCredentials() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> UserAuth &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly user: User</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  verifyCredentials() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> UserSettings &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> readonly auth: UserAuth;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly user: User</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.auth = <span class=\"keyword\">new</span> UserAuth(user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  changeSettings(settings: UserSettings) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.auth.verifyCredentials()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"开放封闭原则-OCP\"><a href=\"#开放封闭原则-OCP\" class=\"headerlink\" title=\"开放封闭原则 (OCP)\"></a>开放封闭原则 (OCP)</h3><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。但并不意味着不做任何修改，低层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> AjaxAdapter <span class=\"keyword\">extends</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> NodeAdapter <span class=\"keyword\">extends</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> HttpRequester &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly adapter: Adapter</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> fetch&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.adapter <span class=\"keyword\">instanceof</span> AjaxAdapter) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> makeAjaxCall&lt;T&gt;(url);</span><br><span class=\"line\">      <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.adapter <span class=\"keyword\">instanceof</span> NodeAdapter) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> makeHttpCall&lt;T&gt;(url);</span><br><span class=\"line\">      <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAjaxCall</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">url: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeHttpCall</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">url: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">async</span> request&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> AjaxAdapter <span class=\"keyword\">extends</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> request&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> NodeAdapter <span class=\"keyword\">extends</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> request&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> HttpRequester &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly adapter: Adapter</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> fetch&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.adapter.request&lt;T&gt;(url);</span><br><span class=\"line\">    <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"里氏替换原则-LSP\"><a href=\"#里氏替换原则-LSP\" class=\"headerlink\" title=\"里氏替换原则 (LSP)\"></a>里氏替换原则 (LSP)</h3><p>只要父类能出现的地方子类都可以出现，而且替换为子类也不会产生任何错误或异常，使用者可有根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必能适应。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Rectangle &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">protected</span> width: <span class=\"built_in\">number</span> = 0,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">protected</span> height: <span class=\"built_in\">number</span> = 0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setColor(color: <span class=\"built_in\">string</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render(area: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setWidth(width: <span class=\"built_in\">number</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setHeight(height: <span class=\"built_in\">number</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Square <span class=\"keyword\">extends</span> Rectangle &#123;</span><br><span class=\"line\">  setWidth(width: <span class=\"built_in\">number</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = width;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setHeight(height: <span class=\"built_in\">number</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = height;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderLargeRectangles</span>(<span class=\"params\">rectangles: Rectangle[]</span>) </span>&#123;</span><br><span class=\"line\">  rectangles.forEach(<span class=\"function\">(<span class=\"params\">rectangle</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> area = rectangle</span><br><span class=\"line\">      .setWidth(<span class=\"number\">4</span>)</span><br><span class=\"line\">      .setHeight(<span class=\"number\">5</span>)</span><br><span class=\"line\">      .getArea();</span><br><span class=\"line\">    rectangle.render(area);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rectangles = [<span class=\"keyword\">new</span> Rectangle(), <span class=\"keyword\">new</span> Rectangle(), <span class=\"keyword\">new</span> Square()];</span><br><span class=\"line\">renderLargeRectangles(rectangles);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Shape &#123;</span><br><span class=\"line\">  setColor(color: <span class=\"built_in\">string</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render(area: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> getArea(): <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Rectangle <span class=\"keyword\">extends</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly width = 0,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly height = 0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Square <span class=\"keyword\">extends</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly length: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length * <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderLargeShapes</span>(<span class=\"params\">shapes: Shape[]</span>) </span>&#123;</span><br><span class=\"line\">  shapes.forEach(<span class=\"function\">(<span class=\"params\">shape</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> area = shape.getArea();</span><br><span class=\"line\">    shape.render(area);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> shapes = [<span class=\"keyword\">new</span> Rectangle(<span class=\"number\">4</span>, <span class=\"number\">5</span>), <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">4</span>, <span class=\"number\">5</span>), <span class=\"keyword\">new</span> Square(<span class=\"number\">5</span>)];</span><br><span class=\"line\">renderLargeShapes(shapes);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"接口隔离原则-ISP\"><a href=\"#接口隔离原则-ISP\" class=\"headerlink\" title=\"接口隔离原则 (ISP)\"></a>接口隔离原则 (ISP)</h3><p>建立单一接口，不要建立臃肿庞大的接口。接口隔离原则与单一职责的审视角度是不相同的，单一职责要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，而接口隔离原则要求接口的方法尽量少。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SmartPrinter &#123;</span><br><span class=\"line\">  print();</span><br><span class=\"line\">  fax();</span><br><span class=\"line\">  scan();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> AllInOnePrinter <span class=\"keyword\">implements</span> SmartPrinter &#123;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  fax() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scan() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> EconomicPrinter <span class=\"keyword\">implements</span> SmartPrinter &#123;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  fax() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Fax not supported.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scan() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Scan not supported.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Printer &#123;</span><br><span class=\"line\">  print();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Fax &#123;</span><br><span class=\"line\">  fax();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Scanner &#123;</span><br><span class=\"line\">  scan();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> AllInOnePrinter <span class=\"keyword\">implements</span> Printer, Fax, Scanner &#123;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  fax() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scan() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> EconomicPrinter <span class=\"keyword\">implements</span> Printer &#123;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"依赖倒置原则-DIP\"><a href=\"#依赖倒置原则-DIP\" class=\"headerlink\" title=\"依赖倒置原则 (DIP)\"></a>依赖倒置原则 (DIP)</h3><p>含义：<br>1.高层模块不应该依赖低层模块，两者都应该依赖其抽象。<br>2.抽象不应该依赖细节。<br>3.细节应该依赖抽象。</p>\n<p>DIP 通常通过使用控制反转 (IoC) 来实现. 这里有一个例子 <a href=\"https://www.npmjs.com/package/inversify\" target=\"_blank\" rel=\"noopener\">InversifyJs</a></p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFile <span class=\"keyword\">as</span> readFileCb &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = promisify(readFileCb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReportData = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> XmlFormatter &#123;</span><br><span class=\"line\">  parse&lt;T&gt;(content: <span class=\"built_in\">string</span>): T &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将XML字符串序列化为对象.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> ReportReader &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 不推荐: 我们已经创建了对特定请求实现的依赖。</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们应该让ReportReader依赖于一个解析方法：`parse`</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> readonly formatter = <span class=\"keyword\">new</span> XmlFormatter();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> read(path: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> readFile(path, <span class=\"string\">'UTF8'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> ReportReader();</span><br><span class=\"line\"><span class=\"keyword\">await</span> report = <span class=\"keyword\">await</span> reader.read(<span class=\"string\">'report.xml'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFile <span class=\"keyword\">as</span> readFileCb &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = promisify(readFileCb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReportData = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Formatter &#123;</span><br><span class=\"line\">  parse&lt;T&gt;(content: <span class=\"built_in\">string</span>): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> XmlFormatter <span class=\"keyword\">implements</span> Formatter &#123;</span><br><span class=\"line\">  parse&lt;T&gt;(content: <span class=\"built_in\">string</span>): T &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将XML字符串序列化为对象.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> JsonFormatter <span class=\"keyword\">implements</span> Formatter &#123;</span><br><span class=\"line\">  parse&lt;T&gt;(content: <span class=\"built_in\">string</span>): T &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将JSON字符串序列化为对象.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> ReportReader &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly formatter: Formatter</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> read(path: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> readFile(path, <span class=\"string\">'UTF8'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> ReportReader(<span class=\"keyword\">new</span> XmlFormatter());</span><br><span class=\"line\"><span class=\"keyword\">await</span> report = <span class=\"keyword\">await</span> reader.read(<span class=\"string\">'report.xml'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果我们需要解析json</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> ReportReader(<span class=\"keyword\">new</span> JsonFormatter());</span><br><span class=\"line\"><span class=\"keyword\">await</span> report = <span class=\"keyword\">await</span> reader.read(<span class=\"string\">'report.json'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>测试比编码更重要，如果你的测试数量很少或者根本没有，那么每次修改代码时，你都不会确定有没有破坏其他地方，决定要到什么样的测试程度取决于你的团队，但是100%的覆盖率会让你开发的时候更有信心。这意味你需要一个好的框架之外还需要一个好的<a href=\"https://github.com/gotwarlost/istanbul\" target=\"_blank\" rel=\"noopener\">覆盖统计工具</a><br>没有理由不写测试，有好多很好的js测试框架对typescript都有很好的支持，当您找到适合您团队的时，请始终为您引入的每个新功能/模块编写测试。 如果您首选的方法是测试驱动开发（TDD），那很好，但重点是确保在启动任何功能或重构现有功能之前达到覆盖目标。</p>\n<h3 id=\"测试驱动开发的三条原则\"><a href=\"#测试驱动开发的三条原则\" class=\"headerlink\" title=\"测试驱动开发的三条原则\"></a>测试驱动开发的三条原则</h3><ol>\n<li>除非这能让失败的单元测试通过，否则不允许去编写任何的产品代码。</li>\n<li>只允许编写刚好能够导致失败的单元测试。 （编译失败也属于一种失败）</li>\n<li>只允许编写刚好能够导致一个单元测试失败的产品代码。</li>\n</ol>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"F-I-R-S-T-原则\"><a href=\"#F-I-R-S-T-原则\" class=\"headerlink\" title=\"F.I.R.S.T. 原则\"></a>F.I.R.S.T. 原则</h3><p>整洁的测试需要遵循以下原则:</p>\n<ul>\n<li><p><strong>快速</strong> 测试运行起来应该是快速的因为我们会经常运行他们。</p>\n</li>\n<li><p><strong>独立</strong> 每天测试不允许互相依赖，无论是独立运行还是顺序运行他们的返回应该是相同的。</p>\n</li>\n<li><p><strong>可复现</strong> 测试应该是在任意环境下都是可复现的。</p>\n</li>\n<li><p><strong>自我确认</strong> 测试需要自己体现<strong>通过</strong>或是<strong>不通过</strong>，而不是靠开发者自己比对日志来判断是否通过。</p>\n</li>\n<li><p><strong>及时</strong> 单元测试应该在生产代码之前编写。 如果您在生产代码之后编写测试，您可能会发现编写测试太辛苦了。</p>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"测试单一责任\"><a href=\"#测试单一责任\" class=\"headerlink\" title=\"测试单一责任\"></a>测试单一责任</h3><p>测试也需要遵循<strong>单一责任原则</strong>。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; assert &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'AwesomeDate'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'handles date boundaries'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date: AwesomeDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'1/1/2015'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'1/31/2015'</span>, date.addDays(<span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'2/1/2016'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'2/29/2016'</span>, date.addDays(<span class=\"number\">28</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'2/1/2015'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'3/1/2015'</span>, date.addDays(<span class=\"number\">28</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; assert &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'AwesomeDate'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'handles 30-day months'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'1/1/2015'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'1/31/2015'</span>, date.addDays(<span class=\"number\">30</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'handles leap year'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'2/1/2016'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'2/29/2016'</span>, date.addDays(<span class=\"number\">28</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'handles non-leap year'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'2/1/2015'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'3/1/2015'</span>, date.addDays(<span class=\"number\">28</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"测试的名字应该表示了测试的意图\"><a href=\"#测试的名字应该表示了测试的意图\" class=\"headerlink\" title=\"测试的名字应该表示了测试的意图\"></a>测试的名字应该表示了测试的意图</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Calendar'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'2/29/2020'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'throws'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Calendar'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should handle leap year'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'should throw when format is invalid'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><h3 id=\"promises-对比-callbacks\"><a href=\"#promises-对比-callbacks\" class=\"headerlink\" title=\"promises 对比 callbacks\"></a>promises 对比 callbacks</h3><p>回调嵌套过多会产生<strong>回调地狱</strong>，使用promises可以有效解决这个问题。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadPage</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, saveTo: <span class=\"built_in\">string</span>, callback: (error: <span class=\"built_in\">Error</span>, content?: <span class=\"built_in\">string</span>) =&gt; <span class=\"built_in\">void</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(url, <span class=\"function\">(<span class=\"params\">error, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">      callback(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      writeFile(saveTo, response.body, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">          callback(error);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          callback(<span class=\"literal\">null</span>, response.body);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">downloadPage(<span class=\"string\">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class=\"string\">'article.html'</span>, <span class=\"function\">(<span class=\"params\">error, content</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> write = promisify(writeFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadPage</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, saveTo: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">string</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(url)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> write(saveTo, response));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">downloadPage(<span class=\"string\">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class=\"string\">'article.html'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">content</span> =&gt;</span> <span class=\"built_in\">console</span>.log(content))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.error(error));</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"Async-Await-比-Promises-更加简洁\"><a href=\"#Async-Await-比-Promises-更加简洁\" class=\"headerlink\" title=\"Async/Await 比 Promises 更加简洁\"></a>Async/Await 比 Promises 更加简洁</h3><p>使用<code>async</code> /<code>await</code>语法，您可以编写比链式调用更清晰，更易理解的代码。 在一个以<code>async</code>关键字为前缀的方法中，您可以告诉JavaScript运行时暂停执行<code>await</code>关键字上的代码（当在promise上使用时）。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> write = util.promisify(writeFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadPage</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, saveTo: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">string</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> write(saveTo, response));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">downloadPage(<span class=\"string\">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class=\"string\">'article.html'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">content</span> =&gt;</span> <span class=\"built_in\">console</span>.log(content))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.error(error));</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> write = promisify(writeFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadPage</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, saveTo: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">string</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"keyword\">get</span>(url);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> write(saveTo, response);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = <span class=\"keyword\">await</span> downloadPage(<span class=\"string\">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class=\"string\">'article.html'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>抛出异常是件好事！ 它们意味着运行时已经成功识别出程序中的某些内容出错并及时通知您。</p>\n<h3 id=\"始终使用Error对象来抛出错误。\"><a href=\"#始终使用Error对象来抛出错误。\" class=\"headerlink\" title=\"始终使用Error对象来抛出错误。\"></a>始终使用<code>Error</code>对象来抛出错误。</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateTotal</span>(<span class=\"params\">items: Item[]</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'Not implemented.'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Item</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'Not implemented.'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateTotal</span>(<span class=\"params\">items: Item[]</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not implemented.'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Item</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not implemented.'</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Item</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not implemented.'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要忽略掉捕捉后的错误\"><a href=\"#不要忽略掉捕捉后的错误\" class=\"headerlink\" title=\"不要忽略掉捕捉后的错误\"></a>不要忽略掉捕捉后的错误</h3><p>对捕获的错误不执行任何操作并不能使您能够修复或对所述错误做出反应。 将错误记录到控制台（<code>console.log</code>）也不是很好，因为它常常会被其他东西所淹没。 所以你应该有一个统一的地方集中处理这些错误。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  functionThatMightThrow();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者更严重</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  functionThatMightThrow();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 直接忽略掉</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./logging'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  functionThatMightThrow();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  logger.log(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要忽略promises-的-rejected\"><a href=\"#不要忽略promises-的-rejected\" class=\"headerlink\" title=\"不要忽略promises 的 rejected\"></a>不要忽略promises 的 rejected</h3><p>就像不能忽略<code>try/catch</code>到的异常一样</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUser()</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">user: User</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sendEmail(user.email, <span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./logging'</span></span><br><span class=\"line\"></span><br><span class=\"line\">getUser()</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">user: User</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sendEmail(user.email, <span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    logger.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> getUser();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> sendEmail(user.email, <span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  logger.log(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h2><p>格式化是主观的。 像这里的许多规则一样，没有必须遵循特定硬性规则。 重点是<em>不要过于格式化</em>格式化。 有很多工具可以实现自动化。 用一个就好！ 工程师争论格式化是浪费时间和金钱的。 遵循的一般规则是<em>保持一致的格式规则</em>就可以了。</p>\n<p>TypeScript 有一个很强大的工具叫做 <a href=\"https://palantir.github.io/tslint/\" target=\"_blank\" rel=\"noopener\">TSLint</a>. 它是一个静态分析工具，可以帮助您显着提高代码的可读性和可维护性。 下面是您可以在项目中引用的TSLint配置：</p>\n<ul>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-config-standard\" target=\"_blank\" rel=\"noopener\">TSLint Config Standard</a> - 标准风格规则</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-config-airbnb\" target=\"_blank\" rel=\"noopener\">TSLint Config Airbnb</a> - Airbnb风格</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-clean-code\" target=\"_blank\" rel=\"noopener\">TSLint Clean Code</a> - 代码整洁之道的规则</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-react\" target=\"_blank\" rel=\"noopener\">TSLint react</a> - React 和 JSX 的规则</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-config-prettier\" target=\"_blank\" rel=\"noopener\">TSLint + Prettier</a> -  <a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"noopener\">Prettier</a> 代码风格</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-eslint-rules\" target=\"_blank\" rel=\"noopener\">ESLint rules for TSLint</a> - ESLint 规则</p>\n</li>\n</ul>\n<h3 id=\"使用一致的写法\"><a href=\"#使用一致的写法\" class=\"headerlink\" title=\"使用一致的写法\"></a>使用一致的写法</h3><p>这些规则是主观的，所以你的团队可以选择按自己的风格制定。 关键是，无论你选择什么，只要<em>保持一致</em>。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DAYS_IN_WEEK = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> daysInMonth = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> songs = [<span class=\"string\">'Back In Black'</span>, <span class=\"string\">'Stairway to Heaven'</span>, <span class=\"string\">'Hey Jude'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> Artists = [<span class=\"string\">'ACDC'</span>, <span class=\"string\">'Led Zeppelin'</span>, <span class=\"string\">'The Beatles'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eraseDatabase</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">restore_database</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> animal = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Container = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DAYS_IN_WEEK = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> DAYS_IN_MONTH = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> SONGS = [<span class=\"string\">'Back In Black'</span>, <span class=\"string\">'Stairway to Heaven'</span>, <span class=\"string\">'Hey Jude'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> ARTISTS = [<span class=\"string\">'ACDC'</span>, <span class=\"string\">'Led Zeppelin'</span>, <span class=\"string\">'The Beatles'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eraseDatabase</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">restoreDatabase</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Container = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"调用者和被调用者的方法应该是相邻的\"><a href=\"#调用者和被调用者的方法应该是相邻的\" class=\"headerlink\" title=\"调用者和被调用者的方法应该是相邻的\"></a>调用者和被调用者的方法应该是相邻的</h3><p>如果函数调用另一个函数，请在源文件中设置这两个函数相邻。 理想情况下，将呼叫者保持在被叫者正上方。<br>我们倾向于从头到尾阅读代码，就像报纸一样。 因此，请以这种方式阅读您的代码。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> PerformanceReview &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly employee: Employee</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> lookupPeers() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.lookup(<span class=\"keyword\">this</span>.employee.id, <span class=\"string\">'peers'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> lookupManager() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.lookup(<span class=\"keyword\">this</span>.employee, <span class=\"string\">'manager'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getPeerReviews() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> peers = <span class=\"keyword\">this</span>.lookupPeers();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  review() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getPeerReviews();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getManagerReview();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getSelfReview();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getManagerReview() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> manager = <span class=\"keyword\">this</span>.lookupManager();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getSelfReview() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> review = <span class=\"keyword\">new</span> PerformanceReview(employee);</span><br><span class=\"line\">review.review();</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> PerformanceReview &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly employee: Employee</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  review() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getPeerReviews();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getManagerReview();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getSelfReview();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getPeerReviews() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> peers = <span class=\"keyword\">this</span>.lookupPeers();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> lookupPeers() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.lookup(<span class=\"keyword\">this</span>.employee.id, <span class=\"string\">'peers'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getManagerReview() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> manager = <span class=\"keyword\">this</span>.lookupManager();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> lookupManager() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.lookup(<span class=\"keyword\">this</span>.employee, <span class=\"string\">'manager'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getSelfReview() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> review = <span class=\"keyword\">new</span> PerformanceReview(employee);</span><br><span class=\"line\">review.review();</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"组织-imports\"><a href=\"#组织-imports\" class=\"headerlink\" title=\"组织 imports\"></a>组织 imports</h3><p>使用简洁易读的import语句，您可以快速查看当前代码的依赖关系。 确保对<code>import</code>语句应用以下良好实践：</p>\n<ul>\n<li>导入语句应按字母顺序排列并分组。</li>\n<li>不需要的引用应该被移除。</li>\n<li>命名导入必须按字母顺序排列 例如: <code>import {A, B, C} from &#39;foo&#39;;</code></li>\n<li>导入源必须在组内按字母顺序排列, 例如: <code>import * as foo from &#39;a&#39;; import * as bar from &#39;b&#39;;</code></li>\n<li>每一组引用之间用空行分隔。</li>\n<li>分组之间需要遵循以下顺序:<ul>\n<li>Polyfills (例如. <code>import &#39;reflect-metadata&#39;;</code>)</li>\n<li>Node 内置模块 (例如. <code>import fs from &#39;fs&#39;;</code>)</li>\n<li>外部模块 (例如. <code>import { query } from &#39;itiriri&#39;;</code>)</li>\n<li>内部模块 (例如. <code>import { UserService } from &#39;src/services/userService&#39;;</code>)</li>\n<li>来自父目录的模块 (例如. <code>import foo from &#39;../foo&#39;; import qux from &#39;../../foo/qux&#39;;</code>)</li>\n<li>来自兄弟目录或同目录的模块 (例如. <code>import bar from &#39;./bar&#39;; import baz from &#39;./bar/baz&#39;;</code>)</li>\n</ul>\n</li>\n</ul>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeDefinition &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../types/typeDefinition'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AttributeTypes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../model/attribute'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApiCredentials, Adapters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/api/authorization'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ConfigPlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/config/configPlugin'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BindingScopeEnum, Container &#125; <span class=\"keyword\">from</span> <span class=\"string\">'inversify'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'reflect-metadata'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'reflect-metadata'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BindingScopeEnum, Container &#125; <span class=\"keyword\">from</span> <span class=\"string\">'inversify'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AttributeTypes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../model/attribute'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeDefinition &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../types/typeDefinition'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApiCredentials, Adapters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/api/authorization'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ConfigPlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/config/configPlugin'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用别名\"><a href=\"#使用别名\" class=\"headerlink\" title=\"使用别名\"></a>使用别名</h3><p>通过在<code>tsconfig.json</code>的compilerOptions部分中定义路径和baseUrl属性来创建更漂亮的导入。<br>这样可以在进行导入时避免长的相对路径。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../../services/UserService'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@services/UserService'</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"baseUrl\"</span>: <span class=\"string\">\"src\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"paths\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"@services\"</span>: [<span class=\"string\">\"services/*\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>当没有注释无法表达的时候，才使用注释</p>\n<h3 id=\"更倾向于自解释代码而不是注释\"><a href=\"#更倾向于自解释代码而不是注释\" class=\"headerlink\" title=\"更倾向于自解释代码而不是注释\"></a>更倾向于自解释代码而不是注释</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查订阅是否到期</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (subscription.endDate &gt; <span class=\"built_in\">Date</span>.now) &#123;  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isSubscriptionActive = subscription.endDate &gt; <span class=\"built_in\">Date</span>.now;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isSubscriptionActive) &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要在代码库中留下注释的代码\"><a href=\"#不要在代码库中留下注释的代码\" class=\"headerlink\" title=\"不要在代码库中留下注释的代码\"></a>不要在代码库中留下注释的代码</h3><p>版本控制的存在是有原因的。 在您的历史记录中保留旧代码。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User = &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  email: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// age: number;</span></span><br><span class=\"line\">  <span class=\"comment\">// jobPosition: string;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User = &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  email: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要使用日记评论\"><a href=\"#不要使用日记评论\" class=\"headerlink\" title=\"不要使用日记评论\"></a>不要使用日记评论</h3><p>请记住，使用版本控制！ 不需要无用代码，注释代码，尤其是日记评论。 使用<code>git log</code>获取历史记录！</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 2016-12-20: Removed monads, didn't understand them (RM)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2016-02-03: Added type-checking (LI)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2015-03-14: Implemented combine (JR)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"禁止位置分隔\"><a href=\"#禁止位置分隔\" class=\"headerlink\" title=\"禁止位置分隔\"></a>禁止位置分隔</h3><p>这会增加代码噪声，大多数IDE是支持代码折叠的，请使用。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// Client class</span></span><br><span class=\"line\"><span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Client &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  address: Address;</span><br><span class=\"line\">  contact: Contact;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">  <span class=\"comment\">// public methods</span></span><br><span class=\"line\">  <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> describe(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">  <span class=\"comment\">// private methods</span></span><br><span class=\"line\">  <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> describeAddress(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> describeContact(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Client &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  address: Address;</span><br><span class=\"line\">  contact: Contact;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> describe(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> describeAddress(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> describeContact(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"TODO-标记\"><a href=\"#TODO-标记\" class=\"headerlink\" title=\"TODO 标记\"></a>TODO 标记</h3><p>当您发现自己需要在代码中留下注释以进行后续改进时，使用<code>// TODO</code>注释来实现。 大多数IDE都支持这种注释，方便你可以快速浏览整个待办事项列表。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getActiveSubscriptions</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Subscription</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ensure `dueDate` is indexed.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.subscriptions.find(&#123; dueDate: &#123; $lte: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getActiveSubscriptions</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Subscription</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> ensure `dueDate` is indexed.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.subscriptions.find(&#123; dueDate: &#123; $lte: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n","site":{"data":{}},"excerpt":"<p>代码整洁之道在typescript中的实现<br>灵感来源于 <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">clean-code-javascript</a>。</p>","more":"<h2 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h2><ol>\n<li><a href=\"#简介\">简介</a></li>\n<li><a href=\"#变量\">变量</a></li>\n<li><a href=\"#方法\">方法</a></li>\n<li><a href=\"#对象和数据结构\">对象和数据结构</a></li>\n<li><a href=\"#类\">类</a></li>\n<li><a href=\"#SOLID原则\">SOLID原则</a></li>\n<li><a href=\"#测试\">测试</a></li>\n<li><a href=\"#并发\">并发</a></li>\n<li><a href=\"#异常处理\">异常处理</a></li>\n<li><a href=\"#格式化\">格式化</a></li>\n<li><a href=\"#注释\">注释</a></li>\n</ol>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p><img src=\"https://www.osnews.com/images/comics/wtfm.jpg\" alt=\"软件质量取决于阅读代码时骂人的次数\"></p>\n<p>本文是 Robert C 所书写的关于软件工程原理的书籍《代码整洁之道》的 TypeScript版，这不是一篇风格指南，而是为了使用 TypeScript 生成可读、可复用和可重构的软件指南。<br>本文中并非所有的原则都必须严格遵守，其中仅有一部分原则会被普遍认同，这些仅仅是一些原则，只是致力于整洁代码的作者们多年的经验。<br>我们的软件工程技术只有50多年的历史，我们仍旧在学很多东西，当软件架构和架构本身一样古老时，我们更难去遵守规则，现在，就让这些指南最为评估您和您团队的 TypeScript 代码质量的炼金石吧。<br>此外，了解这些知识并不会让您马上成为一名优秀的软件开发人员，与代码合作多年并不意味着您不会犯错误，每一段代码都是从初稿开始，向黏土一样慢慢被塑造成最终的形状。然后，在我们与同行一起审查时，我们会慢慢去修复不完美的地方，所以不要因为改进初稿而感到挫败，让我们去打败代码吧。</p>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><h3 id=\"使用有意义的变量名称\"><a href=\"#使用有意义的变量名称\" class=\"headerlink\" title=\"使用有意义的变量名称\"></a>使用有意义的变量名称</h3><p>给变量取一个有意义的名称以便于帮助读者去区分变量之前的区别</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">between</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">a1: T, a2: T, a3: T</span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a2 &lt;= a1 &amp;&amp; a1 &lt;= a3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">between</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">value: T, left: T, right: T</span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> left &lt;= value &amp;&amp; value &lt;= right;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用容易拼读的变量名称\"><a href=\"#使用容易拼读的变量名称\" class=\"headerlink\" title=\"使用容易拼读的变量名称\"></a>使用容易拼读的变量名称</h3><p>如果你无法拼读它，你会像一个白痴一样无法解释它</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> DtaRcrd102 = &#123;</span><br><span class=\"line\">  genymdhms: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">  modymdhms: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">  pszqint: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Customer = &#123;</span><br><span class=\"line\">  generationTimestamp: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">  modificationTimestamp: <span class=\"built_in\">Date</span>;</span><br><span class=\"line\">  recordId: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"为同样类型的变量使用同样的词汇\"><a href=\"#为同样类型的变量使用同样的词汇\" class=\"headerlink\" title=\"为同样类型的变量使用同样的词汇\"></a>为同样类型的变量使用同样的词汇</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserInfo</span>(<span class=\"params\"></span>): <span class=\"title\">User</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserDetails</span>(<span class=\"params\"></span>): <span class=\"title\">User</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUserData</span>(<span class=\"params\"></span>): <span class=\"title\">User</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getUser</span>(<span class=\"params\"></span>): <span class=\"title\">User</span></span>;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用有意义的名称\"><a href=\"#使用有意义的名称\" class=\"headerlink\" title=\"使用有意义的名称\"></a>使用有意义的名称</h3><p>相比于写代码而言，我们更多的是去阅读代码，所以你写的代码是否可读和可检索至关重要，未命名的变量会影响对我们代码里理解，并伤害读者，所以让你的变量名可检索。可以使用<a href=\"https://palantir.github.io/tslint/rules/no-magic-numbers/\" target=\"_blank\" rel=\"noopener\">TSLint</a> 来帮助识别未命名的常量。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 86400000 是什么鬼?</span></span><br><span class=\"line\">setTimeout(restart, <span class=\"number\">86400000</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将它们声明为大写的命名常量.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> MILLISECONDS_IN_A_DAY = <span class=\"number\">24</span> * <span class=\"number\">60</span> * <span class=\"number\">60</span> * <span class=\"number\">1000</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">setTimeout(restart, MILLISECONDS_IN_A_DAY);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用可解释的变量\"><a href=\"#使用可解释的变量\" class=\"headerlink\" title=\"使用可解释的变量\"></a>使用可解释的变量</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">const</span> users: Map&lt;<span class=\"built_in\">string</span>, User&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> keyValue of users) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">const</span> users: Map&lt;<span class=\"built_in\">string</span>, User&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> [id, user] of users) &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用有意义的变量来避免心里映射\"><a href=\"#使用有意义的变量来避免心里映射\" class=\"headerlink\" title=\"使用有意义的变量来避免心里映射\"></a>使用有意义的变量来避免心里映射</h3><p>显示由于隐式</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> u = getUser();</span><br><span class=\"line\"><span class=\"keyword\">const</span> s = getSubscription();</span><br><span class=\"line\"><span class=\"keyword\">const</span> t = charge(u, s);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> user = getUser();</span><br><span class=\"line\"><span class=\"keyword\">const</span> subscription = getSubscription();</span><br><span class=\"line\"><span class=\"keyword\">const</span> transaction = charge(user, subscription);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要添加不必要的上下文\"><a href=\"#不要添加不必要的上下文\" class=\"headerlink\" title=\"不要添加不必要的上下文\"></a>不要添加不必要的上下文</h3><p>如果你的 class/type/object 的名称已经告诉了你，就不要要在属性里在重复写一遍。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Car = &#123;</span><br><span class=\"line\">  carMake: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  carModel: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  carColor: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">car: Car</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;car.carMake&#125;</span> <span class=\"subst\">$&#123;car.carModel&#125;</span> (<span class=\"subst\">$&#123;car.carColor&#125;</span>)`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Car = &#123;</span><br><span class=\"line\">  make: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  model: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  color: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">car: Car</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;car.make&#125;</span> <span class=\"subst\">$&#123;car.model&#125;</span> (<span class=\"subst\">$&#123;car.color&#125;</span>)`</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"尽量使用默认参数，而不是再进行判断\"><a href=\"#尽量使用默认参数，而不是再进行判断\" class=\"headerlink\" title=\"尽量使用默认参数，而不是再进行判断\"></a>尽量使用默认参数，而不是再进行判断</h3><p>默认参数通常比再行判断更清晰。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadPages</span>(<span class=\"params\">count?: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> loadCount = count !== <span class=\"literal\">undefined</span> ? count : <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loadPages</span>(<span class=\"params\">count: <span class=\"built_in\">number</span> = 10</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><h3 id=\"参数-最多两个\"><a href=\"#参数-最多两个\" class=\"headerlink\" title=\"参数 (最多两个)\"></a>参数 (最多两个)</h3><p>限制方法参数的数量至关重要，因为它会使得您方法的测试变得更容易，参数数量超过三个就会造成过多的组合，你必须用每个单独的参数去测试大量的情况。<br>一个或两个参数是最理想的情况，如果可能的话应该尽量避免三个，应该去整合除此之外的任何东西。</p>\n<p>通常如果你有两个以上的参数，说明你的方法做了太多的事情，如果不是，则用更高级的对象来作为参数。</p>\n<p>如果你发现自己需要大量参数，则考虑使用对象。</p>\n<p>可以使用<a href=\"https://basarat.gitbooks.io/typescript/docs/destructuring.html\" target=\"_blank\" rel=\"noopener\">结构赋值</a>来明确方法所期望的参数属性。<br>这样有一些优点：</p>\n<ol>\n<li>当有人查看功能签名时，会立即清楚正在使用的属性。</li>\n<li>解构还克隆传递给函数的参数对象的指定原始值。 这有助于预防副作用。 注意：不会克隆从参数对象中解构的对象和数组。</li>\n<li>TypeScript会警告您未使用的属性，如果没有解构，这将是不可能的。</li>\n</ol>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">title: <span class=\"built_in\">string</span>, body: <span class=\"built_in\">string</span>, buttonText: <span class=\"built_in\">string</span>, cancellable: <span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(<span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>, <span class=\"string\">'Baz'</span>, <span class=\"literal\">true</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">options: &#123; title: <span class=\"built_in\">string</span>, body: <span class=\"built_in\">string</span>, buttonText: <span class=\"built_in\">string</span>, cancellable: <span class=\"built_in\">boolean</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">  body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">  buttonText: <span class=\"string\">'Baz'</span>,</span><br><span class=\"line\">  cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>你可以使用<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases\" target=\"_blank\" rel=\"noopener\">类型别名</a>来进一步提高可读性:</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MenuOptions = &#123; title: <span class=\"built_in\">string</span>, body: <span class=\"built_in\">string</span>, buttonText: <span class=\"built_in\">string</span>, cancellable: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">options: MenuOptions</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">  body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">  buttonText: <span class=\"string\">'Baz'</span>,</span><br><span class=\"line\">  cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"每个方法只做一件事情\"><a href=\"#每个方法只做一件事情\" class=\"headerlink\" title=\"每个方法只做一件事情\"></a>每个方法只做一件事情</h3><p>这是迄今为止软件工程中最重要的规则。 当一个方法执行多个操作时，它们会更加难以编写，测试和推理。 当您可以将一个函数隔离到一个动作时，它们可以轻松地重构，并且您的代码将更加清晰。 如果你除了这个之外没有别的东西，那么你将领先于许多开发者。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emailClients</span>(<span class=\"params\">clients: Client[]</span>) </span>&#123;</span><br><span class=\"line\">  clients.forEach(<span class=\"function\">(<span class=\"params\">client</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> clientRecord = database.lookup(client);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (clientRecord.isActive()) &#123;</span><br><span class=\"line\">      email(client);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">emailClients</span>(<span class=\"params\">clients: Client[]</span>) </span>&#123;</span><br><span class=\"line\">  clients.filter(isActiveClient).forEach(email);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isActiveClient</span>(<span class=\"params\">client: Client</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> clientRecord = database.lookup(client);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> clientRecord.isActive();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"在方法名上体现要做的事情\"><a href=\"#在方法名上体现要做的事情\" class=\"headerlink\" title=\"在方法名上体现要做的事情\"></a>在方法名上体现要做的事情</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addToDate</span>(<span class=\"params\">date: <span class=\"built_in\">Date</span>, month: <span class=\"built_in\">number</span></span>): <span class=\"title\">Date</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 很难从方法名中看出增加的是什么</span></span><br><span class=\"line\">addToDate(date, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addMonthToDate</span>(<span class=\"params\">date: <span class=\"built_in\">Date</span>, month: <span class=\"built_in\">number</span></span>): <span class=\"title\">Date</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">addMonthToDate(date, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"方法应该只是一个级别的抽象\"><a href=\"#方法应该只是一个级别的抽象\" class=\"headerlink\" title=\"方法应该只是一个级别的抽象\"></a>方法应该只是一个级别的抽象</h3><p>如果你的一个方法有多个级别的抽象，这说明这个方法做的事情太多了。必要的拆分可以使得方法更容易被重用和更容易测试。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseCode</span>(<span class=\"params\">code: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> REGEXES = [ <span class=\"comment\">/* ... */</span> ];</span><br><span class=\"line\">  <span class=\"keyword\">const</span> statements = code.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tokens = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  REGEXES.forEach(<span class=\"function\">(<span class=\"params\">regex</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    statements.forEach(<span class=\"function\">(<span class=\"params\">statement</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> ast = [];</span><br><span class=\"line\">  tokens.forEach(<span class=\"function\">(<span class=\"params\">token</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// lex...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  ast.forEach(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// parse...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> REGEXES = [ <span class=\"comment\">/* ... */</span> ];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parseCode</span>(<span class=\"params\">code: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tokens = tokenize(code);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> syntaxTree = parse(tokens);</span><br><span class=\"line\"></span><br><span class=\"line\">  syntaxTree.forEach(<span class=\"function\">(<span class=\"params\">node</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// parse...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tokenize</span>(<span class=\"params\">code: <span class=\"built_in\">string</span></span>): <span class=\"title\">Token</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> statements = code.split(<span class=\"string\">' '</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> tokens: Token[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  REGEXES.forEach(<span class=\"function\">(<span class=\"params\">regex</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    statements.forEach(<span class=\"function\">(<span class=\"params\">statement</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      tokens.push( <span class=\"comment\">/* ... */</span> );</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> tokens;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">parse</span>(<span class=\"params\">tokens: Token[]</span>): <span class=\"title\">SyntaxTree</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> syntaxTree: SyntaxTree[] = [];</span><br><span class=\"line\">  tokens.forEach(<span class=\"function\">(<span class=\"params\">token</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    syntaxTree.push( <span class=\"comment\">/* ... */</span> );</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> syntaxTree;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"移除重复代码\"><a href=\"#移除重复代码\" class=\"headerlink\" title=\"移除重复代码\"></a>移除重复代码</h3><p>尽量避免重复代码<br>重复代码是很糟糕的，因为这意味着如果你需要改某些逻辑，则必须去同时修改改多个地方。</p>\n<p>想象一下，如果你经营者一家餐馆并需要追踪你的库存，比如你的西红柿、洋葱、大蒜、香料等，如果你有多个地方记录他们，每当他们变化了你就需要更新多个列表，如果你只有一个列表，那么你只用更新一个地方！</p>\n<p>通常重复代码的出现是因为你有两个或者两个以上略有不同的东西，他们有很多共同之处，但是他们之间的差异迫使你需要有两个或者多个独立的方法来执行大部分相同的事情，删除重复代码意味着创建一个抽象，只需要一个方法/模块/类就可以处理这组不同的东西。</p>\n<p>获得正确的抽象是至关重要的，这就是为什么你需要遵循<a href=\"#单一责任原则\">单一责任原则</a>，但是糟糕的抽象可能比重复代码更加糟糕，所以一定要小心，如果你能实现好的抽象，尽量去实现它，不要去做重复的事情。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showDeveloperList</span>(<span class=\"params\">developers: Developer[]</span>) </span>&#123;</span><br><span class=\"line\">  developers.forEach(<span class=\"function\">(<span class=\"params\">developer</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expectedSalary = developer.calculateExpectedSalary();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> experience = developer.getExperience();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> githubLink = developer.getGithubLink();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">      expectedSalary,</span><br><span class=\"line\">      experience,</span><br><span class=\"line\">      githubLink</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showManagerList</span>(<span class=\"params\">managers: Manager[]</span>) </span>&#123;</span><br><span class=\"line\">  managers.forEach(<span class=\"function\">(<span class=\"params\">manager</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expectedSalary = manager.calculateExpectedSalary();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> experience = manager.getExperience();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> portfolio = manager.getMBAProjects();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">      expectedSalary,</span><br><span class=\"line\">      experience,</span><br><span class=\"line\">      portfolio</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Developer &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getExtraDetails() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      githubLink: <span class=\"keyword\">this</span>.githubLink,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Manager &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getExtraDetails() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      portfolio: <span class=\"keyword\">this</span>.portfolio,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showEmployeeList</span>(<span class=\"params\">employee: Developer | Manager</span>) </span>&#123;</span><br><span class=\"line\">  employee.forEach(<span class=\"function\">(<span class=\"params\">employee</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> expectedSalary = employee.calculateExpectedSalary();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> experience = employee.getExperience();</span><br><span class=\"line\">    <span class=\"keyword\">const</span> extra = employee.getExtraDetails();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">const</span> data = &#123;</span><br><span class=\"line\">      expectedSalary,</span><br><span class=\"line\">      experience,</span><br><span class=\"line\">      extra,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    render(data);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用Object-assign或者解析构值来定义默认的对象\"><a href=\"#使用Object-assign或者解析构值来定义默认的对象\" class=\"headerlink\" title=\"使用Object.assign或者解析构值来定义默认的对象\"></a>使用<code>Object.assign</code>或者解析构值来定义默认的对象</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MenuConfig = &#123; title?: <span class=\"built_in\">string</span>, body?: <span class=\"built_in\">string</span>, buttonText?: <span class=\"built_in\">string</span>, cancellable?: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">config: MenuConfig</span>) </span>&#123;</span><br><span class=\"line\">  config.title = config.title || <span class=\"string\">'Foo'</span>;</span><br><span class=\"line\">  config.body = config.body || <span class=\"string\">'Bar'</span>;</span><br><span class=\"line\">  config.buttonText = config.buttonText || <span class=\"string\">'Baz'</span>;</span><br><span class=\"line\">  config.cancellable = config.cancellable !== <span class=\"literal\">undefined</span> ? config.cancellable : <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123; body: <span class=\"string\">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MenuConfig = &#123; title?: <span class=\"built_in\">string</span>, body?: <span class=\"built_in\">string</span>, buttonText?: <span class=\"built_in\">string</span>, cancellable?: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">config: MenuConfig</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> menuConfig = <span class=\"built_in\">Object</span>.assign(&#123;</span><br><span class=\"line\">    title: <span class=\"string\">'Foo'</span>,</span><br><span class=\"line\">    body: <span class=\"string\">'Bar'</span>,</span><br><span class=\"line\">    buttonText: <span class=\"string\">'Baz'</span>,</span><br><span class=\"line\">    cancellable: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;, config);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123; body: <span class=\"string\">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>或者，你也可以使用解析构值来实现。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MenuConfig = &#123; title?: <span class=\"built_in\">string</span>, body?: <span class=\"built_in\">string</span>, buttonText?: <span class=\"built_in\">string</span>, cancellable?: <span class=\"built_in\">boolean</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createMenu</span>(<span class=\"params\">&#123; title = 'Foo', body = 'Bar', buttonText = 'Baz', cancellable = <span class=\"literal\">true</span> &#125;: MenuConfig</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">createMenu(&#123; body: <span class=\"string\">'Bar'</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>通过显示传入<code>undefined</code>或者<code>null</code>值来避免任何副作用，也可以告诉<code>TypeScript</code>编译器不允许他们。请参阅<a href=\"https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks\" target=\"_blank\" rel=\"noopener\"><code>--strictNullChecks</code></a></p>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要将布尔值作为方法的参数\"><a href=\"#不要将布尔值作为方法的参数\" class=\"headerlink\" title=\"不要将布尔值作为方法的参数\"></a>不要将布尔值作为方法的参数</h3><p>布尔值表示了你的方法不止做了一件事情，请根据布尔值拆分你的方法。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFile</span>(<span class=\"params\">name: <span class=\"built_in\">string</span>, temp: <span class=\"built_in\">boolean</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (temp) &#123;</span><br><span class=\"line\">    fs.create(<span class=\"string\">`./temp/<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    fs.create(name);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createTempFile</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  createFile(<span class=\"string\">`./temp/<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createFile</span>(<span class=\"params\">name: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  fs.create(name);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"避免副作用（第一部分）\"><a href=\"#避免副作用（第一部分）\" class=\"headerlink\" title=\"避免副作用（第一部分）\"></a>避免副作用（第一部分）</h3><p>如果一个方法除了返回值以外还进行了其他操作并影响了一个或者多个值，这个函数就会产生副作用。副作用可能是写入文件，修改某个全局变量，或意外地将所有资源连接给陌生人。<br>如果你确实需要一个方法产生副作用，例如刚才所说的写入文件之类的，那么不要使用多个方法或者类去写入特定的文件，而是只使用一个服务来实现它。<br>重点是避免常见的陷阱，比如在没有任何结构的对象之间共享状态，使用可以由任何东西写入的可变数据类型，而不是集中在副作用发生的位置。 如果你能做到这一点，你会比绝大多数其他程序员更快乐。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">'Robert C. Martin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toBase64</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  name = btoa(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">toBase64();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 打印的已经不是 'Robert C. Martin' 而是 'Um9iZXJ0IEMuIE1hcnRpbg=='</span></span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">'Robert C. Martin'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">toBase64</span>(<span class=\"params\">text: <span class=\"built_in\">string</span></span>): <span class=\"title\">string</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> btoa(text);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> encodedName = toBase64(name);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"避免副作用（第二部分）\"><a href=\"#避免副作用（第二部分）\" class=\"headerlink\" title=\"避免副作用（第二部分）\"></a>避免副作用（第二部分）</h3><p>在JavaScript中，值类型通过值来传递，对象/数组通过引用传递，对于对象和数组，如果你在方法中进行了修改，那么该对象或数组在其他方法中都将受到影响，这有时候会很棒，但有时候也会很糟糕，让我们来思考一个糟糕的场景：<br>用户点击<code>购买</code>按钮，然后调用网络请求<code>购买</code>功能的接口，并将购物车的内容以数组的形式发送给后台，由于网络连接不畅，用户可能会继续重试请求。那如果在此期间用户在网络请求之前不小心点击了他们实际上不想购买的物品上的<code>添加到购物车</code>按钮，该怎么办？如果发生了这种情况并网络请求开始，那么该物品也意外得被购买了，因为它具有多购物车的引用。<br>一个很好的解决方案是<code>addItemToCart</code>始终克隆<code>cart</code>，编辑它，然后返回克隆。 这样可以确保任何保留在购物车参考上的其他功能都不会受到任何更改的影响。<br>提到这种方法的两点需要注意：<br>1.在某些情况下，您可能确实想要修改输入对象，但是当您采用这种编程习惯时，您会发现这些情况非常罕见。 大多数东西都可以重构，没有副作用！ （见[纯函数]（<a href=\"https://en.wikipedia.org/wiki/Pure_function））\" target=\"_blank\" rel=\"noopener\">https://en.wikipedia.org/wiki/Pure_function））</a><br>克隆大对象在性能方面可能非常昂贵。 幸运的是，这在实践中不是一个大问题，因为有很好的库快速实现而不是像手动克隆对象和数组那样占用大量内存。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addItemToCart</span>(<span class=\"params\">cart: CartItem[], item: Item</span>): <span class=\"title\">void</span> </span>&#123;</span><br><span class=\"line\">  cart.push(&#123; item, date: <span class=\"built_in\">Date</span>.now() &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addItemToCart</span>(<span class=\"params\">cart: CartItem[], item: Item</span>): <span class=\"title\">CartItem</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> [...cart, &#123; item, date: <span class=\"built_in\">Date</span>.now() &#125;];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要书写全局方法\"><a href=\"#不要书写全局方法\" class=\"headerlink\" title=\"不要书写全局方法\"></a>不要书写全局方法</h3><p>污点全局变量在JavaScript中是一种不好的做法，因为你可能会与另一个库发生冲突。 让我们考虑一个例子：如果你想扩展JavaScript的原生Array方法以获得一个可以显示两个数组之间差异的<code>diff</code>方法，该怎么办？ 您可以将新函数写入<code>Array.prototype</code>，但它可能会与另一个尝试执行相同操作的库发生冲突。 如果那个其他库只是使用<code>diff</code>找到数组的第一个和最后一个元素之间的区别怎么办？ 这就是为什么只使用类并简单地扩展<code>Array</code>全局变得更好的原因。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">declare</span> global &#123;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> Array&lt;T&gt; &#123;</span><br><span class=\"line\">    diff(other: T[]): <span class=\"built_in\">Array</span>&lt;T&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!<span class=\"built_in\">Array</span>.prototype.diff) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">Array</span>.prototype.diff = <span class=\"function\"><span class=\"keyword\">function</span> &lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">other: T[]</span>): <span class=\"title\">T</span>[] </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> Set(other);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> MyArray&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"built_in\">Array</span>&lt;T&gt; &#123;</span><br><span class=\"line\">  diff(other: T[]): T[] &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> hash = <span class=\"keyword\">new</span> Set(other);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.filter(<span class=\"function\"><span class=\"params\">elem</span> =&gt;</span> !hash.has(elem));</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用函数式编程而不是命令式编程\"><a href=\"#使用函数式编程而不是命令式编程\" class=\"headerlink\" title=\"使用函数式编程而不是命令式编程\"></a>使用函数式编程而不是命令式编程</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> contributions = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Uncle Bobby'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Suzie Q'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jimmy Gosling'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">150</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Gracie Hopper'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> totalOutput = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; contributions.length; i++) &#123;</span><br><span class=\"line\">  totalOutput += contributions[i].linesOfCode;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> contributions = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Uncle Bobby'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Suzie Q'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1500</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Jimmy Gosling'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">150</span></span><br><span class=\"line\">  &#125;, &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'Gracie Hopper'</span>,</span><br><span class=\"line\">    linesOfCode: <span class=\"number\">1000</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> totalOutput = contributions</span><br><span class=\"line\">  .reduce(<span class=\"function\">(<span class=\"params\">totalLines, output</span>) =&gt;</span> totalLines + output.linesOfCode, <span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"封装条件\"><a href=\"#封装条件\" class=\"headerlink\" title=\"封装条件\"></a>封装条件</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (subscription.isTrial || account.balance &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">canActivateService</span>(<span class=\"params\">subscription: Subscription, account: Account</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> subscription.isTrial || account.balance &gt; <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (canActivateService(subscription, account)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"避免负向判断\"><a href=\"#避免负向判断\" class=\"headerlink\" title=\"避免负向判断\"></a>避免负向判断</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmailNotUsed</span>(<span class=\"params\">email: <span class=\"built_in\">string</span></span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isEmailNotUsed(email)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isEmailUsed</span>(<span class=\"params\">email</span>): <span class=\"title\">boolean</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (!isEmailUsed(node)) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"减少判断\"><a href=\"#减少判断\" class=\"headerlink\" title=\"减少判断\"></a>减少判断</h3><p>这似乎是一项不可能的任务。 在第一次听到这个观点时，大多数人都会说，“如果没有<code>if</code>陈述，我该怎么做？” 答案是，在许多情况下，都可以使用多态来实现相同的任务。 第二个问题通常是，“那很好，但我为什么要那样做呢？” 答案是我们之前学到的一个简洁的代码概念：一个函数应该只做一件事。 当你有具有<code>if</code>语句的类和函数时，你告诉你的用户你的函数不止一件事。 记住，只做一件事。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">type</span>: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (<span class=\"keyword\">this</span>.type) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'777'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getPassengerCount();</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'Air Force One'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude();</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">'Cessna'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getFuelExpenditure();</span><br><span class=\"line\">      <span class=\"keyword\">default</span>:</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Unknown airplane type.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getMaxAltitude(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"keyword\">protected</span> getMaxAltitude(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// shared logic with subclasses ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Boeing777 <span class=\"keyword\">extends</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getPassengerCount();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> AirForceOne <span class=\"keyword\">extends</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Cessna <span class=\"keyword\">extends</span> Airplane &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  getCruisingAltitude() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.getMaxAltitude() - <span class=\"keyword\">this</span>.getFuelExpenditure();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要过度优化\"><a href=\"#不要过度优化\" class=\"headerlink\" title=\"不要过度优化\"></a>不要过度优化</h3><p>现代浏览器在运行时进行了大量的优化。 很多时候，如果你正在优化那么你只是在浪费你的时间。 你可以在[这里]（<a href=\"https://github.com/petkaantonov/bluebird/wiki/Optimization-killers）看到缺少优化的地方。\" target=\"_blank\" rel=\"noopener\">https://github.com/petkaantonov/bluebird/wiki/Optimization-killers）看到缺少优化的地方。</a> 同时针对那些，直到它们被修复为止。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在旧浏览器上，每次使用未缓存的`list.length`迭代都会很昂贵</span></span><br><span class=\"line\"><span class=\"comment\">// 因为`list.length`会重新计算。 但是在现代浏览器中，这已经被优化了。</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, len = list.length; i &lt; len; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"移除无用的代码\"><a href=\"#移除无用的代码\" class=\"headerlink\" title=\"移除无用的代码\"></a>移除无用的代码</h3><p>无用的代码和重复代码一样糟糕。 没有理由将它保留在您的代码库中。<br>如果它没有被调用，请删掉它！ 如果后面需要，可以在版本管理的历史中找到它。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">oldRequestModule</span>(<span class=\"params\">url: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestModule</span>(<span class=\"params\">url: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> req = requestModule;</span><br><span class=\"line\">inventoryTracker(<span class=\"string\">'apples'</span>, req, <span class=\"string\">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestModule</span>(<span class=\"params\">url: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> req = requestModule;</span><br><span class=\"line\">inventoryTracker(<span class=\"string\">'apples'</span>, req, <span class=\"string\">'www.inventory-awesome.io'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用迭代器和生成器\"><a href=\"#使用迭代器和生成器\" class=\"headerlink\" title=\"使用迭代器和生成器\"></a>使用迭代器和生成器</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span>[] </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">1</span>) <span class=\"keyword\">return</span> [<span class=\"number\">0</span>];</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n === <span class=\"number\">2</span>) <span class=\"keyword\">return</span> [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> items: <span class=\"built_in\">number</span>[] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (items.length &lt; n) &#123;</span><br><span class=\"line\">    items.push(items[items.length - <span class=\"number\">2</span>] + items[items.length - <span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> items;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">  fibonacci(n).forEach(<span class=\"function\"><span class=\"params\">fib</span> =&gt;</span> <span class=\"built_in\">console</span>.log(fib));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibonacci</span>(<span class=\"params\"></span>): <span class=\"title\">IterableIterator</span>&lt;<span class=\"title\">number</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [a, b] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">print</span>(<span class=\"params\">n: <span class=\"built_in\">number</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> fib of fibonacci()) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i++ === n) <span class=\"keyword\">break</span>;  </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(fib);</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">print(<span class=\"number\">10</span>);</span><br></pre></td></tr></table></figure>\n<p>有些库允许我们用之前熟悉的方法来处理例如 <code>map</code>, <code>slice</code>, <code>forEach</code> 等等. 参考这里 <a href=\"https://www.npmjs.com/package/itiriri\" target=\"_blank\" rel=\"noopener\">itiriri</a> (或者 <a href=\"https://www.npmjs.com/package/itiriri-async\" target=\"_blank\" rel=\"noopener\">itiriri-async</a> 用于异步处理).</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> itiriri <span class=\"keyword\">from</span> <span class=\"string\">'itiriri'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">fibonacci</span>(<span class=\"params\"></span>): <span class=\"title\">IterableIterator</span>&lt;<span class=\"title\">number</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> [a, b] = [<span class=\"number\">0</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> a;</span><br><span class=\"line\">    [a, b] = [b, a + b];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">itiriri(fibonacci())</span><br><span class=\"line\">  .take(<span class=\"number\">10</span>)</span><br><span class=\"line\">  .forEach(<span class=\"function\"><span class=\"params\">fib</span> =&gt;</span> <span class=\"built_in\">console</span>.log(fib));</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"对象和数据结构\"><a href=\"#对象和数据结构\" class=\"headerlink\" title=\"对象和数据结构\"></a>对象和数据结构</h2><h3 id=\"使用-getters-和-setters\"><a href=\"#使用-getters-和-setters\" class=\"headerlink\" title=\"使用 getters 和 setters\"></a>使用 getters 和 setters</h3><p>TypeScript支持getter/setter语法。<br>使用getter和setter访问来自封装行为的对象的数据可能比简单地查找对象上的属性更好。<br>你可能会问为什么，下面是一些原因：</p>\n<ul>\n<li>当您想要获取对象属性之外的其他操作时，您不必查找并更改代码库中的每个访问者。</li>\n<li>在执行<code>set</code>时使添加验证变得简单。</li>\n<li>封装内部表示。</li>\n<li>获取和设置时，可以轻松添加日志记录和错误处理。</li>\n<li>您可以延迟加载对象的属性，假设从服务器获取它。</li>\n</ul>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> BankAccount = &#123;</span><br><span class=\"line\">  balance: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> value = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> account: BankAccount = &#123;</span><br><span class=\"line\">  balance: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Cannot set negative balance.'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">account.balance = value;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> BankAccount &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> accountBalance: <span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> balance(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.accountBalance;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> balance(value: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (value &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Cannot set negative balance.'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">this</span>.accountBalance = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 现在 `BankAccount` 封装了验证逻辑</span></span><br><span class=\"line\"><span class=\"comment\">// 如果有一个我们想增加额外的验证规则,</span></span><br><span class=\"line\"><span class=\"comment\">// 我们只需要去改变 `setter` 的实现,</span></span><br><span class=\"line\"><span class=\"comment\">// 而不影响其他代码.</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> account = <span class=\"keyword\">new</span> BankAccount();</span><br><span class=\"line\">account.balance = <span class=\"number\">100</span>;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"设置-private-protected\"><a href=\"#设置-private-protected\" class=\"headerlink\" title=\"设置 private/protected\"></a>设置 private/protected</h3><p>TypeScript 支持 <code>public</code> <em>(默认)</em>, <code>protected</code> 还有 <code>private</code>.  </p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Circle &#123;</span><br><span class=\"line\">  radius: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\">radius: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.radius = radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  perimeter() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  surface() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * <span class=\"keyword\">this</span>.radius * <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Circle &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly radius: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  perimeter() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span> * <span class=\"built_in\">Math</span>.PI * <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  surface() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.PI * <span class=\"keyword\">this</span>.radius * <span class=\"keyword\">this</span>.radius;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"更倾向于不可变\"><a href=\"#更倾向于不可变\" class=\"headerlink\" title=\"更倾向于不可变\"></a>更倾向于不可变</h3><p>TypeScript 的类型系统允许在接口/类的各个属性上标记<code>readonly</code>，对于更高级的场景，有一个内置里类型<code>Readonly</code>，它接受一个泛型<code>&lt;T&gt;</code>并使用映射类型将其所有属性标记为只读，请见<a href=\"https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types\" target=\"_blank\" rel=\"noopener\">这里</a>。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Config &#123;</span><br><span class=\"line\">  host: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  port: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  db: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Config &#123;</span><br><span class=\"line\">  readonly host: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  readonly port: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  readonly db: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"type-对比-interface\"><a href=\"#type-对比-interface\" class=\"headerlink\" title=\"type 对比 interface\"></a><code>type</code> 对比 <code>interface</code></h3><p>当您使用联合或者交叉时使用<code>type</code>，当想要继承或者实现时使用<code>interface</code>，但是没有严格的规则，请使用适合自己的规则。<br>有关更详细的说明，请参阅<a href=\"https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543\" target=\"_blank\" rel=\"noopener\">这里</a>了解ts中<code>type</code>和<code>interface</code>之间的区别。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> EmailConfig &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> DbConfig &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Config &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Shape = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> EmailConfig = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> DbConfig = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Config  = EmailConfig | DbConfig;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Circle <span class=\"keyword\">implements</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Square <span class=\"keyword\">implements</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h2><h3 id=\"类应该是精简的\"><a href=\"#类应该是精简的\" class=\"headerlink\" title=\"类应该是精简的\"></a>类应该是精简的</h3><p>类的规模是由其责任来衡量的。 遵循<em>单一责任原则</em>一个类应该很小。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Dashboard &#123;</span><br><span class=\"line\">  getLanguage(): <span class=\"built_in\">string</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  setLanguage(language: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  showProgress(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  hideProgress(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  isDirty(): <span class=\"built_in\">boolean</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  disable(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  enable(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  addSubscription(subscription: Subscription): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  removeSubscription(subscription: Subscription): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  addUser(user: User): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  removeUser(user: User): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  goToHomePage(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  updateProfile(details: UserDetails): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  getVersion(): <span class=\"built_in\">string</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Dashboard &#123;</span><br><span class=\"line\">  disable(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  enable(): <span class=\"built_in\">void</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">  getVersion(): <span class=\"built_in\">string</span> &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过将其他方法移动到其他类中来分担责任。</span></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"高内聚和低耦合\"><a href=\"#高内聚和低耦合\" class=\"headerlink\" title=\"高内聚和低耦合\"></a>高内聚和低耦合</h3><p>聚合程度决定了类成员的彼此相关程度。在理想情况下，每个方法都应该使用类中的所有字段，然后我们称之为<em>最大内聚类</em>，但这是不容易实现的，甚至是不可取的，但是我们都更喜欢凝聚力。<br>耦合是指两个类相互依赖的程度，如果其中一个类的修改不会影响另一个类，则称这两个类是低耦合的。<br>良好的软件设计应该是<strong>高内聚</strong>和<strong>低耦合</strong>。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> UserManager &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 不推荐理由: 每一个私有变量都有特定的一组方法使用.</span></span><br><span class=\"line\">  <span class=\"comment\">// 这明确的表名这个类不止做了一件事情.</span></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly db: Database,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly emailSender: EmailSender</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> getUser(id: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> db.users.findOne(&#123; id &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> getTransactions(userId: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> db.transactions.find(&#123; userId &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendGreeting(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> emailSender.send(<span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendNotification(text: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> emailSender.send(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendNewsletter(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> UserService &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly db: Database</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> getUser(id: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;User&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.db.users.findOne(&#123; id &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> getTransactions(userId: <span class=\"built_in\">number</span>): <span class=\"built_in\">Promise</span>&lt;Transaction[]&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.db.transactions.find(&#123; userId &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> UserNotifier &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly emailSender: EmailSender</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendGreeting(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.emailSender.send(<span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendNotification(text: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.emailSender.send(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> sendNewsletter(): <span class=\"built_in\">Promise</span>&lt;<span class=\"built_in\">void</span>&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"比起继承来更喜欢使用组合\"><a href=\"#比起继承来更喜欢使用组合\" class=\"headerlink\" title=\"比起继承来更喜欢使用组合\"></a>比起继承来更喜欢使用组合</h3><p>正如<a href=\"https://en.wikipedia.org/wiki/Design_Patterns\" target=\"_blank\" rel=\"noopener\">设计模式</a>中所说的那样，你应该<strong>尽可能得优先组合而不是继承</strong>，有很多很好的理由去使用继承，同时也有很多很好的理由去使用组合，这就意味着如果你的思想本能的是使用继承，那就试着想一想，使用组合是不是能更好的解决你的问题，一般在某些情况下它是可以的。<br>你可能想知道我什么时候该使用组合，这取决于你手头的问题，不过下面的列表列出了使用继承更好的一些情况：</p>\n<ol>\n<li><p>你的继承表示的是”is-a”关系而不是”has-a”关系（Human-&gt; Animal vs. User-&gt; UserDetails）。</p>\n</li>\n<li><p>您可以重用基类中的代码（人类可以像所有动物一样移动）。</p>\n</li>\n<li><p>您希望通过更改基类对派生类进行全局更改。 （改变所有动物移动时的热量消耗）。</p>\n</li>\n</ol>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Employee &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly name: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly email: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> EmployeeTaxData <span class=\"keyword\">extends</span> Employee &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    name: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    email: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly ssn: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly salary: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>(name, email);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Employee &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> taxData: EmployeeTaxData;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly name: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly email: <span class=\"built_in\">string</span></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setTaxData(ssn: <span class=\"built_in\">string</span>, salary: <span class=\"built_in\">number</span>): Employee &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.taxData = <span class=\"keyword\">new</span> EmployeeTaxData(ssn, salary);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> EmployeeTaxData &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> readonly ssn: <span class=\"built_in\">string</span>,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">public</span> readonly salary: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用链式编程\"><a href=\"#使用链式编程\" class=\"headerlink\" title=\"使用链式编程\"></a>使用链式编程</h3><p>这种模式非常有用，并且常用于许多库中。 它允许您的代码更直观，而不是冗长。 因此，请使用链式编程并检查代码的清洁程度。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> QueryBuilder &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> collection: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> pageNumber: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> itemsPerPage: <span class=\"built_in\">number</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> orderByFields: <span class=\"built_in\">string</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">from</span>(collection: <span class=\"built_in\">string</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collection = collection;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  page(<span class=\"built_in\">number</span>: <span class=\"built_in\">number</span>, itemsPerPage: <span class=\"built_in\">number</span> = <span class=\"number\">100</span>): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pageNumber = <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemsPerPage = itemsPerPage;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  orderBy(...fields: <span class=\"built_in\">string</span>[]): <span class=\"built_in\">void</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.orderByFields = fields;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  build(): Query &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> queryBuilder = <span class=\"keyword\">new</span> QueryBuilder();</span><br><span class=\"line\">queryBuilder.from(<span class=\"string\">'users'</span>);</span><br><span class=\"line\">queryBuilder.page(<span class=\"number\">1</span>, <span class=\"number\">100</span>);</span><br><span class=\"line\">queryBuilder.orderBy(<span class=\"string\">'firstName'</span>, <span class=\"string\">'lastName'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> query = queryBuilder.build();</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> QueryBuilder &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> collection: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> pageNumber: <span class=\"built_in\">number</span> = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> itemsPerPage: <span class=\"built_in\">number</span> = <span class=\"number\">100</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> orderByFields: <span class=\"built_in\">string</span>[] = [];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">from</span>(collection: <span class=\"built_in\">string</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.collection = collection;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  page(<span class=\"built_in\">number</span>: <span class=\"built_in\">number</span>, itemsPerPage: <span class=\"built_in\">number</span> = <span class=\"number\">100</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.pageNumber = <span class=\"built_in\">number</span>;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.itemsPerPage = itemsPerPage;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  orderBy(...fields: <span class=\"built_in\">string</span>[]): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.orderByFields = fields;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  build(): Query &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> query = <span class=\"keyword\">new</span> QueryBuilder()</span><br><span class=\"line\">  .from(<span class=\"string\">'users'</span>)</span><br><span class=\"line\">  .page(<span class=\"number\">1</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\">  .orderBy(<span class=\"string\">'firstName'</span>, <span class=\"string\">'lastName'</span>)</span><br><span class=\"line\">  .build();</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"SOLID原则\"><a href=\"#SOLID原则\" class=\"headerlink\" title=\"SOLID原则\"></a>SOLID原则</h2><h3 id=\"单一责任原则-SRP\"><a href=\"#单一责任原则-SRP\" class=\"headerlink\" title=\"单一责任原则 (SRP)\"></a>单一责任原则 (SRP)</h3><p>正如代码整洁之道上所说，“应该有且仅有一个原因引起类的变更”，要最大幅度的减少类的变更，如果一个类的功能太负责而你修改的它的一部分，那么很难保证是否会影响到其他地方。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> UserSettings &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly user: User</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  changeSettings(settings: UserSettings) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.verifyCredentials()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  verifyCredentials() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> UserAuth &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly user: User</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  verifyCredentials() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> UserSettings &#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> readonly auth: UserAuth;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly user: User</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.auth = <span class=\"keyword\">new</span> UserAuth(user);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  changeSettings(settings: UserSettings) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.auth.verifyCredentials()) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"开放封闭原则-OCP\"><a href=\"#开放封闭原则-OCP\" class=\"headerlink\" title=\"开放封闭原则 (OCP)\"></a>开放封闭原则 (OCP)</h3><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。但并不意味着不做任何修改，低层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> AjaxAdapter <span class=\"keyword\">extends</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> NodeAdapter <span class=\"keyword\">extends</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> HttpRequester &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly adapter: Adapter</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> fetch&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.adapter <span class=\"keyword\">instanceof</span> AjaxAdapter) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> makeAjaxCall&lt;T&gt;(url);</span><br><span class=\"line\">      <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.adapter <span class=\"keyword\">instanceof</span> NodeAdapter) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> makeHttpCall&lt;T&gt;(url);</span><br><span class=\"line\">      <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeAjaxCall</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">url: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeHttpCall</span>&lt;<span class=\"title\">T</span>&gt;(<span class=\"params\">url: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> <span class=\"keyword\">async</span> request&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> AjaxAdapter <span class=\"keyword\">extends</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> request&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> NodeAdapter <span class=\"keyword\">extends</span> Adapter &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> request&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> HttpRequester &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly adapter: Adapter</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> fetch&lt;T&gt;(url: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"keyword\">this</span>.adapter.request&lt;T&gt;(url);</span><br><span class=\"line\">    <span class=\"comment\">// 转换response并返回</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"里氏替换原则-LSP\"><a href=\"#里氏替换原则-LSP\" class=\"headerlink\" title=\"里氏替换原则 (LSP)\"></a>里氏替换原则 (LSP)</h3><p>只要父类能出现的地方子类都可以出现，而且替换为子类也不会产生任何错误或异常，使用者可有根本就不需要知道是父类还是子类。但是，反过来就不行了，有子类出现的地方，父类未必能适应。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Rectangle &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">protected</span> width: <span class=\"built_in\">number</span> = 0,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">protected</span> height: <span class=\"built_in\">number</span> = 0</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setColor(color: <span class=\"built_in\">string</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render(area: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setWidth(width: <span class=\"built_in\">number</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setHeight(height: <span class=\"built_in\">number</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Square <span class=\"keyword\">extends</span> Rectangle &#123;</span><br><span class=\"line\">  setWidth(width: <span class=\"built_in\">number</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = width;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = width;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  setHeight(height: <span class=\"built_in\">number</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.width = height;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.height = height;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderLargeRectangles</span>(<span class=\"params\">rectangles: Rectangle[]</span>) </span>&#123;</span><br><span class=\"line\">  rectangles.forEach(<span class=\"function\">(<span class=\"params\">rectangle</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> area = rectangle</span><br><span class=\"line\">      .setWidth(<span class=\"number\">4</span>)</span><br><span class=\"line\">      .setHeight(<span class=\"number\">5</span>)</span><br><span class=\"line\">      .getArea();</span><br><span class=\"line\">    rectangle.render(area);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rectangles = [<span class=\"keyword\">new</span> Rectangle(), <span class=\"keyword\">new</span> Rectangle(), <span class=\"keyword\">new</span> Square()];</span><br><span class=\"line\">renderLargeRectangles(rectangles);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> Shape &#123;</span><br><span class=\"line\">  setColor(color: <span class=\"built_in\">string</span>): <span class=\"keyword\">this</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  render(area: <span class=\"built_in\">number</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">abstract</span> getArea(): <span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Rectangle <span class=\"keyword\">extends</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly width = 0,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"keyword\">private</span> readonly height = 0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.width * <span class=\"keyword\">this</span>.height;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> Square <span class=\"keyword\">extends</span> Shape &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly length: <span class=\"built_in\">number</span></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  getArea(): <span class=\"built_in\">number</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.length * <span class=\"keyword\">this</span>.length;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">renderLargeShapes</span>(<span class=\"params\">shapes: Shape[]</span>) </span>&#123;</span><br><span class=\"line\">  shapes.forEach(<span class=\"function\">(<span class=\"params\">shape</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> area = shape.getArea();</span><br><span class=\"line\">    shape.render(area);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> shapes = [<span class=\"keyword\">new</span> Rectangle(<span class=\"number\">4</span>, <span class=\"number\">5</span>), <span class=\"keyword\">new</span> Rectangle(<span class=\"number\">4</span>, <span class=\"number\">5</span>), <span class=\"keyword\">new</span> Square(<span class=\"number\">5</span>)];</span><br><span class=\"line\">renderLargeShapes(shapes);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"接口隔离原则-ISP\"><a href=\"#接口隔离原则-ISP\" class=\"headerlink\" title=\"接口隔离原则 (ISP)\"></a>接口隔离原则 (ISP)</h3><p>建立单一接口，不要建立臃肿庞大的接口。接口隔离原则与单一职责的审视角度是不相同的，单一职责要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分，而接口隔离原则要求接口的方法尽量少。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> SmartPrinter &#123;</span><br><span class=\"line\">  print();</span><br><span class=\"line\">  fax();</span><br><span class=\"line\">  scan();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> AllInOnePrinter <span class=\"keyword\">implements</span> SmartPrinter &#123;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  fax() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scan() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> EconomicPrinter <span class=\"keyword\">implements</span> SmartPrinter &#123;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  fax() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Fax not supported.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scan() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Scan not supported.'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">interface</span> Printer &#123;</span><br><span class=\"line\">  print();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Fax &#123;</span><br><span class=\"line\">  fax();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Scanner &#123;</span><br><span class=\"line\">  scan();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> AllInOnePrinter <span class=\"keyword\">implements</span> Printer, Fax, Scanner &#123;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\">  fax() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  scan() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> EconomicPrinter <span class=\"keyword\">implements</span> Printer &#123;</span><br><span class=\"line\">  print() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"依赖倒置原则-DIP\"><a href=\"#依赖倒置原则-DIP\" class=\"headerlink\" title=\"依赖倒置原则 (DIP)\"></a>依赖倒置原则 (DIP)</h3><p>含义：<br>1.高层模块不应该依赖低层模块，两者都应该依赖其抽象。<br>2.抽象不应该依赖细节。<br>3.细节应该依赖抽象。</p>\n<p>DIP 通常通过使用控制反转 (IoC) 来实现. 这里有一个例子 <a href=\"https://www.npmjs.com/package/inversify\" target=\"_blank\" rel=\"noopener\">InversifyJs</a></p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFile <span class=\"keyword\">as</span> readFileCb &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = promisify(readFileCb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReportData = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> XmlFormatter &#123;</span><br><span class=\"line\">  parse&lt;T&gt;(content: <span class=\"built_in\">string</span>): T &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将XML字符串序列化为对象.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> ReportReader &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 不推荐: 我们已经创建了对特定请求实现的依赖。</span></span><br><span class=\"line\">  <span class=\"comment\">// 我们应该让ReportReader依赖于一个解析方法：`parse`</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> readonly formatter = <span class=\"keyword\">new</span> XmlFormatter();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> read(path: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> readFile(path, <span class=\"string\">'UTF8'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> ReportReader();</span><br><span class=\"line\"><span class=\"keyword\">await</span> report = <span class=\"keyword\">await</span> reader.read(<span class=\"string\">'report.xml'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; readFile <span class=\"keyword\">as</span> readFileCb &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> readFile = promisify(readFileCb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ReportData = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ..</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">interface</span> Formatter &#123;</span><br><span class=\"line\">  parse&lt;T&gt;(content: <span class=\"built_in\">string</span>): T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> XmlFormatter <span class=\"keyword\">implements</span> Formatter &#123;</span><br><span class=\"line\">  parse&lt;T&gt;(content: <span class=\"built_in\">string</span>): T &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将XML字符串序列化为对象.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> JsonFormatter <span class=\"keyword\">implements</span> Formatter &#123;</span><br><span class=\"line\">  parse&lt;T&gt;(content: <span class=\"built_in\">string</span>): T &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 将JSON字符串序列化为对象.</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> ReportReader &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly formatter: Formatter</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">async</span> read(path: <span class=\"built_in\">string</span>): <span class=\"built_in\">Promise</span>&lt;ReportData&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> text = <span class=\"keyword\">await</span> readFile(path, <span class=\"string\">'UTF8'</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.formatter.parse&lt;ReportData&gt;(text);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> ReportReader(<span class=\"keyword\">new</span> XmlFormatter());</span><br><span class=\"line\"><span class=\"keyword\">await</span> report = <span class=\"keyword\">await</span> reader.read(<span class=\"string\">'report.xml'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果我们需要解析json</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> reader = <span class=\"keyword\">new</span> ReportReader(<span class=\"keyword\">new</span> JsonFormatter());</span><br><span class=\"line\"><span class=\"keyword\">await</span> report = <span class=\"keyword\">await</span> reader.read(<span class=\"string\">'report.json'</span>);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p>测试比编码更重要，如果你的测试数量很少或者根本没有，那么每次修改代码时，你都不会确定有没有破坏其他地方，决定要到什么样的测试程度取决于你的团队，但是100%的覆盖率会让你开发的时候更有信心。这意味你需要一个好的框架之外还需要一个好的<a href=\"https://github.com/gotwarlost/istanbul\" target=\"_blank\" rel=\"noopener\">覆盖统计工具</a><br>没有理由不写测试，有好多很好的js测试框架对typescript都有很好的支持，当您找到适合您团队的时，请始终为您引入的每个新功能/模块编写测试。 如果您首选的方法是测试驱动开发（TDD），那很好，但重点是确保在启动任何功能或重构现有功能之前达到覆盖目标。</p>\n<h3 id=\"测试驱动开发的三条原则\"><a href=\"#测试驱动开发的三条原则\" class=\"headerlink\" title=\"测试驱动开发的三条原则\"></a>测试驱动开发的三条原则</h3><ol>\n<li>除非这能让失败的单元测试通过，否则不允许去编写任何的产品代码。</li>\n<li>只允许编写刚好能够导致失败的单元测试。 （编译失败也属于一种失败）</li>\n<li>只允许编写刚好能够导致一个单元测试失败的产品代码。</li>\n</ol>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"F-I-R-S-T-原则\"><a href=\"#F-I-R-S-T-原则\" class=\"headerlink\" title=\"F.I.R.S.T. 原则\"></a>F.I.R.S.T. 原则</h3><p>整洁的测试需要遵循以下原则:</p>\n<ul>\n<li><p><strong>快速</strong> 测试运行起来应该是快速的因为我们会经常运行他们。</p>\n</li>\n<li><p><strong>独立</strong> 每天测试不允许互相依赖，无论是独立运行还是顺序运行他们的返回应该是相同的。</p>\n</li>\n<li><p><strong>可复现</strong> 测试应该是在任意环境下都是可复现的。</p>\n</li>\n<li><p><strong>自我确认</strong> 测试需要自己体现<strong>通过</strong>或是<strong>不通过</strong>，而不是靠开发者自己比对日志来判断是否通过。</p>\n</li>\n<li><p><strong>及时</strong> 单元测试应该在生产代码之前编写。 如果您在生产代码之后编写测试，您可能会发现编写测试太辛苦了。</p>\n</li>\n</ul>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"测试单一责任\"><a href=\"#测试单一责任\" class=\"headerlink\" title=\"测试单一责任\"></a>测试单一责任</h3><p>测试也需要遵循<strong>单一责任原则</strong>。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; assert &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'AwesomeDate'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'handles date boundaries'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> date: AwesomeDate;</span><br><span class=\"line\"></span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'1/1/2015'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'1/31/2015'</span>, date.addDays(<span class=\"number\">30</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'2/1/2016'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'2/29/2016'</span>, date.addDays(<span class=\"number\">28</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'2/1/2015'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'3/1/2015'</span>, date.addDays(<span class=\"number\">28</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; assert &#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">describe(<span class=\"string\">'AwesomeDate'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'handles 30-day months'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'1/1/2015'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'1/31/2015'</span>, date.addDays(<span class=\"number\">30</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'handles leap year'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'2/1/2016'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'2/29/2016'</span>, date.addDays(<span class=\"number\">28</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'handles non-leap year'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> date = <span class=\"keyword\">new</span> AwesomeDate(<span class=\"string\">'2/1/2015'</span>);</span><br><span class=\"line\">    assert.equal(<span class=\"string\">'3/1/2015'</span>, date.addDays(<span class=\"number\">28</span>));</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"测试的名字应该表示了测试的意图\"><a href=\"#测试的名字应该表示了测试的意图\" class=\"headerlink\" title=\"测试的名字应该表示了测试的意图\"></a>测试的名字应该表示了测试的意图</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Calendar'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'2/29/2020'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'throws'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">describe(<span class=\"string\">'Calendar'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  it(<span class=\"string\">'should handle leap year'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  it(<span class=\"string\">'should throw when format is invalid'</span>, <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"并发\"><a href=\"#并发\" class=\"headerlink\" title=\"并发\"></a>并发</h2><h3 id=\"promises-对比-callbacks\"><a href=\"#promises-对比-callbacks\" class=\"headerlink\" title=\"promises 对比 callbacks\"></a>promises 对比 callbacks</h3><p>回调嵌套过多会产生<strong>回调地狱</strong>，使用promises可以有效解决这个问题。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadPage</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, saveTo: <span class=\"built_in\">string</span>, callback: (error: <span class=\"built_in\">Error</span>, content?: <span class=\"built_in\">string</span>) =&gt; <span class=\"built_in\">void</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">get</span>(url, <span class=\"function\">(<span class=\"params\">error, response</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">      callback(error);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      writeFile(saveTo, response.body, <span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">          callback(error);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          callback(<span class=\"literal\">null</span>, response.body);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">downloadPage(<span class=\"string\">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class=\"string\">'article.html'</span>, <span class=\"function\">(<span class=\"params\">error, content</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> write = promisify(writeFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadPage</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, saveTo: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">string</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(url)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> write(saveTo, response));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">downloadPage(<span class=\"string\">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class=\"string\">'article.html'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">content</span> =&gt;</span> <span class=\"built_in\">console</span>.log(content))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.error(error));</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"Async-Await-比-Promises-更加简洁\"><a href=\"#Async-Await-比-Promises-更加简洁\" class=\"headerlink\" title=\"Async/Await 比 Promises 更加简洁\"></a>Async/Await 比 Promises 更加简洁</h3><p>使用<code>async</code> /<code>await</code>语法，您可以编写比链式调用更清晰，更易理解的代码。 在一个以<code>async</code>关键字为前缀的方法中，您可以告诉JavaScript运行时暂停执行<code>await</code>关键字上的代码（当在promise上使用时）。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> write = util.promisify(writeFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadPage</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, saveTo: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">string</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">get</span>(url).then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> write(saveTo, response));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">downloadPage(<span class=\"string\">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class=\"string\">'article.html'</span>)</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"params\">content</span> =&gt;</span> <span class=\"built_in\">console</span>.log(content))</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> <span class=\"built_in\">console</span>.error(error));</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; <span class=\"keyword\">get</span> &#125; <span class=\"keyword\">from</span> <span class=\"string\">'request'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; writeFile &#125; <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; promisify &#125; <span class=\"keyword\">from</span> <span class=\"string\">'util'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> write = promisify(writeFile);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">downloadPage</span>(<span class=\"params\">url: <span class=\"built_in\">string</span>, saveTo: <span class=\"built_in\">string</span></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">string</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"keyword\">get</span>(url);</span><br><span class=\"line\">  <span class=\"keyword\">await</span> write(saveTo, response);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> response;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> content = <span class=\"keyword\">await</span> downloadPage(<span class=\"string\">'https://en.wikipedia.org/wiki/Robert_Cecil_Martin'</span>, <span class=\"string\">'article.html'</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(content);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.error(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><p>抛出异常是件好事！ 它们意味着运行时已经成功识别出程序中的某些内容出错并及时通知您。</p>\n<h3 id=\"始终使用Error对象来抛出错误。\"><a href=\"#始终使用Error对象来抛出错误。\" class=\"headerlink\" title=\"始终使用Error对象来抛出错误。\"></a>始终使用<code>Error</code>对象来抛出错误。</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateTotal</span>(<span class=\"params\">items: Item[]</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"string\">'Not implemented.'</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Item</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"string\">'Not implemented.'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">calculateTotal</span>(<span class=\"params\">items: Item[]</span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not implemented.'</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Item</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Promise</span>.reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not implemented.'</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Item</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"string\">'Not implemented.'</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要忽略掉捕捉后的错误\"><a href=\"#不要忽略掉捕捉后的错误\" class=\"headerlink\" title=\"不要忽略掉捕捉后的错误\"></a>不要忽略掉捕捉后的错误</h3><p>对捕获的错误不执行任何操作并不能使您能够修复或对所述错误做出反应。 将错误记录到控制台（<code>console.log</code>）也不是很好，因为它常常会被其他东西所淹没。 所以你应该有一个统一的地方集中处理这些错误。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  functionThatMightThrow();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者更严重</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  functionThatMightThrow();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 直接忽略掉</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./logging'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  functionThatMightThrow();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  logger.log(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要忽略promises-的-rejected\"><a href=\"#不要忽略promises-的-rejected\" class=\"headerlink\" title=\"不要忽略promises 的 rejected\"></a>不要忽略promises 的 rejected</h3><p>就像不能忽略<code>try/catch</code>到的异常一样</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getUser()</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">user: User</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sendEmail(user.email, <span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; logger &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./logging'</span></span><br><span class=\"line\"></span><br><span class=\"line\">getUser()</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">user: User</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sendEmail(user.email, <span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">error</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    logger.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> user = <span class=\"keyword\">await</span> getUser();</span><br><span class=\"line\">  <span class=\"keyword\">await</span> sendEmail(user.email, <span class=\"string\">'Welcome!'</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">  logger.log(error);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h2><p>格式化是主观的。 像这里的许多规则一样，没有必须遵循特定硬性规则。 重点是<em>不要过于格式化</em>格式化。 有很多工具可以实现自动化。 用一个就好！ 工程师争论格式化是浪费时间和金钱的。 遵循的一般规则是<em>保持一致的格式规则</em>就可以了。</p>\n<p>TypeScript 有一个很强大的工具叫做 <a href=\"https://palantir.github.io/tslint/\" target=\"_blank\" rel=\"noopener\">TSLint</a>. 它是一个静态分析工具，可以帮助您显着提高代码的可读性和可维护性。 下面是您可以在项目中引用的TSLint配置：</p>\n<ul>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-config-standard\" target=\"_blank\" rel=\"noopener\">TSLint Config Standard</a> - 标准风格规则</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-config-airbnb\" target=\"_blank\" rel=\"noopener\">TSLint Config Airbnb</a> - Airbnb风格</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-clean-code\" target=\"_blank\" rel=\"noopener\">TSLint Clean Code</a> - 代码整洁之道的规则</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-react\" target=\"_blank\" rel=\"noopener\">TSLint react</a> - React 和 JSX 的规则</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-config-prettier\" target=\"_blank\" rel=\"noopener\">TSLint + Prettier</a> -  <a href=\"https://github.com/prettier/prettier\" target=\"_blank\" rel=\"noopener\">Prettier</a> 代码风格</p>\n</li>\n<li><p><a href=\"https://www.npmjs.com/package/tslint-eslint-rules\" target=\"_blank\" rel=\"noopener\">ESLint rules for TSLint</a> - ESLint 规则</p>\n</li>\n</ul>\n<h3 id=\"使用一致的写法\"><a href=\"#使用一致的写法\" class=\"headerlink\" title=\"使用一致的写法\"></a>使用一致的写法</h3><p>这些规则是主观的，所以你的团队可以选择按自己的风格制定。 关键是，无论你选择什么，只要<em>保持一致</em>。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DAYS_IN_WEEK = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> daysInMonth = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> songs = [<span class=\"string\">'Back In Black'</span>, <span class=\"string\">'Stairway to Heaven'</span>, <span class=\"string\">'Hey Jude'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> Artists = [<span class=\"string\">'ACDC'</span>, <span class=\"string\">'Led Zeppelin'</span>, <span class=\"string\">'The Beatles'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eraseDatabase</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">restore_database</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> animal = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Container = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> DAYS_IN_WEEK = <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> DAYS_IN_MONTH = <span class=\"number\">30</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> SONGS = [<span class=\"string\">'Back In Black'</span>, <span class=\"string\">'Stairway to Heaven'</span>, <span class=\"string\">'Hey Jude'</span>];</span><br><span class=\"line\"><span class=\"keyword\">const</span> ARTISTS = [<span class=\"string\">'ACDC'</span>, <span class=\"string\">'Led Zeppelin'</span>, <span class=\"string\">'The Beatles'</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">eraseDatabase</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">restoreDatabase</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Animal = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Container = &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"调用者和被调用者的方法应该是相邻的\"><a href=\"#调用者和被调用者的方法应该是相邻的\" class=\"headerlink\" title=\"调用者和被调用者的方法应该是相邻的\"></a>调用者和被调用者的方法应该是相邻的</h3><p>如果函数调用另一个函数，请在源文件中设置这两个函数相邻。 理想情况下，将呼叫者保持在被叫者正上方。<br>我们倾向于从头到尾阅读代码，就像报纸一样。 因此，请以这种方式阅读您的代码。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> PerformanceReview &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly employee: Employee</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> lookupPeers() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.lookup(<span class=\"keyword\">this</span>.employee.id, <span class=\"string\">'peers'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> lookupManager() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.lookup(<span class=\"keyword\">this</span>.employee, <span class=\"string\">'manager'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getPeerReviews() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> peers = <span class=\"keyword\">this</span>.lookupPeers();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  review() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getPeerReviews();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getManagerReview();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getSelfReview();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getManagerReview() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> manager = <span class=\"keyword\">this</span>.lookupManager();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getSelfReview() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> review = <span class=\"keyword\">new</span> PerformanceReview(employee);</span><br><span class=\"line\">review.review();</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> PerformanceReview &#123;</span><br><span class=\"line\">  <span class=\"keyword\">constructor</span>(<span class=\"params\"><span class=\"keyword\">private</span> readonly employee: Employee</span>) &#123;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  review() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getPeerReviews();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getManagerReview();</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.getSelfReview();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getPeerReviews() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> peers = <span class=\"keyword\">this</span>.lookupPeers();</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> lookupPeers() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.lookup(<span class=\"keyword\">this</span>.employee.id, <span class=\"string\">'peers'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getManagerReview() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> manager = <span class=\"keyword\">this</span>.lookupManager();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> lookupManager() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> db.lookup(<span class=\"keyword\">this</span>.employee, <span class=\"string\">'manager'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> getSelfReview() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> review = <span class=\"keyword\">new</span> PerformanceReview(employee);</span><br><span class=\"line\">review.review();</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"组织-imports\"><a href=\"#组织-imports\" class=\"headerlink\" title=\"组织 imports\"></a>组织 imports</h3><p>使用简洁易读的import语句，您可以快速查看当前代码的依赖关系。 确保对<code>import</code>语句应用以下良好实践：</p>\n<ul>\n<li>导入语句应按字母顺序排列并分组。</li>\n<li>不需要的引用应该被移除。</li>\n<li>命名导入必须按字母顺序排列 例如: <code>import {A, B, C} from &#39;foo&#39;;</code></li>\n<li>导入源必须在组内按字母顺序排列, 例如: <code>import * as foo from &#39;a&#39;; import * as bar from &#39;b&#39;;</code></li>\n<li>每一组引用之间用空行分隔。</li>\n<li>分组之间需要遵循以下顺序:<ul>\n<li>Polyfills (例如. <code>import &#39;reflect-metadata&#39;;</code>)</li>\n<li>Node 内置模块 (例如. <code>import fs from &#39;fs&#39;;</code>)</li>\n<li>外部模块 (例如. <code>import { query } from &#39;itiriri&#39;;</code>)</li>\n<li>内部模块 (例如. <code>import { UserService } from &#39;src/services/userService&#39;;</code>)</li>\n<li>来自父目录的模块 (例如. <code>import foo from &#39;../foo&#39;; import qux from &#39;../../foo/qux&#39;;</code>)</li>\n<li>来自兄弟目录或同目录的模块 (例如. <code>import bar from &#39;./bar&#39;; import baz from &#39;./bar/baz&#39;;</code>)</li>\n</ul>\n</li>\n</ul>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeDefinition &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../types/typeDefinition'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AttributeTypes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../model/attribute'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApiCredentials, Adapters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/api/authorization'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ConfigPlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/config/configPlugin'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BindingScopeEnum, Container &#125; <span class=\"keyword\">from</span> <span class=\"string\">'inversify'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'reflect-metadata'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'reflect-metadata'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> fs <span class=\"keyword\">from</span> <span class=\"string\">'fs'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; BindingScopeEnum, Container &#125; <span class=\"keyword\">from</span> <span class=\"string\">'inversify'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; AttributeTypes &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../model/attribute'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; TypeDefinition &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../types/typeDefinition'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ApiCredentials, Adapters &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./common/api/authorization'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; ConfigPlugin &#125; <span class=\"keyword\">from</span> <span class=\"string\">'./plugins/config/configPlugin'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"使用别名\"><a href=\"#使用别名\" class=\"headerlink\" title=\"使用别名\"></a>使用别名</h3><p>通过在<code>tsconfig.json</code>的compilerOptions部分中定义路径和baseUrl属性来创建更漂亮的导入。<br>这样可以在进行导入时避免长的相对路径。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'../../../services/UserService'</span>;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; UserService &#125; <span class=\"keyword\">from</span> <span class=\"string\">'@services/UserService'</span>;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// tsconfig.json</span></span><br><span class=\"line\">...</span><br><span class=\"line\">  <span class=\"string\">\"compilerOptions\"</span>: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">\"baseUrl\"</span>: <span class=\"string\">\"src\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"paths\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">\"@services\"</span>: [<span class=\"string\">\"services/*\"</span>]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>当没有注释无法表达的时候，才使用注释</p>\n<h3 id=\"更倾向于自解释代码而不是注释\"><a href=\"#更倾向于自解释代码而不是注释\" class=\"headerlink\" title=\"更倾向于自解释代码而不是注释\"></a>更倾向于自解释代码而不是注释</h3><p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查订阅是否到期</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (subscription.endDate &gt; <span class=\"built_in\">Date</span>.now) &#123;  &#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> isSubscriptionActive = subscription.endDate &gt; <span class=\"built_in\">Date</span>.now;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (isSubscriptionActive) &#123; <span class=\"comment\">/* ... */</span> &#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要在代码库中留下注释的代码\"><a href=\"#不要在代码库中留下注释的代码\" class=\"headerlink\" title=\"不要在代码库中留下注释的代码\"></a>不要在代码库中留下注释的代码</h3><p>版本控制的存在是有原因的。 在您的历史记录中保留旧代码。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User = &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  email: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  <span class=\"comment\">// age: number;</span></span><br><span class=\"line\">  <span class=\"comment\">// jobPosition: string;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User = &#123;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  email: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"不要使用日记评论\"><a href=\"#不要使用日记评论\" class=\"headerlink\" title=\"不要使用日记评论\"></a>不要使用日记评论</h3><p>请记住，使用版本控制！ 不需要无用代码，注释代码，尤其是日记评论。 使用<code>git log</code>获取历史记录！</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 2016-12-20: Removed monads, didn't understand them (RM)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2016-10-01: Improved using special monads (JP)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2016-02-03: Added type-checking (LI)</span></span><br><span class=\"line\"><span class=\"comment\"> * 2015-03-14: Implemented combine (JR)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">combine</span>(<span class=\"params\">a: <span class=\"built_in\">number</span>, b: <span class=\"built_in\">number</span></span>): <span class=\"title\">number</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"禁止位置分隔\"><a href=\"#禁止位置分隔\" class=\"headerlink\" title=\"禁止位置分隔\"></a>禁止位置分隔</h3><p>这会增加代码噪声，大多数IDE是支持代码折叠的，请使用。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"comment\">// Client class</span></span><br><span class=\"line\"><span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> Client &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  address: Address;</span><br><span class=\"line\">  contact: Contact;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">  <span class=\"comment\">// public methods</span></span><br><span class=\"line\">  <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> describe(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">  <span class=\"comment\">// private methods</span></span><br><span class=\"line\">  <span class=\"comment\">////////////////////////////////////////////////////////////////////////////////</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> describeAddress(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> describeContact(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Client &#123;</span><br><span class=\"line\">  id: <span class=\"built_in\">number</span>;</span><br><span class=\"line\">  name: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  address: Address;</span><br><span class=\"line\">  contact: Contact;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> describe(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> describeAddress(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> describeContact(): <span class=\"built_in\">string</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>\n<h3 id=\"TODO-标记\"><a href=\"#TODO-标记\" class=\"headerlink\" title=\"TODO 标记\"></a>TODO 标记</h3><p>当您发现自己需要在代码中留下注释以进行后续改进时，使用<code>// TODO</code>注释来实现。 大多数IDE都支持这种注释，方便你可以快速浏览整个待办事项列表。</p>\n<p><strong>不推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getActiveSubscriptions</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Subscription</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// ensure `dueDate` is indexed.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.subscriptions.find(&#123; dueDate: &#123; $lte: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>推荐:</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getActiveSubscriptions</span>(<span class=\"params\"></span>): <span class=\"title\">Promise</span>&lt;<span class=\"title\">Subscription</span>[]&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// <span class=\"doctag\">TODO:</span> ensure `dueDate` is indexed.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> db.subscriptions.find(&#123; dueDate: &#123; $lte: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125; &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><a href=\"#目录\">⬆ 回到顶部</a></strong></p>"},{"title":"在Hexo博客上添加可爱的Live 2D模型","abbrlink":59303,"date":"2018-10-10T06:24:34.000Z","_content":"## 第一步 安装Live2D\n安装 [hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d)\n```\nnpm install --save hexo-helper-live2d\n```\n<!-- more -->\n\n## 第二步 修改配置文件\n在hexo的配置文件`_config.yml`中添加如下配置，详细配置可以参考项目文档：\n```\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-hibiki\n  display:\n    position: left\n    width: 100\n    height: 210\n  mobile:\n    show: false\n```\n## 第三步 下载模型\n下载模型，模型名称如下，一些模型的预览可以访问[这里](https://huaji8.top/post/live2d-plugin-2.0/)。\n```\nnpm install live2d-widget-model-hibiki\n```\n所有模型列表如下：\n* live2d-widget-model-chitose\n* live2d-widget-model-epsilon2_1\n* live2d-widget-model-gf\n* live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)\n* live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)\n* live2d-widget-model-haruto\n* live2d-widget-model-hibiki\n* live2d-widget-model-hijiki\n* live2d-widget-model-izumi\n* live2d-widget-model-koharu\n* live2d-widget-model-miku\n* live2d-widget-model-ni-j\n* live2d-widget-model-nico\n* live2d-widget-model-nietzsche\n* live2d-widget-model-nipsilon\n* live2d-widget-model-nito\n* live2d-widget-model-shizuku\n* live2d-widget-model-tororo\n* live2d-widget-model-tsumiki\n* live2d-widget-model-unitychan\n* live2d-widget-model-wanko\n* live2d-widget-model-z16\n\n## 第四步 配置模型\n下载完之后，在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。\n然后重新发布博客即可。","source":"_posts/在Hexo博客上添加可爱的Live 2D模型.md","raw":"---\ntitle: 在Hexo博客上添加可爱的Live 2D模型\ntags: 博客美化\ncategories: 知识点\nabbrlink: 59303\ndate: 2018-10-10 14:24:34\n---\n## 第一步 安装Live2D\n安装 [hexo-helper-live2d](https://github.com/EYHN/hexo-helper-live2d)\n```\nnpm install --save hexo-helper-live2d\n```\n<!-- more -->\n\n## 第二步 修改配置文件\n在hexo的配置文件`_config.yml`中添加如下配置，详细配置可以参考项目文档：\n```\nlive2d:\n  enable: true\n  scriptFrom: local\n  pluginRootPath: live2dw/\n  pluginJsPath: lib/\n  pluginModelPath: assets/\n  tagMode: false\n  debug: false\n  model:\n    use: live2d-widget-model-hibiki\n  display:\n    position: left\n    width: 100\n    height: 210\n  mobile:\n    show: false\n```\n## 第三步 下载模型\n下载模型，模型名称如下，一些模型的预览可以访问[这里](https://huaji8.top/post/live2d-plugin-2.0/)。\n```\nnpm install live2d-widget-model-hibiki\n```\n所有模型列表如下：\n* live2d-widget-model-chitose\n* live2d-widget-model-epsilon2_1\n* live2d-widget-model-gf\n* live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)\n* live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)\n* live2d-widget-model-haruto\n* live2d-widget-model-hibiki\n* live2d-widget-model-hijiki\n* live2d-widget-model-izumi\n* live2d-widget-model-koharu\n* live2d-widget-model-miku\n* live2d-widget-model-ni-j\n* live2d-widget-model-nico\n* live2d-widget-model-nietzsche\n* live2d-widget-model-nipsilon\n* live2d-widget-model-nito\n* live2d-widget-model-shizuku\n* live2d-widget-model-tororo\n* live2d-widget-model-tsumiki\n* live2d-widget-model-unitychan\n* live2d-widget-model-wanko\n* live2d-widget-model-z16\n\n## 第四步 配置模型\n下载完之后，在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。\n然后重新发布博客即可。","slug":"在Hexo博客上添加可爱的Live 2D模型","published":1,"updated":"2020-03-09T03:01:45.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nu003l1q2d6xvb9cxs","content":"<h2 id=\"第一步-安装Live2D\"><a href=\"#第一步-安装Live2D\" class=\"headerlink\" title=\"第一步 安装Live2D\"></a>第一步 安装Live2D</h2><p>安装 <a href=\"https://github.com/EYHN/hexo-helper-live2d\" target=\"_blank\" rel=\"noopener\">hexo-helper-live2d</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"第二步-修改配置文件\"><a href=\"#第二步-修改配置文件\" class=\"headerlink\" title=\"第二步 修改配置文件\"></a>第二步 修改配置文件</h2><p>在hexo的配置文件<code>_config.yml</code>中添加如下配置，详细配置可以参考项目文档：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  scriptFrom: local</span><br><span class=\"line\">  pluginRootPath: live2dw/</span><br><span class=\"line\">  pluginJsPath: lib/</span><br><span class=\"line\">  pluginModelPath: assets/</span><br><span class=\"line\">  tagMode: false</span><br><span class=\"line\">  debug: false</span><br><span class=\"line\">  model:</span><br><span class=\"line\">    use: live2d-widget-model-hibiki</span><br><span class=\"line\">  display:</span><br><span class=\"line\">    position: left</span><br><span class=\"line\">    width: 100</span><br><span class=\"line\">    height: 210</span><br><span class=\"line\">  mobile:</span><br><span class=\"line\">    show: false</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三步-下载模型\"><a href=\"#第三步-下载模型\" class=\"headerlink\" title=\"第三步 下载模型\"></a>第三步 下载模型</h2><p>下载模型，模型名称如下，一些模型的预览可以访问<a href=\"https://huaji8.top/post/live2d-plugin-2.0/\" target=\"_blank\" rel=\"noopener\">这里</a>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install live2d-widget-model-hibiki</span><br></pre></td></tr></table></figure></p>\n<p>所有模型列表如下：</p>\n<ul>\n<li>live2d-widget-model-chitose</li>\n<li>live2d-widget-model-epsilon2_1</li>\n<li>live2d-widget-model-gf</li>\n<li>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)</li>\n<li>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)</li>\n<li>live2d-widget-model-haruto</li>\n<li>live2d-widget-model-hibiki</li>\n<li>live2d-widget-model-hijiki</li>\n<li>live2d-widget-model-izumi</li>\n<li>live2d-widget-model-koharu</li>\n<li>live2d-widget-model-miku</li>\n<li>live2d-widget-model-ni-j</li>\n<li>live2d-widget-model-nico</li>\n<li>live2d-widget-model-nietzsche</li>\n<li>live2d-widget-model-nipsilon</li>\n<li>live2d-widget-model-nito</li>\n<li>live2d-widget-model-shizuku</li>\n<li>live2d-widget-model-tororo</li>\n<li>live2d-widget-model-tsumiki</li>\n<li>live2d-widget-model-unitychan</li>\n<li>live2d-widget-model-wanko</li>\n<li>live2d-widget-model-z16</li>\n</ul>\n<h2 id=\"第四步-配置模型\"><a href=\"#第四步-配置模型\" class=\"headerlink\" title=\"第四步 配置模型\"></a>第四步 配置模型</h2><p>下载完之后，在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。<br>然后重新发布博客即可。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"第一步-安装Live2D\"><a href=\"#第一步-安装Live2D\" class=\"headerlink\" title=\"第一步 安装Live2D\"></a>第一步 安装Live2D</h2><p>安装 <a href=\"https://github.com/EYHN/hexo-helper-live2d\" target=\"_blank\" rel=\"noopener\">hexo-helper-live2d</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"第二步-修改配置文件\"><a href=\"#第二步-修改配置文件\" class=\"headerlink\" title=\"第二步 修改配置文件\"></a>第二步 修改配置文件</h2><p>在hexo的配置文件<code>_config.yml</code>中添加如下配置，详细配置可以参考项目文档：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  scriptFrom: local</span><br><span class=\"line\">  pluginRootPath: live2dw/</span><br><span class=\"line\">  pluginJsPath: lib/</span><br><span class=\"line\">  pluginModelPath: assets/</span><br><span class=\"line\">  tagMode: false</span><br><span class=\"line\">  debug: false</span><br><span class=\"line\">  model:</span><br><span class=\"line\">    use: live2d-widget-model-hibiki</span><br><span class=\"line\">  display:</span><br><span class=\"line\">    position: left</span><br><span class=\"line\">    width: 100</span><br><span class=\"line\">    height: 210</span><br><span class=\"line\">  mobile:</span><br><span class=\"line\">    show: false</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三步-下载模型\"><a href=\"#第三步-下载模型\" class=\"headerlink\" title=\"第三步 下载模型\"></a>第三步 下载模型</h2><p>下载模型，模型名称如下，一些模型的预览可以访问<a href=\"https://huaji8.top/post/live2d-plugin-2.0/\" target=\"_blank\" rel=\"noopener\">这里</a>。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install live2d-widget-model-hibiki</span><br></pre></td></tr></table></figure></p>\n<p>所有模型列表如下：</p>\n<ul>\n<li>live2d-widget-model-chitose</li>\n<li>live2d-widget-model-epsilon2_1</li>\n<li>live2d-widget-model-gf</li>\n<li>live2d-widget-model-haru/01 (use npm install –save live2d-widget-model-haru)</li>\n<li>live2d-widget-model-haru/02 (use npm install –save live2d-widget-model-haru)</li>\n<li>live2d-widget-model-haruto</li>\n<li>live2d-widget-model-hibiki</li>\n<li>live2d-widget-model-hijiki</li>\n<li>live2d-widget-model-izumi</li>\n<li>live2d-widget-model-koharu</li>\n<li>live2d-widget-model-miku</li>\n<li>live2d-widget-model-ni-j</li>\n<li>live2d-widget-model-nico</li>\n<li>live2d-widget-model-nietzsche</li>\n<li>live2d-widget-model-nipsilon</li>\n<li>live2d-widget-model-nito</li>\n<li>live2d-widget-model-shizuku</li>\n<li>live2d-widget-model-tororo</li>\n<li>live2d-widget-model-tsumiki</li>\n<li>live2d-widget-model-unitychan</li>\n<li>live2d-widget-model-wanko</li>\n<li>live2d-widget-model-z16</li>\n</ul>\n<h2 id=\"第四步-配置模型\"><a href=\"#第四步-配置模型\" class=\"headerlink\" title=\"第四步 配置模型\"></a>第四步 配置模型</h2><p>下载完之后，在Hexo根目录中新建文件夹live2d_models，然后在node_modules文件夹中找到刚刚下载的live2d模型，将其复制到live2d_models中，然后编辑配置文件中的model.use项，将其修改为live2d_models文件夹中的模型文件夹名称。<br>然后重新发布博客即可。</p>"},{"title":"前端框架生命周期总结","abbrlink":46729,"date":"2018-10-31T01:28:23.000Z","_content":"组件生命周期函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，那么这些事件，统称为组件的生命周期函数\n\n<!-- more -->\n## Vue\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/73021707.jpg)\n### beforeCreate\n说明：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用\n注意：此时，无法获取 data中的数据、methods中的方法\n### created\n注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据\n使用场景：发送请求获取数据\n### beforeMounted\n说明：在挂载开始之前被调用\n### mounted\n说明：此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作\n### beforeUpdated\n说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n### updated\n说明：组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。\n### beforeDestroy\n说明：实例销毁之前调用。在这一步，实例仍然完全可用。\n使用场景：实例销毁之前，执行清理任务，比如：清除定时器等\n### destroyed\n说明：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n\n## React\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/61367412.jpg)\n### getDefaultProps\n初始化组件属性的默认值，只调用一次\n### getInitialState\n初始化每个实例的状态\n### componentWillMount\n组件render之前，可以修改状态\n### render\n渲染组件时\n### componentDidMount\n在render完成后 组件渲染到页面时触发\n### componentWillReceiveProps\n组件将要接受到属性时触发\n### shouldComponentUpdate\n组件是否需要更新，返回false则阻止render调用\n### componentWillUpdate\n组件接收到新的props或者state后，进行渲染之前触发，但它不能修改props和state\n### componentDidUpdate\n在render完成后 组件完成更新渲染到页面时触发\n### componentWillUnmount\n在销毁操作真正执行之前调用\n\n## Angular\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/77536657.jpg)\n### 指令和组件\n`ngOnInit`：当Angular初始化完成数据绑定的输入属性后，用来初始化指令或者组件。\n`ngOnChanges`：当Angular设置了一个被绑定的输入属性后触发。该回调方法会收到一个包含当前值和原值的changes对象。\n`ngDoCheck`：用来检测所有变化（无论是Angular本身能检测还是无法检测的），并作出相应行动。在每次执行“变更检测”时被调用。\n`ngOnDestory`：在Angular销毁指令或组件之前做一些清理工作，比如退订可观察对象和移除事件处理器，以免导致内存泄漏。\n### 只适用于组件\n`ngAfterContentInit`：当Angular把外来内容投影进自己的视图之后调用。\n`ngAfterContentChecked`：当Angular检查完那些投影到自己视图中的外来内容的数据绑定之后调用。\n`ngAfterViewInit`：在Angular创建完组件的视图后调用。\n`ngAfterViewChecked`：在Angular检查完组件视图中的绑定后调用。\n### 生命周期的顺序\n`ngOnChanges`：当被绑定的输入属性的值发生变化时调用，首次调用一定会发生在ngOnInit之前。\n`ngOnInit`：在第一轮ngOnChanges完成之后调用。\n`ngDoCheck`：在每个Angular变更检测周期中调用。\n`ngAfterContentInit`：当把内容投影进组件之后调用。\n`ngAfterContentChecked`：每次完成被投影组件内容的变更检测之后调用。\n`ngAfterViewInit`：初始化完组件及其子视图之后调用。\n`ngAfterViewChecked`：每次做完组件视图和子视图的变更检测之后调用。\n`ngOnDestroy`：当Angular每次销毁指令/组件之前调用。","source":"_posts/前端框架生命周期总结.md","raw":"---\ntitle: 前端框架生命周期总结\ntags: 前端\ncategories: 前端\nabbrlink: 46729\ndate: 2018-10-31 09:28:23\n---\n组件生命周期函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，那么这些事件，统称为组件的生命周期函数\n\n<!-- more -->\n## Vue\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/73021707.jpg)\n### beforeCreate\n说明：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用\n注意：此时，无法获取 data中的数据、methods中的方法\n### created\n注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据\n使用场景：发送请求获取数据\n### beforeMounted\n说明：在挂载开始之前被调用\n### mounted\n说明：此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作\n### beforeUpdated\n说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。\n### updated\n说明：组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。\n### beforeDestroy\n说明：实例销毁之前调用。在这一步，实例仍然完全可用。\n使用场景：实例销毁之前，执行清理任务，比如：清除定时器等\n### destroyed\n说明：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n\n## React\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/61367412.jpg)\n### getDefaultProps\n初始化组件属性的默认值，只调用一次\n### getInitialState\n初始化每个实例的状态\n### componentWillMount\n组件render之前，可以修改状态\n### render\n渲染组件时\n### componentDidMount\n在render完成后 组件渲染到页面时触发\n### componentWillReceiveProps\n组件将要接受到属性时触发\n### shouldComponentUpdate\n组件是否需要更新，返回false则阻止render调用\n### componentWillUpdate\n组件接收到新的props或者state后，进行渲染之前触发，但它不能修改props和state\n### componentDidUpdate\n在render完成后 组件完成更新渲染到页面时触发\n### componentWillUnmount\n在销毁操作真正执行之前调用\n\n## Angular\n![](http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/77536657.jpg)\n### 指令和组件\n`ngOnInit`：当Angular初始化完成数据绑定的输入属性后，用来初始化指令或者组件。\n`ngOnChanges`：当Angular设置了一个被绑定的输入属性后触发。该回调方法会收到一个包含当前值和原值的changes对象。\n`ngDoCheck`：用来检测所有变化（无论是Angular本身能检测还是无法检测的），并作出相应行动。在每次执行“变更检测”时被调用。\n`ngOnDestory`：在Angular销毁指令或组件之前做一些清理工作，比如退订可观察对象和移除事件处理器，以免导致内存泄漏。\n### 只适用于组件\n`ngAfterContentInit`：当Angular把外来内容投影进自己的视图之后调用。\n`ngAfterContentChecked`：当Angular检查完那些投影到自己视图中的外来内容的数据绑定之后调用。\n`ngAfterViewInit`：在Angular创建完组件的视图后调用。\n`ngAfterViewChecked`：在Angular检查完组件视图中的绑定后调用。\n### 生命周期的顺序\n`ngOnChanges`：当被绑定的输入属性的值发生变化时调用，首次调用一定会发生在ngOnInit之前。\n`ngOnInit`：在第一轮ngOnChanges完成之后调用。\n`ngDoCheck`：在每个Angular变更检测周期中调用。\n`ngAfterContentInit`：当把内容投影进组件之后调用。\n`ngAfterContentChecked`：每次完成被投影组件内容的变更检测之后调用。\n`ngAfterViewInit`：初始化完组件及其子视图之后调用。\n`ngAfterViewChecked`：每次做完组件视图和子视图的变更检测之后调用。\n`ngOnDestroy`：当Angular每次销毁指令/组件之前调用。","slug":"前端框架生命周期总结","published":1,"updated":"2020-03-09T03:01:45.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nw003o1q2dmzuxub7s","content":"<p>组件生命周期函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，那么这些事件，统称为组件的生命周期函数</p>\n<a id=\"more\"></a>\n<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><p><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/73021707.jpg\" alt></p>\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><p>说明：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用<br>注意：此时，无法获取 data中的数据、methods中的方法</p>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><p>注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据<br>使用场景：发送请求获取数据</p>\n<h3 id=\"beforeMounted\"><a href=\"#beforeMounted\" class=\"headerlink\" title=\"beforeMounted\"></a>beforeMounted</h3><p>说明：在挂载开始之前被调用</p>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><p>说明：此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作</p>\n<h3 id=\"beforeUpdated\"><a href=\"#beforeUpdated\" class=\"headerlink\" title=\"beforeUpdated\"></a>beforeUpdated</h3><p>说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><p>说明：组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</p>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><p>说明：实例销毁之前调用。在这一步，实例仍然完全可用。<br>使用场景：实例销毁之前，执行清理任务，比如：清除定时器等</p>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><p>说明：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><p><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/61367412.jpg\" alt></p>\n<h3 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h3><p>初始化组件属性的默认值，只调用一次</p>\n<h3 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h3><p>初始化每个实例的状态</p>\n<h3 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h3><p>组件render之前，可以修改状态</p>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><p>渲染组件时</p>\n<h3 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h3><p>在render完成后 组件渲染到页面时触发</p>\n<h3 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a>componentWillReceiveProps</h3><p>组件将要接受到属性时触发</p>\n<h3 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h3><p>组件是否需要更新，返回false则阻止render调用</p>\n<h3 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a>componentWillUpdate</h3><p>组件接收到新的props或者state后，进行渲染之前触发，但它不能修改props和state</p>\n<h3 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h3><p>在render完成后 组件完成更新渲染到页面时触发</p>\n<h3 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h3><p>在销毁操作真正执行之前调用</p>\n<h2 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h2><p><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/77536657.jpg\" alt></p>\n<h3 id=\"指令和组件\"><a href=\"#指令和组件\" class=\"headerlink\" title=\"指令和组件\"></a>指令和组件</h3><p><code>ngOnInit</code>：当Angular初始化完成数据绑定的输入属性后，用来初始化指令或者组件。<br><code>ngOnChanges</code>：当Angular设置了一个被绑定的输入属性后触发。该回调方法会收到一个包含当前值和原值的changes对象。<br><code>ngDoCheck</code>：用来检测所有变化（无论是Angular本身能检测还是无法检测的），并作出相应行动。在每次执行“变更检测”时被调用。<br><code>ngOnDestory</code>：在Angular销毁指令或组件之前做一些清理工作，比如退订可观察对象和移除事件处理器，以免导致内存泄漏。</p>\n<h3 id=\"只适用于组件\"><a href=\"#只适用于组件\" class=\"headerlink\" title=\"只适用于组件\"></a>只适用于组件</h3><p><code>ngAfterContentInit</code>：当Angular把外来内容投影进自己的视图之后调用。<br><code>ngAfterContentChecked</code>：当Angular检查完那些投影到自己视图中的外来内容的数据绑定之后调用。<br><code>ngAfterViewInit</code>：在Angular创建完组件的视图后调用。<br><code>ngAfterViewChecked</code>：在Angular检查完组件视图中的绑定后调用。</p>\n<h3 id=\"生命周期的顺序\"><a href=\"#生命周期的顺序\" class=\"headerlink\" title=\"生命周期的顺序\"></a>生命周期的顺序</h3><p><code>ngOnChanges</code>：当被绑定的输入属性的值发生变化时调用，首次调用一定会发生在ngOnInit之前。<br><code>ngOnInit</code>：在第一轮ngOnChanges完成之后调用。<br><code>ngDoCheck</code>：在每个Angular变更检测周期中调用。<br><code>ngAfterContentInit</code>：当把内容投影进组件之后调用。<br><code>ngAfterContentChecked</code>：每次完成被投影组件内容的变更检测之后调用。<br><code>ngAfterViewInit</code>：初始化完组件及其子视图之后调用。<br><code>ngAfterViewChecked</code>：每次做完组件视图和子视图的变更检测之后调用。<br><code>ngOnDestroy</code>：当Angular每次销毁指令/组件之前调用。</p>\n","site":{"data":{}},"excerpt":"<p>组件生命周期函数的定义：从组件被创建，到组件挂载到页面上运行，再到页面关闭组件被卸载，这三个阶段总是伴随着组件各种各样的事件，那么这些事件，统称为组件的生命周期函数</p>","more":"<h2 id=\"Vue\"><a href=\"#Vue\" class=\"headerlink\" title=\"Vue\"></a>Vue</h2><p><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/73021707.jpg\" alt></p>\n<h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><p>说明：在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用<br>注意：此时，无法获取 data中的数据、methods中的方法</p>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><p>注意：这是一个常用的生命周期，可以调用methods中的方法、改变data中的数据<br>使用场景：发送请求获取数据</p>\n<h3 id=\"beforeMounted\"><a href=\"#beforeMounted\" class=\"headerlink\" title=\"beforeMounted\"></a>beforeMounted</h3><p>说明：在挂载开始之前被调用</p>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><p>说明：此时，vue实例已经挂载到页面中，可以获取到el中的DOM元素，进行DOM操作</p>\n<h3 id=\"beforeUpdated\"><a href=\"#beforeUpdated\" class=\"headerlink\" title=\"beforeUpdated\"></a>beforeUpdated</h3><p>说明：数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><p>说明：组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。</p>\n<h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><p>说明：实例销毁之前调用。在这一步，实例仍然完全可用。<br>使用场景：实例销毁之前，执行清理任务，比如：清除定时器等</p>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><p>说明：Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>\n<h2 id=\"React\"><a href=\"#React\" class=\"headerlink\" title=\"React\"></a>React</h2><p><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/61367412.jpg\" alt></p>\n<h3 id=\"getDefaultProps\"><a href=\"#getDefaultProps\" class=\"headerlink\" title=\"getDefaultProps\"></a>getDefaultProps</h3><p>初始化组件属性的默认值，只调用一次</p>\n<h3 id=\"getInitialState\"><a href=\"#getInitialState\" class=\"headerlink\" title=\"getInitialState\"></a>getInitialState</h3><p>初始化每个实例的状态</p>\n<h3 id=\"componentWillMount\"><a href=\"#componentWillMount\" class=\"headerlink\" title=\"componentWillMount\"></a>componentWillMount</h3><p>组件render之前，可以修改状态</p>\n<h3 id=\"render\"><a href=\"#render\" class=\"headerlink\" title=\"render\"></a>render</h3><p>渲染组件时</p>\n<h3 id=\"componentDidMount\"><a href=\"#componentDidMount\" class=\"headerlink\" title=\"componentDidMount\"></a>componentDidMount</h3><p>在render完成后 组件渲染到页面时触发</p>\n<h3 id=\"componentWillReceiveProps\"><a href=\"#componentWillReceiveProps\" class=\"headerlink\" title=\"componentWillReceiveProps\"></a>componentWillReceiveProps</h3><p>组件将要接受到属性时触发</p>\n<h3 id=\"shouldComponentUpdate\"><a href=\"#shouldComponentUpdate\" class=\"headerlink\" title=\"shouldComponentUpdate\"></a>shouldComponentUpdate</h3><p>组件是否需要更新，返回false则阻止render调用</p>\n<h3 id=\"componentWillUpdate\"><a href=\"#componentWillUpdate\" class=\"headerlink\" title=\"componentWillUpdate\"></a>componentWillUpdate</h3><p>组件接收到新的props或者state后，进行渲染之前触发，但它不能修改props和state</p>\n<h3 id=\"componentDidUpdate\"><a href=\"#componentDidUpdate\" class=\"headerlink\" title=\"componentDidUpdate\"></a>componentDidUpdate</h3><p>在render完成后 组件完成更新渲染到页面时触发</p>\n<h3 id=\"componentWillUnmount\"><a href=\"#componentWillUnmount\" class=\"headerlink\" title=\"componentWillUnmount\"></a>componentWillUnmount</h3><p>在销毁操作真正执行之前调用</p>\n<h2 id=\"Angular\"><a href=\"#Angular\" class=\"headerlink\" title=\"Angular\"></a>Angular</h2><p><img src=\"http://dada-image-bed.oss-cn-shenzhen.aliyuncs.com/18-11-18/77536657.jpg\" alt></p>\n<h3 id=\"指令和组件\"><a href=\"#指令和组件\" class=\"headerlink\" title=\"指令和组件\"></a>指令和组件</h3><p><code>ngOnInit</code>：当Angular初始化完成数据绑定的输入属性后，用来初始化指令或者组件。<br><code>ngOnChanges</code>：当Angular设置了一个被绑定的输入属性后触发。该回调方法会收到一个包含当前值和原值的changes对象。<br><code>ngDoCheck</code>：用来检测所有变化（无论是Angular本身能检测还是无法检测的），并作出相应行动。在每次执行“变更检测”时被调用。<br><code>ngOnDestory</code>：在Angular销毁指令或组件之前做一些清理工作，比如退订可观察对象和移除事件处理器，以免导致内存泄漏。</p>\n<h3 id=\"只适用于组件\"><a href=\"#只适用于组件\" class=\"headerlink\" title=\"只适用于组件\"></a>只适用于组件</h3><p><code>ngAfterContentInit</code>：当Angular把外来内容投影进自己的视图之后调用。<br><code>ngAfterContentChecked</code>：当Angular检查完那些投影到自己视图中的外来内容的数据绑定之后调用。<br><code>ngAfterViewInit</code>：在Angular创建完组件的视图后调用。<br><code>ngAfterViewChecked</code>：在Angular检查完组件视图中的绑定后调用。</p>\n<h3 id=\"生命周期的顺序\"><a href=\"#生命周期的顺序\" class=\"headerlink\" title=\"生命周期的顺序\"></a>生命周期的顺序</h3><p><code>ngOnChanges</code>：当被绑定的输入属性的值发生变化时调用，首次调用一定会发生在ngOnInit之前。<br><code>ngOnInit</code>：在第一轮ngOnChanges完成之后调用。<br><code>ngDoCheck</code>：在每个Angular变更检测周期中调用。<br><code>ngAfterContentInit</code>：当把内容投影进组件之后调用。<br><code>ngAfterContentChecked</code>：每次完成被投影组件内容的变更检测之后调用。<br><code>ngAfterViewInit</code>：初始化完组件及其子视图之后调用。<br><code>ngAfterViewChecked</code>：每次做完组件视图和子视图的变更检测之后调用。<br><code>ngOnDestroy</code>：当Angular每次销毁指令/组件之前调用。</p>"},{"title":"前端目录结构约定","abbrlink":56980,"date":"2018-11-02T01:28:23.000Z","_content":"```\n-src\n  -components //Dumb 组件\n  -containers //Smart 组件\n  -models //数据模型及方法\n  -routes // 布局页\n  -screens //页面\n  -utils // 工具方法 \n  -store // 状态管理\n```","source":"_posts/前端目录结构规范.md","raw":"---\ntitle: 前端目录结构约定\ntags: 前端\ncategories: 前端\nabbrlink: 56980\ndate: 2018-11-02 09:28:23\n---\n```\n-src\n  -components //Dumb 组件\n  -containers //Smart 组件\n  -models //数据模型及方法\n  -routes // 布局页\n  -screens //页面\n  -utils // 工具方法 \n  -store // 状态管理\n```","slug":"前端目录结构规范","published":1,"updated":"2020-03-09T03:01:45.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7nz003s1q2dmh9p1gkl","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-src</span><br><span class=\"line\">  -components //Dumb 组件</span><br><span class=\"line\">  -containers //Smart 组件</span><br><span class=\"line\">  -models //数据模型及方法</span><br><span class=\"line\">  -routes // 布局页</span><br><span class=\"line\">  -screens //页面</span><br><span class=\"line\">  -utils // 工具方法 </span><br><span class=\"line\">  -store // 状态管理</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-src</span><br><span class=\"line\">  -components //Dumb 组件</span><br><span class=\"line\">  -containers //Smart 组件</span><br><span class=\"line\">  -models //数据模型及方法</span><br><span class=\"line\">  -routes // 布局页</span><br><span class=\"line\">  -screens //页面</span><br><span class=\"line\">  -utils // 工具方法 </span><br><span class=\"line\">  -store // 状态管理</span><br></pre></td></tr></table></figure>"},{"title":"在 WPF 上使用 log4net","abbrlink":26244,"date":"2018-09-17T06:24:34.000Z","_content":"## 第一步\n使用NuGet安装log4net\n<!-- more -->\n\n## 第二部\n新建 log4net.config 并编辑\n```\n<?xml version=\"1.0\"?>\n<configuration>\n  <configSections>\n    <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\"/>\n  </configSections>\n  <log4net>\n    <!--错误日志-->\n    <appender name=\"RollingLogFileAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <file value=\"log\\\\LogError\\\\\"/>\n      <appendToFile value=\"true\"/>\n      <rollingStyle value=\"Date\"/>\n      <datePattern value=\"yyyy\\\\yyyyMM\\\\yyyyMMdd'.txt'\"/>\n      <staticLogFileName value=\"false\"/>\n      <param name=\"MaxSizeRollBackups\" value=\"100\"/>\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <!--每条日志末尾的文字说明-->\n        <!--输出格式-->\n        <!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info-->\n        <conversionPattern value=\"%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n错误描述：%message%newline %n\"/>\n      </layout>\n    </appender>\n    <!--Info日志-->\n    <appender name=\"InfoAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <param name=\"File\" value=\"Log\\\\LogInfo\\\\\" />\n      <param name=\"AppendToFile\" value=\"true\" />\n      <param name=\"MaxFileSize\" value=\"10240\" />\n      <param name=\"MaxSizeRollBackups\" value=\"100\" />\n      <param name=\"StaticLogFileName\" value=\"false\" />\n      <param name=\"DatePattern\" value=\"yyyy\\\\yyyyMM\\\\yyyyMMdd'.txt'\" />\n      <param name=\"RollingStyle\" value=\"Date\" />\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <conversionPattern value=\"%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n日志描述：%message%newline %n\"/>\n      </layout>\n    </appender>\n\n    <!--Error日志-->\n    <logger name=\"logerror\">\n      <level value=\"ERROR\" />\n      <appender-ref ref=\"RollingLogFileAppender\" />\n    </logger>\n    <!--Info日志-->\n    <logger name=\"loginfo\">\n      <level value=\"INFO\" />\n      <appender-ref ref=\"InfoAppender\" />\n    </logger>\n  </log4net>\n</configuration>\n```\n## 第三步\n将 log4net.config 设置为复制到生成目录，采用较新则复制的规则\n\n## 第四步\n在Properties -> Assemblyinfo.cs 里添加一行\n```\n[assembly: log4net.Config.XmlConfigurator(ConfigFile = \"Log4Net.config\", Watch = true)]\n```\n## 第五步\n在app.xml.cs 里加入\n```\nprotected override void OnStartup(StartupEventArgs e)\n{\n    log4net.Config.XmlConfigurator.Configure();\n    base.OnStartup(e);\n}\n```","source":"_posts/在WPF上使用log4net.md","raw":"---\ntitle: 在 WPF 上使用 log4net\ntags: 'C#'\ncategories: 知识点\nabbrlink: 26244\ndate: 2018-09-17 14:24:34\n---\n## 第一步\n使用NuGet安装log4net\n<!-- more -->\n\n## 第二部\n新建 log4net.config 并编辑\n```\n<?xml version=\"1.0\"?>\n<configuration>\n  <configSections>\n    <section name=\"log4net\" type=\"log4net.Config.Log4NetConfigurationSectionHandler, log4net\"/>\n  </configSections>\n  <log4net>\n    <!--错误日志-->\n    <appender name=\"RollingLogFileAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <file value=\"log\\\\LogError\\\\\"/>\n      <appendToFile value=\"true\"/>\n      <rollingStyle value=\"Date\"/>\n      <datePattern value=\"yyyy\\\\yyyyMM\\\\yyyyMMdd'.txt'\"/>\n      <staticLogFileName value=\"false\"/>\n      <param name=\"MaxSizeRollBackups\" value=\"100\"/>\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <!--每条日志末尾的文字说明-->\n        <!--输出格式-->\n        <!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info-->\n        <conversionPattern value=\"%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n错误描述：%message%newline %n\"/>\n      </layout>\n    </appender>\n    <!--Info日志-->\n    <appender name=\"InfoAppender\" type=\"log4net.Appender.RollingFileAppender\">\n      <param name=\"File\" value=\"Log\\\\LogInfo\\\\\" />\n      <param name=\"AppendToFile\" value=\"true\" />\n      <param name=\"MaxFileSize\" value=\"10240\" />\n      <param name=\"MaxSizeRollBackups\" value=\"100\" />\n      <param name=\"StaticLogFileName\" value=\"false\" />\n      <param name=\"DatePattern\" value=\"yyyy\\\\yyyyMM\\\\yyyyMMdd'.txt'\" />\n      <param name=\"RollingStyle\" value=\"Date\" />\n      <layout type=\"log4net.Layout.PatternLayout\">\n        <conversionPattern value=\"%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n日志描述：%message%newline %n\"/>\n      </layout>\n    </appender>\n\n    <!--Error日志-->\n    <logger name=\"logerror\">\n      <level value=\"ERROR\" />\n      <appender-ref ref=\"RollingLogFileAppender\" />\n    </logger>\n    <!--Info日志-->\n    <logger name=\"loginfo\">\n      <level value=\"INFO\" />\n      <appender-ref ref=\"InfoAppender\" />\n    </logger>\n  </log4net>\n</configuration>\n```\n## 第三步\n将 log4net.config 设置为复制到生成目录，采用较新则复制的规则\n\n## 第四步\n在Properties -> Assemblyinfo.cs 里添加一行\n```\n[assembly: log4net.Config.XmlConfigurator(ConfigFile = \"Log4Net.config\", Watch = true)]\n```\n## 第五步\n在app.xml.cs 里加入\n```\nprotected override void OnStartup(StartupEventArgs e)\n{\n    log4net.Config.XmlConfigurator.Configure();\n    base.OnStartup(e);\n}\n```","slug":"在WPF上使用log4net","published":1,"updated":"2020-03-09T03:01:45.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7o1003v1q2dcx0qexby","content":"<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>使用NuGet安装log4net<br><a id=\"more\"></a></p>\n<h2 id=\"第二部\"><a href=\"#第二部\" class=\"headerlink\" title=\"第二部\"></a>第二部</h2><p>新建 log4net.config 并编辑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;configSections&gt;</span><br><span class=\"line\">    &lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler, log4net&quot;/&gt;</span><br><span class=\"line\">  &lt;/configSections&gt;</span><br><span class=\"line\">  &lt;log4net&gt;</span><br><span class=\"line\">    &lt;!--错误日志--&gt;</span><br><span class=\"line\">    &lt;appender name=&quot;RollingLogFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">      &lt;file value=&quot;log\\\\LogError\\\\&quot;/&gt;</span><br><span class=\"line\">      &lt;appendToFile value=&quot;true&quot;/&gt;</span><br><span class=\"line\">      &lt;rollingStyle value=&quot;Date&quot;/&gt;</span><br><span class=\"line\">      &lt;datePattern value=&quot;yyyy\\\\yyyyMM\\\\yyyyMMdd&apos;.txt&apos;&quot;/&gt;</span><br><span class=\"line\">      &lt;staticLogFileName value=&quot;false&quot;/&gt;</span><br><span class=\"line\">      &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot;/&gt;</span><br><span class=\"line\">      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;</span><br><span class=\"line\">        &lt;!--每条日志末尾的文字说明--&gt;</span><br><span class=\"line\">        &lt;!--输出格式--&gt;</span><br><span class=\"line\">        &lt;!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info--&gt;</span><br><span class=\"line\">        &lt;conversionPattern value=&quot;%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n错误描述：%message%newline %n&quot;/&gt;</span><br><span class=\"line\">      &lt;/layout&gt;</span><br><span class=\"line\">    &lt;/appender&gt;</span><br><span class=\"line\">    &lt;!--Info日志--&gt;</span><br><span class=\"line\">    &lt;appender name=&quot;InfoAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">      &lt;param name=&quot;File&quot; value=&quot;Log\\\\LogInfo\\\\&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;AppendToFile&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;MaxFileSize&quot; value=&quot;10240&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;StaticLogFileName&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;DatePattern&quot; value=&quot;yyyy\\\\yyyyMM\\\\yyyyMMdd&apos;.txt&apos;&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;RollingStyle&quot; value=&quot;Date&quot; /&gt;</span><br><span class=\"line\">      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;</span><br><span class=\"line\">        &lt;conversionPattern value=&quot;%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n日志描述：%message%newline %n&quot;/&gt;</span><br><span class=\"line\">      &lt;/layout&gt;</span><br><span class=\"line\">    &lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--Error日志--&gt;</span><br><span class=\"line\">    &lt;logger name=&quot;logerror&quot;&gt;</span><br><span class=\"line\">      &lt;level value=&quot;ERROR&quot; /&gt;</span><br><span class=\"line\">      &lt;appender-ref ref=&quot;RollingLogFileAppender&quot; /&gt;</span><br><span class=\"line\">    &lt;/logger&gt;</span><br><span class=\"line\">    &lt;!--Info日志--&gt;</span><br><span class=\"line\">    &lt;logger name=&quot;loginfo&quot;&gt;</span><br><span class=\"line\">      &lt;level value=&quot;INFO&quot; /&gt;</span><br><span class=\"line\">      &lt;appender-ref ref=&quot;InfoAppender&quot; /&gt;</span><br><span class=\"line\">    &lt;/logger&gt;</span><br><span class=\"line\">  &lt;/log4net&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>将 log4net.config 设置为复制到生成目录，采用较新则复制的规则</p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>在Properties -&gt; Assemblyinfo.cs 里添加一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;Log4Net.config&quot;, Watch = true)]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>在app.xml.cs 里加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override void OnStartup(StartupEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    log4net.Config.XmlConfigurator.Configure();</span><br><span class=\"line\">    base.OnStartup(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a>第一步</h2><p>使用NuGet安装log4net<br>","more":"</p>\n<h2 id=\"第二部\"><a href=\"#第二部\" class=\"headerlink\" title=\"第二部\"></a>第二部</h2><p>新建 log4net.config 并编辑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class=\"line\">&lt;configuration&gt;</span><br><span class=\"line\">  &lt;configSections&gt;</span><br><span class=\"line\">    &lt;section name=&quot;log4net&quot; type=&quot;log4net.Config.Log4NetConfigurationSectionHandler, log4net&quot;/&gt;</span><br><span class=\"line\">  &lt;/configSections&gt;</span><br><span class=\"line\">  &lt;log4net&gt;</span><br><span class=\"line\">    &lt;!--错误日志--&gt;</span><br><span class=\"line\">    &lt;appender name=&quot;RollingLogFileAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">      &lt;file value=&quot;log\\\\LogError\\\\&quot;/&gt;</span><br><span class=\"line\">      &lt;appendToFile value=&quot;true&quot;/&gt;</span><br><span class=\"line\">      &lt;rollingStyle value=&quot;Date&quot;/&gt;</span><br><span class=\"line\">      &lt;datePattern value=&quot;yyyy\\\\yyyyMM\\\\yyyyMMdd&apos;.txt&apos;&quot;/&gt;</span><br><span class=\"line\">      &lt;staticLogFileName value=&quot;false&quot;/&gt;</span><br><span class=\"line\">      &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot;/&gt;</span><br><span class=\"line\">      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;</span><br><span class=\"line\">        &lt;!--每条日志末尾的文字说明--&gt;</span><br><span class=\"line\">        &lt;!--输出格式--&gt;</span><br><span class=\"line\">        &lt;!--样例：2008-03-26 13:42:32,111 [10] INFO  Log4NetDemo.MainClass [(null)] - info--&gt;</span><br><span class=\"line\">        &lt;conversionPattern value=&quot;%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n错误描述：%message%newline %n&quot;/&gt;</span><br><span class=\"line\">      &lt;/layout&gt;</span><br><span class=\"line\">    &lt;/appender&gt;</span><br><span class=\"line\">    &lt;!--Info日志--&gt;</span><br><span class=\"line\">    &lt;appender name=&quot;InfoAppender&quot; type=&quot;log4net.Appender.RollingFileAppender&quot;&gt;</span><br><span class=\"line\">      &lt;param name=&quot;File&quot; value=&quot;Log\\\\LogInfo\\\\&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;AppendToFile&quot; value=&quot;true&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;MaxFileSize&quot; value=&quot;10240&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;MaxSizeRollBackups&quot; value=&quot;100&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;StaticLogFileName&quot; value=&quot;false&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;DatePattern&quot; value=&quot;yyyy\\\\yyyyMM\\\\yyyyMMdd&apos;.txt&apos;&quot; /&gt;</span><br><span class=\"line\">      &lt;param name=&quot;RollingStyle&quot; value=&quot;Date&quot; /&gt;</span><br><span class=\"line\">      &lt;layout type=&quot;log4net.Layout.PatternLayout&quot;&gt;</span><br><span class=\"line\">        &lt;conversionPattern value=&quot;%newline %n记录时间：%date %n线程ID:[%thread] %n日志级别：  %-5level %n日志描述：%message%newline %n&quot;/&gt;</span><br><span class=\"line\">      &lt;/layout&gt;</span><br><span class=\"line\">    &lt;/appender&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">    &lt;!--Error日志--&gt;</span><br><span class=\"line\">    &lt;logger name=&quot;logerror&quot;&gt;</span><br><span class=\"line\">      &lt;level value=&quot;ERROR&quot; /&gt;</span><br><span class=\"line\">      &lt;appender-ref ref=&quot;RollingLogFileAppender&quot; /&gt;</span><br><span class=\"line\">    &lt;/logger&gt;</span><br><span class=\"line\">    &lt;!--Info日志--&gt;</span><br><span class=\"line\">    &lt;logger name=&quot;loginfo&quot;&gt;</span><br><span class=\"line\">      &lt;level value=&quot;INFO&quot; /&gt;</span><br><span class=\"line\">      &lt;appender-ref ref=&quot;InfoAppender&quot; /&gt;</span><br><span class=\"line\">    &lt;/logger&gt;</span><br><span class=\"line\">  &lt;/log4net&gt;</span><br><span class=\"line\">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a>第三步</h2><p>将 log4net.config 设置为复制到生成目录，采用较新则复制的规则</p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a>第四步</h2><p>在Properties -&gt; Assemblyinfo.cs 里添加一行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[assembly: log4net.Config.XmlConfigurator(ConfigFile = &quot;Log4Net.config&quot;, Watch = true)]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a>第五步</h2><p>在app.xml.cs 里加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected override void OnStartup(StartupEventArgs e)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    log4net.Config.XmlConfigurator.Configure();</span><br><span class=\"line\">    base.OnStartup(e);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"基于React的ant项目创建","abbrlink":25352,"date":"2018-05-17T04:49:23.000Z","_content":"\n## 安装和初始化\n安装 create-react-app 工具 (已安装则跳过)\n\n```\nnpm install -g create-react-app\n```\n<!-- more -->\n然后新建一个项目。\n\n```\ncreate-react-app antd-demo\n```\n\n安装并引入 antd。\n```\ncd antd-demo\nnpm add antd\n```\n\n如果是 antd mobile，则引入\n```\nnpm install antd-mobile --save\n```\n\n## 配置按需加载ant\n引入 react-app-rewired 并修改 package.json 里的启动配置。\n\n```\nnpm add react-app-rewired --dev\n```\n\n```\n/* package.json */\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test --env=jsdom\",\n+   \"test\": \"react-app-rewired test --env=jsdom\",\n}\n```\n\n然后在项目根目录创建一个 `config-overrides.js` 用于修改默认配置。\n```\nmodule.exports = function override(config, env) {\n  // do stuff with the webpack config...\n  return config;\n};\n```\n\n**使用 babel-plugin-import**\n\nbabel-plugin-import 是一个用于按需加载组件代码和样式的 babel 插件，现在我们尝试安装它并修改 `config-overrides.js` 文件。\n\n```\nnpm add babel-plugin-import --dev\n```\n\n```\n+ const { injectBabelPlugin } = require('react-app-rewired');\n  module.exports = function override(config, env) {\n+   config = injectBabelPlugin(['import', { libraryName: 'antd', libraryDirectory: 'es', style: 'css' }], config);\n    return config;\n  };\n```\n\n然后直接引用and的组件即可,例如：\n```\nimport { Button } from 'antd';\n```","source":"_posts/基于React的ant项目创建.md","raw":"---\ntitle: 基于React的ant项目创建\ntags: 前端\ncategories: 前端\nabbrlink: 25352\ndate: 2018-05-17 12:49:23\n---\n\n## 安装和初始化\n安装 create-react-app 工具 (已安装则跳过)\n\n```\nnpm install -g create-react-app\n```\n<!-- more -->\n然后新建一个项目。\n\n```\ncreate-react-app antd-demo\n```\n\n安装并引入 antd。\n```\ncd antd-demo\nnpm add antd\n```\n\n如果是 antd mobile，则引入\n```\nnpm install antd-mobile --save\n```\n\n## 配置按需加载ant\n引入 react-app-rewired 并修改 package.json 里的启动配置。\n\n```\nnpm add react-app-rewired --dev\n```\n\n```\n/* package.json */\n\"scripts\": {\n-   \"start\": \"react-scripts start\",\n+   \"start\": \"react-app-rewired start\",\n-   \"build\": \"react-scripts build\",\n+   \"build\": \"react-app-rewired build\",\n-   \"test\": \"react-scripts test --env=jsdom\",\n+   \"test\": \"react-app-rewired test --env=jsdom\",\n}\n```\n\n然后在项目根目录创建一个 `config-overrides.js` 用于修改默认配置。\n```\nmodule.exports = function override(config, env) {\n  // do stuff with the webpack config...\n  return config;\n};\n```\n\n**使用 babel-plugin-import**\n\nbabel-plugin-import 是一个用于按需加载组件代码和样式的 babel 插件，现在我们尝试安装它并修改 `config-overrides.js` 文件。\n\n```\nnpm add babel-plugin-import --dev\n```\n\n```\n+ const { injectBabelPlugin } = require('react-app-rewired');\n  module.exports = function override(config, env) {\n+   config = injectBabelPlugin(['import', { libraryName: 'antd', libraryDirectory: 'es', style: 'css' }], config);\n    return config;\n  };\n```\n\n然后直接引用and的组件即可,例如：\n```\nimport { Button } from 'antd';\n```","slug":"基于React的ant项目创建","published":1,"updated":"2020-03-09T03:01:45.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7o3003y1q2dfv65phol","content":"<h2 id=\"安装和初始化\"><a href=\"#安装和初始化\" class=\"headerlink\" title=\"安装和初始化\"></a>安装和初始化</h2><p>安装 create-react-app 工具 (已安装则跳过)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>然后新建一个项目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-app antd-demo</span><br></pre></td></tr></table></figure>\n<p>安装并引入 antd。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd antd-demo</span><br><span class=\"line\">npm add antd</span><br></pre></td></tr></table></figure></p>\n<p>如果是 antd mobile，则引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install antd-mobile --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置按需加载ant\"><a href=\"#配置按需加载ant\" class=\"headerlink\" title=\"配置按需加载ant\"></a>配置按需加载ant</h2><p>引入 react-app-rewired 并修改 package.json 里的启动配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm add react-app-rewired --dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* package.json */</span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class=\"line\">+   &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class=\"line\">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class=\"line\">+   &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class=\"line\">-   &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,</span><br><span class=\"line\">+   &quot;test&quot;: &quot;react-app-rewired test --env=jsdom&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在项目根目录创建一个 <code>config-overrides.js</code> 用于修改默认配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function override(config, env) &#123;</span><br><span class=\"line\">  // do stuff with the webpack config...</span><br><span class=\"line\">  return config;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用 babel-plugin-import</strong></p>\n<p>babel-plugin-import 是一个用于按需加载组件代码和样式的 babel 插件，现在我们尝试安装它并修改 <code>config-overrides.js</code> 文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm add babel-plugin-import --dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ const &#123; injectBabelPlugin &#125; = require(&apos;react-app-rewired&apos;);</span><br><span class=\"line\">  module.exports = function override(config, env) &#123;</span><br><span class=\"line\">+   config = injectBabelPlugin([&apos;import&apos;, &#123; libraryName: &apos;antd&apos;, libraryDirectory: &apos;es&apos;, style: &apos;css&apos; &#125;], config);</span><br><span class=\"line\">    return config;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>然后直接引用and的组件即可,例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Button &#125; from &apos;antd&apos;;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装和初始化\"><a href=\"#安装和初始化\" class=\"headerlink\" title=\"安装和初始化\"></a>安装和初始化</h2><p>安装 create-react-app 工具 (已安装则跳过)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br></pre></td></tr></table></figure>","more":"<p>然后新建一个项目。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-app antd-demo</span><br></pre></td></tr></table></figure>\n<p>安装并引入 antd。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd antd-demo</span><br><span class=\"line\">npm add antd</span><br></pre></td></tr></table></figure></p>\n<p>如果是 antd mobile，则引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install antd-mobile --save</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"配置按需加载ant\"><a href=\"#配置按需加载ant\" class=\"headerlink\" title=\"配置按需加载ant\"></a>配置按需加载ant</h2><p>引入 react-app-rewired 并修改 package.json 里的启动配置。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm add react-app-rewired --dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* package.json */</span><br><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">-   &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class=\"line\">+   &quot;start&quot;: &quot;react-app-rewired start&quot;,</span><br><span class=\"line\">-   &quot;build&quot;: &quot;react-scripts build&quot;,</span><br><span class=\"line\">+   &quot;build&quot;: &quot;react-app-rewired build&quot;,</span><br><span class=\"line\">-   &quot;test&quot;: &quot;react-scripts test --env=jsdom&quot;,</span><br><span class=\"line\">+   &quot;test&quot;: &quot;react-app-rewired test --env=jsdom&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在项目根目录创建一个 <code>config-overrides.js</code> 用于修改默认配置。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = function override(config, env) &#123;</span><br><span class=\"line\">  // do stuff with the webpack config...</span><br><span class=\"line\">  return config;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure></p>\n<p><strong>使用 babel-plugin-import</strong></p>\n<p>babel-plugin-import 是一个用于按需加载组件代码和样式的 babel 插件，现在我们尝试安装它并修改 <code>config-overrides.js</code> 文件。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm add babel-plugin-import --dev</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ const &#123; injectBabelPlugin &#125; = require(&apos;react-app-rewired&apos;);</span><br><span class=\"line\">  module.exports = function override(config, env) &#123;</span><br><span class=\"line\">+   config = injectBabelPlugin([&apos;import&apos;, &#123; libraryName: &apos;antd&apos;, libraryDirectory: &apos;es&apos;, style: &apos;css&apos; &#125;], config);</span><br><span class=\"line\">    return config;</span><br><span class=\"line\">  &#125;;</span><br></pre></td></tr></table></figure>\n<p>然后直接引用and的组件即可,例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; Button &#125; from &apos;antd&apos;;</span><br></pre></td></tr></table></figure></p>"},{"title":"将Excel的内容导出成sql语句","abbrlink":"7798218e","date":"2018-02-02T04:49:23.000Z","_content":"将Excel的内容导出成sql语句,Excel的文件名作为导入的表名，Excel的列名为导入数据库表的字段名。\n<!-- more -->\n[源码](https://github.com/AlanLang/xls2sql)\n## 使用方法\n### 1.准备一个excel\n文件名为到数据库的表名，内容为要生成的sql的数据，如下图：\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-15/53958779.jpg)\n### 2.启动软件 `xls2sql.exe`\n点击`打开`按钮找到刚才的excel文件或直接将文件拖入应用程序中。\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-15/75398211.jpg)\n### 3.应用程序完成excel解析并生成sql语句。\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-15/21174796.jpg)","source":"_posts/将Excel的内容导出成sql语句.md","raw":"---\ntitle: 将Excel的内容导出成sql语句\ntags: 'C#'\ncategories: 小工具\nabbrlink: 7798218e\ndate: 2018-02-02 12:49:23\n---\n将Excel的内容导出成sql语句,Excel的文件名作为导入的表名，Excel的列名为导入数据库表的字段名。\n<!-- more -->\n[源码](https://github.com/AlanLang/xls2sql)\n## 使用方法\n### 1.准备一个excel\n文件名为到数据库的表名，内容为要生成的sql的数据，如下图：\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-15/53958779.jpg)\n### 2.启动软件 `xls2sql.exe`\n点击`打开`按钮找到刚才的excel文件或直接将文件拖入应用程序中。\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-15/75398211.jpg)\n### 3.应用程序完成excel解析并生成sql语句。\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-15/21174796.jpg)","slug":"将Excel的内容导出成sql语句","published":1,"updated":"2020-03-09T03:01:45.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7o600421q2ditko7csp","content":"<p>将Excel的内容导出成sql语句,Excel的文件名作为导入的表名，Excel的列名为导入数据库表的字段名。<br><a id=\"more\"></a><br><a href=\"https://github.com/AlanLang/xls2sql\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"1-准备一个excel\"><a href=\"#1-准备一个excel\" class=\"headerlink\" title=\"1.准备一个excel\"></a>1.准备一个excel</h3><p>文件名为到数据库的表名，内容为要生成的sql的数据，如下图：<br><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-15/53958779.jpg\" alt></p>\n<h3 id=\"2-启动软件-xls2sql-exe\"><a href=\"#2-启动软件-xls2sql-exe\" class=\"headerlink\" title=\"2.启动软件 xls2sql.exe\"></a>2.启动软件 <code>xls2sql.exe</code></h3><p>点击<code>打开</code>按钮找到刚才的excel文件或直接将文件拖入应用程序中。<br><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-15/75398211.jpg\" alt></p>\n<h3 id=\"3-应用程序完成excel解析并生成sql语句。\"><a href=\"#3-应用程序完成excel解析并生成sql语句。\" class=\"headerlink\" title=\"3.应用程序完成excel解析并生成sql语句。\"></a>3.应用程序完成excel解析并生成sql语句。</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-15/21174796.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>将Excel的内容导出成sql语句,Excel的文件名作为导入的表名，Excel的列名为导入数据库表的字段名。<br>","more":"<br><a href=\"https://github.com/AlanLang/xls2sql\" target=\"_blank\" rel=\"noopener\">源码</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"1-准备一个excel\"><a href=\"#1-准备一个excel\" class=\"headerlink\" title=\"1.准备一个excel\"></a>1.准备一个excel</h3><p>文件名为到数据库的表名，内容为要生成的sql的数据，如下图：<br><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-15/53958779.jpg\" alt></p>\n<h3 id=\"2-启动软件-xls2sql-exe\"><a href=\"#2-启动软件-xls2sql-exe\" class=\"headerlink\" title=\"2.启动软件 xls2sql.exe\"></a>2.启动软件 <code>xls2sql.exe</code></h3><p>点击<code>打开</code>按钮找到刚才的excel文件或直接将文件拖入应用程序中。<br><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-15/75398211.jpg\" alt></p>\n<h3 id=\"3-应用程序完成excel解析并生成sql语句。\"><a href=\"#3-应用程序完成excel解析并生成sql语句。\" class=\"headerlink\" title=\"3.应用程序完成excel解析并生成sql语句。\"></a>3.应用程序完成excel解析并生成sql语句。</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-15/21174796.jpg\" alt></p>"},{"title":"小程序架构","abbrlink":40517,"date":"2020-02-17T00:48:23.000Z","_content":"\n其实小程序和 PWA，以及快应用有着类似的业务使用场景，感官上有着相似的地方。\n尽管原理上有很大的差异。\n\n本文以微信小程序为例，我们来讲解一下小程序的架构，其他的小程序，比如支付宝小程序，百度小程序都是类似的原理。\n<!-- more -->\n\n## 基本原理\n\n说到微信小程序就不得不提它的多线程模型，小程序有一个 JS 线程和若干个 webview，我们称之为 view 层，\nview 不能够执行 JS 代码，而是负责 UI 显示，它由开发者编写的 wxml 和 wxss 转换后代码以及微信提供相关辅助模块组成。\n\n一个 view 模块对应一个 webview 组件（也就是我们常规理解的一个页面）, 小程序支持同时多个 view 存在。view 模块通过 WeixinJSBridge 对象来跟后台通信。\n\n微信 Native 程序会预先加载一个 WebView，当打开指定页面时，无需加载额外资源直接渲染，这样会感觉\n小程序会很快。\n\nJS 线程我们称之为 service，service 模块负责应用的后台逻辑，\n它由小程序的 js 代码以及微信提供的相关辅助模块组成。\n一个应用只有一个 service 进程\n，它同样也是一个页面（至少在开发者工具内如此，上线后可能运行于 WeixinJSCore 之内），\n与 view 模块不同的是，它在程序生命周期内后台运行，service 模块通过与 view 模块实现不同但接口格式一样的 WeixinJSBridge 对象跟后台通信。\n\n多线程模型的原理图大概是这样的：\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918413429)\n(图片来自 https://zhuanlan.zhihu.com/p/22754296)\n\n交互通过系统层的 JSBridge 进行，当用户进行操作触发了事件，通过 JSBridge 通知逻辑层，逻辑层执行对应逻辑并把数据通过 JSBridge 传递给视图层，视图层执行相应的操作。\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918441461)\n（图片来自 https://www.jianshu.com/p/4e8ed26d3b7a）\n\n小程序也会与 CDN 和 web server 进行一些交互，具体为：\n小程序初始化时，先从微信的 CDN 下载小程序的完整的包，然后在微信内部进行解包初始化。\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918457006)\n（图片来自 https://www.jianshu.com/p/4e8ed26d3b7a）\n\n## 不足\n\njson 格式的数据传递和解析相比与原生 API 都是损耗不菲的，如果频繁调用很可能损耗 过多性能，进而影响用户体验。\n\n而支付宝小程序也看到了这一点，他们也做了一些自己的尝试来解决这个问题，主要原理图：\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918472365)\n(图片来自 https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC)\n\n感兴趣的可以读一下文末的参考链接\n## 总结\n\n- 提前新建 Web View，准备新页面渲染\n\n- View 层和逻辑层分离，通过数据驱动，不直接操作 DOM\n\n- 使用 Virtual DOM，进行局部更新\n\n- 全部使用 https，确保传输过程中安全\n\n- 前端组件化开发\n\n- 加入 rpx 单位，隔离设备尺寸，方便开发\n\n## 参考链接\n\n- [《微信小程序架构解析》](https://www.jianshu.com/p/4e8ed26d3b7a)\n- [微信小程序架构分析 (上)](https://zhuanlan.zhihu.com/p/22754296)\n- [独家！支付宝小程序技术架构全解析](https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC)","source":"_posts/小程序架构.md","raw":"---\ntitle: 小程序架构\ntags: 前端\ncategories: 前端\nabbrlink: 40517\ndate: 2020-02-17 08:48:23\n---\n\n其实小程序和 PWA，以及快应用有着类似的业务使用场景，感官上有着相似的地方。\n尽管原理上有很大的差异。\n\n本文以微信小程序为例，我们来讲解一下小程序的架构，其他的小程序，比如支付宝小程序，百度小程序都是类似的原理。\n<!-- more -->\n\n## 基本原理\n\n说到微信小程序就不得不提它的多线程模型，小程序有一个 JS 线程和若干个 webview，我们称之为 view 层，\nview 不能够执行 JS 代码，而是负责 UI 显示，它由开发者编写的 wxml 和 wxss 转换后代码以及微信提供相关辅助模块组成。\n\n一个 view 模块对应一个 webview 组件（也就是我们常规理解的一个页面）, 小程序支持同时多个 view 存在。view 模块通过 WeixinJSBridge 对象来跟后台通信。\n\n微信 Native 程序会预先加载一个 WebView，当打开指定页面时，无需加载额外资源直接渲染，这样会感觉\n小程序会很快。\n\nJS 线程我们称之为 service，service 模块负责应用的后台逻辑，\n它由小程序的 js 代码以及微信提供的相关辅助模块组成。\n一个应用只有一个 service 进程\n，它同样也是一个页面（至少在开发者工具内如此，上线后可能运行于 WeixinJSCore 之内），\n与 view 模块不同的是，它在程序生命周期内后台运行，service 模块通过与 view 模块实现不同但接口格式一样的 WeixinJSBridge 对象跟后台通信。\n\n多线程模型的原理图大概是这样的：\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918413429)\n(图片来自 https://zhuanlan.zhihu.com/p/22754296)\n\n交互通过系统层的 JSBridge 进行，当用户进行操作触发了事件，通过 JSBridge 通知逻辑层，逻辑层执行对应逻辑并把数据通过 JSBridge 传递给视图层，视图层执行相应的操作。\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918441461)\n（图片来自 https://www.jianshu.com/p/4e8ed26d3b7a）\n\n小程序也会与 CDN 和 web server 进行一些交互，具体为：\n小程序初始化时，先从微信的 CDN 下载小程序的完整的包，然后在微信内部进行解包初始化。\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918457006)\n（图片来自 https://www.jianshu.com/p/4e8ed26d3b7a）\n\n## 不足\n\njson 格式的数据传递和解析相比与原生 API 都是损耗不菲的，如果频繁调用很可能损耗 过多性能，进而影响用户体验。\n\n而支付宝小程序也看到了这一点，他们也做了一些自己的尝试来解决这个问题，主要原理图：\n\n![](http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918472365)\n(图片来自 https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC)\n\n感兴趣的可以读一下文末的参考链接\n## 总结\n\n- 提前新建 Web View，准备新页面渲染\n\n- View 层和逻辑层分离，通过数据驱动，不直接操作 DOM\n\n- 使用 Virtual DOM，进行局部更新\n\n- 全部使用 https，确保传输过程中安全\n\n- 前端组件化开发\n\n- 加入 rpx 单位，隔离设备尺寸，方便开发\n\n## 参考链接\n\n- [《微信小程序架构解析》](https://www.jianshu.com/p/4e8ed26d3b7a)\n- [微信小程序架构分析 (上)](https://zhuanlan.zhihu.com/p/22754296)\n- [独家！支付宝小程序技术架构全解析](https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC)","slug":"小程序架构","published":1,"updated":"2020-03-09T03:01:45.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7o700451q2d805id7a7","content":"<p>其实小程序和 PWA，以及快应用有着类似的业务使用场景，感官上有着相似的地方。<br>尽管原理上有很大的差异。</p>\n<p>本文以微信小程序为例，我们来讲解一下小程序的架构，其他的小程序，比如支付宝小程序，百度小程序都是类似的原理。<br><a id=\"more\"></a></p>\n<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><p>说到微信小程序就不得不提它的多线程模型，小程序有一个 JS 线程和若干个 webview，我们称之为 view 层，<br>view 不能够执行 JS 代码，而是负责 UI 显示，它由开发者编写的 wxml 和 wxss 转换后代码以及微信提供相关辅助模块组成。</p>\n<p>一个 view 模块对应一个 webview 组件（也就是我们常规理解的一个页面）, 小程序支持同时多个 view 存在。view 模块通过 WeixinJSBridge 对象来跟后台通信。</p>\n<p>微信 Native 程序会预先加载一个 WebView，当打开指定页面时，无需加载额外资源直接渲染，这样会感觉<br>小程序会很快。</p>\n<p>JS 线程我们称之为 service，service 模块负责应用的后台逻辑，<br>它由小程序的 js 代码以及微信提供的相关辅助模块组成。<br>一个应用只有一个 service 进程<br>，它同样也是一个页面（至少在开发者工具内如此，上线后可能运行于 WeixinJSCore 之内），<br>与 view 模块不同的是，它在程序生命周期内后台运行，service 模块通过与 view 模块实现不同但接口格式一样的 WeixinJSBridge 对象跟后台通信。</p>\n<p>多线程模型的原理图大概是这样的：</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918413429\" alt><br>(图片来自 <a href=\"https://zhuanlan.zhihu.com/p/22754296\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/22754296</a>)</p>\n<p>交互通过系统层的 JSBridge 进行，当用户进行操作触发了事件，通过 JSBridge 通知逻辑层，逻辑层执行对应逻辑并把数据通过 JSBridge 传递给视图层，视图层执行相应的操作。</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918441461\" alt><br>（图片来自 <a href=\"https://www.jianshu.com/p/4e8ed26d3b7a）\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4e8ed26d3b7a）</a></p>\n<p>小程序也会与 CDN 和 web server 进行一些交互，具体为：<br>小程序初始化时，先从微信的 CDN 下载小程序的完整的包，然后在微信内部进行解包初始化。</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918457006\" alt><br>（图片来自 <a href=\"https://www.jianshu.com/p/4e8ed26d3b7a）\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4e8ed26d3b7a）</a></p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>json 格式的数据传递和解析相比与原生 API 都是损耗不菲的，如果频繁调用很可能损耗 过多性能，进而影响用户体验。</p>\n<p>而支付宝小程序也看到了这一点，他们也做了一些自己的尝试来解决这个问题，主要原理图：</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918472365\" alt><br>(图片来自 <a href=\"https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC</a>)</p>\n<p>感兴趣的可以读一下文末的参考链接</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>提前新建 Web View，准备新页面渲染</p>\n</li>\n<li><p>View 层和逻辑层分离，通过数据驱动，不直接操作 DOM</p>\n</li>\n<li><p>使用 Virtual DOM，进行局部更新</p>\n</li>\n<li><p>全部使用 https，确保传输过程中安全</p>\n</li>\n<li><p>前端组件化开发</p>\n</li>\n<li><p>加入 rpx 单位，隔离设备尺寸，方便开发</p>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/4e8ed26d3b7a\" target=\"_blank\" rel=\"noopener\">《微信小程序架构解析》</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22754296\" target=\"_blank\" rel=\"noopener\">微信小程序架构分析 (上)</a></li>\n<li><a href=\"https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC\" target=\"_blank\" rel=\"noopener\">独家！支付宝小程序技术架构全解析</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>其实小程序和 PWA，以及快应用有着类似的业务使用场景，感官上有着相似的地方。<br>尽管原理上有很大的差异。</p>\n<p>本文以微信小程序为例，我们来讲解一下小程序的架构，其他的小程序，比如支付宝小程序，百度小程序都是类似的原理。<br>","more":"</p>\n<h2 id=\"基本原理\"><a href=\"#基本原理\" class=\"headerlink\" title=\"基本原理\"></a>基本原理</h2><p>说到微信小程序就不得不提它的多线程模型，小程序有一个 JS 线程和若干个 webview，我们称之为 view 层，<br>view 不能够执行 JS 代码，而是负责 UI 显示，它由开发者编写的 wxml 和 wxss 转换后代码以及微信提供相关辅助模块组成。</p>\n<p>一个 view 模块对应一个 webview 组件（也就是我们常规理解的一个页面）, 小程序支持同时多个 view 存在。view 模块通过 WeixinJSBridge 对象来跟后台通信。</p>\n<p>微信 Native 程序会预先加载一个 WebView，当打开指定页面时，无需加载额外资源直接渲染，这样会感觉<br>小程序会很快。</p>\n<p>JS 线程我们称之为 service，service 模块负责应用的后台逻辑，<br>它由小程序的 js 代码以及微信提供的相关辅助模块组成。<br>一个应用只有一个 service 进程<br>，它同样也是一个页面（至少在开发者工具内如此，上线后可能运行于 WeixinJSCore 之内），<br>与 view 模块不同的是，它在程序生命周期内后台运行，service 模块通过与 view 模块实现不同但接口格式一样的 WeixinJSBridge 对象跟后台通信。</p>\n<p>多线程模型的原理图大概是这样的：</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918413429\" alt><br>(图片来自 <a href=\"https://zhuanlan.zhihu.com/p/22754296\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/22754296</a>)</p>\n<p>交互通过系统层的 JSBridge 进行，当用户进行操作触发了事件，通过 JSBridge 通知逻辑层，逻辑层执行对应逻辑并把数据通过 JSBridge 传递给视图层，视图层执行相应的操作。</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918441461\" alt><br>（图片来自 <a href=\"https://www.jianshu.com/p/4e8ed26d3b7a）\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4e8ed26d3b7a）</a></p>\n<p>小程序也会与 CDN 和 web server 进行一些交互，具体为：<br>小程序初始化时，先从微信的 CDN 下载小程序的完整的包，然后在微信内部进行解包初始化。</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918457006\" alt><br>（图片来自 <a href=\"https://www.jianshu.com/p/4e8ed26d3b7a）\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/4e8ed26d3b7a）</a></p>\n<h2 id=\"不足\"><a href=\"#不足\" class=\"headerlink\" title=\"不足\"></a>不足</h2><p>json 格式的数据传递和解析相比与原生 API 都是损耗不菲的，如果频繁调用很可能损耗 过多性能，进而影响用户体验。</p>\n<p>而支付宝小程序也看到了这一点，他们也做了一些自己的尝试来解决这个问题，主要原理图：</p>\n<p><img src=\"http://alan-picpack.oss-cn-hangzhou.aliyuncs.com/1581918472365\" alt><br>(图片来自 <a href=\"https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC</a>)</p>\n<p>感兴趣的可以读一下文末的参考链接</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><p>提前新建 Web View，准备新页面渲染</p>\n</li>\n<li><p>View 层和逻辑层分离，通过数据驱动，不直接操作 DOM</p>\n</li>\n<li><p>使用 Virtual DOM，进行局部更新</p>\n</li>\n<li><p>全部使用 https，确保传输过程中安全</p>\n</li>\n<li><p>前端组件化开发</p>\n</li>\n<li><p>加入 rpx 单位，隔离设备尺寸，方便开发</p>\n</li>\n</ul>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/4e8ed26d3b7a\" target=\"_blank\" rel=\"noopener\">《微信小程序架构解析》</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/22754296\" target=\"_blank\" rel=\"noopener\">微信小程序架构分析 (上)</a></li>\n<li><a href=\"https://www.infoq.cn/article/ullETz7q_Ue4dUptKgKC\" target=\"_blank\" rel=\"noopener\">独家！支付宝小程序技术架构全解析</a></li>\n</ul>"},{"title":"基于阿里云api的动态域名解析服务","abbrlink":62468,"date":"2018-06-12T04:00:34.000Z","_content":"基于阿里云解析服务API的DDNS服务。将本机IP更新至指定域名的DNS A记录，可以达到花生壳动态域名解析的效果。\n\n<!-- more -->\n[源码地址](https://github.com/AlanLang/aliyun-ddns-server)\n\n## 使用方法\n1. 在阿里云申请一个域名，将此域名添加一个子域（如www），并设置为A类型记录，IP地址随便填写一个（程序会自动修改）\n2. 到阿里云域名控制台申请AccessId Key和Secrect\n3. Clone本项目代码到本机，使用VS2013或更高版本编译 (或直接下载release)\n4. 将生成的debug目录拷贝到服务器上，修改config.yml文件，然后用管理员权限运行install.bat\n\n## 配置说明\n`config.yml`\n\n``` ymal\n# 检测外网ip地址的网站\nIPUrl: http://2018.ip138.com/ic.asp\n# 阿里云接口地址\nAPIUrl: http://alidns.aliyuncs.com\nDomainName: 域名 例如 google.com\nFirstName: 前缀，例如www,空则为 @\nAccessKey: Access Id Key\nAccessKeySecret: Access Id Secret\n```\n\n## 环境\n使用 vs2015+C# 开发 .NET 4.0\n\n## 关键代码\n首先下载并引用阿里云sdk\n``` C\n/// <summary>\n/// 域名解析帮助类\n/// </summary>\npublic class CDomainHelper\n{\n    DefaultAliyunClient aliyunClient;\n    public CDomainHelper()\n    {\n        aliyunClient = new DefaultAliyunClient(CGlobalConfig.APIUrl, CGlobalConfig.AccessKey, CGlobalConfig.AccessKeySecret);\n    }\n    /// <summary>\n    /// 获取当前的解析值\n    /// </summary>\n    /// <returns></returns>\n    public Record DescribeDomains()\n    {\n\n        var req = new DescribeDomainRecordsRequest() { DomainName = CGlobalConfig.DomainName };\n        var response = aliyunClient.Execute(req);\n\n        var updateRecord = response.DomainRecords.FirstOrDefault(rec => rec.RR == CGlobalConfig.FirstName && rec.Type == \"A\");\n        return updateRecord;\n\n    }\n    /// <summary>\n    /// 更新域名解析值\n    /// </summary>\n    /// <param name=\"ipaddr\">新的ip地址</param>\n    /// <param name=\"recordId\">解析条目的主键</param>\n    public void UpdateDomainRecords(string ipaddr,string recordId)\n    {\n        var changeValueRequest = new UpdateDomainRecordRequest()\n        {\n            RecordId = recordId,\n            Value = ipaddr,\n            Type = \"A\",\n            RR = CGlobalConfig.FirstName\n        };\n        aliyunClient.Execute(changeValueRequest);\n    }\n    /// <summary>\n    /// 获取外网ip地址\n    /// </summary>\n    /// <returns></returns>\n    public string GetIpAddr()\n    {\n        HttpWebRequest request = HttpWebRequest.Create(CGlobalConfig.IPUrl) as HttpWebRequest;\n        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)\n        {\n            StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding(\"GB2312\"));\n            string str = reader.ReadToEnd();\n            reader.Close();\n            reader.Dispose();\n            int start = str.IndexOf(\"[\");\n            int end = str.IndexOf(\"]\");\n            if (start > -1 && end > -1 && end > start)\n            {\n                string ip = str.Substring(start + 1, end - start - 1);\n                return ip;\n            }\n            return \"\";\n        }\n    }\n}\n```","source":"_posts/基于阿里云api的动态域名解析服务.md","raw":"---\ntitle: 基于阿里云api的动态域名解析服务\ntags: 'C#'\ncategories: 小工具\nabbrlink: 62468\ndate: 2018-06-12 12:00:34\n---\n基于阿里云解析服务API的DDNS服务。将本机IP更新至指定域名的DNS A记录，可以达到花生壳动态域名解析的效果。\n\n<!-- more -->\n[源码地址](https://github.com/AlanLang/aliyun-ddns-server)\n\n## 使用方法\n1. 在阿里云申请一个域名，将此域名添加一个子域（如www），并设置为A类型记录，IP地址随便填写一个（程序会自动修改）\n2. 到阿里云域名控制台申请AccessId Key和Secrect\n3. Clone本项目代码到本机，使用VS2013或更高版本编译 (或直接下载release)\n4. 将生成的debug目录拷贝到服务器上，修改config.yml文件，然后用管理员权限运行install.bat\n\n## 配置说明\n`config.yml`\n\n``` ymal\n# 检测外网ip地址的网站\nIPUrl: http://2018.ip138.com/ic.asp\n# 阿里云接口地址\nAPIUrl: http://alidns.aliyuncs.com\nDomainName: 域名 例如 google.com\nFirstName: 前缀，例如www,空则为 @\nAccessKey: Access Id Key\nAccessKeySecret: Access Id Secret\n```\n\n## 环境\n使用 vs2015+C# 开发 .NET 4.0\n\n## 关键代码\n首先下载并引用阿里云sdk\n``` C\n/// <summary>\n/// 域名解析帮助类\n/// </summary>\npublic class CDomainHelper\n{\n    DefaultAliyunClient aliyunClient;\n    public CDomainHelper()\n    {\n        aliyunClient = new DefaultAliyunClient(CGlobalConfig.APIUrl, CGlobalConfig.AccessKey, CGlobalConfig.AccessKeySecret);\n    }\n    /// <summary>\n    /// 获取当前的解析值\n    /// </summary>\n    /// <returns></returns>\n    public Record DescribeDomains()\n    {\n\n        var req = new DescribeDomainRecordsRequest() { DomainName = CGlobalConfig.DomainName };\n        var response = aliyunClient.Execute(req);\n\n        var updateRecord = response.DomainRecords.FirstOrDefault(rec => rec.RR == CGlobalConfig.FirstName && rec.Type == \"A\");\n        return updateRecord;\n\n    }\n    /// <summary>\n    /// 更新域名解析值\n    /// </summary>\n    /// <param name=\"ipaddr\">新的ip地址</param>\n    /// <param name=\"recordId\">解析条目的主键</param>\n    public void UpdateDomainRecords(string ipaddr,string recordId)\n    {\n        var changeValueRequest = new UpdateDomainRecordRequest()\n        {\n            RecordId = recordId,\n            Value = ipaddr,\n            Type = \"A\",\n            RR = CGlobalConfig.FirstName\n        };\n        aliyunClient.Execute(changeValueRequest);\n    }\n    /// <summary>\n    /// 获取外网ip地址\n    /// </summary>\n    /// <returns></returns>\n    public string GetIpAddr()\n    {\n        HttpWebRequest request = HttpWebRequest.Create(CGlobalConfig.IPUrl) as HttpWebRequest;\n        using (HttpWebResponse response = request.GetResponse() as HttpWebResponse)\n        {\n            StreamReader reader = new StreamReader(response.GetResponseStream(), Encoding.GetEncoding(\"GB2312\"));\n            string str = reader.ReadToEnd();\n            reader.Close();\n            reader.Dispose();\n            int start = str.IndexOf(\"[\");\n            int end = str.IndexOf(\"]\");\n            if (start > -1 && end > -1 && end > start)\n            {\n                string ip = str.Substring(start + 1, end - start - 1);\n                return ip;\n            }\n            return \"\";\n        }\n    }\n}\n```","slug":"基于阿里云api的动态域名解析服务","published":1,"updated":"2020-03-09T03:01:45.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7o900491q2dl6fl34zc","content":"<p>基于阿里云解析服务API的DDNS服务。将本机IP更新至指定域名的DNS A记录，可以达到花生壳动态域名解析的效果。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/AlanLang/aliyun-ddns-server\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ol>\n<li>在阿里云申请一个域名，将此域名添加一个子域（如www），并设置为A类型记录，IP地址随便填写一个（程序会自动修改）</li>\n<li>到阿里云域名控制台申请AccessId Key和Secrect</li>\n<li>Clone本项目代码到本机，使用VS2013或更高版本编译 (或直接下载release)</li>\n<li>将生成的debug目录拷贝到服务器上，修改config.yml文件，然后用管理员权限运行install.bat</li>\n</ol>\n<h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><p><code>config.yml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检测外网ip地址的网站</span><br><span class=\"line\">IPUrl: http://2018.ip138.com/ic.asp</span><br><span class=\"line\"># 阿里云接口地址</span><br><span class=\"line\">APIUrl: http://alidns.aliyuncs.com</span><br><span class=\"line\">DomainName: 域名 例如 google.com</span><br><span class=\"line\">FirstName: 前缀，例如www,空则为 @</span><br><span class=\"line\">AccessKey: Access Id Key</span><br><span class=\"line\">AccessKeySecret: Access Id Secret</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>使用 vs2015+C# 开发 .NET 4.0</p>\n<h2 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h2><p>首先下载并引用阿里云sdk<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 域名解析帮助类</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDomainHelper</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    DefaultAliyunClient aliyunClient;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CDomainHelper</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        aliyunClient = <span class=\"keyword\">new</span> DefaultAliyunClient(CGlobalConfig.APIUrl, CGlobalConfig.AccessKey, CGlobalConfig.AccessKeySecret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 获取当前的解析值</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Record <span class=\"title\">DescribeDomains</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var req = <span class=\"keyword\">new</span> DescribeDomainRecordsRequest() &#123; DomainName = CGlobalConfig.DomainName &#125;;</span><br><span class=\"line\">        var response = aliyunClient.Execute(req);</span><br><span class=\"line\"></span><br><span class=\"line\">        var updateRecord = response.DomainRecords.FirstOrDefault(rec =&gt; rec.RR == CGlobalConfig.FirstName &amp;&amp; rec.Type == <span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateRecord;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 更新域名解析值</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;param name=\"ipaddr\"&gt;新的ip地址&lt;/param&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;param name=\"recordId\"&gt;解析条目的主键&lt;/param&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdateDomainRecords</span><span class=\"params\">(<span class=\"built_in\">string</span> ipaddr,<span class=\"built_in\">string</span> recordId)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var changeValueRequest = <span class=\"keyword\">new</span> UpdateDomainRecordRequest()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RecordId = recordId,</span><br><span class=\"line\">            Value = ipaddr,</span><br><span class=\"line\">            Type = <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">            RR = CGlobalConfig.FirstName</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        aliyunClient.Execute(changeValueRequest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 获取外网ip地址</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetIpAddr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        HttpWebRequest request = HttpWebRequest.Create(CGlobalConfig.IPUrl) as HttpWebRequest;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (HttpWebResponse response = request.GetResponse() as HttpWebResponse)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            StreamReader reader = <span class=\"keyword\">new</span> StreamReader(response.GetResponseStream(), Encoding.GetEncoding(<span class=\"string\">\"GB2312\"</span>));</span><br><span class=\"line\">            <span class=\"built_in\">string</span> str = reader.ReadToEnd();</span><br><span class=\"line\">            reader.Close();</span><br><span class=\"line\">            reader.Dispose();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> start = str.IndexOf(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> end = str.IndexOf(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (start &gt; <span class=\"number\">-1</span> &amp;&amp; end &gt; <span class=\"number\">-1</span> &amp;&amp; end &gt; start)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> ip = str.Substring(start + <span class=\"number\">1</span>, end - start - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ip;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>基于阿里云解析服务API的DDNS服务。将本机IP更新至指定域名的DNS A记录，可以达到花生壳动态域名解析的效果。</p>","more":"<p><a href=\"https://github.com/AlanLang/aliyun-ddns-server\" target=\"_blank\" rel=\"noopener\">源码地址</a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><ol>\n<li>在阿里云申请一个域名，将此域名添加一个子域（如www），并设置为A类型记录，IP地址随便填写一个（程序会自动修改）</li>\n<li>到阿里云域名控制台申请AccessId Key和Secrect</li>\n<li>Clone本项目代码到本机，使用VS2013或更高版本编译 (或直接下载release)</li>\n<li>将生成的debug目录拷贝到服务器上，修改config.yml文件，然后用管理员权限运行install.bat</li>\n</ol>\n<h2 id=\"配置说明\"><a href=\"#配置说明\" class=\"headerlink\" title=\"配置说明\"></a>配置说明</h2><p><code>config.yml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 检测外网ip地址的网站</span><br><span class=\"line\">IPUrl: http://2018.ip138.com/ic.asp</span><br><span class=\"line\"># 阿里云接口地址</span><br><span class=\"line\">APIUrl: http://alidns.aliyuncs.com</span><br><span class=\"line\">DomainName: 域名 例如 google.com</span><br><span class=\"line\">FirstName: 前缀，例如www,空则为 @</span><br><span class=\"line\">AccessKey: Access Id Key</span><br><span class=\"line\">AccessKeySecret: Access Id Secret</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><p>使用 vs2015+C# 开发 .NET 4.0</p>\n<h2 id=\"关键代码\"><a href=\"#关键代码\" class=\"headerlink\" title=\"关键代码\"></a>关键代码</h2><p>首先下载并引用阿里云sdk<br><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\"><span class=\"comment\">/// 域名解析帮助类</span></span><br><span class=\"line\"><span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CDomainHelper</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    DefaultAliyunClient aliyunClient;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CDomainHelper</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        aliyunClient = <span class=\"keyword\">new</span> DefaultAliyunClient(CGlobalConfig.APIUrl, CGlobalConfig.AccessKey, CGlobalConfig.AccessKeySecret);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 获取当前的解析值</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Record <span class=\"title\">DescribeDomains</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var req = <span class=\"keyword\">new</span> DescribeDomainRecordsRequest() &#123; DomainName = CGlobalConfig.DomainName &#125;;</span><br><span class=\"line\">        var response = aliyunClient.Execute(req);</span><br><span class=\"line\"></span><br><span class=\"line\">        var updateRecord = response.DomainRecords.FirstOrDefault(rec =&gt; rec.RR == CGlobalConfig.FirstName &amp;&amp; rec.Type == <span class=\"string\">\"A\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> updateRecord;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 更新域名解析值</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;param name=\"ipaddr\"&gt;新的ip地址&lt;/param&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;param name=\"recordId\"&gt;解析条目的主键&lt;/param&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">UpdateDomainRecords</span><span class=\"params\">(<span class=\"built_in\">string</span> ipaddr,<span class=\"built_in\">string</span> recordId)</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        var changeValueRequest = <span class=\"keyword\">new</span> UpdateDomainRecordRequest()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            RecordId = recordId,</span><br><span class=\"line\">            Value = ipaddr,</span><br><span class=\"line\">            Type = <span class=\"string\">\"A\"</span>,</span><br><span class=\"line\">            RR = CGlobalConfig.FirstName</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        aliyunClient.Execute(changeValueRequest);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/// &lt;summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// 获取外网ip地址</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;/summary&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"built_in\">string</span> <span class=\"title\">GetIpAddr</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">    </span>&#123;</span><br><span class=\"line\">        HttpWebRequest request = HttpWebRequest.Create(CGlobalConfig.IPUrl) as HttpWebRequest;</span><br><span class=\"line\">        <span class=\"keyword\">using</span> (HttpWebResponse response = request.GetResponse() as HttpWebResponse)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            StreamReader reader = <span class=\"keyword\">new</span> StreamReader(response.GetResponseStream(), Encoding.GetEncoding(<span class=\"string\">\"GB2312\"</span>));</span><br><span class=\"line\">            <span class=\"built_in\">string</span> str = reader.ReadToEnd();</span><br><span class=\"line\">            reader.Close();</span><br><span class=\"line\">            reader.Dispose();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> start = str.IndexOf(<span class=\"string\">\"[\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">int</span> end = str.IndexOf(<span class=\"string\">\"]\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (start &gt; <span class=\"number\">-1</span> &amp;&amp; end &gt; <span class=\"number\">-1</span> &amp;&amp; end &gt; start)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"built_in\">string</span> ip = str.Substring(start + <span class=\"number\">1</span>, end - start - <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> ip;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>"},{"title":"如何像程序员一样思考[英文翻译]","abbrlink":30325,"date":"2018-12-11T10:48:23.000Z","_content":"## 如何像程序员一样思考\n一堂教你解决问题的课程\n原文链接：[How to think like a programmer — lessons in problem solving](https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2)\n原文作者：[Richard Reis](https://medium.freecodecamp.org/@richardreeze)\n\n如果你对编程感兴趣，那你之前一定听说过这句话:\n> 世界上的每个人都应该去学习电脑编程，因为它可以教给你如何去思考   --史蒂夫·乔布斯\n\n<!-- more -->\n\n你一定想知道这句话究竟是什么意思，准确的来说，什么叫像程序员一样思考？我们又如何去做到？\n归根结底，这都是想用更有效的办法去解决问题。在这篇文章中，我将会教给你这种方法，通读这篇文章之后，你将会确切的知道如果去做才能成为一个解决问题的能手。\n\n### 为什么这很重要？\n因为解决问题是一种必备技能，我们每个人都会遇到大大小小的各种问题，我们平时都是怎么解决它们的呢？嗯。。。很随意。\n除非你拥有一套系统，一套可能会帮你解决问题的系统。（正如我刚开始编程时所作的一样）：\n1. 尝试一种解决方案\n2. 如果不起作用，尝试另一种解决方案\n3. 如果不起作用，重复第二步直到你运气好解决了问题\n\n看吧，有时候你会因为运气好解决了问题，但是这是一种特别糟糕的方式，既繁琐又浪费时间。\n所以做好的方法是首先有个要有个系统规划然后开始去做。\n> 几乎所有的老板都会重视解决问题的能力，比起编程语言的数量程度，调试和系统设计的能力，老板们可能更加重视解决问题的能力。展示计算思维或分解大型复杂问题的能力与工作所需的技术技能相比一样有价值 \n> — 黑客等级（2018年开发人员技能报告）\n\n### 拥有一个框架\n为了找到合适的框架，我遵循了Tim Ferriss关于学习的书“4小时厨师”的建议，去采访了两位十分令人印象深刻的人：C.Jordan Ball(在Coderbyte的65,000多名用户中排名第一或第二的人)，和 V.Anton Spraul(“像程序员一样思考：一个创造性解决问题的介绍”一书的作者)，我问了他们相同的问题，猜猜是什么？他们给我的回答非常相似，很快你就会知道是什么。\n旁注：这并不意味着他们用同一种方式做所有的事，每个人都是与众不同的，包括你。如果你有信念去开始我们会十分赞同，而且你很快就回收获更多。\n> 我看到新的程序员犯的最大的错误就是专注于学习语法而不是去学习如何去解决问题。\n> — V.Anton Spraulr\n\n那么遇到新的问题的应该怎么做呢？\n下面是步骤：\n#### 1.理解\n明确的知道遇到的问题是什么，很多难题之所以难是因为你不理解他们(这就是为什么这是第一步的原因)。如何知道你什么时候能够理解这个问题？答案是当你能用英语解释他们的时候。你是否还记得当你困在某个问题的时候，你尝试去解释他，你立马看到了你之前没有发现的逻辑漏洞吗？大多数程序员都有过这种感觉，这就是为什么你要写下你的问题、绘制涂鸦图或者告诉别人它的信息(或者用涂鸦图)。\n> 如果你不能用简单的术语来解释，你就不会理解它。\n> — Richard Feynman\n\n#### 2.计划\n如果你没有计划就不要去开始解决，请开始为你们解决方案制定计划，如果你不能写下确切的步骤，没有什么可以帮助你。在编程领域，这意味着不要立即开始黑客攻击。 首先请让你的大脑有时间分析问题并处理信息。为了拥有一个好的计划，请回答下面的问题：“给定输入X，返回输出Y所需的步骤是什么？”。\n旁注：程序员有一个很好的工具来帮助他们...期待你的评论！\n#### 3.划分\n请注意，这是最重要的一步，不要尝试去解决一个大的问题，那样你会哭的！相反，将其分解成一个个子问题，这些小问题相较而言会更加容易去解决。然后逐个去解决每个子问题，先从最简单的开始，最简单意思就是那些你知道答案(或更加接近答案)问题。在此之后，简单的问题代表不依赖于其他问题的子问题。一旦你解决了所有的子问题，把他们连接起来。连接所有“子解决方案”将为您提供原始问题的解决方案。恭喜！\n这种能力是解决问题的基石。 记住它（如果必须，请再次阅读此步骤）。\n> 如果我可以教给每个初学程序员一个解决问题的技能，那就是“减少问题技巧”。例如，假设您是一名新程序员，并且您被要求编写一个读取十个数字的程序，并确定哪个数字是第三大的。这对于一个全新的程序员来说，这可能是一个艰难的任务，即使它只需要基本的编程语法。如果你遇到困难，你应该把问题简化为更简单的问题。 找到最高的总数，而不是第三高的数字？ 还是太难了？ 如何找到三个数字中最大的一个？ 还是两个中较大的一个？将问题减少到您知道如何解决问题并编写解决方案的程度。 然后稍微扩展问题并重写解决方案以匹配，并继续前进，直到您回到开始的位置\n> — V.Anton Spraul\n\n#### 4.困住\n到现在为止，你可能正坐在那里思考 “嘿理查德......这很酷，但是如果我被困住甚至无法解决一个子问题怎么办？”。首先，请深吸一口气，然后，这是公平的，不要担心朋友，这种情况会发生在每个人的身上！不同之处在于最好的程序员/问题解决者相对于恼火更加对错误感兴趣。事实上，当你面对一场打击时，你有三件事需要尝试：\nDebug：逐步完成您的解决方案，试图找到出错的地方。 程序员称之为'debugging'（事实上，这都是调试器所做的）。\n> “调试的艺术是弄清楚你真正告诉你的程序要做什么，而不是你认为你告诉它要做的事情。”\n> — Andrew Singer\n\nReassess:退后一步。 从另一个角度看问题。 是否有任何东西可以抽象为更一般的方法？\n> “有时我们会在问题的细节上迷失方向，而忽略了在更一般的层面上解决问题的一般原则。[...]\n当然，这个经典的例子是一长串连续整数的总和，1 + 2 + 3 + ... + n，一个非常年轻的高斯很快就认识到它只是n（n + 1）/ 2，从而避免了不得不做的事情。”\n> — C.Jordan Ball\n\n旁注：另一种重新评估方式是重新开始。 删除所有内容，然后重新开始。 我是认真的。 你会惊讶于这是多么有效。\n\n搜索：啊，好吧，谷歌一下。不管你有什么问题，有人可能已经解决了。找到那个人/解决方案。事实上，即使您解决了问题，也要这样做！（你可以从其他人的解决方案中学到很多东西）。\n警告：不要寻找解决这个大问题的方法。 只寻找子问题的解决方案。 为什么？ 因为除非你有奋斗精神（甚至一点点），否则你将无法学到任何东西。 如果你什么都不学，那你浪费了你的时间。\n\n### 实践\n短时间内不要期望变得更好。如果你想成为一个好的问题解决者，去解决更多问题！实践。实践。实践。在你意识到这个问题可以通过“<在这里插入概念>”轻松解决之前，这只是一个时间问题。怎么练习？ wazoo里有各种选择！国际象棋谜题，数学问题，数独，围棋，大富翁，视频游戏，密码，bla ... bla ... bla ....事实上，成功人士的共同模式是他们练习“解决微观问题”的习惯。例如，Peter Thiel下棋，Elon Musk扮演视频游戏。\n> “拜伦里夫斯说：'如果你想看看三到五年里的商业领导力是什么样的，那就看看网络游戏中发生了什么。'快进到今天。Elon [Musk],Reid [Hoffman],Mark Zuckerberg以及其他许多人都认为游戏是他们在建立公司方面取得成功的基础。”\n> — Mary Meeker（2017年互联网趋势报告）\n\n这是否意味着您应该只玩游戏？ 一点也不。但是游戏意味着什么？没错，解决问题！所以，你应该做的是找到练习的出路。可以让你解决许多微观问题的东西（理想情况下，你喜欢的东西）。例如，我喜欢编码挑战。 每天，我都尝试解决至少一个挑战（通常在Coderbyte上）。就像我说的，所有问题都有相似的模式。\n\n### 总结\n这就是所有的内容了，现在，你更清楚“像程序员一样思考”意味着什么。你也知道解决问题是一项令人难以置信的培养技能（元技能）。好像这还不够，请注意您如何知道如何练习解决问题的技巧！这很酷吧，最后，我希望你们能够很多问题，你读这篇文章是正确的。 至少现在你知道如何解决它们了！（另外，您将了解到每个解决方案，您都会改进）。\n> “就在你认为自己已成功驾驭一个障碍时，另一个障碍就出现了。 但这就是让生活变得有趣的原因。[...]\n生命是一个突破这些障碍的过程 - 我们必须突破的一系列强化路线。\n每一次，你都会学到一些东西。\n每一次，你都会提升力量，智慧和观点。\n每一次，竞争的一点点都会消失。 直到剩下的就是最好的你。”\n> — 瑞安假日（障碍就是道路）\n\n现在，去解决一些问题！\n祝你好运🙂\n特别感谢C. Jordan Ball和V. Anton Spraul。 这里所有好的建议都来自他们。\n而且，如果没有Lambda School，我在短时间内获得的所有编程知识都不会发生。 十分感谢/推荐他们。\n谢谢阅读！ 😊如果你喜欢它，测试你能在5秒内击中点赞多少次。 这对你的手指有很好的有氧运动，并有助于其他人看到这个故事。","source":"_posts/如何像程序员一样思考.md","raw":"---\ntitle: 如何像程序员一样思考[英文翻译]\ntags: 英文翻译\ncategories: 英文翻译\nabbrlink: 30325\ndate: 2018-12-11 18:48:23\n---\n## 如何像程序员一样思考\n一堂教你解决问题的课程\n原文链接：[How to think like a programmer — lessons in problem solving](https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2)\n原文作者：[Richard Reis](https://medium.freecodecamp.org/@richardreeze)\n\n如果你对编程感兴趣，那你之前一定听说过这句话:\n> 世界上的每个人都应该去学习电脑编程，因为它可以教给你如何去思考   --史蒂夫·乔布斯\n\n<!-- more -->\n\n你一定想知道这句话究竟是什么意思，准确的来说，什么叫像程序员一样思考？我们又如何去做到？\n归根结底，这都是想用更有效的办法去解决问题。在这篇文章中，我将会教给你这种方法，通读这篇文章之后，你将会确切的知道如果去做才能成为一个解决问题的能手。\n\n### 为什么这很重要？\n因为解决问题是一种必备技能，我们每个人都会遇到大大小小的各种问题，我们平时都是怎么解决它们的呢？嗯。。。很随意。\n除非你拥有一套系统，一套可能会帮你解决问题的系统。（正如我刚开始编程时所作的一样）：\n1. 尝试一种解决方案\n2. 如果不起作用，尝试另一种解决方案\n3. 如果不起作用，重复第二步直到你运气好解决了问题\n\n看吧，有时候你会因为运气好解决了问题，但是这是一种特别糟糕的方式，既繁琐又浪费时间。\n所以做好的方法是首先有个要有个系统规划然后开始去做。\n> 几乎所有的老板都会重视解决问题的能力，比起编程语言的数量程度，调试和系统设计的能力，老板们可能更加重视解决问题的能力。展示计算思维或分解大型复杂问题的能力与工作所需的技术技能相比一样有价值 \n> — 黑客等级（2018年开发人员技能报告）\n\n### 拥有一个框架\n为了找到合适的框架，我遵循了Tim Ferriss关于学习的书“4小时厨师”的建议，去采访了两位十分令人印象深刻的人：C.Jordan Ball(在Coderbyte的65,000多名用户中排名第一或第二的人)，和 V.Anton Spraul(“像程序员一样思考：一个创造性解决问题的介绍”一书的作者)，我问了他们相同的问题，猜猜是什么？他们给我的回答非常相似，很快你就会知道是什么。\n旁注：这并不意味着他们用同一种方式做所有的事，每个人都是与众不同的，包括你。如果你有信念去开始我们会十分赞同，而且你很快就回收获更多。\n> 我看到新的程序员犯的最大的错误就是专注于学习语法而不是去学习如何去解决问题。\n> — V.Anton Spraulr\n\n那么遇到新的问题的应该怎么做呢？\n下面是步骤：\n#### 1.理解\n明确的知道遇到的问题是什么，很多难题之所以难是因为你不理解他们(这就是为什么这是第一步的原因)。如何知道你什么时候能够理解这个问题？答案是当你能用英语解释他们的时候。你是否还记得当你困在某个问题的时候，你尝试去解释他，你立马看到了你之前没有发现的逻辑漏洞吗？大多数程序员都有过这种感觉，这就是为什么你要写下你的问题、绘制涂鸦图或者告诉别人它的信息(或者用涂鸦图)。\n> 如果你不能用简单的术语来解释，你就不会理解它。\n> — Richard Feynman\n\n#### 2.计划\n如果你没有计划就不要去开始解决，请开始为你们解决方案制定计划，如果你不能写下确切的步骤，没有什么可以帮助你。在编程领域，这意味着不要立即开始黑客攻击。 首先请让你的大脑有时间分析问题并处理信息。为了拥有一个好的计划，请回答下面的问题：“给定输入X，返回输出Y所需的步骤是什么？”。\n旁注：程序员有一个很好的工具来帮助他们...期待你的评论！\n#### 3.划分\n请注意，这是最重要的一步，不要尝试去解决一个大的问题，那样你会哭的！相反，将其分解成一个个子问题，这些小问题相较而言会更加容易去解决。然后逐个去解决每个子问题，先从最简单的开始，最简单意思就是那些你知道答案(或更加接近答案)问题。在此之后，简单的问题代表不依赖于其他问题的子问题。一旦你解决了所有的子问题，把他们连接起来。连接所有“子解决方案”将为您提供原始问题的解决方案。恭喜！\n这种能力是解决问题的基石。 记住它（如果必须，请再次阅读此步骤）。\n> 如果我可以教给每个初学程序员一个解决问题的技能，那就是“减少问题技巧”。例如，假设您是一名新程序员，并且您被要求编写一个读取十个数字的程序，并确定哪个数字是第三大的。这对于一个全新的程序员来说，这可能是一个艰难的任务，即使它只需要基本的编程语法。如果你遇到困难，你应该把问题简化为更简单的问题。 找到最高的总数，而不是第三高的数字？ 还是太难了？ 如何找到三个数字中最大的一个？ 还是两个中较大的一个？将问题减少到您知道如何解决问题并编写解决方案的程度。 然后稍微扩展问题并重写解决方案以匹配，并继续前进，直到您回到开始的位置\n> — V.Anton Spraul\n\n#### 4.困住\n到现在为止，你可能正坐在那里思考 “嘿理查德......这很酷，但是如果我被困住甚至无法解决一个子问题怎么办？”。首先，请深吸一口气，然后，这是公平的，不要担心朋友，这种情况会发生在每个人的身上！不同之处在于最好的程序员/问题解决者相对于恼火更加对错误感兴趣。事实上，当你面对一场打击时，你有三件事需要尝试：\nDebug：逐步完成您的解决方案，试图找到出错的地方。 程序员称之为'debugging'（事实上，这都是调试器所做的）。\n> “调试的艺术是弄清楚你真正告诉你的程序要做什么，而不是你认为你告诉它要做的事情。”\n> — Andrew Singer\n\nReassess:退后一步。 从另一个角度看问题。 是否有任何东西可以抽象为更一般的方法？\n> “有时我们会在问题的细节上迷失方向，而忽略了在更一般的层面上解决问题的一般原则。[...]\n当然，这个经典的例子是一长串连续整数的总和，1 + 2 + 3 + ... + n，一个非常年轻的高斯很快就认识到它只是n（n + 1）/ 2，从而避免了不得不做的事情。”\n> — C.Jordan Ball\n\n旁注：另一种重新评估方式是重新开始。 删除所有内容，然后重新开始。 我是认真的。 你会惊讶于这是多么有效。\n\n搜索：啊，好吧，谷歌一下。不管你有什么问题，有人可能已经解决了。找到那个人/解决方案。事实上，即使您解决了问题，也要这样做！（你可以从其他人的解决方案中学到很多东西）。\n警告：不要寻找解决这个大问题的方法。 只寻找子问题的解决方案。 为什么？ 因为除非你有奋斗精神（甚至一点点），否则你将无法学到任何东西。 如果你什么都不学，那你浪费了你的时间。\n\n### 实践\n短时间内不要期望变得更好。如果你想成为一个好的问题解决者，去解决更多问题！实践。实践。实践。在你意识到这个问题可以通过“<在这里插入概念>”轻松解决之前，这只是一个时间问题。怎么练习？ wazoo里有各种选择！国际象棋谜题，数学问题，数独，围棋，大富翁，视频游戏，密码，bla ... bla ... bla ....事实上，成功人士的共同模式是他们练习“解决微观问题”的习惯。例如，Peter Thiel下棋，Elon Musk扮演视频游戏。\n> “拜伦里夫斯说：'如果你想看看三到五年里的商业领导力是什么样的，那就看看网络游戏中发生了什么。'快进到今天。Elon [Musk],Reid [Hoffman],Mark Zuckerberg以及其他许多人都认为游戏是他们在建立公司方面取得成功的基础。”\n> — Mary Meeker（2017年互联网趋势报告）\n\n这是否意味着您应该只玩游戏？ 一点也不。但是游戏意味着什么？没错，解决问题！所以，你应该做的是找到练习的出路。可以让你解决许多微观问题的东西（理想情况下，你喜欢的东西）。例如，我喜欢编码挑战。 每天，我都尝试解决至少一个挑战（通常在Coderbyte上）。就像我说的，所有问题都有相似的模式。\n\n### 总结\n这就是所有的内容了，现在，你更清楚“像程序员一样思考”意味着什么。你也知道解决问题是一项令人难以置信的培养技能（元技能）。好像这还不够，请注意您如何知道如何练习解决问题的技巧！这很酷吧，最后，我希望你们能够很多问题，你读这篇文章是正确的。 至少现在你知道如何解决它们了！（另外，您将了解到每个解决方案，您都会改进）。\n> “就在你认为自己已成功驾驭一个障碍时，另一个障碍就出现了。 但这就是让生活变得有趣的原因。[...]\n生命是一个突破这些障碍的过程 - 我们必须突破的一系列强化路线。\n每一次，你都会学到一些东西。\n每一次，你都会提升力量，智慧和观点。\n每一次，竞争的一点点都会消失。 直到剩下的就是最好的你。”\n> — 瑞安假日（障碍就是道路）\n\n现在，去解决一些问题！\n祝你好运🙂\n特别感谢C. Jordan Ball和V. Anton Spraul。 这里所有好的建议都来自他们。\n而且，如果没有Lambda School，我在短时间内获得的所有编程知识都不会发生。 十分感谢/推荐他们。\n谢谢阅读！ 😊如果你喜欢它，测试你能在5秒内击中点赞多少次。 这对你的手指有很好的有氧运动，并有助于其他人看到这个故事。","slug":"如何像程序员一样思考","published":1,"updated":"2020-03-09T03:01:45.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7ob004c1q2drt6g04ks","content":"<h2 id=\"如何像程序员一样思考\"><a href=\"#如何像程序员一样思考\" class=\"headerlink\" title=\"如何像程序员一样思考\"></a>如何像程序员一样思考</h2><p>一堂教你解决问题的课程<br>原文链接：<a href=\"https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2\" target=\"_blank\" rel=\"noopener\">How to think like a programmer — lessons in problem solving</a><br>原文作者：<a href=\"https://medium.freecodecamp.org/@richardreeze\" target=\"_blank\" rel=\"noopener\">Richard Reis</a></p>\n<p>如果你对编程感兴趣，那你之前一定听说过这句话:</p>\n<blockquote>\n<p>世界上的每个人都应该去学习电脑编程，因为它可以教给你如何去思考   –史蒂夫·乔布斯</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>你一定想知道这句话究竟是什么意思，准确的来说，什么叫像程序员一样思考？我们又如何去做到？<br>归根结底，这都是想用更有效的办法去解决问题。在这篇文章中，我将会教给你这种方法，通读这篇文章之后，你将会确切的知道如果去做才能成为一个解决问题的能手。</p>\n<h3 id=\"为什么这很重要？\"><a href=\"#为什么这很重要？\" class=\"headerlink\" title=\"为什么这很重要？\"></a>为什么这很重要？</h3><p>因为解决问题是一种必备技能，我们每个人都会遇到大大小小的各种问题，我们平时都是怎么解决它们的呢？嗯。。。很随意。<br>除非你拥有一套系统，一套可能会帮你解决问题的系统。（正如我刚开始编程时所作的一样）：</p>\n<ol>\n<li>尝试一种解决方案</li>\n<li>如果不起作用，尝试另一种解决方案</li>\n<li>如果不起作用，重复第二步直到你运气好解决了问题</li>\n</ol>\n<p>看吧，有时候你会因为运气好解决了问题，但是这是一种特别糟糕的方式，既繁琐又浪费时间。<br>所以做好的方法是首先有个要有个系统规划然后开始去做。</p>\n<blockquote>\n<p>几乎所有的老板都会重视解决问题的能力，比起编程语言的数量程度，调试和系统设计的能力，老板们可能更加重视解决问题的能力。展示计算思维或分解大型复杂问题的能力与工作所需的技术技能相比一样有价值<br>— 黑客等级（2018年开发人员技能报告）</p>\n</blockquote>\n<h3 id=\"拥有一个框架\"><a href=\"#拥有一个框架\" class=\"headerlink\" title=\"拥有一个框架\"></a>拥有一个框架</h3><p>为了找到合适的框架，我遵循了Tim Ferriss关于学习的书“4小时厨师”的建议，去采访了两位十分令人印象深刻的人：C.Jordan Ball(在Coderbyte的65,000多名用户中排名第一或第二的人)，和 V.Anton Spraul(“像程序员一样思考：一个创造性解决问题的介绍”一书的作者)，我问了他们相同的问题，猜猜是什么？他们给我的回答非常相似，很快你就会知道是什么。<br>旁注：这并不意味着他们用同一种方式做所有的事，每个人都是与众不同的，包括你。如果你有信念去开始我们会十分赞同，而且你很快就回收获更多。</p>\n<blockquote>\n<p>我看到新的程序员犯的最大的错误就是专注于学习语法而不是去学习如何去解决问题。<br>— V.Anton Spraulr</p>\n</blockquote>\n<p>那么遇到新的问题的应该怎么做呢？<br>下面是步骤：</p>\n<h4 id=\"1-理解\"><a href=\"#1-理解\" class=\"headerlink\" title=\"1.理解\"></a>1.理解</h4><p>明确的知道遇到的问题是什么，很多难题之所以难是因为你不理解他们(这就是为什么这是第一步的原因)。如何知道你什么时候能够理解这个问题？答案是当你能用英语解释他们的时候。你是否还记得当你困在某个问题的时候，你尝试去解释他，你立马看到了你之前没有发现的逻辑漏洞吗？大多数程序员都有过这种感觉，这就是为什么你要写下你的问题、绘制涂鸦图或者告诉别人它的信息(或者用涂鸦图)。</p>\n<blockquote>\n<p>如果你不能用简单的术语来解释，你就不会理解它。<br>— Richard Feynman</p>\n</blockquote>\n<h4 id=\"2-计划\"><a href=\"#2-计划\" class=\"headerlink\" title=\"2.计划\"></a>2.计划</h4><p>如果你没有计划就不要去开始解决，请开始为你们解决方案制定计划，如果你不能写下确切的步骤，没有什么可以帮助你。在编程领域，这意味着不要立即开始黑客攻击。 首先请让你的大脑有时间分析问题并处理信息。为了拥有一个好的计划，请回答下面的问题：“给定输入X，返回输出Y所需的步骤是什么？”。<br>旁注：程序员有一个很好的工具来帮助他们…期待你的评论！</p>\n<h4 id=\"3-划分\"><a href=\"#3-划分\" class=\"headerlink\" title=\"3.划分\"></a>3.划分</h4><p>请注意，这是最重要的一步，不要尝试去解决一个大的问题，那样你会哭的！相反，将其分解成一个个子问题，这些小问题相较而言会更加容易去解决。然后逐个去解决每个子问题，先从最简单的开始，最简单意思就是那些你知道答案(或更加接近答案)问题。在此之后，简单的问题代表不依赖于其他问题的子问题。一旦你解决了所有的子问题，把他们连接起来。连接所有“子解决方案”将为您提供原始问题的解决方案。恭喜！<br>这种能力是解决问题的基石。 记住它（如果必须，请再次阅读此步骤）。</p>\n<blockquote>\n<p>如果我可以教给每个初学程序员一个解决问题的技能，那就是“减少问题技巧”。例如，假设您是一名新程序员，并且您被要求编写一个读取十个数字的程序，并确定哪个数字是第三大的。这对于一个全新的程序员来说，这可能是一个艰难的任务，即使它只需要基本的编程语法。如果你遇到困难，你应该把问题简化为更简单的问题。 找到最高的总数，而不是第三高的数字？ 还是太难了？ 如何找到三个数字中最大的一个？ 还是两个中较大的一个？将问题减少到您知道如何解决问题并编写解决方案的程度。 然后稍微扩展问题并重写解决方案以匹配，并继续前进，直到您回到开始的位置<br>— V.Anton Spraul</p>\n</blockquote>\n<h4 id=\"4-困住\"><a href=\"#4-困住\" class=\"headerlink\" title=\"4.困住\"></a>4.困住</h4><p>到现在为止，你可能正坐在那里思考 “嘿理查德……这很酷，但是如果我被困住甚至无法解决一个子问题怎么办？”。首先，请深吸一口气，然后，这是公平的，不要担心朋友，这种情况会发生在每个人的身上！不同之处在于最好的程序员/问题解决者相对于恼火更加对错误感兴趣。事实上，当你面对一场打击时，你有三件事需要尝试：<br>Debug：逐步完成您的解决方案，试图找到出错的地方。 程序员称之为’debugging’（事实上，这都是调试器所做的）。</p>\n<blockquote>\n<p>“调试的艺术是弄清楚你真正告诉你的程序要做什么，而不是你认为你告诉它要做的事情。”<br>— Andrew Singer</p>\n</blockquote>\n<p>Reassess:退后一步。 从另一个角度看问题。 是否有任何东西可以抽象为更一般的方法？</p>\n<blockquote>\n<p>“有时我们会在问题的细节上迷失方向，而忽略了在更一般的层面上解决问题的一般原则。[…]<br>当然，这个经典的例子是一长串连续整数的总和，1 + 2 + 3 + … + n，一个非常年轻的高斯很快就认识到它只是n（n + 1）/ 2，从而避免了不得不做的事情。”<br>— C.Jordan Ball</p>\n</blockquote>\n<p>旁注：另一种重新评估方式是重新开始。 删除所有内容，然后重新开始。 我是认真的。 你会惊讶于这是多么有效。</p>\n<p>搜索：啊，好吧，谷歌一下。不管你有什么问题，有人可能已经解决了。找到那个人/解决方案。事实上，即使您解决了问题，也要这样做！（你可以从其他人的解决方案中学到很多东西）。<br>警告：不要寻找解决这个大问题的方法。 只寻找子问题的解决方案。 为什么？ 因为除非你有奋斗精神（甚至一点点），否则你将无法学到任何东西。 如果你什么都不学，那你浪费了你的时间。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>短时间内不要期望变得更好。如果你想成为一个好的问题解决者，去解决更多问题！实践。实践。实践。在你意识到这个问题可以通过“&lt;在这里插入概念&gt;”轻松解决之前，这只是一个时间问题。怎么练习？ wazoo里有各种选择！国际象棋谜题，数学问题，数独，围棋，大富翁，视频游戏，密码，bla … bla … bla ….事实上，成功人士的共同模式是他们练习“解决微观问题”的习惯。例如，Peter Thiel下棋，Elon Musk扮演视频游戏。</p>\n<blockquote>\n<p>“拜伦里夫斯说：’如果你想看看三到五年里的商业领导力是什么样的，那就看看网络游戏中发生了什么。’快进到今天。Elon [Musk],Reid [Hoffman],Mark Zuckerberg以及其他许多人都认为游戏是他们在建立公司方面取得成功的基础。”<br>— Mary Meeker（2017年互联网趋势报告）</p>\n</blockquote>\n<p>这是否意味着您应该只玩游戏？ 一点也不。但是游戏意味着什么？没错，解决问题！所以，你应该做的是找到练习的出路。可以让你解决许多微观问题的东西（理想情况下，你喜欢的东西）。例如，我喜欢编码挑战。 每天，我都尝试解决至少一个挑战（通常在Coderbyte上）。就像我说的，所有问题都有相似的模式。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这就是所有的内容了，现在，你更清楚“像程序员一样思考”意味着什么。你也知道解决问题是一项令人难以置信的培养技能（元技能）。好像这还不够，请注意您如何知道如何练习解决问题的技巧！这很酷吧，最后，我希望你们能够很多问题，你读这篇文章是正确的。 至少现在你知道如何解决它们了！（另外，您将了解到每个解决方案，您都会改进）。</p>\n<blockquote>\n<p>“就在你认为自己已成功驾驭一个障碍时，另一个障碍就出现了。 但这就是让生活变得有趣的原因。[…]<br>生命是一个突破这些障碍的过程 - 我们必须突破的一系列强化路线。<br>每一次，你都会学到一些东西。<br>每一次，你都会提升力量，智慧和观点。<br>每一次，竞争的一点点都会消失。 直到剩下的就是最好的你。”<br>— 瑞安假日（障碍就是道路）</p>\n</blockquote>\n<p>现在，去解决一些问题！<br>祝你好运🙂<br>特别感谢C. Jordan Ball和V. Anton Spraul。 这里所有好的建议都来自他们。<br>而且，如果没有Lambda School，我在短时间内获得的所有编程知识都不会发生。 十分感谢/推荐他们。<br>谢谢阅读！ 😊如果你喜欢它，测试你能在5秒内击中点赞多少次。 这对你的手指有很好的有氧运动，并有助于其他人看到这个故事。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"如何像程序员一样思考\"><a href=\"#如何像程序员一样思考\" class=\"headerlink\" title=\"如何像程序员一样思考\"></a>如何像程序员一样思考</h2><p>一堂教你解决问题的课程<br>原文链接：<a href=\"https://medium.freecodecamp.org/how-to-think-like-a-programmer-lessons-in-problem-solving-d1d8bf1de7d2\" target=\"_blank\" rel=\"noopener\">How to think like a programmer — lessons in problem solving</a><br>原文作者：<a href=\"https://medium.freecodecamp.org/@richardreeze\" target=\"_blank\" rel=\"noopener\">Richard Reis</a></p>\n<p>如果你对编程感兴趣，那你之前一定听说过这句话:</p>\n<blockquote>\n<p>世界上的每个人都应该去学习电脑编程，因为它可以教给你如何去思考   –史蒂夫·乔布斯</p>\n</blockquote>","more":"<p>你一定想知道这句话究竟是什么意思，准确的来说，什么叫像程序员一样思考？我们又如何去做到？<br>归根结底，这都是想用更有效的办法去解决问题。在这篇文章中，我将会教给你这种方法，通读这篇文章之后，你将会确切的知道如果去做才能成为一个解决问题的能手。</p>\n<h3 id=\"为什么这很重要？\"><a href=\"#为什么这很重要？\" class=\"headerlink\" title=\"为什么这很重要？\"></a>为什么这很重要？</h3><p>因为解决问题是一种必备技能，我们每个人都会遇到大大小小的各种问题，我们平时都是怎么解决它们的呢？嗯。。。很随意。<br>除非你拥有一套系统，一套可能会帮你解决问题的系统。（正如我刚开始编程时所作的一样）：</p>\n<ol>\n<li>尝试一种解决方案</li>\n<li>如果不起作用，尝试另一种解决方案</li>\n<li>如果不起作用，重复第二步直到你运气好解决了问题</li>\n</ol>\n<p>看吧，有时候你会因为运气好解决了问题，但是这是一种特别糟糕的方式，既繁琐又浪费时间。<br>所以做好的方法是首先有个要有个系统规划然后开始去做。</p>\n<blockquote>\n<p>几乎所有的老板都会重视解决问题的能力，比起编程语言的数量程度，调试和系统设计的能力，老板们可能更加重视解决问题的能力。展示计算思维或分解大型复杂问题的能力与工作所需的技术技能相比一样有价值<br>— 黑客等级（2018年开发人员技能报告）</p>\n</blockquote>\n<h3 id=\"拥有一个框架\"><a href=\"#拥有一个框架\" class=\"headerlink\" title=\"拥有一个框架\"></a>拥有一个框架</h3><p>为了找到合适的框架，我遵循了Tim Ferriss关于学习的书“4小时厨师”的建议，去采访了两位十分令人印象深刻的人：C.Jordan Ball(在Coderbyte的65,000多名用户中排名第一或第二的人)，和 V.Anton Spraul(“像程序员一样思考：一个创造性解决问题的介绍”一书的作者)，我问了他们相同的问题，猜猜是什么？他们给我的回答非常相似，很快你就会知道是什么。<br>旁注：这并不意味着他们用同一种方式做所有的事，每个人都是与众不同的，包括你。如果你有信念去开始我们会十分赞同，而且你很快就回收获更多。</p>\n<blockquote>\n<p>我看到新的程序员犯的最大的错误就是专注于学习语法而不是去学习如何去解决问题。<br>— V.Anton Spraulr</p>\n</blockquote>\n<p>那么遇到新的问题的应该怎么做呢？<br>下面是步骤：</p>\n<h4 id=\"1-理解\"><a href=\"#1-理解\" class=\"headerlink\" title=\"1.理解\"></a>1.理解</h4><p>明确的知道遇到的问题是什么，很多难题之所以难是因为你不理解他们(这就是为什么这是第一步的原因)。如何知道你什么时候能够理解这个问题？答案是当你能用英语解释他们的时候。你是否还记得当你困在某个问题的时候，你尝试去解释他，你立马看到了你之前没有发现的逻辑漏洞吗？大多数程序员都有过这种感觉，这就是为什么你要写下你的问题、绘制涂鸦图或者告诉别人它的信息(或者用涂鸦图)。</p>\n<blockquote>\n<p>如果你不能用简单的术语来解释，你就不会理解它。<br>— Richard Feynman</p>\n</blockquote>\n<h4 id=\"2-计划\"><a href=\"#2-计划\" class=\"headerlink\" title=\"2.计划\"></a>2.计划</h4><p>如果你没有计划就不要去开始解决，请开始为你们解决方案制定计划，如果你不能写下确切的步骤，没有什么可以帮助你。在编程领域，这意味着不要立即开始黑客攻击。 首先请让你的大脑有时间分析问题并处理信息。为了拥有一个好的计划，请回答下面的问题：“给定输入X，返回输出Y所需的步骤是什么？”。<br>旁注：程序员有一个很好的工具来帮助他们…期待你的评论！</p>\n<h4 id=\"3-划分\"><a href=\"#3-划分\" class=\"headerlink\" title=\"3.划分\"></a>3.划分</h4><p>请注意，这是最重要的一步，不要尝试去解决一个大的问题，那样你会哭的！相反，将其分解成一个个子问题，这些小问题相较而言会更加容易去解决。然后逐个去解决每个子问题，先从最简单的开始，最简单意思就是那些你知道答案(或更加接近答案)问题。在此之后，简单的问题代表不依赖于其他问题的子问题。一旦你解决了所有的子问题，把他们连接起来。连接所有“子解决方案”将为您提供原始问题的解决方案。恭喜！<br>这种能力是解决问题的基石。 记住它（如果必须，请再次阅读此步骤）。</p>\n<blockquote>\n<p>如果我可以教给每个初学程序员一个解决问题的技能，那就是“减少问题技巧”。例如，假设您是一名新程序员，并且您被要求编写一个读取十个数字的程序，并确定哪个数字是第三大的。这对于一个全新的程序员来说，这可能是一个艰难的任务，即使它只需要基本的编程语法。如果你遇到困难，你应该把问题简化为更简单的问题。 找到最高的总数，而不是第三高的数字？ 还是太难了？ 如何找到三个数字中最大的一个？ 还是两个中较大的一个？将问题减少到您知道如何解决问题并编写解决方案的程度。 然后稍微扩展问题并重写解决方案以匹配，并继续前进，直到您回到开始的位置<br>— V.Anton Spraul</p>\n</blockquote>\n<h4 id=\"4-困住\"><a href=\"#4-困住\" class=\"headerlink\" title=\"4.困住\"></a>4.困住</h4><p>到现在为止，你可能正坐在那里思考 “嘿理查德……这很酷，但是如果我被困住甚至无法解决一个子问题怎么办？”。首先，请深吸一口气，然后，这是公平的，不要担心朋友，这种情况会发生在每个人的身上！不同之处在于最好的程序员/问题解决者相对于恼火更加对错误感兴趣。事实上，当你面对一场打击时，你有三件事需要尝试：<br>Debug：逐步完成您的解决方案，试图找到出错的地方。 程序员称之为’debugging’（事实上，这都是调试器所做的）。</p>\n<blockquote>\n<p>“调试的艺术是弄清楚你真正告诉你的程序要做什么，而不是你认为你告诉它要做的事情。”<br>— Andrew Singer</p>\n</blockquote>\n<p>Reassess:退后一步。 从另一个角度看问题。 是否有任何东西可以抽象为更一般的方法？</p>\n<blockquote>\n<p>“有时我们会在问题的细节上迷失方向，而忽略了在更一般的层面上解决问题的一般原则。[…]<br>当然，这个经典的例子是一长串连续整数的总和，1 + 2 + 3 + … + n，一个非常年轻的高斯很快就认识到它只是n（n + 1）/ 2，从而避免了不得不做的事情。”<br>— C.Jordan Ball</p>\n</blockquote>\n<p>旁注：另一种重新评估方式是重新开始。 删除所有内容，然后重新开始。 我是认真的。 你会惊讶于这是多么有效。</p>\n<p>搜索：啊，好吧，谷歌一下。不管你有什么问题，有人可能已经解决了。找到那个人/解决方案。事实上，即使您解决了问题，也要这样做！（你可以从其他人的解决方案中学到很多东西）。<br>警告：不要寻找解决这个大问题的方法。 只寻找子问题的解决方案。 为什么？ 因为除非你有奋斗精神（甚至一点点），否则你将无法学到任何东西。 如果你什么都不学，那你浪费了你的时间。</p>\n<h3 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h3><p>短时间内不要期望变得更好。如果你想成为一个好的问题解决者，去解决更多问题！实践。实践。实践。在你意识到这个问题可以通过“&lt;在这里插入概念&gt;”轻松解决之前，这只是一个时间问题。怎么练习？ wazoo里有各种选择！国际象棋谜题，数学问题，数独，围棋，大富翁，视频游戏，密码，bla … bla … bla ….事实上，成功人士的共同模式是他们练习“解决微观问题”的习惯。例如，Peter Thiel下棋，Elon Musk扮演视频游戏。</p>\n<blockquote>\n<p>“拜伦里夫斯说：’如果你想看看三到五年里的商业领导力是什么样的，那就看看网络游戏中发生了什么。’快进到今天。Elon [Musk],Reid [Hoffman],Mark Zuckerberg以及其他许多人都认为游戏是他们在建立公司方面取得成功的基础。”<br>— Mary Meeker（2017年互联网趋势报告）</p>\n</blockquote>\n<p>这是否意味着您应该只玩游戏？ 一点也不。但是游戏意味着什么？没错，解决问题！所以，你应该做的是找到练习的出路。可以让你解决许多微观问题的东西（理想情况下，你喜欢的东西）。例如，我喜欢编码挑战。 每天，我都尝试解决至少一个挑战（通常在Coderbyte上）。就像我说的，所有问题都有相似的模式。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>这就是所有的内容了，现在，你更清楚“像程序员一样思考”意味着什么。你也知道解决问题是一项令人难以置信的培养技能（元技能）。好像这还不够，请注意您如何知道如何练习解决问题的技巧！这很酷吧，最后，我希望你们能够很多问题，你读这篇文章是正确的。 至少现在你知道如何解决它们了！（另外，您将了解到每个解决方案，您都会改进）。</p>\n<blockquote>\n<p>“就在你认为自己已成功驾驭一个障碍时，另一个障碍就出现了。 但这就是让生活变得有趣的原因。[…]<br>生命是一个突破这些障碍的过程 - 我们必须突破的一系列强化路线。<br>每一次，你都会学到一些东西。<br>每一次，你都会提升力量，智慧和观点。<br>每一次，竞争的一点点都会消失。 直到剩下的就是最好的你。”<br>— 瑞安假日（障碍就是道路）</p>\n</blockquote>\n<p>现在，去解决一些问题！<br>祝你好运🙂<br>特别感谢C. Jordan Ball和V. Anton Spraul。 这里所有好的建议都来自他们。<br>而且，如果没有Lambda School，我在短时间内获得的所有编程知识都不会发生。 十分感谢/推荐他们。<br>谢谢阅读！ 😊如果你喜欢它，测试你能在5秒内击中点赞多少次。 这对你的手指有很好的有氧运动，并有助于其他人看到这个故事。</p>"},{"title":"在 TypeScript 中使用 ESLint","abbrlink":30810,"date":"2019-04-14T04:00:34.000Z","_content":"### 使用eslint而不使用tslint\n由于性能问题，TypeScript 官方决定全面采用 ESLint，甚至把仓库（Repository）作为测试平台，而 ESLint 的 TypeScript 解析器也成为独立项目，专注解决双方兼容性问题。\n\nJavaScript 代码检验工具 ESLint 在 TypeScript 团队发布全面采用 ESLint 之后，发布 typescript-eslint 项目，以集中解决 TypeScript 和 ESLint 兼容性问题。而 ESLint 团队将不再维护 typescript-eslint-parser，也不会在 Npm 上发布，TypeScript 解析器转移至Github 的 typescript-eslint/parser。\n<!-- more -->\n### 安装\n```\nyarn add --dev eslint\nyarn add --dev @typescript-eslint/eslint-plugin\nyarn add --dev @typescript-eslint/parser\n```\n### 配置 eslint\n新建文件`.eslintrc.js`\n\n```\nmodule.exports = {\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  extends: ['plugin:@typescript-eslint/recommended'],\n}\n```\n\n### 配置 VScode\n下载`eslint`插件，设置保存修改时自动修复：\n\n```\n\"eslint.validate\": [\n  \"javascript\",\n  \"javascriptreact\",\n  \"typescriptreact\",\n  {\n    \"language\": \"typescript\",\n    \"autoFix\": true\n  }\n],\n\"eslint.enable\": true,\n\"eslint.autoFixOnSave\": true\n```\n### 常用规则\n控制缩进为两个空格\n\n```\n\"@typescript-eslint/indent\": [\"error\", 2]\n```\n字符串总为一个单引号包裹\n\n```\n\"quotes\": [1, \"single\"]\n```\n只要求自定义的方法设置返回类型\n\n```\n\"@typescript-eslint/explicit-function-return-type\": [\"warn\", {\n  allowExpressions: true\n}]\n```\n关闭`any`类型时的警告\n\n```\n\"@typescript-eslint/no-explicit-any\": [\"off\"]\n```\n\n","source":"_posts/在TypeScript中使用ESLint.md","raw":"---\ntitle: 在 TypeScript 中使用 ESLint\ntags: 前端\ncategories: 前端\nabbrlink: 30810\ndate: 2019-04-14 12:00:34\n---\n### 使用eslint而不使用tslint\n由于性能问题，TypeScript 官方决定全面采用 ESLint，甚至把仓库（Repository）作为测试平台，而 ESLint 的 TypeScript 解析器也成为独立项目，专注解决双方兼容性问题。\n\nJavaScript 代码检验工具 ESLint 在 TypeScript 团队发布全面采用 ESLint 之后，发布 typescript-eslint 项目，以集中解决 TypeScript 和 ESLint 兼容性问题。而 ESLint 团队将不再维护 typescript-eslint-parser，也不会在 Npm 上发布，TypeScript 解析器转移至Github 的 typescript-eslint/parser。\n<!-- more -->\n### 安装\n```\nyarn add --dev eslint\nyarn add --dev @typescript-eslint/eslint-plugin\nyarn add --dev @typescript-eslint/parser\n```\n### 配置 eslint\n新建文件`.eslintrc.js`\n\n```\nmodule.exports = {\n  parser: '@typescript-eslint/parser',\n  plugins: ['@typescript-eslint'],\n  extends: ['plugin:@typescript-eslint/recommended'],\n}\n```\n\n### 配置 VScode\n下载`eslint`插件，设置保存修改时自动修复：\n\n```\n\"eslint.validate\": [\n  \"javascript\",\n  \"javascriptreact\",\n  \"typescriptreact\",\n  {\n    \"language\": \"typescript\",\n    \"autoFix\": true\n  }\n],\n\"eslint.enable\": true,\n\"eslint.autoFixOnSave\": true\n```\n### 常用规则\n控制缩进为两个空格\n\n```\n\"@typescript-eslint/indent\": [\"error\", 2]\n```\n字符串总为一个单引号包裹\n\n```\n\"quotes\": [1, \"single\"]\n```\n只要求自定义的方法设置返回类型\n\n```\n\"@typescript-eslint/explicit-function-return-type\": [\"warn\", {\n  allowExpressions: true\n}]\n```\n关闭`any`类型时的警告\n\n```\n\"@typescript-eslint/no-explicit-any\": [\"off\"]\n```\n\n","slug":"在TypeScript中使用ESLint","published":1,"updated":"2020-03-09T03:01:45.089Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7oc004g1q2d724wroly","content":"<h3 id=\"使用eslint而不使用tslint\"><a href=\"#使用eslint而不使用tslint\" class=\"headerlink\" title=\"使用eslint而不使用tslint\"></a>使用eslint而不使用tslint</h3><p>由于性能问题，TypeScript 官方决定全面采用 ESLint，甚至把仓库（Repository）作为测试平台，而 ESLint 的 TypeScript 解析器也成为独立项目，专注解决双方兼容性问题。</p>\n<p>JavaScript 代码检验工具 ESLint 在 TypeScript 团队发布全面采用 ESLint 之后，发布 typescript-eslint 项目，以集中解决 TypeScript 和 ESLint 兼容性问题。而 ESLint 团队将不再维护 typescript-eslint-parser，也不会在 Npm 上发布，TypeScript 解析器转移至Github 的 typescript-eslint/parser。<br><a id=\"more\"></a></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add --dev eslint</span><br><span class=\"line\">yarn add --dev @typescript-eslint/eslint-plugin</span><br><span class=\"line\">yarn add --dev @typescript-eslint/parser</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-eslint\"><a href=\"#配置-eslint\" class=\"headerlink\" title=\"配置 eslint\"></a>配置 eslint</h3><p>新建文件<code>.eslintrc.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  parser: &apos;@typescript-eslint/parser&apos;,</span><br><span class=\"line\">  plugins: [&apos;@typescript-eslint&apos;],</span><br><span class=\"line\">  extends: [&apos;plugin:@typescript-eslint/recommended&apos;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-VScode\"><a href=\"#配置-VScode\" class=\"headerlink\" title=\"配置 VScode\"></a>配置 VScode</h3><p>下载<code>eslint</code>插件，设置保存修改时自动修复：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;eslint.validate&quot;: [</span><br><span class=\"line\">  &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;javascriptreact&quot;,</span><br><span class=\"line\">  &quot;typescriptreact&quot;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;language&quot;: &quot;typescript&quot;,</span><br><span class=\"line\">    &quot;autoFix&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">&quot;eslint.enable&quot;: true,</span><br><span class=\"line\">&quot;eslint.autoFixOnSave&quot;: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用规则\"><a href=\"#常用规则\" class=\"headerlink\" title=\"常用规则\"></a>常用规则</h3><p>控制缩进为两个空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;@typescript-eslint/indent&quot;: [&quot;error&quot;, 2]</span><br></pre></td></tr></table></figure>\n<p>字符串总为一个单引号包裹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;quotes&quot;: [1, &quot;single&quot;]</span><br></pre></td></tr></table></figure>\n<p>只要求自定义的方法设置返回类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;@typescript-eslint/explicit-function-return-type&quot;: [&quot;warn&quot;, &#123;</span><br><span class=\"line\">  allowExpressions: true</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>关闭<code>any</code>类型时的警告</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;@typescript-eslint/no-explicit-any&quot;: [&quot;off&quot;]</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"使用eslint而不使用tslint\"><a href=\"#使用eslint而不使用tslint\" class=\"headerlink\" title=\"使用eslint而不使用tslint\"></a>使用eslint而不使用tslint</h3><p>由于性能问题，TypeScript 官方决定全面采用 ESLint，甚至把仓库（Repository）作为测试平台，而 ESLint 的 TypeScript 解析器也成为独立项目，专注解决双方兼容性问题。</p>\n<p>JavaScript 代码检验工具 ESLint 在 TypeScript 团队发布全面采用 ESLint 之后，发布 typescript-eslint 项目，以集中解决 TypeScript 和 ESLint 兼容性问题。而 ESLint 团队将不再维护 typescript-eslint-parser，也不会在 Npm 上发布，TypeScript 解析器转移至Github 的 typescript-eslint/parser。<br>","more":"</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add --dev eslint</span><br><span class=\"line\">yarn add --dev @typescript-eslint/eslint-plugin</span><br><span class=\"line\">yarn add --dev @typescript-eslint/parser</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-eslint\"><a href=\"#配置-eslint\" class=\"headerlink\" title=\"配置 eslint\"></a>配置 eslint</h3><p>新建文件<code>.eslintrc.js</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  parser: &apos;@typescript-eslint/parser&apos;,</span><br><span class=\"line\">  plugins: [&apos;@typescript-eslint&apos;],</span><br><span class=\"line\">  extends: [&apos;plugin:@typescript-eslint/recommended&apos;],</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置-VScode\"><a href=\"#配置-VScode\" class=\"headerlink\" title=\"配置 VScode\"></a>配置 VScode</h3><p>下载<code>eslint</code>插件，设置保存修改时自动修复：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;eslint.validate&quot;: [</span><br><span class=\"line\">  &quot;javascript&quot;,</span><br><span class=\"line\">  &quot;javascriptreact&quot;,</span><br><span class=\"line\">  &quot;typescriptreact&quot;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;language&quot;: &quot;typescript&quot;,</span><br><span class=\"line\">    &quot;autoFix&quot;: true</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">],</span><br><span class=\"line\">&quot;eslint.enable&quot;: true,</span><br><span class=\"line\">&quot;eslint.autoFixOnSave&quot;: true</span><br></pre></td></tr></table></figure>\n<h3 id=\"常用规则\"><a href=\"#常用规则\" class=\"headerlink\" title=\"常用规则\"></a>常用规则</h3><p>控制缩进为两个空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;@typescript-eslint/indent&quot;: [&quot;error&quot;, 2]</span><br></pre></td></tr></table></figure>\n<p>字符串总为一个单引号包裹</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;quotes&quot;: [1, &quot;single&quot;]</span><br></pre></td></tr></table></figure>\n<p>只要求自定义的方法设置返回类型</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;@typescript-eslint/explicit-function-return-type&quot;: [&quot;warn&quot;, &#123;</span><br><span class=\"line\">  allowExpressions: true</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n<p>关闭<code>any</code>类型时的警告</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;@typescript-eslint/no-explicit-any&quot;: [&quot;off&quot;]</span><br></pre></td></tr></table></figure>"},{"title":"开源项目收集","abbrlink":11895,"date":"2018-03-14T03:19:23.000Z","_content":"\n以下为本人收集的开源项目，文章将会不定期更新。\n<!-- more -->\n## Android\n* [MarqueeViewLibrary](https://github.com/gongwen/MarqueeViewLibrary) 快速实现跑马灯\n* [SmartRefreshLayout](https://github.com/scwang90/SmartRefreshLayout) 下拉刷新\n* [material-dialogs](https://github.com/afollestad/material-dialogs) 弹窗\n* [NoHttp](https://github.com/yanzhenjie/NoHttp) Http标准协议框架\n* [FloatUtil](https://github.com/liuguangli/FloatUtil) 浮窗\n* [Alerter](https://github.com/Tapadoo/Alerter) 窗帘式提醒\n* [android-about-page](https://github.com/medyo/android-about-page) 关于页面\n* [update](https://github.com/czy1121/update) 检查更新\n* [Context-Menu.Android](https://github.com/Yalantis/Context-Menu.Android) 侧边菜单\n* [NumberProgressBar](https://github.com/daimajia/NumberProgressBar) 进度条\n* [EasyRecyclerView](https://github.com/Jude95/EasyRecyclerView/blob/master/README_ch.md) RecyclerView\n* [LoadingDialog](https://github.com/ForgetAll/LoadingDialog) 带成功和失败动画的loading\n* [LoadingDialog](https://github.com/gittjy/LoadingDialog) 仿ios的loading\n\n## Python\n* [show-me-the-code](https://github.com/Yixiaohan/show-me-the-code) Python 练习册\n* [wechat_jump_game](https://github.com/wangshub/wechat_jump_game) python 微信《跳一跳》辅助\n\n# C#\n* [serial-assistant](https://github.com/0xE8551CCB/serial-assistant) C# 及 WPF 框架编写的串口调试助手\n* [Arthas-WPFUI](https://github.com/1217950746/Arthas-WPFUI) WPF的UI库\n* [EntityFramework.Extended](https://github.com/zzzprojects/EntityFramework.Extended) EF 拓展库\n* [SqlSugar](https://github.com/sunkaixuan/SqlSugar) ORM框架\n* [SharpYaml](https://github.com/xoofx/SharpYaml) yaml序列化与反序列化\n\n# js\n* [SelectPage](https://github.com/TerryZ/SelectPage) 下拉选择器\n* [Layui](https://github.com/sentsin/layui/) ui\n\n## 其他\n* [gitignore](https://github.com/github/gitignore) gitignore 集合\n* [mui](https://github.com/dcloudio/mui) h5 开发 mobile app\n* [frp](https://github.com/fatedier/frp/blob/master/README_zh.md) 内网穿透工具","source":"_posts/开源项目收集.md","raw":"---\ntitle: 开源项目收集\ntags: 收藏\ncategories: 知识点\nabbrlink: 11895\ndate: 2018-03-14 11:19:23\n---\n\n以下为本人收集的开源项目，文章将会不定期更新。\n<!-- more -->\n## Android\n* [MarqueeViewLibrary](https://github.com/gongwen/MarqueeViewLibrary) 快速实现跑马灯\n* [SmartRefreshLayout](https://github.com/scwang90/SmartRefreshLayout) 下拉刷新\n* [material-dialogs](https://github.com/afollestad/material-dialogs) 弹窗\n* [NoHttp](https://github.com/yanzhenjie/NoHttp) Http标准协议框架\n* [FloatUtil](https://github.com/liuguangli/FloatUtil) 浮窗\n* [Alerter](https://github.com/Tapadoo/Alerter) 窗帘式提醒\n* [android-about-page](https://github.com/medyo/android-about-page) 关于页面\n* [update](https://github.com/czy1121/update) 检查更新\n* [Context-Menu.Android](https://github.com/Yalantis/Context-Menu.Android) 侧边菜单\n* [NumberProgressBar](https://github.com/daimajia/NumberProgressBar) 进度条\n* [EasyRecyclerView](https://github.com/Jude95/EasyRecyclerView/blob/master/README_ch.md) RecyclerView\n* [LoadingDialog](https://github.com/ForgetAll/LoadingDialog) 带成功和失败动画的loading\n* [LoadingDialog](https://github.com/gittjy/LoadingDialog) 仿ios的loading\n\n## Python\n* [show-me-the-code](https://github.com/Yixiaohan/show-me-the-code) Python 练习册\n* [wechat_jump_game](https://github.com/wangshub/wechat_jump_game) python 微信《跳一跳》辅助\n\n# C#\n* [serial-assistant](https://github.com/0xE8551CCB/serial-assistant) C# 及 WPF 框架编写的串口调试助手\n* [Arthas-WPFUI](https://github.com/1217950746/Arthas-WPFUI) WPF的UI库\n* [EntityFramework.Extended](https://github.com/zzzprojects/EntityFramework.Extended) EF 拓展库\n* [SqlSugar](https://github.com/sunkaixuan/SqlSugar) ORM框架\n* [SharpYaml](https://github.com/xoofx/SharpYaml) yaml序列化与反序列化\n\n# js\n* [SelectPage](https://github.com/TerryZ/SelectPage) 下拉选择器\n* [Layui](https://github.com/sentsin/layui/) ui\n\n## 其他\n* [gitignore](https://github.com/github/gitignore) gitignore 集合\n* [mui](https://github.com/dcloudio/mui) h5 开发 mobile app\n* [frp](https://github.com/fatedier/frp/blob/master/README_zh.md) 内网穿透工具","slug":"开源项目收集","published":1,"updated":"2020-03-09T03:01:45.090Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7oe004j1q2dumc6mi3p","content":"<p>以下为本人收集的开源项目，文章将会不定期更新。<br><a id=\"more\"></a></p>\n<h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><ul>\n<li><a href=\"https://github.com/gongwen/MarqueeViewLibrary\" target=\"_blank\" rel=\"noopener\">MarqueeViewLibrary</a> 快速实现跑马灯</li>\n<li><a href=\"https://github.com/scwang90/SmartRefreshLayout\" target=\"_blank\" rel=\"noopener\">SmartRefreshLayout</a> 下拉刷新</li>\n<li><a href=\"https://github.com/afollestad/material-dialogs\" target=\"_blank\" rel=\"noopener\">material-dialogs</a> 弹窗</li>\n<li><a href=\"https://github.com/yanzhenjie/NoHttp\" target=\"_blank\" rel=\"noopener\">NoHttp</a> Http标准协议框架</li>\n<li><a href=\"https://github.com/liuguangli/FloatUtil\" target=\"_blank\" rel=\"noopener\">FloatUtil</a> 浮窗</li>\n<li><a href=\"https://github.com/Tapadoo/Alerter\" target=\"_blank\" rel=\"noopener\">Alerter</a> 窗帘式提醒</li>\n<li><a href=\"https://github.com/medyo/android-about-page\" target=\"_blank\" rel=\"noopener\">android-about-page</a> 关于页面</li>\n<li><a href=\"https://github.com/czy1121/update\" target=\"_blank\" rel=\"noopener\">update</a> 检查更新</li>\n<li><a href=\"https://github.com/Yalantis/Context-Menu.Android\" target=\"_blank\" rel=\"noopener\">Context-Menu.Android</a> 侧边菜单</li>\n<li><a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"noopener\">NumberProgressBar</a> 进度条</li>\n<li><a href=\"https://github.com/Jude95/EasyRecyclerView/blob/master/README_ch.md\" target=\"_blank\" rel=\"noopener\">EasyRecyclerView</a> RecyclerView</li>\n<li><a href=\"https://github.com/ForgetAll/LoadingDialog\" target=\"_blank\" rel=\"noopener\">LoadingDialog</a> 带成功和失败动画的loading</li>\n<li><a href=\"https://github.com/gittjy/LoadingDialog\" target=\"_blank\" rel=\"noopener\">LoadingDialog</a> 仿ios的loading</li>\n</ul>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><ul>\n<li><a href=\"https://github.com/Yixiaohan/show-me-the-code\" target=\"_blank\" rel=\"noopener\">show-me-the-code</a> Python 练习册</li>\n<li><a href=\"https://github.com/wangshub/wechat_jump_game\" target=\"_blank\" rel=\"noopener\">wechat_jump_game</a> python 微信《跳一跳》辅助</li>\n</ul>\n<h1 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h1><ul>\n<li><a href=\"https://github.com/0xE8551CCB/serial-assistant\" target=\"_blank\" rel=\"noopener\">serial-assistant</a> C# 及 WPF 框架编写的串口调试助手</li>\n<li><a href=\"https://github.com/1217950746/Arthas-WPFUI\" target=\"_blank\" rel=\"noopener\">Arthas-WPFUI</a> WPF的UI库</li>\n<li><a href=\"https://github.com/zzzprojects/EntityFramework.Extended\" target=\"_blank\" rel=\"noopener\">EntityFramework.Extended</a> EF 拓展库</li>\n<li><a href=\"https://github.com/sunkaixuan/SqlSugar\" target=\"_blank\" rel=\"noopener\">SqlSugar</a> ORM框架</li>\n<li><a href=\"https://github.com/xoofx/SharpYaml\" target=\"_blank\" rel=\"noopener\">SharpYaml</a> yaml序列化与反序列化</li>\n</ul>\n<h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><ul>\n<li><a href=\"https://github.com/TerryZ/SelectPage\" target=\"_blank\" rel=\"noopener\">SelectPage</a> 下拉选择器</li>\n<li><a href=\"https://github.com/sentsin/layui/\" target=\"_blank\" rel=\"noopener\">Layui</a> ui</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">gitignore</a> gitignore 集合</li>\n<li><a href=\"https://github.com/dcloudio/mui\" target=\"_blank\" rel=\"noopener\">mui</a> h5 开发 mobile app</li>\n<li><a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">frp</a> 内网穿透工具</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>以下为本人收集的开源项目，文章将会不定期更新。<br>","more":"</p>\n<h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><ul>\n<li><a href=\"https://github.com/gongwen/MarqueeViewLibrary\" target=\"_blank\" rel=\"noopener\">MarqueeViewLibrary</a> 快速实现跑马灯</li>\n<li><a href=\"https://github.com/scwang90/SmartRefreshLayout\" target=\"_blank\" rel=\"noopener\">SmartRefreshLayout</a> 下拉刷新</li>\n<li><a href=\"https://github.com/afollestad/material-dialogs\" target=\"_blank\" rel=\"noopener\">material-dialogs</a> 弹窗</li>\n<li><a href=\"https://github.com/yanzhenjie/NoHttp\" target=\"_blank\" rel=\"noopener\">NoHttp</a> Http标准协议框架</li>\n<li><a href=\"https://github.com/liuguangli/FloatUtil\" target=\"_blank\" rel=\"noopener\">FloatUtil</a> 浮窗</li>\n<li><a href=\"https://github.com/Tapadoo/Alerter\" target=\"_blank\" rel=\"noopener\">Alerter</a> 窗帘式提醒</li>\n<li><a href=\"https://github.com/medyo/android-about-page\" target=\"_blank\" rel=\"noopener\">android-about-page</a> 关于页面</li>\n<li><a href=\"https://github.com/czy1121/update\" target=\"_blank\" rel=\"noopener\">update</a> 检查更新</li>\n<li><a href=\"https://github.com/Yalantis/Context-Menu.Android\" target=\"_blank\" rel=\"noopener\">Context-Menu.Android</a> 侧边菜单</li>\n<li><a href=\"https://github.com/daimajia/NumberProgressBar\" target=\"_blank\" rel=\"noopener\">NumberProgressBar</a> 进度条</li>\n<li><a href=\"https://github.com/Jude95/EasyRecyclerView/blob/master/README_ch.md\" target=\"_blank\" rel=\"noopener\">EasyRecyclerView</a> RecyclerView</li>\n<li><a href=\"https://github.com/ForgetAll/LoadingDialog\" target=\"_blank\" rel=\"noopener\">LoadingDialog</a> 带成功和失败动画的loading</li>\n<li><a href=\"https://github.com/gittjy/LoadingDialog\" target=\"_blank\" rel=\"noopener\">LoadingDialog</a> 仿ios的loading</li>\n</ul>\n<h2 id=\"Python\"><a href=\"#Python\" class=\"headerlink\" title=\"Python\"></a>Python</h2><ul>\n<li><a href=\"https://github.com/Yixiaohan/show-me-the-code\" target=\"_blank\" rel=\"noopener\">show-me-the-code</a> Python 练习册</li>\n<li><a href=\"https://github.com/wangshub/wechat_jump_game\" target=\"_blank\" rel=\"noopener\">wechat_jump_game</a> python 微信《跳一跳》辅助</li>\n</ul>\n<h1 id=\"C\"><a href=\"#C\" class=\"headerlink\" title=\"C\"></a>C</h1><ul>\n<li><a href=\"https://github.com/0xE8551CCB/serial-assistant\" target=\"_blank\" rel=\"noopener\">serial-assistant</a> C# 及 WPF 框架编写的串口调试助手</li>\n<li><a href=\"https://github.com/1217950746/Arthas-WPFUI\" target=\"_blank\" rel=\"noopener\">Arthas-WPFUI</a> WPF的UI库</li>\n<li><a href=\"https://github.com/zzzprojects/EntityFramework.Extended\" target=\"_blank\" rel=\"noopener\">EntityFramework.Extended</a> EF 拓展库</li>\n<li><a href=\"https://github.com/sunkaixuan/SqlSugar\" target=\"_blank\" rel=\"noopener\">SqlSugar</a> ORM框架</li>\n<li><a href=\"https://github.com/xoofx/SharpYaml\" target=\"_blank\" rel=\"noopener\">SharpYaml</a> yaml序列化与反序列化</li>\n</ul>\n<h1 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h1><ul>\n<li><a href=\"https://github.com/TerryZ/SelectPage\" target=\"_blank\" rel=\"noopener\">SelectPage</a> 下拉选择器</li>\n<li><a href=\"https://github.com/sentsin/layui/\" target=\"_blank\" rel=\"noopener\">Layui</a> ui</li>\n</ul>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li><a href=\"https://github.com/github/gitignore\" target=\"_blank\" rel=\"noopener\">gitignore</a> gitignore 集合</li>\n<li><a href=\"https://github.com/dcloudio/mui\" target=\"_blank\" rel=\"noopener\">mui</a> h5 开发 mobile app</li>\n<li><a href=\"https://github.com/fatedier/frp/blob/master/README_zh.md\" target=\"_blank\" rel=\"noopener\">frp</a> 内网穿透工具</li>\n</ul>"},{"title":"快速搭建ssr服务","abbrlink":33668,"date":"2019-12-05T10:48:23.000Z","_content":"\n## 使用ss-fly\n### 安装git\n```\nyum -y install git\n```\n### 下载一键安装脚本\n```\ngit clone -b master https://github.com/flyzy2005/ss-fly\n// 或者：https://github.com/AlanLang/ss-fly.git\n```\n\n<!-- more -->\n\n### 运行脚本\n```\nss-fly/ss-fly.sh -i 密码 端口\n```\n### 其他操作\n```\n启动：/etc/init.d/ss-fly start\n停止：/etc/init.d/ss-fly stop\n重启：/etc/init.d/ss-fly restart\n状态：/etc/init.d/ss-fly status\n查看ss链接：ss-fly/ss-fly.sh -sslink\n修改配置文件：vim /etc/shadowsocks.json\n```\n### 卸载\n```\nss-fly/ss-fly.sh -uninstall\n```\n### 搭建ssr\n```\nss-fly/ss-fly.sh -ssr\n```\n### 相关操作ssr命令\n```\n启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status\n配置文件路径：/etc/shadowsocks.json\n日志文件路径：/var/log/shadowsocks.log\n代码安装目录：/usr/local/shadowsocks\n```\n### 卸载ssr\n```\n ./shadowsocksR.sh uninstall\n```\n## 一键开启BBR加速\n```\nss-fly/ss-fly.sh -bbr\n```\n装完后需要重启系统，输入y即可立即重启，或者之后输入reboot命令重启。\n判断BBR加速有没有开启成功。输入以下命令：\n```\nsysctl net.ipv4.tcp_available_congestion_control\n```\n如果返回值为：\n```\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno\n```\n\n## 使用shadowsocks-all\n### 下载并安装\n```\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n### 安装bbr加速\n```\nwget -N --no-check-certificate \"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh\n```\n选2 安装BBR plus\n重启\n```\n./tcp.sh\n```\n选 7 使用BBR plus 加速","source":"_posts/快速搭建ss服务.md","raw":"---\ntitle: 快速搭建ssr服务\ntags: 文章\ncategories: 文章\nabbrlink: 33668\ndate: 2019-12-05 18:48:23\n---\n\n## 使用ss-fly\n### 安装git\n```\nyum -y install git\n```\n### 下载一键安装脚本\n```\ngit clone -b master https://github.com/flyzy2005/ss-fly\n// 或者：https://github.com/AlanLang/ss-fly.git\n```\n\n<!-- more -->\n\n### 运行脚本\n```\nss-fly/ss-fly.sh -i 密码 端口\n```\n### 其他操作\n```\n启动：/etc/init.d/ss-fly start\n停止：/etc/init.d/ss-fly stop\n重启：/etc/init.d/ss-fly restart\n状态：/etc/init.d/ss-fly status\n查看ss链接：ss-fly/ss-fly.sh -sslink\n修改配置文件：vim /etc/shadowsocks.json\n```\n### 卸载\n```\nss-fly/ss-fly.sh -uninstall\n```\n### 搭建ssr\n```\nss-fly/ss-fly.sh -ssr\n```\n### 相关操作ssr命令\n```\n启动：/etc/init.d/shadowsocks start\n停止：/etc/init.d/shadowsocks stop\n重启：/etc/init.d/shadowsocks restart\n状态：/etc/init.d/shadowsocks status\n配置文件路径：/etc/shadowsocks.json\n日志文件路径：/var/log/shadowsocks.log\n代码安装目录：/usr/local/shadowsocks\n```\n### 卸载ssr\n```\n ./shadowsocksR.sh uninstall\n```\n## 一键开启BBR加速\n```\nss-fly/ss-fly.sh -bbr\n```\n装完后需要重启系统，输入y即可立即重启，或者之后输入reboot命令重启。\n判断BBR加速有没有开启成功。输入以下命令：\n```\nsysctl net.ipv4.tcp_available_congestion_control\n```\n如果返回值为：\n```\nnet.ipv4.tcp_available_congestion_control = bbr cubic reno\n```\n\n## 使用shadowsocks-all\n### 下载并安装\n```\nwget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh\nchmod +x shadowsocks-all.sh\n./shadowsocks-all.sh 2>&1 | tee shadowsocks-all.log\n```\n### 安装bbr加速\n```\nwget -N --no-check-certificate \"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh\n```\n选2 安装BBR plus\n重启\n```\n./tcp.sh\n```\n选 7 使用BBR plus 加速","slug":"快速搭建ss服务","published":1,"updated":"2020-03-09T03:01:45.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7of004m1q2d98mhcbzi","content":"<h2 id=\"使用ss-fly\"><a href=\"#使用ss-fly\" class=\"headerlink\" title=\"使用ss-fly\"></a>使用ss-fly</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载一键安装脚本\"><a href=\"#下载一键安装脚本\" class=\"headerlink\" title=\"下载一键安装脚本\"></a>下载一键安装脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/flyzy2005/ss-fly</span><br><span class=\"line\">// 或者：https://github.com/AlanLang/ss-fly.git</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-fly/ss-fly.sh -i 密码 端口</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动：/etc/init.d/ss-fly start</span><br><span class=\"line\">停止：/etc/init.d/ss-fly stop</span><br><span class=\"line\">重启：/etc/init.d/ss-fly restart</span><br><span class=\"line\">状态：/etc/init.d/ss-fly status</span><br><span class=\"line\">查看ss链接：ss-fly/ss-fly.sh -sslink</span><br><span class=\"line\">修改配置文件：vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-fly/ss-fly.sh -uninstall</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建ssr\"><a href=\"#搭建ssr\" class=\"headerlink\" title=\"搭建ssr\"></a>搭建ssr</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-fly/ss-fly.sh -ssr</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关操作ssr命令\"><a href=\"#相关操作ssr命令\" class=\"headerlink\" title=\"相关操作ssr命令\"></a>相关操作ssr命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动：/etc/init.d/shadowsocks start</span><br><span class=\"line\">停止：/etc/init.d/shadowsocks stop</span><br><span class=\"line\">重启：/etc/init.d/shadowsocks restart</span><br><span class=\"line\">状态：/etc/init.d/shadowsocks status</span><br><span class=\"line\">配置文件路径：/etc/shadowsocks.json</span><br><span class=\"line\">日志文件路径：/var/log/shadowsocks.log</span><br><span class=\"line\">代码安装目录：/usr/local/shadowsocks</span><br></pre></td></tr></table></figure>\n<h3 id=\"卸载ssr\"><a href=\"#卸载ssr\" class=\"headerlink\" title=\"卸载ssr\"></a>卸载ssr</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocksR.sh uninstall</span><br></pre></td></tr></table></figure>\n<h2 id=\"一键开启BBR加速\"><a href=\"#一键开启BBR加速\" class=\"headerlink\" title=\"一键开启BBR加速\"></a>一键开启BBR加速</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-fly/ss-fly.sh -bbr</span><br></pre></td></tr></table></figure>\n<p>装完后需要重启系统，输入y即可立即重启，或者之后输入reboot命令重启。<br>判断BBR加速有没有开启成功。输入以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure></p>\n<p>如果返回值为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用shadowsocks-all\"><a href=\"#使用shadowsocks-all\" class=\"headerlink\" title=\"使用shadowsocks-all\"></a>使用shadowsocks-all</h2><h3 id=\"下载并安装\"><a href=\"#下载并安装\" class=\"headerlink\" title=\"下载并安装\"></a>下载并安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装bbr加速\"><a href=\"#安装bbr加速\" class=\"headerlink\" title=\"安装bbr加速\"></a>安装bbr加速</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>\n<p>选2 安装BBR plus<br>重启<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./tcp.sh</span><br></pre></td></tr></table></figure></p>\n<p>选 7 使用BBR plus 加速</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"使用ss-fly\"><a href=\"#使用ss-fly\" class=\"headerlink\" title=\"使用ss-fly\"></a>使用ss-fly</h2><h3 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载一键安装脚本\"><a href=\"#下载一键安装脚本\" class=\"headerlink\" title=\"下载一键安装脚本\"></a>下载一键安装脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone -b master https://github.com/flyzy2005/ss-fly</span><br><span class=\"line\">// 或者：https://github.com/AlanLang/ss-fly.git</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"运行脚本\"><a href=\"#运行脚本\" class=\"headerlink\" title=\"运行脚本\"></a>运行脚本</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-fly/ss-fly.sh -i 密码 端口</span><br></pre></td></tr></table></figure>\n<h3 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动：/etc/init.d/ss-fly start</span><br><span class=\"line\">停止：/etc/init.d/ss-fly stop</span><br><span class=\"line\">重启：/etc/init.d/ss-fly restart</span><br><span class=\"line\">状态：/etc/init.d/ss-fly status</span><br><span class=\"line\">查看ss链接：ss-fly/ss-fly.sh -sslink</span><br><span class=\"line\">修改配置文件：vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>\n<h3 id=\"卸载\"><a href=\"#卸载\" class=\"headerlink\" title=\"卸载\"></a>卸载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-fly/ss-fly.sh -uninstall</span><br></pre></td></tr></table></figure>\n<h3 id=\"搭建ssr\"><a href=\"#搭建ssr\" class=\"headerlink\" title=\"搭建ssr\"></a>搭建ssr</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-fly/ss-fly.sh -ssr</span><br></pre></td></tr></table></figure>\n<h3 id=\"相关操作ssr命令\"><a href=\"#相关操作ssr命令\" class=\"headerlink\" title=\"相关操作ssr命令\"></a>相关操作ssr命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动：/etc/init.d/shadowsocks start</span><br><span class=\"line\">停止：/etc/init.d/shadowsocks stop</span><br><span class=\"line\">重启：/etc/init.d/shadowsocks restart</span><br><span class=\"line\">状态：/etc/init.d/shadowsocks status</span><br><span class=\"line\">配置文件路径：/etc/shadowsocks.json</span><br><span class=\"line\">日志文件路径：/var/log/shadowsocks.log</span><br><span class=\"line\">代码安装目录：/usr/local/shadowsocks</span><br></pre></td></tr></table></figure>\n<h3 id=\"卸载ssr\"><a href=\"#卸载ssr\" class=\"headerlink\" title=\"卸载ssr\"></a>卸载ssr</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shadowsocksR.sh uninstall</span><br></pre></td></tr></table></figure>\n<h2 id=\"一键开启BBR加速\"><a href=\"#一键开启BBR加速\" class=\"headerlink\" title=\"一键开启BBR加速\"></a>一键开启BBR加速</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ss-fly/ss-fly.sh -bbr</span><br></pre></td></tr></table></figure>\n<p>装完后需要重启系统，输入y即可立即重启，或者之后输入reboot命令重启。<br>判断BBR加速有没有开启成功。输入以下命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure></p>\n<p>如果返回值为：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用shadowsocks-all\"><a href=\"#使用shadowsocks-all\" class=\"headerlink\" title=\"使用shadowsocks-all\"></a>使用shadowsocks-all</h2><h3 id=\"下载并安装\"><a href=\"#下载并安装\" class=\"headerlink\" title=\"下载并安装\"></a>下载并安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget --no-check-certificate -O shadowsocks-all.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-all.sh</span><br><span class=\"line\">chmod +x shadowsocks-all.sh</span><br><span class=\"line\">./shadowsocks-all.sh 2&gt;&amp;1 | tee shadowsocks-all.log</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装bbr加速\"><a href=\"#安装bbr加速\" class=\"headerlink\" title=\"安装bbr加速\"></a>安装bbr加速</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -N --no-check-certificate &quot;https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh</span><br></pre></td></tr></table></figure>\n<p>选2 安装BBR plus<br>重启<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./tcp.sh</span><br></pre></td></tr></table></figure></p>\n<p>选 7 使用BBR plus 加速</p>"},{"title":"批量移动文件","abbrlink":"a142eb14","date":"2018-02-02T03:19:23.000Z","_content":"`files-move.exe`可以批量更新上传的压缩包里面的所有文件，根据一个配置文件来分配目录，如果目标目录里已有该文件则先把文件移动到备份文件夹里，避免丢失原文件。\n[GitHub](https://github.com/AlanLang/files-move)\n<!-- more -->\n## 使用方法\n### 1. 新建配置文件 `config.json` 配置要移动的文件和目标路径\n```\n{\n    \"version\": \"1.0.0\",\n     \"person\": \"开发者\",\n    \"basepath\":\"E:\\test\",\n    \"files\":[\n        {\"name\":\"text1.txt\",\"path\":\"\"},\n        {\"name\":\"text2.txt\",\"path\":\"demo\"},\n        {\"name\":\"text3.txt\",\"path\":\"demo\\\\demo1\"}\n    ]\n}\n```\n### 2. 将配置文件和其他要移动的文件放在一起\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-10/77737370.jpg)\n\n### 3. 将文件们压缩成 `zip` \n目前系统只支持zip类型的压缩文件\n\n### 4. 运行本项目或者打开项目生成的 `exe` 文件\n点击 `打开` 按钮，选择刚才配置的压缩文件即可。\n\n### 5. 备注\n本项目已引用 `Costura.Fody`，即生成的可执行文件为绿色单文件，可以随意拿到任何地方使用（仅限Windows）。\n","source":"_posts/批量移动文件.md","raw":"---\ntitle: 批量移动文件\ntags: 'C#'\ncategories: 小工具\nabbrlink: a142eb14\ndate: 2018-02-02 11:19:23\n---\n`files-move.exe`可以批量更新上传的压缩包里面的所有文件，根据一个配置文件来分配目录，如果目标目录里已有该文件则先把文件移动到备份文件夹里，避免丢失原文件。\n[GitHub](https://github.com/AlanLang/files-move)\n<!-- more -->\n## 使用方法\n### 1. 新建配置文件 `config.json` 配置要移动的文件和目标路径\n```\n{\n    \"version\": \"1.0.0\",\n     \"person\": \"开发者\",\n    \"basepath\":\"E:\\test\",\n    \"files\":[\n        {\"name\":\"text1.txt\",\"path\":\"\"},\n        {\"name\":\"text2.txt\",\"path\":\"demo\"},\n        {\"name\":\"text3.txt\",\"path\":\"demo\\\\demo1\"}\n    ]\n}\n```\n### 2. 将配置文件和其他要移动的文件放在一起\n![](http://oqdzx28cd.bkt.clouddn.com/18-1-10/77737370.jpg)\n\n### 3. 将文件们压缩成 `zip` \n目前系统只支持zip类型的压缩文件\n\n### 4. 运行本项目或者打开项目生成的 `exe` 文件\n点击 `打开` 按钮，选择刚才配置的压缩文件即可。\n\n### 5. 备注\n本项目已引用 `Costura.Fody`，即生成的可执行文件为绿色单文件，可以随意拿到任何地方使用（仅限Windows）。\n","slug":"批量移动文件","published":1,"updated":"2020-03-09T03:01:45.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7og004q1q2durhttuh2","content":"<p><code>files-move.exe</code>可以批量更新上传的压缩包里面的所有文件，根据一个配置文件来分配目录，如果目标目录里已有该文件则先把文件移动到备份文件夹里，避免丢失原文件。<br><a href=\"https://github.com/AlanLang/files-move\" target=\"_blank\" rel=\"noopener\">GitHub</a><br><a id=\"more\"></a></p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"1-新建配置文件-config-json-配置要移动的文件和目标路径\"><a href=\"#1-新建配置文件-config-json-配置要移动的文件和目标路径\" class=\"headerlink\" title=\"1. 新建配置文件 config.json 配置要移动的文件和目标路径\"></a>1. 新建配置文件 <code>config.json</code> 配置要移动的文件和目标路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">     &quot;person&quot;: &quot;开发者&quot;,</span><br><span class=\"line\">    &quot;basepath&quot;:&quot;E:\\test&quot;,</span><br><span class=\"line\">    &quot;files&quot;:[</span><br><span class=\"line\">        &#123;&quot;name&quot;:&quot;text1.txt&quot;,&quot;path&quot;:&quot;&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;name&quot;:&quot;text2.txt&quot;,&quot;path&quot;:&quot;demo&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;name&quot;:&quot;text3.txt&quot;,&quot;path&quot;:&quot;demo\\\\demo1&quot;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-将配置文件和其他要移动的文件放在一起\"><a href=\"#2-将配置文件和其他要移动的文件放在一起\" class=\"headerlink\" title=\"2. 将配置文件和其他要移动的文件放在一起\"></a>2. 将配置文件和其他要移动的文件放在一起</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-10/77737370.jpg\" alt></p>\n<h3 id=\"3-将文件们压缩成-zip\"><a href=\"#3-将文件们压缩成-zip\" class=\"headerlink\" title=\"3. 将文件们压缩成 zip\"></a>3. 将文件们压缩成 <code>zip</code></h3><p>目前系统只支持zip类型的压缩文件</p>\n<h3 id=\"4-运行本项目或者打开项目生成的-exe-文件\"><a href=\"#4-运行本项目或者打开项目生成的-exe-文件\" class=\"headerlink\" title=\"4. 运行本项目或者打开项目生成的 exe 文件\"></a>4. 运行本项目或者打开项目生成的 <code>exe</code> 文件</h3><p>点击 <code>打开</code> 按钮，选择刚才配置的压缩文件即可。</p>\n<h3 id=\"5-备注\"><a href=\"#5-备注\" class=\"headerlink\" title=\"5. 备注\"></a>5. 备注</h3><p>本项目已引用 <code>Costura.Fody</code>，即生成的可执行文件为绿色单文件，可以随意拿到任何地方使用（仅限Windows）。</p>\n","site":{"data":{}},"excerpt":"<p><code>files-move.exe</code>可以批量更新上传的压缩包里面的所有文件，根据一个配置文件来分配目录，如果目标目录里已有该文件则先把文件移动到备份文件夹里，避免丢失原文件。<br><a href=\"https://github.com/AlanLang/files-move\" target=\"_blank\" rel=\"noopener\">GitHub</a><br>","more":"</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><h3 id=\"1-新建配置文件-config-json-配置要移动的文件和目标路径\"><a href=\"#1-新建配置文件-config-json-配置要移动的文件和目标路径\" class=\"headerlink\" title=\"1. 新建配置文件 config.json 配置要移动的文件和目标路径\"></a>1. 新建配置文件 <code>config.json</code> 配置要移动的文件和目标路径</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class=\"line\">     &quot;person&quot;: &quot;开发者&quot;,</span><br><span class=\"line\">    &quot;basepath&quot;:&quot;E:\\test&quot;,</span><br><span class=\"line\">    &quot;files&quot;:[</span><br><span class=\"line\">        &#123;&quot;name&quot;:&quot;text1.txt&quot;,&quot;path&quot;:&quot;&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;name&quot;:&quot;text2.txt&quot;,&quot;path&quot;:&quot;demo&quot;&#125;,</span><br><span class=\"line\">        &#123;&quot;name&quot;:&quot;text3.txt&quot;,&quot;path&quot;:&quot;demo\\\\demo1&quot;&#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-将配置文件和其他要移动的文件放在一起\"><a href=\"#2-将配置文件和其他要移动的文件放在一起\" class=\"headerlink\" title=\"2. 将配置文件和其他要移动的文件放在一起\"></a>2. 将配置文件和其他要移动的文件放在一起</h3><p><img src=\"http://oqdzx28cd.bkt.clouddn.com/18-1-10/77737370.jpg\" alt></p>\n<h3 id=\"3-将文件们压缩成-zip\"><a href=\"#3-将文件们压缩成-zip\" class=\"headerlink\" title=\"3. 将文件们压缩成 zip\"></a>3. 将文件们压缩成 <code>zip</code></h3><p>目前系统只支持zip类型的压缩文件</p>\n<h3 id=\"4-运行本项目或者打开项目生成的-exe-文件\"><a href=\"#4-运行本项目或者打开项目生成的-exe-文件\" class=\"headerlink\" title=\"4. 运行本项目或者打开项目生成的 exe 文件\"></a>4. 运行本项目或者打开项目生成的 <code>exe</code> 文件</h3><p>点击 <code>打开</code> 按钮，选择刚才配置的压缩文件即可。</p>\n<h3 id=\"5-备注\"><a href=\"#5-备注\" class=\"headerlink\" title=\"5. 备注\"></a>5. 备注</h3><p>本项目已引用 <code>Costura.Fody</code>，即生成的可执行文件为绿色单文件，可以随意拿到任何地方使用（仅限Windows）。</p>"},{"title":"自定义停留时间的Toast","abbrlink":21309,"date":"2018-03-13T04:49:23.000Z","_content":"```java\n/**\n * 弹出一个Toast\n * @param msg toast显示的消息\n * @param cnt 持续的时间（秒）\n */\npublic void showMyToast(String msg, final int cnt) {\n    final Toast toast=Toast.makeText(MainActivity.this,msg, Toast.LENGTH_LONG);\n    final Timer timer =new Timer();\n    timer.schedule(new TimerTask() {\n        @Override\n        public void run() {\n            toast.show();\n        }\n    },0,3000);\n    new Timer().schedule(new TimerTask() {\n        @Override\n        public void run() {\n            toast.cancel();\n            timer.cancel();\n        }\n    }, cnt );\n}\n```","source":"_posts/自定义停留时间的Toast.md","raw":"---\ntitle: 自定义停留时间的Toast\ntags: Android\ncategories: Android\nabbrlink: 21309\ndate: 2018-03-13 12:49:23\n---\n```java\n/**\n * 弹出一个Toast\n * @param msg toast显示的消息\n * @param cnt 持续的时间（秒）\n */\npublic void showMyToast(String msg, final int cnt) {\n    final Toast toast=Toast.makeText(MainActivity.this,msg, Toast.LENGTH_LONG);\n    final Timer timer =new Timer();\n    timer.schedule(new TimerTask() {\n        @Override\n        public void run() {\n            toast.show();\n        }\n    },0,3000);\n    new Timer().schedule(new TimerTask() {\n        @Override\n        public void run() {\n            toast.cancel();\n            timer.cancel();\n        }\n    }, cnt );\n}\n```","slug":"自定义停留时间的Toast","published":1,"updated":"2020-03-09T03:01:45.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7oi004u1q2do04ayaph","content":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 弹出一个Toast</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> msg toast显示的消息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> cnt 持续的时间（秒）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showMyToast</span><span class=\"params\">(String msg, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> cnt)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Toast toast=Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,msg, Toast.LENGTH_LONG);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Timer timer =<span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">    timer.schedule(<span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            toast.show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">0</span>,<span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Timer().schedule(<span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            toast.cancel();</span><br><span class=\"line\">            timer.cancel();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, cnt );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 弹出一个Toast</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> msg toast显示的消息</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> cnt 持续的时间（秒）</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">showMyToast</span><span class=\"params\">(String msg, <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> cnt)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Toast toast=Toast.makeText(MainActivity.<span class=\"keyword\">this</span>,msg, Toast.LENGTH_LONG);</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Timer timer =<span class=\"keyword\">new</span> Timer();</span><br><span class=\"line\">    timer.schedule(<span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            toast.show();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,<span class=\"number\">0</span>,<span class=\"number\">3000</span>);</span><br><span class=\"line\">    <span class=\"keyword\">new</span> Timer().schedule(<span class=\"keyword\">new</span> TimerTask() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">            toast.cancel();</span><br><span class=\"line\">            timer.cancel();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, cnt );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"我不是一名前端","abbrlink":25393,"date":"2019-03-16T10:48:23.000Z","_content":"既然标题是前端，那话题就从前端开始，2018年前端界的事儿特别多，从 React v16 普及，到 jQuery 被 GitHub 下掉完成阶段性历史使命，在唏嘘之外，版本帝 AngularJS 又发布了 v6 和 v7 两个版本，Vue.js 也在高歌猛进，一路赶超队友。这些其实都不算啥大新闻，反观三大框架，写法越来越像，越来越贴近 WebComponents 标准，而周边应用层面的封装已经开始指数级增长。小程序是今年最火的技术，接连出现，快应用也想分一杯羹。PWA 进入稳定期，尤其是 PWA 桌面版，可以让我们更好的看清楚 PC 桌面版开发的全貌。移动端还是以强运营为主，各大公司都开始不再 all in 移动，开始重视多端并进，到了开始拼细节的阶段了。TypeScript 全面开花，GraphQL 蠢蠢欲动，WebAssembly 更是打开了浏览器上多语言的大门。\n<!-- more -->\n\n另外，这个娱乐圈也贡献了许多茶余饭后的谈资，从大漠穷秋与尤雨溪的论战，到著名npm库被发现植入后门，再到阿里开源框架antd的圣诞节菜单，前端这两个字一直被放在了聚光灯下，既照出了光彩，也照出了阴暗。得益于 Node.js 的辅助加成，前端的发展得到爆炸式增长，曾几何时还有人在互联网声嘶力竭得咆哮着：求求你们不要再更新了，我真得学不动了！！！，这真真应了那句古话：学如逆水行舟，不进则退。\n\n不过我觉得，最为一名前端工程师，仅仅这些还远远不够，一名前端工程师发展到最后还是要成为全栈工程师，我们还有后端知识，我们还有数据结构，我们还有操作系统，这些都应该去掌握，不止拘泥眼前，还要拓宽视野；不止总结过去，还要看向未来，我不是一名前端，因为我不只是一名前端。\n## 能力模型\n![](https://i.loli.net/2019/03/28/5c9c43543f349.png)\n一个人能力很强，我们称他为大佬，一个人能力不行，我们称他为菜鸟。但是为什么会存在这样的区别，同样是经历了9年义务教育，为什么有的人就能如此优秀？其实，能力的高低只是结果，而造成结果的条件却有很多，但是我们往往只看到了结果，却看不到造成结果的原因。最近有人在github上开源了一个名为 996.ICU 的仓库，短时间就收到了36k的start，而这个仓库的目的只是在控诉996这种工作制度，从 2016 年 9 月初起，就陆续有网友爆料称，58同城实行全员“996”工作制,且周末加班没有工资。2019 年杭州电商公司有赞在公司年会宣布未来执行 996 工作制， CEO 白鸦回应“几年后回看，这次绝对是好事”。但是我认为，除非是生产型企业和某些特种行业，对于其余大部分企业来说，并不会因为平常工作时间比别人更长而获得更明显的收益。为什么大多有名的框架和厉害的技术往往都是出在国外，因为我们实在是太忙了，忙着每天工作而没有一点自己的时间，忙到每天只是机械式得搬运代码而没有时间停下来去好好想想其中的道理。而且大多数的工作都只是单纯的重复劳动，所以一个人的提升还是要靠他自己的自由时间。靠自由时间去拓宽眼界，去提升思维，去锻炼心态。\n### 眼界\n#### 好奇心是技术进步的原动力\n如果想成为一名资深程序员，去看看 Java 世界、Go 的世界、Python 的世界。谁再跟你说前端开发不需要后端那一套，请呵呵他一脸。抬高视角，世界则大不同。闲来无事逛逛知乎，看看掘金，浏览下GitHub，但是碎片化的阅读只能提升知识广度，真正想深入还是需要集中式的探索。\n#### 不过分沉迷于具体技术\n前端的发展过快带来的弊端就是技术太过于纷繁杂乱，知乎上每周都会有一些引战帖想要把React、Angular、Vue来区分个高低贵贱。不止前端，程序员的世界都是这样，只要你敢在某论坛说一句 C# 是世界上最好的语言，后面便开始了第N次世界大战。何苦呢，这样喷来喷去有什么意义，大家都是图灵完备，然而此之蜜糖，彼之砒霜。还不如大家能停下来想想所谓的 ”A 技术比 B 技术牛逼“ 背后到底是在争些什么，我们使用这些技术的初衷又是什么。很多时候你说这方面，他说那方面，鸡同鸭讲，即使说到一起去，也往往缺乏对等的信息量或者基础共识，只是各自表达主观看法，最后变成两个阵营各自抱团取暖... 说到底，就算你证明了 A 比 B 牛逼，也不意味着你或者你的项目就牛逼了... 比起争这个，不如多想想怎么让自己变得更牛逼。面向框架的学习不可取，因为到最后会发现，看似纷繁复杂的技术背后，是对称与统一。\n#### 跟上时代，避免降维打击\n前端也是这几年才发展起来的，之前都没有前端工程师这个称呼，那时都叫\"切图仔\"，jq从兴起到落寞也不过短短几年，即使是天下大势，也会是分久必合合久必分，有一些新的技术甚至是颠覆性的，比如数码相机相对于胶卷，不如手机相对于mp3,前端领域的技术更新相对于其他领域要快很多，原因大概也是因为这个领域离用户最近吧。所以前端工程师必须要跟上时代的步伐，如果直9012年了现在你还只依恋于jq而不去接纳新的技术，那基本上已经被这个时代淘汰了。后人哀之而不鉴之，亦使后人而复哀后人也。\n\n### 思维\n#### 学会思考\n知其然还要知其所以然，单纯的面向框架的学习是不可取的，因为这样你仅仅只是学了框架的用法，对内部的实现一概不知，而框架又那么多，怎么可能全都去学一遍？所以我们更应该学习的是思想，万变不离其宗，一通则百通。\n#### 抽象思维\n给定一个问题，抽象就是去掉纷繁芜杂的与计算无关的部分，用规约（Reduction）的方法还原到问题的本质。所谓本质即把原来的问题转换为一个或几个可以使用计算机描述并解决的问题，进一步讲也就是转换为在算法上可计算的（algorithmically computable）一个或几个问题，更准确更理论化更上档次的描述是转换为邱奇-图灵论题（TChurch-Turing thesis）可计算的可数个问题。一般在实际工作中，常常需要把问题的实体对象根据需求表示为各种数据结构如树、堆、栈等，而业务逻辑（Business Logic）过程表示为各种算法如排序和查找等。表示（Presentation）是解决问题的第一步，也是关键的一步。在程序员的实践中，我们都有很深的体会，一旦问题被准确的无歧义表示出来了，解决方案就烘云托月般地呈现出来了。\n#### 大局观\n一个优秀的程序员不只需要掌握扎实的技术、写好每一个函数，还需要有大局观、有宏观规划项目的能力、有敏锐的视角察觉到什么问题是迫切的什么问题可以缓一缓、当程序员有问题的时候优秀的程序员有清晰的分析问题能力。这种宏观规划，把握宏观方向，抓大放小，清晰地认识 ‘high level picture’ 的能力，是非常重要的。培养这种能力，需要经验，需要思考，还需要天赋。\n\n### 心态\n#### 兴趣是最好的老师\n古人云：“知之者不如好之者，好知者不如乐之者。”，兴趣是你成为程序员的一个内在驱动力，这种力量很神奇，可化不可能成可能，可化腐朽为神奇。不断的、创造性的给自己一些个好奇心，欲望无限，你的动力就无限。在信息时代，客观障碍已不复存在，所谓障碍都是主观上的。如果你想动手开发什么全新的技术，你不需要几百万美元的资金，你只需要在冰箱里放满披萨和可乐，再有一台便宜的计算机，和为之献身的决心。\n\n#### 热爱自己的职业\n生活推着我们所有的人，一些人在生活推着他转的同时，抓住生活赐予的每个机会；而另一些人则非常生气，去与生活抗争。他们与老板抗争，与工作抗争，甚至与自己的配偶抗争，他们不知道生活同时也给了他们机会。如果热爱工作热爱生活，你就会成为一个聪明、富有和快乐的人。如果你没有学会，你就只会终生抱怨工作、低报酬和老板，终其一生仅希望有个大机会能够把你所有的钱的问题都解决。而每天因为这些琐事而劳心伤神，有怎么有时间和经历去学习，去提升自己的能力。\n\n#### 技术固然重要，但是为人处世更重要。\n虽然是程序员，但是大多数还是和人打交道，我们还是要与人沟通，与人合作的，要谦逊，要礼貌，要有涵养，要谦谦君子，要温润如玉。君子敬而无失,与人恭而有礼，四海之内皆兄弟。\n","source":"_posts/我不是一名前端.md","raw":"---\ntitle: 我不是一名前端\ntags: 文章\ncategories: 文章\nabbrlink: 25393\ndate: 2019-03-16 18:48:23\n---\n既然标题是前端，那话题就从前端开始，2018年前端界的事儿特别多，从 React v16 普及，到 jQuery 被 GitHub 下掉完成阶段性历史使命，在唏嘘之外，版本帝 AngularJS 又发布了 v6 和 v7 两个版本，Vue.js 也在高歌猛进，一路赶超队友。这些其实都不算啥大新闻，反观三大框架，写法越来越像，越来越贴近 WebComponents 标准，而周边应用层面的封装已经开始指数级增长。小程序是今年最火的技术，接连出现，快应用也想分一杯羹。PWA 进入稳定期，尤其是 PWA 桌面版，可以让我们更好的看清楚 PC 桌面版开发的全貌。移动端还是以强运营为主，各大公司都开始不再 all in 移动，开始重视多端并进，到了开始拼细节的阶段了。TypeScript 全面开花，GraphQL 蠢蠢欲动，WebAssembly 更是打开了浏览器上多语言的大门。\n<!-- more -->\n\n另外，这个娱乐圈也贡献了许多茶余饭后的谈资，从大漠穷秋与尤雨溪的论战，到著名npm库被发现植入后门，再到阿里开源框架antd的圣诞节菜单，前端这两个字一直被放在了聚光灯下，既照出了光彩，也照出了阴暗。得益于 Node.js 的辅助加成，前端的发展得到爆炸式增长，曾几何时还有人在互联网声嘶力竭得咆哮着：求求你们不要再更新了，我真得学不动了！！！，这真真应了那句古话：学如逆水行舟，不进则退。\n\n不过我觉得，最为一名前端工程师，仅仅这些还远远不够，一名前端工程师发展到最后还是要成为全栈工程师，我们还有后端知识，我们还有数据结构，我们还有操作系统，这些都应该去掌握，不止拘泥眼前，还要拓宽视野；不止总结过去，还要看向未来，我不是一名前端，因为我不只是一名前端。\n## 能力模型\n![](https://i.loli.net/2019/03/28/5c9c43543f349.png)\n一个人能力很强，我们称他为大佬，一个人能力不行，我们称他为菜鸟。但是为什么会存在这样的区别，同样是经历了9年义务教育，为什么有的人就能如此优秀？其实，能力的高低只是结果，而造成结果的条件却有很多，但是我们往往只看到了结果，却看不到造成结果的原因。最近有人在github上开源了一个名为 996.ICU 的仓库，短时间就收到了36k的start，而这个仓库的目的只是在控诉996这种工作制度，从 2016 年 9 月初起，就陆续有网友爆料称，58同城实行全员“996”工作制,且周末加班没有工资。2019 年杭州电商公司有赞在公司年会宣布未来执行 996 工作制， CEO 白鸦回应“几年后回看，这次绝对是好事”。但是我认为，除非是生产型企业和某些特种行业，对于其余大部分企业来说，并不会因为平常工作时间比别人更长而获得更明显的收益。为什么大多有名的框架和厉害的技术往往都是出在国外，因为我们实在是太忙了，忙着每天工作而没有一点自己的时间，忙到每天只是机械式得搬运代码而没有时间停下来去好好想想其中的道理。而且大多数的工作都只是单纯的重复劳动，所以一个人的提升还是要靠他自己的自由时间。靠自由时间去拓宽眼界，去提升思维，去锻炼心态。\n### 眼界\n#### 好奇心是技术进步的原动力\n如果想成为一名资深程序员，去看看 Java 世界、Go 的世界、Python 的世界。谁再跟你说前端开发不需要后端那一套，请呵呵他一脸。抬高视角，世界则大不同。闲来无事逛逛知乎，看看掘金，浏览下GitHub，但是碎片化的阅读只能提升知识广度，真正想深入还是需要集中式的探索。\n#### 不过分沉迷于具体技术\n前端的发展过快带来的弊端就是技术太过于纷繁杂乱，知乎上每周都会有一些引战帖想要把React、Angular、Vue来区分个高低贵贱。不止前端，程序员的世界都是这样，只要你敢在某论坛说一句 C# 是世界上最好的语言，后面便开始了第N次世界大战。何苦呢，这样喷来喷去有什么意义，大家都是图灵完备，然而此之蜜糖，彼之砒霜。还不如大家能停下来想想所谓的 ”A 技术比 B 技术牛逼“ 背后到底是在争些什么，我们使用这些技术的初衷又是什么。很多时候你说这方面，他说那方面，鸡同鸭讲，即使说到一起去，也往往缺乏对等的信息量或者基础共识，只是各自表达主观看法，最后变成两个阵营各自抱团取暖... 说到底，就算你证明了 A 比 B 牛逼，也不意味着你或者你的项目就牛逼了... 比起争这个，不如多想想怎么让自己变得更牛逼。面向框架的学习不可取，因为到最后会发现，看似纷繁复杂的技术背后，是对称与统一。\n#### 跟上时代，避免降维打击\n前端也是这几年才发展起来的，之前都没有前端工程师这个称呼，那时都叫\"切图仔\"，jq从兴起到落寞也不过短短几年，即使是天下大势，也会是分久必合合久必分，有一些新的技术甚至是颠覆性的，比如数码相机相对于胶卷，不如手机相对于mp3,前端领域的技术更新相对于其他领域要快很多，原因大概也是因为这个领域离用户最近吧。所以前端工程师必须要跟上时代的步伐，如果直9012年了现在你还只依恋于jq而不去接纳新的技术，那基本上已经被这个时代淘汰了。后人哀之而不鉴之，亦使后人而复哀后人也。\n\n### 思维\n#### 学会思考\n知其然还要知其所以然，单纯的面向框架的学习是不可取的，因为这样你仅仅只是学了框架的用法，对内部的实现一概不知，而框架又那么多，怎么可能全都去学一遍？所以我们更应该学习的是思想，万变不离其宗，一通则百通。\n#### 抽象思维\n给定一个问题，抽象就是去掉纷繁芜杂的与计算无关的部分，用规约（Reduction）的方法还原到问题的本质。所谓本质即把原来的问题转换为一个或几个可以使用计算机描述并解决的问题，进一步讲也就是转换为在算法上可计算的（algorithmically computable）一个或几个问题，更准确更理论化更上档次的描述是转换为邱奇-图灵论题（TChurch-Turing thesis）可计算的可数个问题。一般在实际工作中，常常需要把问题的实体对象根据需求表示为各种数据结构如树、堆、栈等，而业务逻辑（Business Logic）过程表示为各种算法如排序和查找等。表示（Presentation）是解决问题的第一步，也是关键的一步。在程序员的实践中，我们都有很深的体会，一旦问题被准确的无歧义表示出来了，解决方案就烘云托月般地呈现出来了。\n#### 大局观\n一个优秀的程序员不只需要掌握扎实的技术、写好每一个函数，还需要有大局观、有宏观规划项目的能力、有敏锐的视角察觉到什么问题是迫切的什么问题可以缓一缓、当程序员有问题的时候优秀的程序员有清晰的分析问题能力。这种宏观规划，把握宏观方向，抓大放小，清晰地认识 ‘high level picture’ 的能力，是非常重要的。培养这种能力，需要经验，需要思考，还需要天赋。\n\n### 心态\n#### 兴趣是最好的老师\n古人云：“知之者不如好之者，好知者不如乐之者。”，兴趣是你成为程序员的一个内在驱动力，这种力量很神奇，可化不可能成可能，可化腐朽为神奇。不断的、创造性的给自己一些个好奇心，欲望无限，你的动力就无限。在信息时代，客观障碍已不复存在，所谓障碍都是主观上的。如果你想动手开发什么全新的技术，你不需要几百万美元的资金，你只需要在冰箱里放满披萨和可乐，再有一台便宜的计算机，和为之献身的决心。\n\n#### 热爱自己的职业\n生活推着我们所有的人，一些人在生活推着他转的同时，抓住生活赐予的每个机会；而另一些人则非常生气，去与生活抗争。他们与老板抗争，与工作抗争，甚至与自己的配偶抗争，他们不知道生活同时也给了他们机会。如果热爱工作热爱生活，你就会成为一个聪明、富有和快乐的人。如果你没有学会，你就只会终生抱怨工作、低报酬和老板，终其一生仅希望有个大机会能够把你所有的钱的问题都解决。而每天因为这些琐事而劳心伤神，有怎么有时间和经历去学习，去提升自己的能力。\n\n#### 技术固然重要，但是为人处世更重要。\n虽然是程序员，但是大多数还是和人打交道，我们还是要与人沟通，与人合作的，要谦逊，要礼貌，要有涵养，要谦谦君子，要温润如玉。君子敬而无失,与人恭而有礼，四海之内皆兄弟。\n","slug":"我不是一名前端","published":1,"updated":"2020-03-09T03:01:45.091Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckbkly7ok004x1q2db4hegs2f","content":"<p>既然标题是前端，那话题就从前端开始，2018年前端界的事儿特别多，从 React v16 普及，到 jQuery 被 GitHub 下掉完成阶段性历史使命，在唏嘘之外，版本帝 AngularJS 又发布了 v6 和 v7 两个版本，Vue.js 也在高歌猛进，一路赶超队友。这些其实都不算啥大新闻，反观三大框架，写法越来越像，越来越贴近 WebComponents 标准，而周边应用层面的封装已经开始指数级增长。小程序是今年最火的技术，接连出现，快应用也想分一杯羹。PWA 进入稳定期，尤其是 PWA 桌面版，可以让我们更好的看清楚 PC 桌面版开发的全貌。移动端还是以强运营为主，各大公司都开始不再 all in 移动，开始重视多端并进，到了开始拼细节的阶段了。TypeScript 全面开花，GraphQL 蠢蠢欲动，WebAssembly 更是打开了浏览器上多语言的大门。<br><a id=\"more\"></a></p>\n<p>另外，这个娱乐圈也贡献了许多茶余饭后的谈资，从大漠穷秋与尤雨溪的论战，到著名npm库被发现植入后门，再到阿里开源框架antd的圣诞节菜单，前端这两个字一直被放在了聚光灯下，既照出了光彩，也照出了阴暗。得益于 Node.js 的辅助加成，前端的发展得到爆炸式增长，曾几何时还有人在互联网声嘶力竭得咆哮着：求求你们不要再更新了，我真得学不动了！！！，这真真应了那句古话：学如逆水行舟，不进则退。</p>\n<p>不过我觉得，最为一名前端工程师，仅仅这些还远远不够，一名前端工程师发展到最后还是要成为全栈工程师，我们还有后端知识，我们还有数据结构，我们还有操作系统，这些都应该去掌握，不止拘泥眼前，还要拓宽视野；不止总结过去，还要看向未来，我不是一名前端，因为我不只是一名前端。</p>\n<h2 id=\"能力模型\"><a href=\"#能力模型\" class=\"headerlink\" title=\"能力模型\"></a>能力模型</h2><p><img src=\"https://i.loli.net/2019/03/28/5c9c43543f349.png\" alt><br>一个人能力很强，我们称他为大佬，一个人能力不行，我们称他为菜鸟。但是为什么会存在这样的区别，同样是经历了9年义务教育，为什么有的人就能如此优秀？其实，能力的高低只是结果，而造成结果的条件却有很多，但是我们往往只看到了结果，却看不到造成结果的原因。最近有人在github上开源了一个名为 996.ICU 的仓库，短时间就收到了36k的start，而这个仓库的目的只是在控诉996这种工作制度，从 2016 年 9 月初起，就陆续有网友爆料称，58同城实行全员“996”工作制,且周末加班没有工资。2019 年杭州电商公司有赞在公司年会宣布未来执行 996 工作制， CEO 白鸦回应“几年后回看，这次绝对是好事”。但是我认为，除非是生产型企业和某些特种行业，对于其余大部分企业来说，并不会因为平常工作时间比别人更长而获得更明显的收益。为什么大多有名的框架和厉害的技术往往都是出在国外，因为我们实在是太忙了，忙着每天工作而没有一点自己的时间，忙到每天只是机械式得搬运代码而没有时间停下来去好好想想其中的道理。而且大多数的工作都只是单纯的重复劳动，所以一个人的提升还是要靠他自己的自由时间。靠自由时间去拓宽眼界，去提升思维，去锻炼心态。</p>\n<h3 id=\"眼界\"><a href=\"#眼界\" class=\"headerlink\" title=\"眼界\"></a>眼界</h3><h4 id=\"好奇心是技术进步的原动力\"><a href=\"#好奇心是技术进步的原动力\" class=\"headerlink\" title=\"好奇心是技术进步的原动力\"></a>好奇心是技术进步的原动力</h4><p>如果想成为一名资深程序员，去看看 Java 世界、Go 的世界、Python 的世界。谁再跟你说前端开发不需要后端那一套，请呵呵他一脸。抬高视角，世界则大不同。闲来无事逛逛知乎，看看掘金，浏览下GitHub，但是碎片化的阅读只能提升知识广度，真正想深入还是需要集中式的探索。</p>\n<h4 id=\"不过分沉迷于具体技术\"><a href=\"#不过分沉迷于具体技术\" class=\"headerlink\" title=\"不过分沉迷于具体技术\"></a>不过分沉迷于具体技术</h4><p>前端的发展过快带来的弊端就是技术太过于纷繁杂乱，知乎上每周都会有一些引战帖想要把React、Angular、Vue来区分个高低贵贱。不止前端，程序员的世界都是这样，只要你敢在某论坛说一句 C# 是世界上最好的语言，后面便开始了第N次世界大战。何苦呢，这样喷来喷去有什么意义，大家都是图灵完备，然而此之蜜糖，彼之砒霜。还不如大家能停下来想想所谓的 ”A 技术比 B 技术牛逼“ 背后到底是在争些什么，我们使用这些技术的初衷又是什么。很多时候你说这方面，他说那方面，鸡同鸭讲，即使说到一起去，也往往缺乏对等的信息量或者基础共识，只是各自表达主观看法，最后变成两个阵营各自抱团取暖… 说到底，就算你证明了 A 比 B 牛逼，也不意味着你或者你的项目就牛逼了… 比起争这个，不如多想想怎么让自己变得更牛逼。面向框架的学习不可取，因为到最后会发现，看似纷繁复杂的技术背后，是对称与统一。</p>\n<h4 id=\"跟上时代，避免降维打击\"><a href=\"#跟上时代，避免降维打击\" class=\"headerlink\" title=\"跟上时代，避免降维打击\"></a>跟上时代，避免降维打击</h4><p>前端也是这几年才发展起来的，之前都没有前端工程师这个称呼，那时都叫”切图仔”，jq从兴起到落寞也不过短短几年，即使是天下大势，也会是分久必合合久必分，有一些新的技术甚至是颠覆性的，比如数码相机相对于胶卷，不如手机相对于mp3,前端领域的技术更新相对于其他领域要快很多，原因大概也是因为这个领域离用户最近吧。所以前端工程师必须要跟上时代的步伐，如果直9012年了现在你还只依恋于jq而不去接纳新的技术，那基本上已经被这个时代淘汰了。后人哀之而不鉴之，亦使后人而复哀后人也。</p>\n<h3 id=\"思维\"><a href=\"#思维\" class=\"headerlink\" title=\"思维\"></a>思维</h3><h4 id=\"学会思考\"><a href=\"#学会思考\" class=\"headerlink\" title=\"学会思考\"></a>学会思考</h4><p>知其然还要知其所以然，单纯的面向框架的学习是不可取的，因为这样你仅仅只是学了框架的用法，对内部的实现一概不知，而框架又那么多，怎么可能全都去学一遍？所以我们更应该学习的是思想，万变不离其宗，一通则百通。</p>\n<h4 id=\"抽象思维\"><a href=\"#抽象思维\" class=\"headerlink\" title=\"抽象思维\"></a>抽象思维</h4><p>给定一个问题，抽象就是去掉纷繁芜杂的与计算无关的部分，用规约（Reduction）的方法还原到问题的本质。所谓本质即把原来的问题转换为一个或几个可以使用计算机描述并解决的问题，进一步讲也就是转换为在算法上可计算的（algorithmically computable）一个或几个问题，更准确更理论化更上档次的描述是转换为邱奇-图灵论题（TChurch-Turing thesis）可计算的可数个问题。一般在实际工作中，常常需要把问题的实体对象根据需求表示为各种数据结构如树、堆、栈等，而业务逻辑（Business Logic）过程表示为各种算法如排序和查找等。表示（Presentation）是解决问题的第一步，也是关键的一步。在程序员的实践中，我们都有很深的体会，一旦问题被准确的无歧义表示出来了，解决方案就烘云托月般地呈现出来了。</p>\n<h4 id=\"大局观\"><a href=\"#大局观\" class=\"headerlink\" title=\"大局观\"></a>大局观</h4><p>一个优秀的程序员不只需要掌握扎实的技术、写好每一个函数，还需要有大局观、有宏观规划项目的能力、有敏锐的视角察觉到什么问题是迫切的什么问题可以缓一缓、当程序员有问题的时候优秀的程序员有清晰的分析问题能力。这种宏观规划，把握宏观方向，抓大放小，清晰地认识 ‘high level picture’ 的能力，是非常重要的。培养这种能力，需要经验，需要思考，还需要天赋。</p>\n<h3 id=\"心态\"><a href=\"#心态\" class=\"headerlink\" title=\"心态\"></a>心态</h3><h4 id=\"兴趣是最好的老师\"><a href=\"#兴趣是最好的老师\" class=\"headerlink\" title=\"兴趣是最好的老师\"></a>兴趣是最好的老师</h4><p>古人云：“知之者不如好之者，好知者不如乐之者。”，兴趣是你成为程序员的一个内在驱动力，这种力量很神奇，可化不可能成可能，可化腐朽为神奇。不断的、创造性的给自己一些个好奇心，欲望无限，你的动力就无限。在信息时代，客观障碍已不复存在，所谓障碍都是主观上的。如果你想动手开发什么全新的技术，你不需要几百万美元的资金，你只需要在冰箱里放满披萨和可乐，再有一台便宜的计算机，和为之献身的决心。</p>\n<h4 id=\"热爱自己的职业\"><a href=\"#热爱自己的职业\" class=\"headerlink\" title=\"热爱自己的职业\"></a>热爱自己的职业</h4><p>生活推着我们所有的人，一些人在生活推着他转的同时，抓住生活赐予的每个机会；而另一些人则非常生气，去与生活抗争。他们与老板抗争，与工作抗争，甚至与自己的配偶抗争，他们不知道生活同时也给了他们机会。如果热爱工作热爱生活，你就会成为一个聪明、富有和快乐的人。如果你没有学会，你就只会终生抱怨工作、低报酬和老板，终其一生仅希望有个大机会能够把你所有的钱的问题都解决。而每天因为这些琐事而劳心伤神，有怎么有时间和经历去学习，去提升自己的能力。</p>\n<h4 id=\"技术固然重要，但是为人处世更重要。\"><a href=\"#技术固然重要，但是为人处世更重要。\" class=\"headerlink\" title=\"技术固然重要，但是为人处世更重要。\"></a>技术固然重要，但是为人处世更重要。</h4><p>虽然是程序员，但是大多数还是和人打交道，我们还是要与人沟通，与人合作的，要谦逊，要礼貌，要有涵养，要谦谦君子，要温润如玉。君子敬而无失,与人恭而有礼，四海之内皆兄弟。</p>\n","site":{"data":{}},"excerpt":"<p>既然标题是前端，那话题就从前端开始，2018年前端界的事儿特别多，从 React v16 普及，到 jQuery 被 GitHub 下掉完成阶段性历史使命，在唏嘘之外，版本帝 AngularJS 又发布了 v6 和 v7 两个版本，Vue.js 也在高歌猛进，一路赶超队友。这些其实都不算啥大新闻，反观三大框架，写法越来越像，越来越贴近 WebComponents 标准，而周边应用层面的封装已经开始指数级增长。小程序是今年最火的技术，接连出现，快应用也想分一杯羹。PWA 进入稳定期，尤其是 PWA 桌面版，可以让我们更好的看清楚 PC 桌面版开发的全貌。移动端还是以强运营为主，各大公司都开始不再 all in 移动，开始重视多端并进，到了开始拼细节的阶段了。TypeScript 全面开花，GraphQL 蠢蠢欲动，WebAssembly 更是打开了浏览器上多语言的大门。<br>","more":"</p>\n<p>另外，这个娱乐圈也贡献了许多茶余饭后的谈资，从大漠穷秋与尤雨溪的论战，到著名npm库被发现植入后门，再到阿里开源框架antd的圣诞节菜单，前端这两个字一直被放在了聚光灯下，既照出了光彩，也照出了阴暗。得益于 Node.js 的辅助加成，前端的发展得到爆炸式增长，曾几何时还有人在互联网声嘶力竭得咆哮着：求求你们不要再更新了，我真得学不动了！！！，这真真应了那句古话：学如逆水行舟，不进则退。</p>\n<p>不过我觉得，最为一名前端工程师，仅仅这些还远远不够，一名前端工程师发展到最后还是要成为全栈工程师，我们还有后端知识，我们还有数据结构，我们还有操作系统，这些都应该去掌握，不止拘泥眼前，还要拓宽视野；不止总结过去，还要看向未来，我不是一名前端，因为我不只是一名前端。</p>\n<h2 id=\"能力模型\"><a href=\"#能力模型\" class=\"headerlink\" title=\"能力模型\"></a>能力模型</h2><p><img src=\"https://i.loli.net/2019/03/28/5c9c43543f349.png\" alt><br>一个人能力很强，我们称他为大佬，一个人能力不行，我们称他为菜鸟。但是为什么会存在这样的区别，同样是经历了9年义务教育，为什么有的人就能如此优秀？其实，能力的高低只是结果，而造成结果的条件却有很多，但是我们往往只看到了结果，却看不到造成结果的原因。最近有人在github上开源了一个名为 996.ICU 的仓库，短时间就收到了36k的start，而这个仓库的目的只是在控诉996这种工作制度，从 2016 年 9 月初起，就陆续有网友爆料称，58同城实行全员“996”工作制,且周末加班没有工资。2019 年杭州电商公司有赞在公司年会宣布未来执行 996 工作制， CEO 白鸦回应“几年后回看，这次绝对是好事”。但是我认为，除非是生产型企业和某些特种行业，对于其余大部分企业来说，并不会因为平常工作时间比别人更长而获得更明显的收益。为什么大多有名的框架和厉害的技术往往都是出在国外，因为我们实在是太忙了，忙着每天工作而没有一点自己的时间，忙到每天只是机械式得搬运代码而没有时间停下来去好好想想其中的道理。而且大多数的工作都只是单纯的重复劳动，所以一个人的提升还是要靠他自己的自由时间。靠自由时间去拓宽眼界，去提升思维，去锻炼心态。</p>\n<h3 id=\"眼界\"><a href=\"#眼界\" class=\"headerlink\" title=\"眼界\"></a>眼界</h3><h4 id=\"好奇心是技术进步的原动力\"><a href=\"#好奇心是技术进步的原动力\" class=\"headerlink\" title=\"好奇心是技术进步的原动力\"></a>好奇心是技术进步的原动力</h4><p>如果想成为一名资深程序员，去看看 Java 世界、Go 的世界、Python 的世界。谁再跟你说前端开发不需要后端那一套，请呵呵他一脸。抬高视角，世界则大不同。闲来无事逛逛知乎，看看掘金，浏览下GitHub，但是碎片化的阅读只能提升知识广度，真正想深入还是需要集中式的探索。</p>\n<h4 id=\"不过分沉迷于具体技术\"><a href=\"#不过分沉迷于具体技术\" class=\"headerlink\" title=\"不过分沉迷于具体技术\"></a>不过分沉迷于具体技术</h4><p>前端的发展过快带来的弊端就是技术太过于纷繁杂乱，知乎上每周都会有一些引战帖想要把React、Angular、Vue来区分个高低贵贱。不止前端，程序员的世界都是这样，只要你敢在某论坛说一句 C# 是世界上最好的语言，后面便开始了第N次世界大战。何苦呢，这样喷来喷去有什么意义，大家都是图灵完备，然而此之蜜糖，彼之砒霜。还不如大家能停下来想想所谓的 ”A 技术比 B 技术牛逼“ 背后到底是在争些什么，我们使用这些技术的初衷又是什么。很多时候你说这方面，他说那方面，鸡同鸭讲，即使说到一起去，也往往缺乏对等的信息量或者基础共识，只是各自表达主观看法，最后变成两个阵营各自抱团取暖… 说到底，就算你证明了 A 比 B 牛逼，也不意味着你或者你的项目就牛逼了… 比起争这个，不如多想想怎么让自己变得更牛逼。面向框架的学习不可取，因为到最后会发现，看似纷繁复杂的技术背后，是对称与统一。</p>\n<h4 id=\"跟上时代，避免降维打击\"><a href=\"#跟上时代，避免降维打击\" class=\"headerlink\" title=\"跟上时代，避免降维打击\"></a>跟上时代，避免降维打击</h4><p>前端也是这几年才发展起来的，之前都没有前端工程师这个称呼，那时都叫”切图仔”，jq从兴起到落寞也不过短短几年，即使是天下大势，也会是分久必合合久必分，有一些新的技术甚至是颠覆性的，比如数码相机相对于胶卷，不如手机相对于mp3,前端领域的技术更新相对于其他领域要快很多，原因大概也是因为这个领域离用户最近吧。所以前端工程师必须要跟上时代的步伐，如果直9012年了现在你还只依恋于jq而不去接纳新的技术，那基本上已经被这个时代淘汰了。后人哀之而不鉴之，亦使后人而复哀后人也。</p>\n<h3 id=\"思维\"><a href=\"#思维\" class=\"headerlink\" title=\"思维\"></a>思维</h3><h4 id=\"学会思考\"><a href=\"#学会思考\" class=\"headerlink\" title=\"学会思考\"></a>学会思考</h4><p>知其然还要知其所以然，单纯的面向框架的学习是不可取的，因为这样你仅仅只是学了框架的用法，对内部的实现一概不知，而框架又那么多，怎么可能全都去学一遍？所以我们更应该学习的是思想，万变不离其宗，一通则百通。</p>\n<h4 id=\"抽象思维\"><a href=\"#抽象思维\" class=\"headerlink\" title=\"抽象思维\"></a>抽象思维</h4><p>给定一个问题，抽象就是去掉纷繁芜杂的与计算无关的部分，用规约（Reduction）的方法还原到问题的本质。所谓本质即把原来的问题转换为一个或几个可以使用计算机描述并解决的问题，进一步讲也就是转换为在算法上可计算的（algorithmically computable）一个或几个问题，更准确更理论化更上档次的描述是转换为邱奇-图灵论题（TChurch-Turing thesis）可计算的可数个问题。一般在实际工作中，常常需要把问题的实体对象根据需求表示为各种数据结构如树、堆、栈等，而业务逻辑（Business Logic）过程表示为各种算法如排序和查找等。表示（Presentation）是解决问题的第一步，也是关键的一步。在程序员的实践中，我们都有很深的体会，一旦问题被准确的无歧义表示出来了，解决方案就烘云托月般地呈现出来了。</p>\n<h4 id=\"大局观\"><a href=\"#大局观\" class=\"headerlink\" title=\"大局观\"></a>大局观</h4><p>一个优秀的程序员不只需要掌握扎实的技术、写好每一个函数，还需要有大局观、有宏观规划项目的能力、有敏锐的视角察觉到什么问题是迫切的什么问题可以缓一缓、当程序员有问题的时候优秀的程序员有清晰的分析问题能力。这种宏观规划，把握宏观方向，抓大放小，清晰地认识 ‘high level picture’ 的能力，是非常重要的。培养这种能力，需要经验，需要思考，还需要天赋。</p>\n<h3 id=\"心态\"><a href=\"#心态\" class=\"headerlink\" title=\"心态\"></a>心态</h3><h4 id=\"兴趣是最好的老师\"><a href=\"#兴趣是最好的老师\" class=\"headerlink\" title=\"兴趣是最好的老师\"></a>兴趣是最好的老师</h4><p>古人云：“知之者不如好之者，好知者不如乐之者。”，兴趣是你成为程序员的一个内在驱动力，这种力量很神奇，可化不可能成可能，可化腐朽为神奇。不断的、创造性的给自己一些个好奇心，欲望无限，你的动力就无限。在信息时代，客观障碍已不复存在，所谓障碍都是主观上的。如果你想动手开发什么全新的技术，你不需要几百万美元的资金，你只需要在冰箱里放满披萨和可乐，再有一台便宜的计算机，和为之献身的决心。</p>\n<h4 id=\"热爱自己的职业\"><a href=\"#热爱自己的职业\" class=\"headerlink\" title=\"热爱自己的职业\"></a>热爱自己的职业</h4><p>生活推着我们所有的人，一些人在生活推着他转的同时，抓住生活赐予的每个机会；而另一些人则非常生气，去与生活抗争。他们与老板抗争，与工作抗争，甚至与自己的配偶抗争，他们不知道生活同时也给了他们机会。如果热爱工作热爱生活，你就会成为一个聪明、富有和快乐的人。如果你没有学会，你就只会终生抱怨工作、低报酬和老板，终其一生仅希望有个大机会能够把你所有的钱的问题都解决。而每天因为这些琐事而劳心伤神，有怎么有时间和经历去学习，去提升自己的能力。</p>\n<h4 id=\"技术固然重要，但是为人处世更重要。\"><a href=\"#技术固然重要，但是为人处世更重要。\" class=\"headerlink\" title=\"技术固然重要，但是为人处世更重要。\"></a>技术固然重要，但是为人处世更重要。</h4><p>虽然是程序员，但是大多数还是和人打交道，我们还是要与人沟通，与人合作的，要谦逊，要礼貌，要有涵养，要谦谦君子，要温润如玉。君子敬而无失,与人恭而有礼，四海之内皆兄弟。</p>"},{"title":"Git进阶操作","abbrlink":27737,"date":"2020-07-15T05:53:23.000Z","_content":"\n## 回退本地修改\n```\ngit reset --hard <需要回退到的版本号（只需输入前几位）>\n```\n`hard`和`soft`还有`mixed` 的区别可以看[这里](https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard)\n\n## 强制将本地版本覆盖要远端\n```\ngit push origin <分支名> --force\n```\n\n<!-- more -->\n\n## 撤销远程版本的某一次提交\n比如\n```\nA1–A2–B1\n```\n如果想撤销A2的提交\n```\ngit revert HEAD                     //撤销最近一次提交\ngit revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始\ngit revert 0ffaacc                  //撤销0ffaacc这次提交\n```\ngit revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。\n但是，要注意以下几点：\n\n## 从一个分支合并特定的commits到另一个分支\n### 单个commit\n比如\n```\ndd2e86 - 946992 -9143a9 - a6fd86 - 5a6057 [master]\n           \\\n            76cada - 62ecb3 - b886a0 [feature]\n```\n比如，feature 分支上的commit 62ecb3 非常重要，它含有一个bug的修改，或其他人想访问的内容。无论什么原因，你现在只需要将62ecb3 合并到master，而不合并feature上的其他commits，所以我们用git cherry-pick命令来做：\n```\ngit checkout master\ngit cherry-pick 62ecb3\n```\n这样就好啦。现在62ecb3 就被合并到master分支，并在master中添加了commit（作为一个新的commit）。\ncherry-pick 和merge比较类似，如果git不能合并代码改动（比如遇到合并冲突），git需要你自己来解决冲突并手动添加commit。\n\n### 多个commit\n还以上例为例，假设你需要合并feature分支的commit 76cada ~62ecb3 到master分支。\n首先需要基于feature创建一个新的分支，并指明新分支的最后一个commit：\n```\ngit checkout -b newbranch 62ecb3\n```\n然后，rebase这个新分支的commit到master（--ontomaster）。76cada^ 指明你想从哪个特定的commit开始。\n```\ngit rebase --onto master 76cada^\n```\n得到的结果就是feature分支的commit 76cada ~62ecb3 都被合并到了master分支。","source":"_posts/GIt进阶操作.md","raw":"---\ntitle: Git进阶操作\ntags: git\ncategories: 教程\nabbrlink: 27737\ndate: 2020-07-15 13:53:23\n---\n\n## 回退本地修改\n```\ngit reset --hard <需要回退到的版本号（只需输入前几位）>\n```\n`hard`和`soft`还有`mixed` 的区别可以看[这里](https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard)\n\n## 强制将本地版本覆盖要远端\n```\ngit push origin <分支名> --force\n```\n\n<!-- more -->\n\n## 撤销远程版本的某一次提交\n比如\n```\nA1–A2–B1\n```\n如果想撤销A2的提交\n```\ngit revert HEAD                     //撤销最近一次提交\ngit revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始\ngit revert 0ffaacc                  //撤销0ffaacc这次提交\n```\ngit revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。\n但是，要注意以下几点：\n\n## 从一个分支合并特定的commits到另一个分支\n### 单个commit\n比如\n```\ndd2e86 - 946992 -9143a9 - a6fd86 - 5a6057 [master]\n           \\\n            76cada - 62ecb3 - b886a0 [feature]\n```\n比如，feature 分支上的commit 62ecb3 非常重要，它含有一个bug的修改，或其他人想访问的内容。无论什么原因，你现在只需要将62ecb3 合并到master，而不合并feature上的其他commits，所以我们用git cherry-pick命令来做：\n```\ngit checkout master\ngit cherry-pick 62ecb3\n```\n这样就好啦。现在62ecb3 就被合并到master分支，并在master中添加了commit（作为一个新的commit）。\ncherry-pick 和merge比较类似，如果git不能合并代码改动（比如遇到合并冲突），git需要你自己来解决冲突并手动添加commit。\n\n### 多个commit\n还以上例为例，假设你需要合并feature分支的commit 76cada ~62ecb3 到master分支。\n首先需要基于feature创建一个新的分支，并指明新分支的最后一个commit：\n```\ngit checkout -b newbranch 62ecb3\n```\n然后，rebase这个新分支的commit到master（--ontomaster）。76cada^ 指明你想从哪个特定的commit开始。\n```\ngit rebase --onto master 76cada^\n```\n得到的结果就是feature分支的commit 76cada ~62ecb3 都被合并到了master分支。","slug":"GIt进阶操作","published":1,"updated":"2020-07-15T07:03:17.032Z","_id":"ckcmzzyfe0000ey2ds9aqwjmf","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"回退本地修改\"><a href=\"#回退本地修改\" class=\"headerlink\" title=\"回退本地修改\"></a>回退本地修改</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;需要回退到的版本号（只需输入前几位）&gt;</span><br></pre></td></tr></table></figure>\n<p><code>hard</code>和<code>soft</code>还有<code>mixed</code> 的区别可以看<a href=\"https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"强制将本地版本覆盖要远端\"><a href=\"#强制将本地版本覆盖要远端\" class=\"headerlink\" title=\"强制将本地版本覆盖要远端\"></a>强制将本地版本覆盖要远端</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;分支名&gt; --force</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h2 id=\"撤销远程版本的某一次提交\"><a href=\"#撤销远程版本的某一次提交\" class=\"headerlink\" title=\"撤销远程版本的某一次提交\"></a>撤销远程版本的某一次提交</h2><p>比如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A1–A2–B1</span><br></pre></td></tr></table></figure></p>\n<p>如果想撤销A2的提交<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD                     //撤销最近一次提交</span><br><span class=\"line\">git revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始</span><br><span class=\"line\">git revert 0ffaacc                  //撤销0ffaacc这次提交</span><br></pre></td></tr></table></figure></p>\n<p>git revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。<br>但是，要注意以下几点：</p>\n<h2 id=\"从一个分支合并特定的commits到另一个分支\"><a href=\"#从一个分支合并特定的commits到另一个分支\" class=\"headerlink\" title=\"从一个分支合并特定的commits到另一个分支\"></a>从一个分支合并特定的commits到另一个分支</h2><h3 id=\"单个commit\"><a href=\"#单个commit\" class=\"headerlink\" title=\"单个commit\"></a>单个commit</h3><p>比如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd2e86 - 946992 -9143a9 - a6fd86 - 5a6057 [master]</span><br><span class=\"line\">           \\</span><br><span class=\"line\">            76cada - 62ecb3 - b886a0 [feature]</span><br></pre></td></tr></table></figure></p>\n<p>比如，feature 分支上的commit 62ecb3 非常重要，它含有一个bug的修改，或其他人想访问的内容。无论什么原因，你现在只需要将62ecb3 合并到master，而不合并feature上的其他commits，所以我们用git cherry-pick命令来做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git cherry-pick 62ecb3</span><br></pre></td></tr></table></figure></p>\n<p>这样就好啦。现在62ecb3 就被合并到master分支，并在master中添加了commit（作为一个新的commit）。<br>cherry-pick 和merge比较类似，如果git不能合并代码改动（比如遇到合并冲突），git需要你自己来解决冲突并手动添加commit。</p>\n<h3 id=\"多个commit\"><a href=\"#多个commit\" class=\"headerlink\" title=\"多个commit\"></a>多个commit</h3><p>还以上例为例，假设你需要合并feature分支的commit 76cada ~62ecb3 到master分支。<br>首先需要基于feature创建一个新的分支，并指明新分支的最后一个commit：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b newbranch 62ecb3</span><br></pre></td></tr></table></figure></p>\n<p>然后，rebase这个新分支的commit到master（–ontomaster）。76cada^ 指明你想从哪个特定的commit开始。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --onto master 76cada^</span><br></pre></td></tr></table></figure></p>\n<p>得到的结果就是feature分支的commit 76cada ~62ecb3 都被合并到了master分支。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"回退本地修改\"><a href=\"#回退本地修改\" class=\"headerlink\" title=\"回退本地修改\"></a>回退本地修改</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --hard &lt;需要回退到的版本号（只需输入前几位）&gt;</span><br></pre></td></tr></table></figure>\n<p><code>hard</code>和<code>soft</code>还有<code>mixed</code> 的区别可以看<a href=\"https://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard\" target=\"_blank\" rel=\"noopener\">这里</a></p>\n<h2 id=\"强制将本地版本覆盖要远端\"><a href=\"#强制将本地版本覆盖要远端\" class=\"headerlink\" title=\"强制将本地版本覆盖要远端\"></a>强制将本地版本覆盖要远端</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin &lt;分支名&gt; --force</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"撤销远程版本的某一次提交\"><a href=\"#撤销远程版本的某一次提交\" class=\"headerlink\" title=\"撤销远程版本的某一次提交\"></a>撤销远程版本的某一次提交</h2><p>比如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A1–A2–B1</span><br></pre></td></tr></table></figure></p>\n<p>如果想撤销A2的提交<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD                     //撤销最近一次提交</span><br><span class=\"line\">git revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始</span><br><span class=\"line\">git revert 0ffaacc                  //撤销0ffaacc这次提交</span><br></pre></td></tr></table></figure></p>\n<p>git revert 命令意思是撤销某次提交。它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的，所以，当你用revert回退之后，所有人pull之后，他们的代码也自动的回退了。<br>但是，要注意以下几点：</p>\n<h2 id=\"从一个分支合并特定的commits到另一个分支\"><a href=\"#从一个分支合并特定的commits到另一个分支\" class=\"headerlink\" title=\"从一个分支合并特定的commits到另一个分支\"></a>从一个分支合并特定的commits到另一个分支</h2><h3 id=\"单个commit\"><a href=\"#单个commit\" class=\"headerlink\" title=\"单个commit\"></a>单个commit</h3><p>比如<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dd2e86 - 946992 -9143a9 - a6fd86 - 5a6057 [master]</span><br><span class=\"line\">           \\</span><br><span class=\"line\">            76cada - 62ecb3 - b886a0 [feature]</span><br></pre></td></tr></table></figure></p>\n<p>比如，feature 分支上的commit 62ecb3 非常重要，它含有一个bug的修改，或其他人想访问的内容。无论什么原因，你现在只需要将62ecb3 合并到master，而不合并feature上的其他commits，所以我们用git cherry-pick命令来做：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout master</span><br><span class=\"line\">git cherry-pick 62ecb3</span><br></pre></td></tr></table></figure></p>\n<p>这样就好啦。现在62ecb3 就被合并到master分支，并在master中添加了commit（作为一个新的commit）。<br>cherry-pick 和merge比较类似，如果git不能合并代码改动（比如遇到合并冲突），git需要你自己来解决冲突并手动添加commit。</p>\n<h3 id=\"多个commit\"><a href=\"#多个commit\" class=\"headerlink\" title=\"多个commit\"></a>多个commit</h3><p>还以上例为例，假设你需要合并feature分支的commit 76cada ~62ecb3 到master分支。<br>首先需要基于feature创建一个新的分支，并指明新分支的最后一个commit：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b newbranch 62ecb3</span><br></pre></td></tr></table></figure></p>\n<p>然后，rebase这个新分支的commit到master（–ontomaster）。76cada^ 指明你想从哪个特定的commit开始。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git rebase --onto master 76cada^</span><br></pre></td></tr></table></figure></p>\n<p>得到的结果就是feature分支的commit 76cada ~62ecb3 都被合并到了master分支。</p>"},{"title":"DockerCompose使用教程","abbrlink":60376,"date":"2020-09-01T05:53:23.000Z","_content":"\n## 安装\n参考官网:https://docs.docker.com/compose/install/\n```\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n## 使用\n以构建jenkins为例\n新建 Dockerfile\n```\nvi Dockerfile\n```\n```\nFROM jenkins/jenkins:lts\n\nUSER root\n\nRUN apt-get update\nRUN apt-get install -y libltdl-dev\n```\n\n新建 docker-compose.yml\n```\nvi docker-compose.yml\n```\n```\nversion: \"3\"\nservices:\n jenkins:\n  build: .\n  image: my_jenkins\n  ports:\n    - \"8090:8080\"\n    - \"50000:50000\"\n  container_name: my_jenkins\n  volumes:\n    - \"/home/jenkins_home:/var/jenkins_home\"\n    - \"/var/run/docker.sock:/var/run/docker.sock\"\n    - \"/usr/bin/docker:/usr/bin/docker\"\n```\n执行\n```\ndocker-compose up -d\n```","source":"_posts/DockerCompose使用教程.md","raw":"---\ntitle: DockerCompose使用教程\ntags: 教程\ncategories: 教程\nabbrlink: 60376\ndate: 2020-09-01 13:53:23\n---\n\n## 安装\n参考官网:https://docs.docker.com/compose/install/\n```\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose\n```\n\n## 使用\n以构建jenkins为例\n新建 Dockerfile\n```\nvi Dockerfile\n```\n```\nFROM jenkins/jenkins:lts\n\nUSER root\n\nRUN apt-get update\nRUN apt-get install -y libltdl-dev\n```\n\n新建 docker-compose.yml\n```\nvi docker-compose.yml\n```\n```\nversion: \"3\"\nservices:\n jenkins:\n  build: .\n  image: my_jenkins\n  ports:\n    - \"8090:8080\"\n    - \"50000:50000\"\n  container_name: my_jenkins\n  volumes:\n    - \"/home/jenkins_home:/var/jenkins_home\"\n    - \"/var/run/docker.sock:/var/run/docker.sock\"\n    - \"/usr/bin/docker:/usr/bin/docker\"\n```\n执行\n```\ndocker-compose up -d\n```","slug":"DockerCompose使用教程","published":1,"updated":"2020-09-01T08:58:21.202Z","_id":"ckejpyoqj0000142dlfy1udtj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>参考官网:<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/install/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>以构建jenkins为例<br>新建 Dockerfile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi Dockerfile</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM jenkins/jenkins:lts</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install -y libltdl-dev</span><br></pre></td></tr></table></figure>\n<p>新建 docker-compose.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi docker-compose.yml</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"> jenkins:</span><br><span class=\"line\">  build: .</span><br><span class=\"line\">  image: my_jenkins</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - &quot;8090:8080&quot;</span><br><span class=\"line\">    - &quot;50000:50000&quot;</span><br><span class=\"line\">  container_name: my_jenkins</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - &quot;/home/jenkins_home:/var/jenkins_home&quot;</span><br><span class=\"line\">    - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class=\"line\">    - &quot;/usr/bin/docker:/usr/bin/docker&quot;</span><br></pre></td></tr></table></figure>\n<p>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>参考官网:<a href=\"https://docs.docker.com/compose/install/\" target=\"_blank\" rel=\"noopener\">https://docs.docker.com/compose/install/</a><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br><span class=\"line\">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>以构建jenkins为例<br>新建 Dockerfile<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi Dockerfile</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM jenkins/jenkins:lts</span><br><span class=\"line\"></span><br><span class=\"line\">USER root</span><br><span class=\"line\"></span><br><span class=\"line\">RUN apt-get update</span><br><span class=\"line\">RUN apt-get install -y libltdl-dev</span><br></pre></td></tr></table></figure>\n<p>新建 docker-compose.yml<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi docker-compose.yml</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\"> jenkins:</span><br><span class=\"line\">  build: .</span><br><span class=\"line\">  image: my_jenkins</span><br><span class=\"line\">  ports:</span><br><span class=\"line\">    - &quot;8090:8080&quot;</span><br><span class=\"line\">    - &quot;50000:50000&quot;</span><br><span class=\"line\">  container_name: my_jenkins</span><br><span class=\"line\">  volumes:</span><br><span class=\"line\">    - &quot;/home/jenkins_home:/var/jenkins_home&quot;</span><br><span class=\"line\">    - &quot;/var/run/docker.sock:/var/run/docker.sock&quot;</span><br><span class=\"line\">    - &quot;/usr/bin/docker:/usr/bin/docker&quot;</span><br></pre></td></tr></table></figure>\n<p>执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker-compose up -d</span><br></pre></td></tr></table></figure></p>\n"},{"title":"Docker 常用命令整理","date":"2020-09-04T05:53:23.000Z","_content":"\n[命令大全](https://www.runoob.com/docker/docker-command-manual.html)\n\n### 常用命令\n```\ndocker pull ${CONTAINER NAME}                    #拉取镜像\ndocker images                                    #查看本地所有镜像\ndocker ps                                        #查看所有正在运行的容器，加-q返回id\ndocker ps -a                                     #查看所有容器，加-q返回id\ndocker rmi ${IMAGE NAME/ID}                      #删除镜像\ndocker rm ${CONTAINER NAME/ID}                   #删除容器\ndocker save ${IMAGE NAME} > ${FILE NAME}.tar     #将镜像保存成文件\ndocker load < ${FILE NAME}.tar                   #从文件加载镜像\ndocker start ${CONTAINER NAME/ID}                #运行一个以前运行过的容器\ndocker stop ${CONTAINER NAME/ID}                 #停止一个正在运行的容器\ndocker logs ${CONTAINER NAME/ID}                 #显示运行容器的日志\ndocker run...                                    #运行一个容器\n    --name ${container name}                          #设置容器名称\n    -p ${host port}:${container port}                 #映射主机和容器内的端口\n    -e ${env name}=${env value}                       #添加环境变量\n    -d                                                #后台运行\n    -v ${host folder path}:${container folder path}   #将主机目录挂在到容器内\n```\n\n<!-- more -->\n\n### 高级命令\n```\n# Advance use \ndocker ps -f \"status=exited\"                                   #显示所有退出的容器\ndocker ps -a -q                                                #显示所有容器id\ndocker ps -f \"status=exited\" -q                                #显示所有退出容器的id\ndocker restart $(docker ps -q)                                 #重启所有正在运行的容器\ndocker stop $(docker ps -a -q)                                 #停止所有容器\ndocker rm $(docker ps -a -q)                                   #删除所有容器\ndocker rm $(docker ps -f \"status=exited\" -q)                   #删除所有退出的容器\ndocker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器\ndocker start $(docker ps -a -q)                                #启动所有容器\ndocker rmi $(docker images -a -q)                              #删除所有镜像\ndocker exec -it ${CONTAINER NAME/ID} /bin/bash                 #进入容器内\ndocker exec -it ${CONTAINER NAME/ID} ping ${CONTAINER NAME/ID} #一个容器ping另外一个容器\ndocker top ${CONTAINER NAME/ID}                                #显示一个容器的top信息\ndocker stats                                                   #显示容器统计信息(正在运行)\n    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)\n    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次\n    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序\ndocker system \n      docker system df           #显示硬盘占用\n      docker system events       #显示容器的实时事件\n      docker system info         #显示系统信息\n      docker system prune        #清理文件\n```","source":"_posts/Docker 常用命令整理.md","raw":"---\ntitle: Docker 常用命令整理\ntags: 教程\ncategories: 教程\ndate: 2020-09-04 13:53:23\n---\n\n[命令大全](https://www.runoob.com/docker/docker-command-manual.html)\n\n### 常用命令\n```\ndocker pull ${CONTAINER NAME}                    #拉取镜像\ndocker images                                    #查看本地所有镜像\ndocker ps                                        #查看所有正在运行的容器，加-q返回id\ndocker ps -a                                     #查看所有容器，加-q返回id\ndocker rmi ${IMAGE NAME/ID}                      #删除镜像\ndocker rm ${CONTAINER NAME/ID}                   #删除容器\ndocker save ${IMAGE NAME} > ${FILE NAME}.tar     #将镜像保存成文件\ndocker load < ${FILE NAME}.tar                   #从文件加载镜像\ndocker start ${CONTAINER NAME/ID}                #运行一个以前运行过的容器\ndocker stop ${CONTAINER NAME/ID}                 #停止一个正在运行的容器\ndocker logs ${CONTAINER NAME/ID}                 #显示运行容器的日志\ndocker run...                                    #运行一个容器\n    --name ${container name}                          #设置容器名称\n    -p ${host port}:${container port}                 #映射主机和容器内的端口\n    -e ${env name}=${env value}                       #添加环境变量\n    -d                                                #后台运行\n    -v ${host folder path}:${container folder path}   #将主机目录挂在到容器内\n```\n\n<!-- more -->\n\n### 高级命令\n```\n# Advance use \ndocker ps -f \"status=exited\"                                   #显示所有退出的容器\ndocker ps -a -q                                                #显示所有容器id\ndocker ps -f \"status=exited\" -q                                #显示所有退出容器的id\ndocker restart $(docker ps -q)                                 #重启所有正在运行的容器\ndocker stop $(docker ps -a -q)                                 #停止所有容器\ndocker rm $(docker ps -a -q)                                   #删除所有容器\ndocker rm $(docker ps -f \"status=exited\" -q)                   #删除所有退出的容器\ndocker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器\ndocker start $(docker ps -a -q)                                #启动所有容器\ndocker rmi $(docker images -a -q)                              #删除所有镜像\ndocker exec -it ${CONTAINER NAME/ID} /bin/bash                 #进入容器内\ndocker exec -it ${CONTAINER NAME/ID} ping ${CONTAINER NAME/ID} #一个容器ping另外一个容器\ndocker top ${CONTAINER NAME/ID}                                #显示一个容器的top信息\ndocker stats                                                   #显示容器统计信息(正在运行)\n    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)\n    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次\n    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序\ndocker system \n      docker system df           #显示硬盘占用\n      docker system events       #显示容器的实时事件\n      docker system info         #显示系统信息\n      docker system prune        #清理文件\n```","slug":"Docker 常用命令整理","published":1,"updated":"2020-09-04T03:14:39.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckeno0ksd0000lr2da44rs1id","content":"<p><a href=\"https://www.runoob.com/docker/docker-command-manual.html\" target=\"_blank\" rel=\"noopener\">命令大全</a></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull $&#123;CONTAINER NAME&#125;                    #拉取镜像</span><br><span class=\"line\">docker images                                    #查看本地所有镜像</span><br><span class=\"line\">docker ps                                        #查看所有正在运行的容器，加-q返回id</span><br><span class=\"line\">docker ps -a                                     #查看所有容器，加-q返回id</span><br><span class=\"line\">docker rmi $&#123;IMAGE NAME/ID&#125;                      #删除镜像</span><br><span class=\"line\">docker rm $&#123;CONTAINER NAME/ID&#125;                   #删除容器</span><br><span class=\"line\">docker save $&#123;IMAGE NAME&#125; &gt; $&#123;FILE NAME&#125;.tar     #将镜像保存成文件</span><br><span class=\"line\">docker load &lt; $&#123;FILE NAME&#125;.tar                   #从文件加载镜像</span><br><span class=\"line\">docker start $&#123;CONTAINER NAME/ID&#125;                #运行一个以前运行过的容器</span><br><span class=\"line\">docker stop $&#123;CONTAINER NAME/ID&#125;                 #停止一个正在运行的容器</span><br><span class=\"line\">docker logs $&#123;CONTAINER NAME/ID&#125;                 #显示运行容器的日志</span><br><span class=\"line\">docker run...                                    #运行一个容器</span><br><span class=\"line\">    --name $&#123;container name&#125;                          #设置容器名称</span><br><span class=\"line\">    -p $&#123;host port&#125;:$&#123;container port&#125;                 #映射主机和容器内的端口</span><br><span class=\"line\">    -e $&#123;env name&#125;=$&#123;env value&#125;                       #添加环境变量</span><br><span class=\"line\">    -d                                                #后台运行</span><br><span class=\"line\">    -v $&#123;host folder path&#125;:$&#123;container folder path&#125;   #将主机目录挂在到容器内</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<h3 id=\"高级命令\"><a href=\"#高级命令\" class=\"headerlink\" title=\"高级命令\"></a>高级命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Advance use </span><br><span class=\"line\">docker ps -f &quot;status=exited&quot;                                   #显示所有退出的容器</span><br><span class=\"line\">docker ps -a -q                                                #显示所有容器id</span><br><span class=\"line\">docker ps -f &quot;status=exited&quot; -q                                #显示所有退出容器的id</span><br><span class=\"line\">docker restart $(docker ps -q)                                 #重启所有正在运行的容器</span><br><span class=\"line\">docker stop $(docker ps -a -q)                                 #停止所有容器</span><br><span class=\"line\">docker rm $(docker ps -a -q)                                   #删除所有容器</span><br><span class=\"line\">docker rm $(docker ps -f &quot;status=exited&quot; -q)                   #删除所有退出的容器</span><br><span class=\"line\">docker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器</span><br><span class=\"line\">docker start $(docker ps -a -q)                                #启动所有容器</span><br><span class=\"line\">docker rmi $(docker images -a -q)                              #删除所有镜像</span><br><span class=\"line\">docker exec -it $&#123;CONTAINER NAME/ID&#125; /bin/bash                 #进入容器内</span><br><span class=\"line\">docker exec -it $&#123;CONTAINER NAME/ID&#125; ping $&#123;CONTAINER NAME/ID&#125; #一个容器ping另外一个容器</span><br><span class=\"line\">docker top $&#123;CONTAINER NAME/ID&#125;                                #显示一个容器的top信息</span><br><span class=\"line\">docker stats                                                   #显示容器统计信息(正在运行)</span><br><span class=\"line\">    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)</span><br><span class=\"line\">    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次</span><br><span class=\"line\">    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序</span><br><span class=\"line\">docker system </span><br><span class=\"line\">      docker system df           #显示硬盘占用</span><br><span class=\"line\">      docker system events       #显示容器的实时事件</span><br><span class=\"line\">      docker system info         #显示系统信息</span><br><span class=\"line\">      docker system prune        #清理文件</span><br></pre></td></tr></table></figure>","site":{"data":{}},"abbrlink":16101,"excerpt":"<p><a href=\"https://www.runoob.com/docker/docker-command-manual.html\" target=\"_blank\" rel=\"noopener\">命令大全</a></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull $&#123;CONTAINER NAME&#125;                    #拉取镜像</span><br><span class=\"line\">docker images                                    #查看本地所有镜像</span><br><span class=\"line\">docker ps                                        #查看所有正在运行的容器，加-q返回id</span><br><span class=\"line\">docker ps -a                                     #查看所有容器，加-q返回id</span><br><span class=\"line\">docker rmi $&#123;IMAGE NAME/ID&#125;                      #删除镜像</span><br><span class=\"line\">docker rm $&#123;CONTAINER NAME/ID&#125;                   #删除容器</span><br><span class=\"line\">docker save $&#123;IMAGE NAME&#125; &gt; $&#123;FILE NAME&#125;.tar     #将镜像保存成文件</span><br><span class=\"line\">docker load &lt; $&#123;FILE NAME&#125;.tar                   #从文件加载镜像</span><br><span class=\"line\">docker start $&#123;CONTAINER NAME/ID&#125;                #运行一个以前运行过的容器</span><br><span class=\"line\">docker stop $&#123;CONTAINER NAME/ID&#125;                 #停止一个正在运行的容器</span><br><span class=\"line\">docker logs $&#123;CONTAINER NAME/ID&#125;                 #显示运行容器的日志</span><br><span class=\"line\">docker run...                                    #运行一个容器</span><br><span class=\"line\">    --name $&#123;container name&#125;                          #设置容器名称</span><br><span class=\"line\">    -p $&#123;host port&#125;:$&#123;container port&#125;                 #映射主机和容器内的端口</span><br><span class=\"line\">    -e $&#123;env name&#125;=$&#123;env value&#125;                       #添加环境变量</span><br><span class=\"line\">    -d                                                #后台运行</span><br><span class=\"line\">    -v $&#123;host folder path&#125;:$&#123;container folder path&#125;   #将主机目录挂在到容器内</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"高级命令\"><a href=\"#高级命令\" class=\"headerlink\" title=\"高级命令\"></a>高级命令</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Advance use </span><br><span class=\"line\">docker ps -f &quot;status=exited&quot;                                   #显示所有退出的容器</span><br><span class=\"line\">docker ps -a -q                                                #显示所有容器id</span><br><span class=\"line\">docker ps -f &quot;status=exited&quot; -q                                #显示所有退出容器的id</span><br><span class=\"line\">docker restart $(docker ps -q)                                 #重启所有正在运行的容器</span><br><span class=\"line\">docker stop $(docker ps -a -q)                                 #停止所有容器</span><br><span class=\"line\">docker rm $(docker ps -a -q)                                   #删除所有容器</span><br><span class=\"line\">docker rm $(docker ps -f &quot;status=exited&quot; -q)                   #删除所有退出的容器</span><br><span class=\"line\">docker rm $(docker stop $(docker ps -a -q))                    #停止并删除所有容器</span><br><span class=\"line\">docker start $(docker ps -a -q)                                #启动所有容器</span><br><span class=\"line\">docker rmi $(docker images -a -q)                              #删除所有镜像</span><br><span class=\"line\">docker exec -it $&#123;CONTAINER NAME/ID&#125; /bin/bash                 #进入容器内</span><br><span class=\"line\">docker exec -it $&#123;CONTAINER NAME/ID&#125; ping $&#123;CONTAINER NAME/ID&#125; #一个容器ping另外一个容器</span><br><span class=\"line\">docker top $&#123;CONTAINER NAME/ID&#125;                                #显示一个容器的top信息</span><br><span class=\"line\">docker stats                                                   #显示容器统计信息(正在运行)</span><br><span class=\"line\">    docker stats -a                                            #显示所有容器的统计信息(包括没有运行的)</span><br><span class=\"line\">    docker stats -a --no-stream                                #显示所有容器的统计信息(包括没有运行的) ，只显示一次</span><br><span class=\"line\">    docker stats --no-stream | sort -k8 -h                     #统计容器信息并以使用流量作为倒序</span><br><span class=\"line\">docker system </span><br><span class=\"line\">      docker system df           #显示硬盘占用</span><br><span class=\"line\">      docker system events       #显示容器的实时事件</span><br><span class=\"line\">      docker system info         #显示系统信息</span><br><span class=\"line\">      docker system prune        #清理文件</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckbkly7lk00001q2dya24uem1","category_id":"ckbkly7lt00041q2duqz0jdqd","_id":"ckbkly7m4000e1q2dkt05aspb"},{"post_id":"ckbkly7m1000c1q2dz4fagtol","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7ma000l1q2dfg9fubqf"},{"post_id":"ckbkly7lp00021q2dikx82vx6","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7md000q1q2d7qqa01bx"},{"post_id":"ckbkly7m2000d1q2d8zdl3vb8","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7mf000t1q2dsr8y0u91"},{"post_id":"ckbkly7m7000i1q2d6i1s85v3","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7mh000y1q2doyf26gjx"},{"post_id":"ckbkly7lw00061q2dnmai2pe1","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7mj00111q2d5h5vzjwk"},{"post_id":"ckbkly7m9000k1q2dy47l3env","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7ml00151q2dipd7ks3n"},{"post_id":"ckbkly7mc000p1q2dtmh5r134","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7mn00191q2d5d5y8rel"},{"post_id":"ckbkly7ly00071q2ddpgxg72z","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7mp001d1q2d9h2f65tp"},{"post_id":"ckbkly7me000s1q2dio9u7ukv","category_id":"ckbkly7lt00041q2duqz0jdqd","_id":"ckbkly7ms001h1q2du2ud4n8m"},{"post_id":"ckbkly7lz00081q2dpaq21alw","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7mw001l1q2d4iu42jdz"},{"post_id":"ckbkly7mk00141q2dlmivarck","category_id":"ckbkly7lt00041q2duqz0jdqd","_id":"ckbkly7my001o1q2d5k5acywc"},{"post_id":"ckbkly7mm00181q2d4r2fv1mr","category_id":"ckbkly7m000091q2dz8pgzfj4","_id":"ckbkly7n0001s1q2dtlae011o"},{"post_id":"ckbkly7mg000x1q2dyxj9ikml","category_id":"ckbkly7mk00121q2d9wg7owdb","_id":"ckbkly7n1001w1q2djvdcmtsv"},{"post_id":"ckbkly7mi00101q2dmc1wdrbc","category_id":"ckbkly7mk00121q2d9wg7owdb","_id":"ckbkly7n400201q2dlzdhoi9f"},{"post_id":"ckbkly7mx001n1q2dzkshn267","category_id":"ckbkly7mw001k1q2d45hv17bi","_id":"ckbkly7n600241q2dmzvekxop"},{"post_id":"ckbkly7mo001b1q2dg15mhbeo","category_id":"ckbkly7mw001k1q2d45hv17bi","_id":"ckbkly7n800281q2dsvm63rw7"},{"post_id":"ckbkly7mz001r1q2d5i58tiwx","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7na002c1q2dz7jfjmr9"},{"post_id":"ckbkly7mq001f1q2d1mwaqkrj","category_id":"ckbkly7mw001k1q2d45hv17bi","_id":"ckbkly7nc002g1q2djgbhxsqw"},{"post_id":"ckbkly7n2001z1q2dmmqqp0az","category_id":"ckbkly7lt00041q2duqz0jdqd","_id":"ckbkly7ne002k1q2dnxw4axnv"},{"post_id":"ckbkly7n500231q2dx4a45h8c","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7nf002o1q2dlz7hao56"},{"post_id":"ckbkly7mt001j1q2diyjwr1ht","category_id":"ckbkly7mw001k1q2d45hv17bi","_id":"ckbkly7nh002s1q2d6sfc7kfu"},{"post_id":"ckbkly7n1001v1q2dx5zb570h","category_id":"ckbkly7n900291q2d203bw0kw","_id":"ckbkly7ni002w1q2di4m6l964"},{"post_id":"ckbkly7nb002f1q2d67oxba27","category_id":"ckbkly7n900291q2d203bw0kw","_id":"ckbkly7nk00301q2dnogetnn5"},{"post_id":"ckbkly7n700271q2d1jvvvmhj","category_id":"ckbkly7nc002h1q2djqyei886","_id":"ckbkly7nm00341q2d12km38e8"},{"post_id":"ckbkly7ne002n1q2d2izm3ddo","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7no00371q2dqyqe9oe8"},{"post_id":"ckbkly7ni002v1q2d5021gpi0","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7nq003b1q2do46njop6"},{"post_id":"ckbkly7n9002b1q2djhhj1ms7","category_id":"ckbkly7ng002p1q2dr97y8yeu","_id":"ckbkly7ns003f1q2d9h6g40rc"},{"post_id":"ckbkly7nj002y1q2dglnwsol4","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7nu003j1q2dtfj67kqa"},{"post_id":"ckbkly7ng002r1q2db0070c0z","category_id":"ckbkly7nk002z1q2djcloieuu","_id":"ckbkly7nv003m1q2ddzwicwhr"},{"post_id":"ckbkly7nn00361q2darcp3t56","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7ny003p1q2d5wfdewyz"},{"post_id":"ckbkly7nr003e1q2dj7qc244k","category_id":"ckbkly7np00381q2d4rxism47","_id":"ckbkly7o0003t1q2dtu6m38om"},{"post_id":"ckbkly7nl00321q2dipomeue7","category_id":"ckbkly7np00381q2d4rxism47","_id":"ckbkly7o2003w1q2d3j71jby4"},{"post_id":"ckbkly7nt003h1q2dp2csqgam","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7o400401q2dmzvd96w5"},{"post_id":"ckbkly7nu003l1q2d6xvb9cxs","category_id":"ckbkly7lt00041q2duqz0jdqd","_id":"ckbkly7o600431q2d5my49if4"},{"post_id":"ckbkly7np003a1q2dyst1f584","category_id":"ckbkly7nt003i1q2d6c60ow83","_id":"ckbkly7o800461q2dnk9f3g1l"},{"post_id":"ckbkly7nw003o1q2dmzuxub7s","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7oa004a1q2dhqf5i5hy"},{"post_id":"ckbkly7nz003s1q2dmh9p1gkl","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7ob004d1q2dx563jq5c"},{"post_id":"ckbkly7o1003v1q2dcx0qexby","category_id":"ckbkly7lt00041q2duqz0jdqd","_id":"ckbkly7od004h1q2dlfjqe1qc"},{"post_id":"ckbkly7o3003y1q2dfv65phol","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7oe004k1q2d1jslv1cr"},{"post_id":"ckbkly7o600421q2ditko7csp","category_id":"ckbkly7n900291q2d203bw0kw","_id":"ckbkly7og004n1q2dza3otoli"},{"post_id":"ckbkly7o700451q2d805id7a7","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7oh004r1q2dl4tbiyj5"},{"post_id":"ckbkly7o900491q2dl6fl34zc","category_id":"ckbkly7n900291q2d203bw0kw","_id":"ckbkly7oj004v1q2detx7218n"},{"post_id":"ckbkly7ob004c1q2drt6g04ks","category_id":"ckbkly7np00381q2d4rxism47","_id":"ckbkly7om004z1q2d5bpr8m8d"},{"post_id":"ckbkly7oc004g1q2d724wroly","category_id":"ckbkly7mb000m1q2d9l1ul87e","_id":"ckbkly7on00521q2dym2p2c2c"},{"post_id":"ckbkly7oe004j1q2dumc6mi3p","category_id":"ckbkly7lt00041q2duqz0jdqd","_id":"ckbkly7oo00541q2d8mut6tov"},{"post_id":"ckbkly7og004q1q2durhttuh2","category_id":"ckbkly7n900291q2d203bw0kw","_id":"ckbkly7oo00571q2domq9qd6l"},{"post_id":"ckbkly7ok004x1q2db4hegs2f","category_id":"ckbkly7oh004t1q2dcmypph78","_id":"ckbkly7oo00591q2dd66rbp7j"},{"post_id":"ckbkly7of004m1q2d98mhcbzi","category_id":"ckbkly7oh004t1q2dcmypph78","_id":"ckbkly7op005c1q2dbo88z85w"},{"post_id":"ckbkly7oi004u1q2do04ayaph","category_id":"ckbkly7on00511q2d8oemcs9l","_id":"ckbkly7op005e1q2ddarz4hup"},{"post_id":"ckcmzzyfe0000ey2ds9aqwjmf","category_id":"ckbkly7mk00121q2d9wg7owdb","_id":"ckcmzzyga0002ey2ddx4l37j5"},{"post_id":"ckejpyoqj0000142dlfy1udtj","category_id":"ckbkly7mk00121q2d9wg7owdb","_id":"ckejpyor00002142dazqooxft"},{"post_id":"ckeno0ksd0000lr2da44rs1id","category_id":"ckbkly7mk00121q2d9wg7owdb","_id":"ckeno0ksl0002lr2dub32p66r"}],"PostTag":[{"post_id":"ckbkly7lk00001q2dya24uem1","tag_id":"ckbkly7lv00051q2dmwsc5l7m","_id":"ckbkly7m1000b1q2dfw9jorrs"},{"post_id":"ckbkly7m1000c1q2dz4fagtol","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7m6000h1q2dwf3k0c69"},{"post_id":"ckbkly7lp00021q2dikx82vx6","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7m9000j1q2dif8sjkce"},{"post_id":"ckbkly7m2000d1q2d8zdl3vb8","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7mc000o1q2dbm3r73wf"},{"post_id":"ckbkly7m7000i1q2d6i1s85v3","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7me000r1q2d8e8apqkq"},{"post_id":"ckbkly7lw00061q2dnmai2pe1","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7mg000w1q2dbxrzc7lk"},{"post_id":"ckbkly7m9000k1q2dy47l3env","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7mi000z1q2db0qv7nea"},{"post_id":"ckbkly7mc000p1q2dtmh5r134","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7mk00131q2dajdz246r"},{"post_id":"ckbkly7ly00071q2ddpgxg72z","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7mm00171q2dlj3qf79q"},{"post_id":"ckbkly7me000s1q2dio9u7ukv","tag_id":"ckbkly7lv00051q2dmwsc5l7m","_id":"ckbkly7mn001a1q2d6ajxg2yz"},{"post_id":"ckbkly7lz00081q2dpaq21alw","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7mt001i1q2d86ui55cs"},{"post_id":"ckbkly7mm00181q2d4r2fv1mr","tag_id":"ckbkly7m0000a1q2d67qscxhw","_id":"ckbkly7mx001m1q2dzhskrph2"},{"post_id":"ckbkly7mi00101q2dmc1wdrbc","tag_id":"ckbkly7mm00161q2du77r6a0l","_id":"ckbkly7mz001q1q2d9tqwpnqq"},{"post_id":"ckbkly7mk00141q2dlmivarck","tag_id":"ckbkly7ms001g1q2dtxx58tvy","_id":"ckbkly7n0001u1q2dnv9owysb"},{"post_id":"ckbkly7mz001r1q2d5i58tiwx","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7n2001y1q2dkr8lj8fj"},{"post_id":"ckbkly7mo001b1q2dg15mhbeo","tag_id":"ckbkly7my001p1q2dgkphi70o","_id":"ckbkly7n500221q2dyva5zrtv"},{"post_id":"ckbkly7n1001v1q2dx5zb570h","tag_id":"ckbkly7lv00051q2dmwsc5l7m","_id":"ckbkly7n700261q2d5ahfvy0q"},{"post_id":"ckbkly7mq001f1q2d1mwaqkrj","tag_id":"ckbkly7my001p1q2dgkphi70o","_id":"ckbkly7n9002a1q2deue54j5d"},{"post_id":"ckbkly7n500231q2dx4a45h8c","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7nb002e1q2dn6k07n8f"},{"post_id":"ckbkly7mt001j1q2diyjwr1ht","tag_id":"ckbkly7my001p1q2dgkphi70o","_id":"ckbkly7nd002i1q2dgybjw3wd"},{"post_id":"ckbkly7nb002f1q2d67oxba27","tag_id":"ckbkly7lv00051q2dmwsc5l7m","_id":"ckbkly7ne002m1q2d9es9j5w6"},{"post_id":"ckbkly7mx001n1q2dzkshn267","tag_id":"ckbkly7my001p1q2dgkphi70o","_id":"ckbkly7ng002q1q2d7sjxodku"},{"post_id":"ckbkly7ne002n1q2d2izm3ddo","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7ni002u1q2d0tb9qqik"},{"post_id":"ckbkly7n2001z1q2dmmqqp0az","tag_id":"ckbkly7ne002l1q2dccq45ima","_id":"ckbkly7nj002x1q2d544q8pqp"},{"post_id":"ckbkly7ni002v1q2d5021gpi0","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7nl00311q2dbay572hy"},{"post_id":"ckbkly7nj002y1q2dglnwsol4","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7nn00351q2d7n5ojxoh"},{"post_id":"ckbkly7n700271q2d1jvvvmhj","tag_id":"ckbkly7nh002t1q2d1j5afhye","_id":"ckbkly7np00391q2d1jykr5d4"},{"post_id":"ckbkly7nn00361q2darcp3t56","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7nr003d1q2d478lcl98"},{"post_id":"ckbkly7n9002b1q2djhhj1ms7","tag_id":"ckbkly7nm00331q2du2yjn2xf","_id":"ckbkly7ns003g1q2d82hlgf82"},{"post_id":"ckbkly7nd002j1q2diuyzitbj","tag_id":"ckbkly7nq003c1q2d5ixar5yk","_id":"ckbkly7nw003n1q2dn5oc9300"},{"post_id":"ckbkly7nt003h1q2dp2csqgam","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7ny003q1q2djpgxzsiw"},{"post_id":"ckbkly7ng002r1q2db0070c0z","tag_id":"ckbkly7nu003k1q2d2dsbmmcf","_id":"ckbkly7o1003u1q2dexsr1viu"},{"post_id":"ckbkly7nw003o1q2dmzuxub7s","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7o2003x1q2d968gmghj"},{"post_id":"ckbkly7nz003s1q2dmh9p1gkl","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7o500411q2d4pifnlp4"},{"post_id":"ckbkly7o1003v1q2dcx0qexby","tag_id":"ckbkly7lv00051q2dmwsc5l7m","_id":"ckbkly7o700441q2dtk4ysdy8"},{"post_id":"ckbkly7nl00321q2dipomeue7","tag_id":"ckbkly7ny003r1q2dbi54soxc","_id":"ckbkly7o900481q2dtqayhonu"},{"post_id":"ckbkly7o3003y1q2dfv65phol","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7oa004b1q2d27lu3r4m"},{"post_id":"ckbkly7o600421q2ditko7csp","tag_id":"ckbkly7lv00051q2dmwsc5l7m","_id":"ckbkly7oc004f1q2dnc755zor"},{"post_id":"ckbkly7np003a1q2dyst1f584","tag_id":"ckbkly7o4003z1q2d6elmizy4","_id":"ckbkly7oe004i1q2dpgofxndv"},{"post_id":"ckbkly7o700451q2d805id7a7","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7of004l1q2dccu3tmhl"},{"post_id":"ckbkly7o900491q2dl6fl34zc","tag_id":"ckbkly7lv00051q2dmwsc5l7m","_id":"ckbkly7og004o1q2dy1ek52qi"},{"post_id":"ckbkly7nr003e1q2dj7qc244k","tag_id":"ckbkly7ny003r1q2dbi54soxc","_id":"ckbkly7oh004s1q2d7qjfj09b"},{"post_id":"ckbkly7ob004c1q2drt6g04ks","tag_id":"ckbkly7ny003r1q2dbi54soxc","_id":"ckbkly7ok004w1q2dsv16f48h"},{"post_id":"ckbkly7oc004g1q2d724wroly","tag_id":"ckbkly7mb000n1q2dl627nz8b","_id":"ckbkly7on00501q2dfptltckm"},{"post_id":"ckbkly7nu003l1q2d6xvb9cxs","tag_id":"ckbkly7oc004e1q2d717v2o7c","_id":"ckbkly7on00531q2d27nbmgiv"},{"post_id":"ckbkly7og004q1q2durhttuh2","tag_id":"ckbkly7lv00051q2dmwsc5l7m","_id":"ckbkly7oo00561q2dcjysse88"},{"post_id":"ckbkly7oe004j1q2dumc6mi3p","tag_id":"ckbkly7og004p1q2dapcskbqt","_id":"ckbkly7oo00581q2d46vyjw3c"},{"post_id":"ckbkly7of004m1q2d98mhcbzi","tag_id":"ckbkly7ol004y1q2dai3j3aa4","_id":"ckbkly7op005b1q2dh4z6qb5s"},{"post_id":"ckbkly7oi004u1q2do04ayaph","tag_id":"ckbkly7oo00551q2d84mot8v8","_id":"ckbkly7op005d1q2d4of38fw5"},{"post_id":"ckbkly7ok004x1q2db4hegs2f","tag_id":"ckbkly7ol004y1q2dai3j3aa4","_id":"ckbkly7or005f1q2dy4voy1b7"},{"post_id":"ckcmzzyfe0000ey2ds9aqwjmf","tag_id":"ckcmzzyfr0001ey2ddkpto5av","_id":"ckcmzzygd0004ey2dt6zdh7n1"},{"post_id":"ckbkly7mg000x1q2dyxj9ikml","tag_id":"ckcmzzyfr0001ey2ddkpto5av","_id":"ckcmzzyge0005ey2db4vuebdq"},{"post_id":"ckejpyoqj0000142dlfy1udtj","tag_id":"ckejpyoqp0001142d4v8vq8cp","_id":"ckejpyor10003142d4n1evrju"},{"post_id":"ckeno0ksd0000lr2da44rs1id","tag_id":"ckejpyoqp0001142d4v8vq8cp","_id":"ckeno0ksl0001lr2dpnpwn4rb"}],"Tag":[{"name":"C#","_id":"ckbkly7lv00051q2dmwsc5l7m"},{"name":"Linux","_id":"ckbkly7m0000a1q2d67qscxhw"},{"name":"前端","_id":"ckbkly7mb000n1q2dl627nz8b"},{"name":"软件","_id":"ckbkly7mm00161q2du77r6a0l"},{"name":"知识点","_id":"ckbkly7ms001g1q2dtxx58tvy"},{"name":"python","_id":"ckbkly7my001p1q2dgkphi70o"},{"name":"ios","_id":"ckbkly7ne002l1q2dccq45ima"},{"name":"瞎折腾","_id":"ckbkly7nh002t1q2d1j5afhye"},{"name":"Windows","_id":"ckbkly7nm00331q2du2yjn2xf"},{"name":"ubuntu","_id":"ckbkly7nq003c1q2d5ixar5yk"},{"name":"linux","_id":"ckbkly7nu003k1q2d2dsbmmcf"},{"name":"英文翻译","_id":"ckbkly7ny003r1q2dbi54soxc"},{"name":"自动化","_id":"ckbkly7o4003z1q2d6elmizy4"},{"name":"博客美化","_id":"ckbkly7oc004e1q2d717v2o7c"},{"name":"收藏","_id":"ckbkly7og004p1q2dapcskbqt"},{"name":"文章","_id":"ckbkly7ol004y1q2dai3j3aa4"},{"name":"Android","_id":"ckbkly7oo00551q2d84mot8v8"},{"name":"git","_id":"ckcmzzyfr0001ey2ddkpto5av"},{"name":"教程","_id":"ckejpyoqp0001142d4v8vq8cp"}]}}